{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldReviewRating\\\\FieldReviewRating.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl } from '../../util/reactIntl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { IconReviewStar, ValidationError } from '../../components';\nimport css from './FieldReviewRating.module.css';\n\nclass FieldReviewRatingComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.input.onChange(event.target.value);\n  }\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      rootClassName,\n      className,\n      inputRootClass,\n      customErrorText,\n      id,\n      intl,\n      label,\n      input,\n      meta,\n      ...rest\n    } = this.props;\n    /* eslint-enable no-unused-vars */\n\n    const {\n      touched,\n      error\n    } = meta;\n    const errorText = customErrorText || error;\n    const fieldMeta = {\n      touched,\n      error: errorText\n    };\n    const {\n      value,\n      ...restInputProps\n    } = input;\n    const inputProps = { ...restInputProps,\n      type: 'radio',\n      name: 'rating',\n      ...rest\n    };\n    const classes = classNames(rootClassName || css.root, className);\n\n    const createStarRating = starCount => {\n      let inputsAndLabels = []; // Star inpu order: reverse order expected (5 -> 1) and also input before label\n      // This is due to CSS selectors.\n      // Sibling combinator (~) selects following siblings, but we want to select previous siblings\n\n      for (let i = starCount; i > 0; i--) {\n        const inputValue = `${i}`;\n        const starId = `star${i}`;\n        const inputId = `${id}.${starId}`;\n        inputsAndLabels.push( /*#__PURE__*/React.createElement(\"input\", Object.assign({\n          key: inputId,\n          id: inputId,\n          className: css.rateInput,\n          value: inputValue,\n          checked: value === inputValue\n        }, inputProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }\n        })));\n        inputsAndLabels.push( /*#__PURE__*/React.createElement(\"label\", {\n          key: `label.${inputId}`,\n          className: css.label,\n          htmlFor: inputId,\n          title: intl.formatMessage({\n            id: `FieldReviewRating.${starId}`\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(IconReviewStar, {\n          rootClassName: css.star,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      return inputsAndLabels;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: css.ratingFieldSet,\n      ref: c => {\n        this.ratingFieldSet = c;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, label ? /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }\n    }, label) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.rating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, createStarRating(5))), /*#__PURE__*/React.createElement(ValidationError, {\n      fieldMeta: fieldMeta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nFieldReviewRatingComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  customErrorText: null,\n  label: null\n};\nconst {\n  string,\n  shape,\n  func,\n  object\n} = PropTypes;\nFieldReviewRatingComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: string,\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired\n  }).isRequired,\n  meta: object.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst FieldReviewRating = props => {\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    component: FieldReviewRatingComponent\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c = FieldReviewRating;\nexport default _c2 = injectIntl(FieldReviewRating);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FieldReviewRating\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldReviewRating/FieldReviewRating.js"],"names":["React","Component","PropTypes","intlShape","injectIntl","Field","classNames","IconReviewStar","ValidationError","css","FieldReviewRatingComponent","constructor","props","handleChange","bind","event","input","onChange","target","value","render","rootClassName","className","inputRootClass","customErrorText","id","intl","label","meta","rest","touched","error","errorText","fieldMeta","restInputProps","inputProps","type","name","classes","root","createStarRating","starCount","inputsAndLabels","i","inputValue","starId","inputId","push","rateInput","formatMessage","star","ratingFieldSet","c","rating","defaultProps","string","shape","func","object","propTypes","isRequired","FieldReviewRating"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport { IconReviewStar, ValidationError } from '../../components';\r\n\r\nimport css from './FieldReviewRating.module.css';\r\n\r\nclass FieldReviewRatingComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.input.onChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    /* eslint-disable no-unused-vars */\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      inputRootClass,\r\n      customErrorText,\r\n      id,\r\n      intl,\r\n      label,\r\n      input,\r\n      meta,\r\n      ...rest\r\n    } = this.props;\r\n    /* eslint-enable no-unused-vars */\r\n\r\n    const { touched, error } = meta;\r\n    const errorText = customErrorText || error;\r\n    const fieldMeta = { touched, error: errorText };\r\n\r\n    const { value, ...restInputProps } = input;\r\n    const inputProps = { ...restInputProps, type: 'radio', name: 'rating', ...rest };\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const createStarRating = starCount => {\r\n      let inputsAndLabels = [];\r\n\r\n      // Star inpu order: reverse order expected (5 -> 1) and also input before label\r\n      // This is due to CSS selectors.\r\n      // Sibling combinator (~) selects following siblings, but we want to select previous siblings\r\n      for (let i = starCount; i > 0; i--) {\r\n        const inputValue = `${i}`;\r\n        const starId = `star${i}`;\r\n        const inputId = `${id}.${starId}`;\r\n\r\n        inputsAndLabels.push(\r\n          <input\r\n            key={inputId}\r\n            id={inputId}\r\n            className={css.rateInput}\r\n            value={inputValue}\r\n            checked={value === inputValue}\r\n            {...inputProps}\r\n          />\r\n        );\r\n\r\n        inputsAndLabels.push(\r\n          <label\r\n            key={`label.${inputId}`}\r\n            className={css.label}\r\n            htmlFor={inputId}\r\n            title={intl.formatMessage({ id: `FieldReviewRating.${starId}` })}\r\n          >\r\n            <IconReviewStar rootClassName={css.star} />\r\n          </label>\r\n        );\r\n      }\r\n      return inputsAndLabels;\r\n    };\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <fieldset\r\n          className={css.ratingFieldSet}\r\n          ref={c => {\r\n            this.ratingFieldSet = c;\r\n          }}\r\n        >\r\n          {label ? <legend>{label}</legend> : null}\r\n          <div className={css.rating}>{createStarRating(5)}</div>\r\n        </fieldset>\r\n        <ValidationError fieldMeta={fieldMeta} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFieldReviewRatingComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  customErrorText: null,\r\n  label: null,\r\n};\r\n\r\nconst { string, shape, func, object } = PropTypes;\r\n\r\nFieldReviewRatingComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  id: string.isRequired,\r\n  label: string,\r\n\r\n  // Error message that can be manually passed to input field,\r\n  // overrides default validation message\r\n  customErrorText: string,\r\n\r\n  // Generated by final-form's Field component\r\n  input: shape({\r\n    onChange: func.isRequired,\r\n  }).isRequired,\r\n  meta: object.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst FieldReviewRating = props => {\r\n  return <Field component={FieldReviewRatingComponent} {...props} />;\r\n};\r\n\r\nexport default injectIntl(FieldReviewRating);\r\n"]},"metadata":{},"sourceType":"module"}