{"ast":null,"code":"import { storableError } from '../util/errors';\nimport * as log from '../util/log'; // https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status\n\nconst STRIPE_PI_HAS_PASSED_CONFIRM = ['processing', 'requires_capture', 'canceled', 'succeeded']; // ================ Action types ================ //\n\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\nexport const ACCOUNT_OPENER_CREATE_REQUEST = 'app/stripe/ACCOUNT_OPENER_CREATE_REQUEST';\nexport const ACCOUNT_OPENER_CREATE_SUCCESS = 'app/stripe/ACCOUNT_OPENER_CREATE_SUCCESS';\nexport const ACCOUNT_OPENER_CREATE_ERROR = 'app/stripe/ACCOUNT_OPENER_CREATE_ERROR';\nexport const PERSON_CREATE_REQUEST = 'app/stripe/PERSON_CREATE_REQUEST';\nexport const PERSON_CREATE_SUCCESS = 'app/stripe/PERSON_CREATE_SUCCESS';\nexport const PERSON_CREATE_ERROR = 'app/stripe/PERSON_CREATE_ERROR';\nexport const CLEAR_PAYMENT_TOKEN = 'app/stripe/CLEAR_PAYMENT_TOKEN';\nexport const HANDLE_CARD_PAYMENT_REQUEST = 'app/stripe/HANDLE_CARD_PAYMENT_REQUEST';\nexport const HANDLE_CARD_PAYMENT_SUCCESS = 'app/stripe/HANDLE_CARD_PAYMENT_SUCCESS';\nexport const HANDLE_CARD_PAYMENT_ERROR = 'app/stripe/HANDLE_CARD_PAYMENT_ERROR';\nexport const HANDLE_CARD_SETUP_REQUEST = 'app/stripe/HANDLE_CARD_SETUP_REQUEST';\nexport const HANDLE_CARD_SETUP_SUCCESS = 'app/stripe/HANDLE_CARD_SETUP_SUCCESS';\nexport const HANDLE_CARD_SETUP_ERROR = 'app/stripe/HANDLE_CARD_SETUP_ERROR';\nexport const CLEAR_HANDLE_CARD_PAYMENT = 'app/stripe/CLEAR_HANDLE_CARD_PAYMENT';\nexport const RETRIEVE_PAYMENT_INTENT_REQUEST = 'app/stripe/RETRIEVE_PAYMENT_INTENT_REQUEST';\nexport const RETRIEVE_PAYMENT_INTENT_SUCCESS = 'app/stripe/RETRIEVE_PAYMENT_INTENT_SUCCESS';\nexport const RETRIEVE_PAYMENT_INTENT_ERROR = 'app/stripe/RETRIEVE_PAYMENT_INTENT_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  confirmCardPaymentInProgress: false,\n  confirmCardPaymentError: null,\n  handleCardSetupInProgress: false,\n  handleCardSetupError: null,\n  paymentIntent: null,\n  setupIntent: null,\n  retrievePaymentIntentInProgress: false,\n  retrievePaymentIntentError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\n      return { ...initialState\n      };\n\n    case ACCOUNT_OPENER_CREATE_REQUEST:\n      return { ...state,\n        createAccountOpenerError: null,\n        createAccountOpenerInProgress: true\n      };\n\n    case ACCOUNT_OPENER_CREATE_SUCCESS:\n      return { ...state,\n        createAccountOpenerInProgress: false,\n        personAccountOpener: payload\n      };\n\n    case ACCOUNT_OPENER_CREATE_ERROR:\n      console.error(payload);\n      return { ...state,\n        createAccountOpenerError: payload,\n        createAccountOpenerInProgress: false\n      };\n\n    case PERSON_CREATE_REQUEST:\n      return { ...state,\n        persons: [...state.persons, { ...payload,\n          createStripePersonError: null,\n          createStripePersonInProgress: true\n        }]\n      };\n\n    case PERSON_CREATE_SUCCESS:\n      return { ...state,\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken ? { ...payload,\n            createStripePersonInProgress: false\n          } : p;\n        })\n      };\n\n    case PERSON_CREATE_ERROR:\n      console.error(payload);\n      return { ...state,\n        persons: state.persons.map(p => {\n          return p.personToken === payload.personToken ? { ...p,\n            createStripePersonInProgress: false,\n            createStripePersonError: payload.error\n          } : p;\n        })\n      };\n\n    case HANDLE_CARD_PAYMENT_REQUEST:\n      return { ...state,\n        confirmCardPaymentError: null,\n        confirmCardPaymentInProgress: true\n      };\n\n    case HANDLE_CARD_PAYMENT_SUCCESS:\n      return { ...state,\n        paymentIntent: payload,\n        confirmCardPaymentInProgress: false\n      };\n\n    case HANDLE_CARD_PAYMENT_ERROR:\n      console.error(payload);\n      return { ...state,\n        confirmCardPaymentError: payload,\n        confirmCardPaymentInProgress: false\n      };\n\n    case HANDLE_CARD_SETUP_REQUEST:\n      return { ...state,\n        handleCardSetupError: null,\n        handleCardSetupInProgress: true\n      };\n\n    case HANDLE_CARD_SETUP_SUCCESS:\n      return { ...state,\n        setupIntent: payload,\n        handleCardSetupInProgress: false\n      };\n\n    case HANDLE_CARD_SETUP_ERROR:\n      console.error(payload);\n      return { ...state,\n        handleCardSetupError: payload,\n        handleCardSetupInProgress: false\n      };\n\n    case CLEAR_HANDLE_CARD_PAYMENT:\n      return { ...state,\n        confirmCardPaymentInProgress: false,\n        confirmCardPaymentError: null,\n        paymentIntent: null\n      };\n\n    case RETRIEVE_PAYMENT_INTENT_REQUEST:\n      return { ...state,\n        retrievePaymentIntentError: null,\n        retrievePaymentIntentInProgress: true\n      };\n\n    case RETRIEVE_PAYMENT_INTENT_SUCCESS:\n      return { ...state,\n        paymentIntent: payload,\n        retrievePaymentIntentInProgress: false\n      };\n\n    case RETRIEVE_PAYMENT_INTENT_ERROR:\n      console.error(payload);\n      return { ...state,\n        retrievePaymentIntentError: payload,\n        retrievePaymentIntentInProgress: false\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const stripeAccountClearError = () => ({\n  type: STRIPE_ACCOUNT_CLEAR_ERROR\n});\nexport const confirmCardPaymentRequest = () => ({\n  type: HANDLE_CARD_PAYMENT_REQUEST\n});\nexport const confirmCardPaymentSuccess = payload => ({\n  type: HANDLE_CARD_PAYMENT_SUCCESS,\n  payload\n});\nexport const confirmCardPaymentError = payload => ({\n  type: HANDLE_CARD_PAYMENT_ERROR,\n  payload,\n  error: true\n});\nexport const handleCardSetupRequest = () => ({\n  type: HANDLE_CARD_SETUP_REQUEST\n});\nexport const handleCardSetupSuccess = payload => ({\n  type: HANDLE_CARD_SETUP_SUCCESS,\n  payload\n});\nexport const handleCardSetupError = payload => ({\n  type: HANDLE_CARD_SETUP_ERROR,\n  payload,\n  error: true\n});\nexport const initializeCardPaymentData = () => ({\n  type: CLEAR_HANDLE_CARD_PAYMENT\n});\nexport const retrievePaymentIntentRequest = () => ({\n  type: RETRIEVE_PAYMENT_INTENT_REQUEST\n});\nexport const retrievePaymentIntentSuccess = payload => ({\n  type: RETRIEVE_PAYMENT_INTENT_SUCCESS,\n  payload\n});\nexport const retrievePaymentIntentError = payload => ({\n  type: RETRIEVE_PAYMENT_INTENT_ERROR,\n  payload,\n  error: true\n}); // ================ Thunks ================ //\n\nexport const retrievePaymentIntent = params => dispatch => {\n  const {\n    stripe,\n    stripePaymentIntentClientSecret\n  } = params;\n  dispatch(retrievePaymentIntentRequest());\n  return stripe.retrievePaymentIntent(stripePaymentIntentClientSecret).then(response => {\n    if (response.error) {\n      return Promise.reject(response);\n    } else {\n      dispatch(retrievePaymentIntentSuccess(response.paymentIntent));\n      return response;\n    }\n  }).catch(err => {\n    // Unwrap Stripe error.\n    const e = err.error || storableError(err);\n    dispatch(retrievePaymentIntentError(e)); // Log error\n\n    const {\n      code,\n      doc_url,\n      message,\n      payment_intent\n    } = err.error || {};\n    const loggableError = err.error ? {\n      code,\n      message,\n      doc_url,\n      paymentIntentStatus: payment_intent ? payment_intent.status : 'no payment_intent included'\n    } : e;\n    log.error(loggableError, 'stripe-retrieve-payment-intent-failed', {\n      stripeMessage: loggableError.message\n    });\n    throw err;\n  });\n};\nexport const confirmCardPayment = params => dispatch => {\n  // It's required to use the same instance of Stripe as where the card has been created\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\n  const {\n    stripe,\n    paymentParams,\n    stripePaymentIntentClientSecret\n  } = params;\n  const transactionId = params.orderId;\n  dispatch(confirmCardPaymentRequest()); // When using default payment method paymentParams.payment_method is\n  // already set Flex API side, when request-payment transition is made\n  // so there's no need for paymentParams\n\n  const args = paymentParams ? [stripePaymentIntentClientSecret, paymentParams] : [stripePaymentIntentClientSecret];\n\n  const doConfirmCardPayment = () => stripe.confirmCardPayment(...args).then(response => {\n    if (response.error) {\n      return Promise.reject(response);\n    } else {\n      dispatch(confirmCardPaymentSuccess(response));\n      return { ...response,\n        transactionId\n      };\n    }\n  }); // First, check if the payment intent has already been confirmed and it just requires capture.\n\n\n  return stripe.retrievePaymentIntent(stripePaymentIntentClientSecret).then(response => {\n    var _response$paymentInte;\n\n    // Handle response.error or response.paymentIntent\n    if (response.error) {\n      return Promise.reject(response);\n    } else if (STRIPE_PI_HAS_PASSED_CONFIRM.includes(response === null || response === void 0 ? void 0 : (_response$paymentInte = response.paymentIntent) === null || _response$paymentInte === void 0 ? void 0 : _response$paymentInte.status)) {\n      // Payment Intent has been confirmed already, move forward.\n      dispatch(confirmCardPaymentSuccess(response));\n      return { ...response,\n        transactionId\n      };\n    } else {\n      // If payment intent has not been confirmed yet, confirm it.\n      return doConfirmCardPayment();\n    }\n  }).catch(err => {\n    // Unwrap Stripe error.\n    const e = err.error || storableError(err);\n    dispatch(confirmCardPaymentError(e)); // Log error\n\n    const containsPaymentIntent = err.error && err.error.payment_intent;\n    const {\n      code,\n      doc_url,\n      message,\n      payment_intent\n    } = containsPaymentIntent ? err.error : {};\n    const loggableError = containsPaymentIntent ? {\n      code,\n      message,\n      doc_url,\n      paymentIntentStatus: payment_intent.status\n    } : e;\n    log.error(loggableError, 'stripe-handle-card-payment-failed', {\n      stripeMessage: loggableError.message\n    });\n    throw e;\n  });\n};\nexport const handleCardSetup = params => dispatch => {\n  // It's required to use the same instance of Stripe as where the card has been created\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\n  const {\n    stripe,\n    card,\n    setupIntentClientSecret,\n    paymentParams\n  } = params;\n  dispatch(handleCardSetupRequest());\n  return stripe.handleCardSetup(setupIntentClientSecret, card, paymentParams).then(response => {\n    if (response.error) {\n      return Promise.reject(response);\n    } else {\n      dispatch(handleCardSetupSuccess(response));\n      return response;\n    }\n  }).catch(err => {\n    // Unwrap Stripe error.\n    const e = err.error || storableError(err);\n    dispatch(handleCardSetupError(e)); // Log error\n\n    const containsSetupIntent = err.error && err.error.setup_intent;\n    const {\n      code,\n      doc_url,\n      message,\n      setup_intent\n    } = containsSetupIntent ? err.error : {};\n    const loggableError = containsSetupIntent ? {\n      code,\n      message,\n      doc_url,\n      paymentIntentStatus: setup_intent.status\n    } : e;\n    log.error(loggableError, 'stripe-handle-card-setup-failed', {\n      stripeMessage: loggableError.message\n    });\n    throw e;\n  });\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/stripe.duck.js"],"names":["storableError","log","STRIPE_PI_HAS_PASSED_CONFIRM","STRIPE_ACCOUNT_CLEAR_ERROR","ACCOUNT_OPENER_CREATE_REQUEST","ACCOUNT_OPENER_CREATE_SUCCESS","ACCOUNT_OPENER_CREATE_ERROR","PERSON_CREATE_REQUEST","PERSON_CREATE_SUCCESS","PERSON_CREATE_ERROR","CLEAR_PAYMENT_TOKEN","HANDLE_CARD_PAYMENT_REQUEST","HANDLE_CARD_PAYMENT_SUCCESS","HANDLE_CARD_PAYMENT_ERROR","HANDLE_CARD_SETUP_REQUEST","HANDLE_CARD_SETUP_SUCCESS","HANDLE_CARD_SETUP_ERROR","CLEAR_HANDLE_CARD_PAYMENT","RETRIEVE_PAYMENT_INTENT_REQUEST","RETRIEVE_PAYMENT_INTENT_SUCCESS","RETRIEVE_PAYMENT_INTENT_ERROR","initialState","confirmCardPaymentInProgress","confirmCardPaymentError","handleCardSetupInProgress","handleCardSetupError","paymentIntent","setupIntent","retrievePaymentIntentInProgress","retrievePaymentIntentError","reducer","state","action","type","payload","createAccountOpenerError","createAccountOpenerInProgress","personAccountOpener","console","error","persons","createStripePersonError","createStripePersonInProgress","map","p","personToken","stripeAccountClearError","confirmCardPaymentRequest","confirmCardPaymentSuccess","handleCardSetupRequest","handleCardSetupSuccess","initializeCardPaymentData","retrievePaymentIntentRequest","retrievePaymentIntentSuccess","retrievePaymentIntent","params","dispatch","stripe","stripePaymentIntentClientSecret","then","response","Promise","reject","catch","err","e","code","doc_url","message","payment_intent","loggableError","paymentIntentStatus","status","stripeMessage","confirmCardPayment","paymentParams","transactionId","orderId","args","doConfirmCardPayment","includes","containsPaymentIntent","handleCardSetup","card","setupIntentClientSecret","containsSetupIntent","setup_intent"],"mappings":"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","sourcesContent":["import { storableError } from '../util/errors';\r\nimport * as log from '../util/log';\r\n\r\n// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status\r\nconst STRIPE_PI_HAS_PASSED_CONFIRM = ['processing', 'requires_capture', 'canceled', 'succeeded'];\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\r\n\r\nexport const ACCOUNT_OPENER_CREATE_REQUEST = 'app/stripe/ACCOUNT_OPENER_CREATE_REQUEST';\r\nexport const ACCOUNT_OPENER_CREATE_SUCCESS = 'app/stripe/ACCOUNT_OPENER_CREATE_SUCCESS';\r\nexport const ACCOUNT_OPENER_CREATE_ERROR = 'app/stripe/ACCOUNT_OPENER_CREATE_ERROR';\r\n\r\nexport const PERSON_CREATE_REQUEST = 'app/stripe/PERSON_CREATE_REQUEST';\r\nexport const PERSON_CREATE_SUCCESS = 'app/stripe/PERSON_CREATE_SUCCESS';\r\nexport const PERSON_CREATE_ERROR = 'app/stripe/PERSON_CREATE_ERROR';\r\n\r\nexport const CLEAR_PAYMENT_TOKEN = 'app/stripe/CLEAR_PAYMENT_TOKEN';\r\n\r\nexport const HANDLE_CARD_PAYMENT_REQUEST = 'app/stripe/HANDLE_CARD_PAYMENT_REQUEST';\r\nexport const HANDLE_CARD_PAYMENT_SUCCESS = 'app/stripe/HANDLE_CARD_PAYMENT_SUCCESS';\r\nexport const HANDLE_CARD_PAYMENT_ERROR = 'app/stripe/HANDLE_CARD_PAYMENT_ERROR';\r\n\r\nexport const HANDLE_CARD_SETUP_REQUEST = 'app/stripe/HANDLE_CARD_SETUP_REQUEST';\r\nexport const HANDLE_CARD_SETUP_SUCCESS = 'app/stripe/HANDLE_CARD_SETUP_SUCCESS';\r\nexport const HANDLE_CARD_SETUP_ERROR = 'app/stripe/HANDLE_CARD_SETUP_ERROR';\r\n\r\nexport const CLEAR_HANDLE_CARD_PAYMENT = 'app/stripe/CLEAR_HANDLE_CARD_PAYMENT';\r\n\r\nexport const RETRIEVE_PAYMENT_INTENT_REQUEST = 'app/stripe/RETRIEVE_PAYMENT_INTENT_REQUEST';\r\nexport const RETRIEVE_PAYMENT_INTENT_SUCCESS = 'app/stripe/RETRIEVE_PAYMENT_INTENT_SUCCESS';\r\nexport const RETRIEVE_PAYMENT_INTENT_ERROR = 'app/stripe/RETRIEVE_PAYMENT_INTENT_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  confirmCardPaymentInProgress: false,\r\n  confirmCardPaymentError: null,\r\n  handleCardSetupInProgress: false,\r\n  handleCardSetupError: null,\r\n  paymentIntent: null,\r\n  setupIntent: null,\r\n  retrievePaymentIntentInProgress: false,\r\n  retrievePaymentIntentError: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\r\n      return { ...initialState };\r\n\r\n    case ACCOUNT_OPENER_CREATE_REQUEST:\r\n      return {\r\n        ...state,\r\n        createAccountOpenerError: null,\r\n        createAccountOpenerInProgress: true,\r\n      };\r\n    case ACCOUNT_OPENER_CREATE_SUCCESS:\r\n      return { ...state, createAccountOpenerInProgress: false, personAccountOpener: payload };\r\n    case ACCOUNT_OPENER_CREATE_ERROR:\r\n      console.error(payload);\r\n      return { ...state, createAccountOpenerError: payload, createAccountOpenerInProgress: false };\r\n\r\n    case PERSON_CREATE_REQUEST:\r\n      return {\r\n        ...state,\r\n        persons: [\r\n          ...state.persons,\r\n          {\r\n            ...payload,\r\n            createStripePersonError: null,\r\n            createStripePersonInProgress: true,\r\n          },\r\n        ],\r\n      };\r\n    case PERSON_CREATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        persons: state.persons.map(p => {\r\n          return p.personToken === payload.personToken\r\n            ? { ...payload, createStripePersonInProgress: false }\r\n            : p;\r\n        }),\r\n      };\r\n    case PERSON_CREATE_ERROR:\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        persons: state.persons.map(p => {\r\n          return p.personToken === payload.personToken\r\n            ? { ...p, createStripePersonInProgress: false, createStripePersonError: payload.error }\r\n            : p;\r\n        }),\r\n      };\r\n\r\n    case HANDLE_CARD_PAYMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        confirmCardPaymentError: null,\r\n        confirmCardPaymentInProgress: true,\r\n      };\r\n    case HANDLE_CARD_PAYMENT_SUCCESS:\r\n      return { ...state, paymentIntent: payload, confirmCardPaymentInProgress: false };\r\n    case HANDLE_CARD_PAYMENT_ERROR:\r\n      console.error(payload);\r\n      return { ...state, confirmCardPaymentError: payload, confirmCardPaymentInProgress: false };\r\n\r\n    case HANDLE_CARD_SETUP_REQUEST:\r\n      return {\r\n        ...state,\r\n        handleCardSetupError: null,\r\n        handleCardSetupInProgress: true,\r\n      };\r\n    case HANDLE_CARD_SETUP_SUCCESS:\r\n      return { ...state, setupIntent: payload, handleCardSetupInProgress: false };\r\n    case HANDLE_CARD_SETUP_ERROR:\r\n      console.error(payload);\r\n      return { ...state, handleCardSetupError: payload, handleCardSetupInProgress: false };\r\n\r\n    case CLEAR_HANDLE_CARD_PAYMENT:\r\n      return {\r\n        ...state,\r\n        confirmCardPaymentInProgress: false,\r\n        confirmCardPaymentError: null,\r\n        paymentIntent: null,\r\n      };\r\n\r\n    case RETRIEVE_PAYMENT_INTENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        retrievePaymentIntentError: null,\r\n        retrievePaymentIntentInProgress: true,\r\n      };\r\n    case RETRIEVE_PAYMENT_INTENT_SUCCESS:\r\n      return { ...state, paymentIntent: payload, retrievePaymentIntentInProgress: false };\r\n    case RETRIEVE_PAYMENT_INTENT_ERROR:\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        retrievePaymentIntentError: payload,\r\n        retrievePaymentIntentInProgress: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const stripeAccountClearError = () => ({\r\n  type: STRIPE_ACCOUNT_CLEAR_ERROR,\r\n});\r\n\r\nexport const confirmCardPaymentRequest = () => ({\r\n  type: HANDLE_CARD_PAYMENT_REQUEST,\r\n});\r\n\r\nexport const confirmCardPaymentSuccess = payload => ({\r\n  type: HANDLE_CARD_PAYMENT_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const confirmCardPaymentError = payload => ({\r\n  type: HANDLE_CARD_PAYMENT_ERROR,\r\n  payload,\r\n  error: true,\r\n});\r\n\r\nexport const handleCardSetupRequest = () => ({\r\n  type: HANDLE_CARD_SETUP_REQUEST,\r\n});\r\n\r\nexport const handleCardSetupSuccess = payload => ({\r\n  type: HANDLE_CARD_SETUP_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const handleCardSetupError = payload => ({\r\n  type: HANDLE_CARD_SETUP_ERROR,\r\n  payload,\r\n  error: true,\r\n});\r\n\r\nexport const initializeCardPaymentData = () => ({\r\n  type: CLEAR_HANDLE_CARD_PAYMENT,\r\n});\r\n\r\nexport const retrievePaymentIntentRequest = () => ({\r\n  type: RETRIEVE_PAYMENT_INTENT_REQUEST,\r\n});\r\n\r\nexport const retrievePaymentIntentSuccess = payload => ({\r\n  type: RETRIEVE_PAYMENT_INTENT_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const retrievePaymentIntentError = payload => ({\r\n  type: RETRIEVE_PAYMENT_INTENT_ERROR,\r\n  payload,\r\n  error: true,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const retrievePaymentIntent = params => dispatch => {\r\n  const { stripe, stripePaymentIntentClientSecret } = params;\r\n  dispatch(retrievePaymentIntentRequest());\r\n\r\n  return stripe\r\n    .retrievePaymentIntent(stripePaymentIntentClientSecret)\r\n    .then(response => {\r\n      if (response.error) {\r\n        return Promise.reject(response);\r\n      } else {\r\n        dispatch(retrievePaymentIntentSuccess(response.paymentIntent));\r\n        return response;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      // Unwrap Stripe error.\r\n      const e = err.error || storableError(err);\r\n      dispatch(retrievePaymentIntentError(e));\r\n\r\n      // Log error\r\n      const { code, doc_url, message, payment_intent } = err.error || {};\r\n      const loggableError = err.error\r\n        ? {\r\n            code,\r\n            message,\r\n            doc_url,\r\n            paymentIntentStatus: payment_intent\r\n              ? payment_intent.status\r\n              : 'no payment_intent included',\r\n          }\r\n        : e;\r\n      log.error(loggableError, 'stripe-retrieve-payment-intent-failed', {\r\n        stripeMessage: loggableError.message,\r\n      });\r\n      throw err;\r\n    });\r\n};\r\n\r\nexport const confirmCardPayment = params => dispatch => {\r\n  // It's required to use the same instance of Stripe as where the card has been created\r\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\r\n  const { stripe, paymentParams, stripePaymentIntentClientSecret } = params;\r\n  const transactionId = params.orderId;\r\n\r\n  dispatch(confirmCardPaymentRequest());\r\n\r\n  // When using default payment method paymentParams.payment_method is\r\n  // already set Flex API side, when request-payment transition is made\r\n  // so there's no need for paymentParams\r\n  const args = paymentParams\r\n    ? [stripePaymentIntentClientSecret, paymentParams]\r\n    : [stripePaymentIntentClientSecret];\r\n\r\n  const doConfirmCardPayment = () =>\r\n    stripe.confirmCardPayment(...args).then(response => {\r\n      if (response.error) {\r\n        return Promise.reject(response);\r\n      } else {\r\n        dispatch(confirmCardPaymentSuccess(response));\r\n        return { ...response, transactionId };\r\n      }\r\n    });\r\n\r\n  // First, check if the payment intent has already been confirmed and it just requires capture.\r\n  return stripe\r\n    .retrievePaymentIntent(stripePaymentIntentClientSecret)\r\n    .then(response => {\r\n      // Handle response.error or response.paymentIntent\r\n      if (response.error) {\r\n        return Promise.reject(response);\r\n      } else if (STRIPE_PI_HAS_PASSED_CONFIRM.includes(response?.paymentIntent?.status)) {\r\n        // Payment Intent has been confirmed already, move forward.\r\n        dispatch(confirmCardPaymentSuccess(response));\r\n        return { ...response, transactionId };\r\n      } else {\r\n        // If payment intent has not been confirmed yet, confirm it.\r\n        return doConfirmCardPayment();\r\n      }\r\n    })\r\n    .catch(err => {\r\n      // Unwrap Stripe error.\r\n      const e = err.error || storableError(err);\r\n      dispatch(confirmCardPaymentError(e));\r\n\r\n      // Log error\r\n      const containsPaymentIntent = err.error && err.error.payment_intent;\r\n      const { code, doc_url, message, payment_intent } = containsPaymentIntent ? err.error : {};\r\n      const loggableError = containsPaymentIntent\r\n        ? {\r\n            code,\r\n            message,\r\n            doc_url,\r\n            paymentIntentStatus: payment_intent.status,\r\n          }\r\n        : e;\r\n      log.error(loggableError, 'stripe-handle-card-payment-failed', {\r\n        stripeMessage: loggableError.message,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const handleCardSetup = params => dispatch => {\r\n  // It's required to use the same instance of Stripe as where the card has been created\r\n  // so that's why Stripe needs to be passed here and we can't create a new instance.\r\n  const { stripe, card, setupIntentClientSecret, paymentParams } = params;\r\n\r\n  dispatch(handleCardSetupRequest());\r\n\r\n  return stripe\r\n    .handleCardSetup(setupIntentClientSecret, card, paymentParams)\r\n    .then(response => {\r\n      if (response.error) {\r\n        return Promise.reject(response);\r\n      } else {\r\n        dispatch(handleCardSetupSuccess(response));\r\n        return response;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      // Unwrap Stripe error.\r\n      const e = err.error || storableError(err);\r\n      dispatch(handleCardSetupError(e));\r\n\r\n      // Log error\r\n      const containsSetupIntent = err.error && err.error.setup_intent;\r\n      const { code, doc_url, message, setup_intent } = containsSetupIntent ? err.error : {};\r\n      const loggableError = containsSetupIntent\r\n        ? {\r\n            code,\r\n            message,\r\n            doc_url,\r\n            paymentIntentStatus: setup_intent.status,\r\n          }\r\n        : e;\r\n      log.error(loggableError, 'stripe-handle-card-setup-failed', {\r\n        stripeMessage: loggableError.message,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}