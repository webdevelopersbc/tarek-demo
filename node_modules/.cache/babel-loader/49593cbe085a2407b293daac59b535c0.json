{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Tabs\\\\Tabs.js\";\n\n/**\r\n * Tabs creates view area that has tabs made out of its children.\r\n * It only expects all its children to have 'tabLabel', 'tabLinkProps' props.\r\n * In addition, 'selected' prop specifies which tab is open and 'disabled' renders tab inaccessible.\r\n *\r\n * e.g.\r\n *  <Tabs>\r\n *    <Child tabLabel=\"Tab1\" tabLinkProps={{ name: 'SomeTab1Page' }}>\r\n *      Tab1 stuff\r\n *    </Child>\r\n *    <Child tabLabel=\"Tab2\" tabLinkProps={{ name: 'SomeTab2Page' }} selected >\r\n *      Tab2 stuff\r\n *    </Child>\r\n *  </Tabs>\r\n *\r\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabNav } from '../../components';\nimport css from './Tabs.module.css';\n\nconst Tabs = props => {\n  const {\n    children,\n    className,\n    rootClassName,\n    navRootClassName,\n    tabRootClassName\n  } = props;\n  const rootClasses = rootClassName || css.root;\n  const classes = classNames(rootClasses, className);\n  const tabNavTabs = React.Children.map(children, child => {\n    const {\n      tabId,\n      tabLabel,\n      tabLinkProps\n    } = child.props; // Child components need to have TabNav props included\n\n    if (!tabId || !tabLabel || !tabLinkProps) {\n      throw new Error(`Tabs component: a child component is missing required props.\n        tabId: (${tabId})\n        tabLabel: (${tabLabel})\n        tabLinkProps: (${tabLinkProps})`);\n    }\n\n    return {\n      id: tabId,\n      text: child.props.tabLabel,\n      linkProps: child.props.tabLinkProps,\n      disabled: child.props.disabled,\n      selected: child.props.selected\n    };\n  });\n  const childArray = React.Children.toArray(children);\n  const selectedTabPanel = childArray.find(c => c.props.selected); // One of the children needs to be selected\n\n  if (!selectedTabPanel) {\n    throw new Error(`Tabs component: one Child should have 'selected' prop.`);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TabNav, {\n    rootClassName: navRootClassName,\n    tabs: tabNavTabs,\n    tabRootClassName: tabRootClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), selectedTabPanel);\n};\n\n_c = Tabs;\nconst {\n  node,\n  string\n} = PropTypes;\nTabs.defaultProps = {\n  className: null,\n  rootClassName: null,\n  navRootClassName: null,\n  tabRootClassName: null\n};\nTabs.propTypes = {\n  children: node.isRequired,\n  className: string,\n  rootClassName: string,\n  navRootClassName: string,\n  tabRootClassName: string\n};\nexport default Tabs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tabs\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Tabs/Tabs.js"],"names":["React","PropTypes","classNames","TabNav","css","Tabs","props","children","className","rootClassName","navRootClassName","tabRootClassName","rootClasses","root","classes","tabNavTabs","Children","map","child","tabId","tabLabel","tabLinkProps","Error","id","text","linkProps","disabled","selected","childArray","toArray","selectedTabPanel","find","c","node","string","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\r\n * Tabs creates view area that has tabs made out of its children.\r\n * It only expects all its children to have 'tabLabel', 'tabLinkProps' props.\r\n * In addition, 'selected' prop specifies which tab is open and 'disabled' renders tab inaccessible.\r\n *\r\n * e.g.\r\n *  <Tabs>\r\n *    <Child tabLabel=\"Tab1\" tabLinkProps={{ name: 'SomeTab1Page' }}>\r\n *      Tab1 stuff\r\n *    </Child>\r\n *    <Child tabLabel=\"Tab2\" tabLinkProps={{ name: 'SomeTab2Page' }} selected >\r\n *      Tab2 stuff\r\n *    </Child>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { TabNav } from '../../components';\r\n\r\nimport css from './Tabs.module.css';\r\n\r\nconst Tabs = props => {\r\n  const { children, className, rootClassName, navRootClassName, tabRootClassName } = props;\r\n  const rootClasses = rootClassName || css.root;\r\n  const classes = classNames(rootClasses, className);\r\n\r\n  const tabNavTabs = React.Children.map(children, child => {\r\n    const { tabId, tabLabel, tabLinkProps } = child.props;\r\n\r\n    // Child components need to have TabNav props included\r\n    if (!tabId || !tabLabel || !tabLinkProps) {\r\n      throw new Error(\r\n        `Tabs component: a child component is missing required props.\r\n        tabId: (${tabId})\r\n        tabLabel: (${tabLabel})\r\n        tabLinkProps: (${tabLinkProps})`\r\n      );\r\n    }\r\n\r\n    return {\r\n      id: tabId,\r\n      text: child.props.tabLabel,\r\n      linkProps: child.props.tabLinkProps,\r\n      disabled: child.props.disabled,\r\n      selected: child.props.selected,\r\n    };\r\n  });\r\n\r\n  const childArray = React.Children.toArray(children);\r\n  const selectedTabPanel = childArray.find(c => c.props.selected);\r\n\r\n  // One of the children needs to be selected\r\n  if (!selectedTabPanel) {\r\n    throw new Error(`Tabs component: one Child should have 'selected' prop.`);\r\n  }\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <TabNav\r\n        rootClassName={navRootClassName}\r\n        tabs={tabNavTabs}\r\n        tabRootClassName={tabRootClassName}\r\n      />\r\n      {selectedTabPanel}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { node, string } = PropTypes;\r\n\r\nTabs.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  navRootClassName: null,\r\n  tabRootClassName: null,\r\n};\r\n\r\nTabs.propTypes = {\r\n  children: node.isRequired,\r\n  className: string,\r\n  rootClassName: string,\r\n  navRootClassName: string,\r\n  tabRootClassName: string,\r\n};\r\n\r\nexport default Tabs;\r\n"]},"metadata":{},"sourceType":"module"}