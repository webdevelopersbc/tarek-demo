{"ast":null,"code":"/**\r\n * Promised component makes it easier to render content that\r\n * depends on resolution of a Promise.\r\n *\r\n * How to use:\r\n * <Promised promise={givenPromise} renderFulfilled={v => <b>{v}</b>} renderRejected={v => <b>v</b>} />\r\n */\n\n/* eslint-disable no-underscore-dangle */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Promised extends Component {\n  constructor(props) {\n    super(props); // success value is string to be more useful when rendering texts.\n\n    this.state = {\n      value: '',\n      error: null\n    };\n    this._isMounted = false;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.props.promise.then(value => {\n      if (this._isMounted) {\n        this.setState({\n          value\n        });\n      }\n    }).catch(error => {\n      if (this._isMounted) {\n        this.setState({\n          error\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      renderFulfilled,\n      renderRejected\n    } = this.props;\n    return this.state.error ? renderRejected(this.state.error) : renderFulfilled(this.state.value);\n  }\n\n}\n\nPromised.defaultProps = {\n  renderRejected: e => e\n};\nconst {\n  func,\n  shape\n} = PropTypes;\nPromised.propTypes = {\n  promise: shape({\n    then: func.isRequired // usually promises are detected from this single function alone\n\n  }).isRequired,\n  renderFulfilled: func.isRequired,\n  renderRejected: func.isRequired\n};\nexport default Promised;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Promised/Promised.js"],"names":["Component","PropTypes","Promised","constructor","props","state","value","error","_isMounted","componentDidMount","promise","then","setState","catch","componentWillUnmount","render","renderFulfilled","renderRejected","defaultProps","e","func","shape","propTypes","isRequired"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAIA,SAAKC,UAAL,GAAkB,KAAlB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,UAAL,GAAkB,IAAlB;AACA,SAAKJ,KAAL,CAAWM,OAAX,CACGC,IADH,CACQL,KAAK,IAAI;AACb,UAAI,KAAKE,UAAT,EAAqB;AACnB,aAAKI,QAAL,CAAc;AAAEN,UAAAA;AAAF,SAAd;AACD;AACF,KALH,EAMGO,KANH,CAMSN,KAAK,IAAI;AACd,UAAI,KAAKC,UAAT,EAAqB;AACnB,aAAKI,QAAL,CAAc;AAAEL,UAAAA;AAAF,SAAd;AACD;AACF,KAVH;AAWD;;AAEDO,EAAAA,oBAAoB,GAAG;AACrB,SAAKN,UAAL,GAAkB,KAAlB;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAsC,KAAKb,KAAjD;AACA,WAAO,KAAKC,KAAL,CAAWE,KAAX,GAAmBU,cAAc,CAAC,KAAKZ,KAAL,CAAWE,KAAZ,CAAjC,GAAsDS,eAAe,CAAC,KAAKX,KAAL,CAAWC,KAAZ,CAA5E;AACD;;AAlC8B;;AAqCjCJ,QAAQ,CAACgB,YAAT,GAAwB;AAAED,EAAAA,cAAc,EAAEE,CAAC,IAAIA;AAAvB,CAAxB;AAEA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAkBpB,SAAxB;AAEAC,QAAQ,CAACoB,SAAT,GAAqB;AACnBZ,EAAAA,OAAO,EAAEW,KAAK,CAAC;AACbV,IAAAA,IAAI,EAAES,IAAI,CAACG,UADE,CACU;;AADV,GAAD,CAAL,CAENA,UAHgB;AAInBP,EAAAA,eAAe,EAAEI,IAAI,CAACG,UAJH;AAKnBN,EAAAA,cAAc,EAAEG,IAAI,CAACG;AALF,CAArB;AAQA,eAAerB,QAAf","sourcesContent":["/**\r\n * Promised component makes it easier to render content that\r\n * depends on resolution of a Promise.\r\n *\r\n * How to use:\r\n * <Promised promise={givenPromise} renderFulfilled={v => <b>{v}</b>} renderRejected={v => <b>v</b>} />\r\n */\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Promised extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // success value is string to be more useful when rendering texts.\r\n    this.state = {\r\n      value: '',\r\n      error: null,\r\n    };\r\n    this._isMounted = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    this.props.promise\r\n      .then(value => {\r\n        if (this._isMounted) {\r\n          this.setState({ value });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        if (this._isMounted) {\r\n          this.setState({ error });\r\n        }\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    const { renderFulfilled, renderRejected } = this.props;\r\n    return this.state.error ? renderRejected(this.state.error) : renderFulfilled(this.state.value);\r\n  }\r\n}\r\n\r\nPromised.defaultProps = { renderRejected: e => e };\r\n\r\nconst { func, shape } = PropTypes;\r\n\r\nPromised.propTypes = {\r\n  promise: shape({\r\n    then: func.isRequired, // usually promises are detected from this single function alone\r\n  }).isRequired,\r\n  renderFulfilled: func.isRequired,\r\n  renderRejected: func.isRequired,\r\n};\r\n\r\nexport default Promised;\r\n"]},"metadata":{},"sourceType":"module"}