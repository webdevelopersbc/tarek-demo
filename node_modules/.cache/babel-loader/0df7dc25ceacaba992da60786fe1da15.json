{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Button\\\\Button.js\";\nimport React, { Component } from 'react';\nimport { bool, node, string } from 'prop-types';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { findRouteByRouteName } from '../../util/routes';\nimport { IconSpinner, IconCheckmark } from '../../components';\nimport css from './Button.module.css';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mounted: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true\n    }); // eslint-disable-line react/no-did-mount-set-state\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      rootClassName,\n      spinnerClassName,\n      checkmarkClassName,\n      inProgress,\n      ready,\n      disabled,\n      enforcePagePreloadFor,\n      ...rest\n    } = this.props;\n    const rootClass = rootClassName || css.root;\n    const classes = classNames(rootClass, className, {\n      [css.ready]: ready,\n      [css.inProgress]: inProgress\n    });\n    let content;\n\n    if (inProgress) {\n      content = /*#__PURE__*/React.createElement(IconSpinner, {\n        rootClassName: spinnerClassName || css.spinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      });\n    } else if (ready) {\n      content = /*#__PURE__*/React.createElement(IconCheckmark, {\n        rootClassName: checkmarkClassName || css.checkmark,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      });\n    } else {\n      content = children;\n    }\n\n    const onOverButtonFn = enforcePreloadOfPage => () => {\n      // Enforce preloading of given page (loadable component)\n      const {\n        component: Page\n      } = findRouteByRouteName(enforcePreloadOfPage, routeConfiguration()); // Loadable Component has a \"preload\" function.\n\n      if (Page.preload) {\n        Page.preload();\n      }\n    };\n\n    const onOverButton = enforcePagePreloadFor ? onOverButtonFn(enforcePagePreloadFor) : null;\n    const onOverButtonMaybe = onOverButton ? {\n      onMouseOver: onOverButton,\n      onTouchStart: onOverButton\n    } : {}; // All buttons are disabled until the component is mounted. This\n    // prevents e.g. being able to submit forms to the backend before\n    // the client side is handling the submit.\n\n    const buttonDisabled = this.state.mounted ? disabled : true;\n    return /*#__PURE__*/React.createElement(\"button\", Object.assign({\n      className: classes\n    }, onOverButtonMaybe, rest, {\n      disabled: buttonDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }), content);\n  }\n\n}\n\nButton.defaultProps = {\n  rootClassName: null,\n  className: null,\n  spinnerClassName: null,\n  checkmarkClassName: null,\n  inProgress: false,\n  ready: false,\n  disabled: false,\n  enforcePagePreloadFor: null,\n  children: null\n};\nButton.propTypes = {\n  rootClassName: string,\n  className: string,\n  spinnerClassName: string,\n  checkmarkClassName: string,\n  inProgress: bool,\n  ready: bool,\n  disabled: bool,\n  enforcePagePreloadFor: string,\n  children: node\n};\nexport default Button;\nexport const PrimaryButton = props => {\n  const classes = classNames(props.rootClassName || css.primaryButtonRoot, css.primaryButton);\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 10\n    }\n  }));\n};\n_c = PrimaryButton;\nPrimaryButton.displayName = 'PrimaryButton';\nexport const SecondaryButton = props => {\n  const classes = classNames(props.rootClassName || css.secondaryButtonRoot, css.secondaryButton);\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }\n  }));\n};\n_c2 = SecondaryButton;\nSecondaryButton.displayName = 'SecondaryButton';\nexport const InlineTextButton = props => {\n  const classes = classNames(props.rootClassName || css.inlineTextButtonRoot, css.inlineTextButton);\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 10\n    }\n  }));\n};\n_c3 = InlineTextButton;\nInlineTextButton.displayName = 'InlineTextButton';\nexport const SocialLoginButton = props => {\n  const classes = classNames(props.rootClassName || css.socialButtonRoot, css.socialButton);\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {\n    rootClassName: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 10\n    }\n  }));\n};\n_c4 = SocialLoginButton;\nSocialLoginButton.displayName = 'SocialLoginButton';\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PrimaryButton\");\n$RefreshReg$(_c2, \"SecondaryButton\");\n$RefreshReg$(_c3, \"InlineTextButton\");\n$RefreshReg$(_c4, \"SocialLoginButton\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Button/Button.js"],"names":["React","Component","bool","node","string","classNames","routeConfiguration","findRouteByRouteName","IconSpinner","IconCheckmark","css","Button","constructor","props","state","mounted","componentDidMount","setState","render","children","className","rootClassName","spinnerClassName","checkmarkClassName","inProgress","ready","disabled","enforcePagePreloadFor","rest","rootClass","root","classes","content","spinner","checkmark","onOverButtonFn","enforcePreloadOfPage","component","Page","preload","onOverButton","onOverButtonMaybe","onMouseOver","onTouchStart","buttonDisabled","defaultProps","propTypes","PrimaryButton","primaryButtonRoot","primaryButton","displayName","SecondaryButton","secondaryButtonRoot","secondaryButton","InlineTextButton","inlineTextButtonRoot","inlineTextButton","SocialLoginButton","socialButtonRoot","socialButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { bool, node, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport routeConfiguration from '../../routing/routeConfiguration';\r\nimport { findRouteByRouteName } from '../../util/routes';\r\nimport { IconSpinner, IconCheckmark } from '../../components';\r\n\r\nimport css from './Button.module.css';\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mounted: false };\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ mounted: true }); // eslint-disable-line react/no-did-mount-set-state\r\n  }\r\n  render() {\r\n    const {\r\n      children,\r\n      className,\r\n      rootClassName,\r\n      spinnerClassName,\r\n      checkmarkClassName,\r\n      inProgress,\r\n      ready,\r\n      disabled,\r\n      enforcePagePreloadFor,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const rootClass = rootClassName || css.root;\r\n    const classes = classNames(rootClass, className, {\r\n      [css.ready]: ready,\r\n      [css.inProgress]: inProgress,\r\n    });\r\n\r\n    let content;\r\n\r\n    if (inProgress) {\r\n      content = <IconSpinner rootClassName={spinnerClassName || css.spinner} />;\r\n    } else if (ready) {\r\n      content = <IconCheckmark rootClassName={checkmarkClassName || css.checkmark} />;\r\n    } else {\r\n      content = children;\r\n    }\r\n\r\n    const onOverButtonFn = enforcePreloadOfPage => () => {\r\n      // Enforce preloading of given page (loadable component)\r\n      const { component: Page } = findRouteByRouteName(enforcePreloadOfPage, routeConfiguration());\r\n      // Loadable Component has a \"preload\" function.\r\n      if (Page.preload) {\r\n        Page.preload();\r\n      }\r\n    };\r\n\r\n    const onOverButton = enforcePagePreloadFor ? onOverButtonFn(enforcePagePreloadFor) : null;\r\n    const onOverButtonMaybe = onOverButton\r\n      ? {\r\n          onMouseOver: onOverButton,\r\n          onTouchStart: onOverButton,\r\n        }\r\n      : {};\r\n\r\n    // All buttons are disabled until the component is mounted. This\r\n    // prevents e.g. being able to submit forms to the backend before\r\n    // the client side is handling the submit.\r\n    const buttonDisabled = this.state.mounted ? disabled : true;\r\n\r\n    return (\r\n      <button className={classes} {...onOverButtonMaybe} {...rest} disabled={buttonDisabled}>\r\n        {content}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nButton.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  spinnerClassName: null,\r\n  checkmarkClassName: null,\r\n  inProgress: false,\r\n  ready: false,\r\n  disabled: false,\r\n  enforcePagePreloadFor: null,\r\n  children: null,\r\n};\r\n\r\nButton.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  spinnerClassName: string,\r\n  checkmarkClassName: string,\r\n\r\n  inProgress: bool,\r\n  ready: bool,\r\n  disabled: bool,\r\n  enforcePagePreloadFor: string,\r\n\r\n  children: node,\r\n};\r\n\r\nexport default Button;\r\n\r\nexport const PrimaryButton = props => {\r\n  const classes = classNames(props.rootClassName || css.primaryButtonRoot, css.primaryButton);\r\n  return <Button {...props} rootClassName={classes} />;\r\n};\r\nPrimaryButton.displayName = 'PrimaryButton';\r\n\r\nexport const SecondaryButton = props => {\r\n  const classes = classNames(props.rootClassName || css.secondaryButtonRoot, css.secondaryButton);\r\n  return <Button {...props} rootClassName={classes} />;\r\n};\r\nSecondaryButton.displayName = 'SecondaryButton';\r\n\r\nexport const InlineTextButton = props => {\r\n  const classes = classNames(props.rootClassName || css.inlineTextButtonRoot, css.inlineTextButton);\r\n  return <Button {...props} rootClassName={classes} />;\r\n};\r\nInlineTextButton.displayName = 'InlineTextButton';\r\n\r\nexport const SocialLoginButton = props => {\r\n  const classes = classNames(props.rootClassName || css.socialButtonRoot, css.socialButton);\r\n  return <Button {...props} rootClassName={classes} />;\r\n};\r\n\r\nSocialLoginButton.displayName = 'SocialLoginButton';\r\n"]},"metadata":{},"sourceType":"module"}