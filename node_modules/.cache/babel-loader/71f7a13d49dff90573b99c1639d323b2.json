{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldDateInput\\\\FieldDateInput.example.js\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport moment from 'moment';\nimport { Button } from '../../components';\nimport { required, bookingDateRequired, composeValidators } from '../../util/validators';\nimport { createTimeSlots } from '../../util/test-data';\nimport FieldDateInput from './FieldDateInput';\n\nconst identity = v => v;\n\nconst createAvailableTimeSlots = (dayCount, availableDayCount) => {\n  const slots = createTimeSlots(new Date(), dayCount);\n  const availableSlotIndices = Array.from({\n    length: availableDayCount\n  }, () => Math.floor(Math.random() * dayCount));\n  return availableSlotIndices.sort().map(i => slots[i]);\n};\n\nconst FormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      style,\n      form,\n      handleSubmit,\n      onChange,\n      pristine,\n      submitting,\n      dateInputProps,\n      values\n    } = fieldRenderProps;\n    const submitDisabled = pristine || submitting;\n\n    if (values && values.bookingDates) {\n      onChange(values.bookingDates);\n    }\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      style: style,\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormSpy, {\n      onChange: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldDateInput, Object.assign({}, dateInputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      disabled: submitDisabled,\n      style: {\n        marginTop: '24px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, \"Select\"));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }\n}));\n\n_c = FormComponent;\nexport const Empty = {\n  component: FormComponent,\n  props: {\n    style: {\n      marginBottom: '140px'\n    },\n    dateInputProps: {\n      name: 'bookingDate',\n      useMobileMargins: false,\n      id: `EmptyDateInputForm.bookingDate`,\n      label: 'Date',\n      placeholderText: moment().format('ddd, MMMM D'),\n      format: identity,\n      validate: composeValidators(required('Required'), bookingDateRequired('Date is not valid')),\n      onBlur: () => console.log('onBlur called from DateInput props.'),\n      onFocus: () => console.log('onFocus called from DateInput props.')\n    },\n    onChange: formState => {\n      const {\n        date\n      } = formState.values;\n\n      if (date) {\n        console.log('Changed to', moment(date).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    }\n  },\n  group: 'inputs'\n};\nexport const WithAvailableTimeSlots = {\n  component: FormComponent,\n  props: {\n    dateInputProps: {\n      name: 'bookingDate',\n      useMobileMargins: false,\n      id: `AvailableTimeSlotsDateInputForm.bookingDate`,\n      label: 'Date',\n      placeholderText: moment().format('ddd, MMMM D'),\n      format: identity,\n      timeSlots: createAvailableTimeSlots(90, 60),\n      validate: composeValidators(required('Required'), bookingDateRequired('Date is not valid')),\n      onBlur: () => console.log('onBlur called from DateInput props.'),\n      onFocus: () => console.log('onFocus called from DateInput props.')\n    },\n    onChange: formState => {\n      const {\n        date\n      } = formState.values;\n\n      if (date) {\n        console.log('Changed to', moment(date).format('L'));\n      }\n    },\n    onSubmit: values => {\n      console.log('Submitting a form with values:', values);\n    }\n  },\n  group: 'inputs'\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldDateInput/FieldDateInput.example.js"],"names":["React","Form","FinalForm","FormSpy","moment","Button","required","bookingDateRequired","composeValidators","createTimeSlots","FieldDateInput","identity","v","createAvailableTimeSlots","dayCount","availableDayCount","slots","Date","availableSlotIndices","Array","from","length","Math","floor","random","sort","map","i","FormComponent","props","fieldRenderProps","style","form","handleSubmit","onChange","pristine","submitting","dateInputProps","values","submitDisabled","bookingDates","e","preventDefault","marginTop","Empty","component","marginBottom","name","useMobileMargins","id","label","placeholderText","format","validate","onBlur","console","log","onFocus","formState","date","onSubmit","group","WithAvailableTimeSlots","timeSlots"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\nimport moment from 'moment';\r\nimport { Button } from '../../components';\r\nimport { required, bookingDateRequired, composeValidators } from '../../util/validators';\r\nimport { createTimeSlots } from '../../util/test-data';\r\nimport FieldDateInput from './FieldDateInput';\r\n\r\nconst identity = v => v;\r\n\r\nconst createAvailableTimeSlots = (dayCount, availableDayCount) => {\r\n  const slots = createTimeSlots(new Date(), dayCount);\r\n  const availableSlotIndices = Array.from({ length: availableDayCount }, () =>\r\n    Math.floor(Math.random() * dayCount)\r\n  );\r\n\r\n  return availableSlotIndices.sort().map(i => slots[i]);\r\n};\r\n\r\nconst FormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        style,\r\n        form,\r\n        handleSubmit,\r\n        onChange,\r\n        pristine,\r\n        submitting,\r\n        dateInputProps,\r\n        values,\r\n      } = fieldRenderProps;\r\n      const submitDisabled = pristine || submitting;\r\n      if (values && values.bookingDates) {\r\n        onChange(values.bookingDates);\r\n      }\r\n\r\n      return (\r\n        <form\r\n          style={style}\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            handleSubmit(e);\r\n          }}\r\n        >\r\n          <FormSpy onChange={onChange} />\r\n          <FieldDateInput {...dateInputProps} />\r\n          <Button type=\"submit\" disabled={submitDisabled} style={{ marginTop: '24px' }}>\r\n            Select\r\n          </Button>\r\n        </form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nexport const Empty = {\r\n  component: FormComponent,\r\n  props: {\r\n    style: { marginBottom: '140px' },\r\n    dateInputProps: {\r\n      name: 'bookingDate',\r\n      useMobileMargins: false,\r\n      id: `EmptyDateInputForm.bookingDate`,\r\n      label: 'Date',\r\n      placeholderText: moment().format('ddd, MMMM D'),\r\n      format: identity,\r\n      validate: composeValidators(required('Required'), bookingDateRequired('Date is not valid')),\r\n      onBlur: () => console.log('onBlur called from DateInput props.'),\r\n      onFocus: () => console.log('onFocus called from DateInput props.'),\r\n    },\r\n    onChange: formState => {\r\n      const { date } = formState.values;\r\n      if (date) {\r\n        console.log('Changed to', moment(date).format('L'));\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('Submitting a form with values:', values);\r\n    },\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const WithAvailableTimeSlots = {\r\n  component: FormComponent,\r\n  props: {\r\n    dateInputProps: {\r\n      name: 'bookingDate',\r\n      useMobileMargins: false,\r\n      id: `AvailableTimeSlotsDateInputForm.bookingDate`,\r\n      label: 'Date',\r\n      placeholderText: moment().format('ddd, MMMM D'),\r\n      format: identity,\r\n      timeSlots: createAvailableTimeSlots(90, 60),\r\n      validate: composeValidators(required('Required'), bookingDateRequired('Date is not valid')),\r\n      onBlur: () => console.log('onBlur called from DateInput props.'),\r\n      onFocus: () => console.log('onFocus called from DateInput props.'),\r\n    },\r\n    onChange: formState => {\r\n      const { date } = formState.values;\r\n      if (date) {\r\n        console.log('Changed to', moment(date).format('L'));\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('Submitting a form with values:', values);\r\n    },\r\n  },\r\n  group: 'inputs',\r\n};\r\n"]},"metadata":{},"sourceType":"module"}