{"ast":null,"code":"import config from '../../config';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck';\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nconst {\n  UUID\n} = sdkTypes; // ================ Action types ================ //\n\nexport const SET_INITIAL_STATE = 'app/ProfilePage/SET_INITIAL_STATE';\nexport const SHOW_USER_REQUEST = 'app/ProfilePage/SHOW_USER_REQUEST';\nexport const SHOW_USER_SUCCESS = 'app/ProfilePage/SHOW_USER_SUCCESS';\nexport const SHOW_USER_ERROR = 'app/ProfilePage/SHOW_USER_ERROR';\nexport const QUERY_LISTINGS_REQUEST = 'app/ProfilePage/QUERY_LISTINGS_REQUEST';\nexport const QUERY_LISTINGS_SUCCESS = 'app/ProfilePage/QUERY_LISTINGS_SUCCESS';\nexport const QUERY_LISTINGS_ERROR = 'app/ProfilePage/QUERY_LISTINGS_ERROR';\nexport const QUERY_REVIEWS_REQUEST = 'app/ProfilePage/QUERY_REVIEWS_REQUEST';\nexport const QUERY_REVIEWS_SUCCESS = 'app/ProfilePage/QUERY_REVIEWS_SUCCESS';\nexport const QUERY_REVIEWS_ERROR = 'app/ProfilePage/QUERY_REVIEWS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  userId: null,\n  userListingRefs: [],\n  userShowError: null,\n  queryListingsError: null,\n  reviews: [],\n  queryReviewsError: null\n};\nexport default function profilePageReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_INITIAL_STATE:\n      return { ...initialState\n      };\n\n    case SHOW_USER_REQUEST:\n      return { ...state,\n        userShowError: null,\n        userId: payload.userId\n      };\n\n    case SHOW_USER_SUCCESS:\n      return state;\n\n    case SHOW_USER_ERROR:\n      return { ...state,\n        userShowError: payload\n      };\n\n    case QUERY_LISTINGS_REQUEST:\n      return { ...state,\n        // Empty listings only when user id changes\n        userListingRefs: payload.userId === state.userId ? state.userListingRefs : [],\n        queryListingsError: null\n      };\n\n    case QUERY_LISTINGS_SUCCESS:\n      return { ...state,\n        userListingRefs: payload.listingRefs\n      };\n\n    case QUERY_LISTINGS_ERROR:\n      return { ...state,\n        userListingRefs: [],\n        queryListingsError: payload\n      };\n\n    case QUERY_REVIEWS_REQUEST:\n      return { ...state,\n        queryReviewsError: null\n      };\n\n    case QUERY_REVIEWS_SUCCESS:\n      return { ...state,\n        reviews: payload\n      };\n\n    case QUERY_REVIEWS_ERROR:\n      return { ...state,\n        reviews: [],\n        queryReviewsError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const setInitialState = () => ({\n  type: SET_INITIAL_STATE\n});\nexport const showUserRequest = userId => ({\n  type: SHOW_USER_REQUEST,\n  payload: {\n    userId\n  }\n});\nexport const showUserSuccess = () => ({\n  type: SHOW_USER_SUCCESS\n});\nexport const showUserError = e => ({\n  type: SHOW_USER_ERROR,\n  error: true,\n  payload: e\n});\nexport const queryListingsRequest = userId => ({\n  type: QUERY_LISTINGS_REQUEST,\n  payload: {\n    userId\n  }\n});\nexport const queryListingsSuccess = listingRefs => ({\n  type: QUERY_LISTINGS_SUCCESS,\n  payload: {\n    listingRefs\n  }\n});\nexport const queryListingsError = e => ({\n  type: QUERY_LISTINGS_ERROR,\n  error: true,\n  payload: e\n});\nexport const queryReviewsRequest = () => ({\n  type: QUERY_REVIEWS_REQUEST\n});\nexport const queryReviewsSuccess = reviews => ({\n  type: QUERY_REVIEWS_SUCCESS,\n  payload: reviews\n});\nexport const queryReviewsError = e => ({\n  type: QUERY_REVIEWS_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const queryUserListings = userId => (dispatch, getState, sdk) => {\n  dispatch(queryListingsRequest(userId));\n  const {\n    aspectWidth = 1,\n    aspectHeight = 1,\n    variantPrefix = 'listing-card'\n  } = config.listing;\n  const aspectRatio = aspectHeight / aspectWidth;\n  return sdk.listings.query({\n    author_id: userId,\n    include: ['author', 'images'],\n    'fields.image': [`variants.${variantPrefix}`, `variants.${variantPrefix}-2x`],\n    ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\n    ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio)\n  }).then(response => {\n    // Pick only the id and type properties from the response listings\n    const listingRefs = response.data.data.map(({\n      id,\n      type\n    }) => ({\n      id,\n      type\n    }));\n    dispatch(addMarketplaceEntities(response));\n    dispatch(queryListingsSuccess(listingRefs));\n    return response;\n  }).catch(e => dispatch(queryListingsError(storableError(e))));\n};\nexport const queryUserReviews = userId => (dispatch, getState, sdk) => {\n  sdk.reviews.query({\n    subject_id: userId,\n    state: 'public',\n    include: ['author', 'author.profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const reviews = denormalisedResponseEntities(response);\n    dispatch(queryReviewsSuccess(reviews));\n  }).catch(e => dispatch(queryReviewsError(e)));\n};\nexport const showUser = userId => (dispatch, getState, sdk) => {\n  dispatch(showUserRequest(userId));\n  return sdk.users.show({\n    id: userId,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(showUserSuccess());\n    return response;\n  }).catch(e => dispatch(showUserError(storableError(e))));\n};\nexport const loadData = params => (dispatch, getState, sdk) => {\n  const userId = new UUID(params.id); // Clear state so that previously loaded data is not visible\n  // in case this page load fails.\n\n  dispatch(setInitialState());\n  return Promise.all([dispatch(fetchCurrentUser()), dispatch(showUser(userId)), dispatch(queryUserListings(userId)), dispatch(queryUserReviews(userId))]);\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ProfilePage/ProfilePage.duck.js"],"names":["config","addMarketplaceEntities","fetchCurrentUser","types","sdkTypes","createImageVariantConfig","denormalisedResponseEntities","storableError","UUID","SET_INITIAL_STATE","SHOW_USER_REQUEST","SHOW_USER_SUCCESS","SHOW_USER_ERROR","QUERY_LISTINGS_REQUEST","QUERY_LISTINGS_SUCCESS","QUERY_LISTINGS_ERROR","QUERY_REVIEWS_REQUEST","QUERY_REVIEWS_SUCCESS","QUERY_REVIEWS_ERROR","initialState","userId","userListingRefs","userShowError","queryListingsError","reviews","queryReviewsError","profilePageReducer","state","action","type","payload","listingRefs","setInitialState","showUserRequest","showUserSuccess","showUserError","e","error","queryListingsRequest","queryListingsSuccess","queryReviewsRequest","queryReviewsSuccess","queryUserListings","dispatch","getState","sdk","aspectWidth","aspectHeight","variantPrefix","listing","aspectRatio","listings","query","author_id","include","then","response","data","map","id","catch","queryUserReviews","subject_id","showUser","users","show","loadData","params","Promise","all"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,SAASC,sBAAT,QAAuC,kCAAvC;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,KAAK,IAAIC,QAAlB,EAA4BC,wBAA5B,QAA4D,sBAA5D;AACA,SAASC,4BAAT,QAA6C,iBAA7C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWJ,QAAjB,C,CAEA;;AAEA,OAAO,MAAMK,iBAAiB,GAAG,mCAA1B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mCAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mCAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iCAAxB;AAEP,OAAO,MAAMC,sBAAsB,GAAG,wCAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wCAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sCAA7B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uCAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uCAA9B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qCAA5B,C,CAEP;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,IADW;AAEnBC,EAAAA,eAAe,EAAE,EAFE;AAGnBC,EAAAA,aAAa,EAAE,IAHI;AAInBC,EAAAA,kBAAkB,EAAE,IAJD;AAKnBC,EAAAA,OAAO,EAAE,EALU;AAMnBC,EAAAA,iBAAiB,EAAE;AANA,CAArB;AASA,eAAe,SAASC,kBAAT,CAA4BC,KAAK,GAAGR,YAApC,EAAkDS,MAAM,GAAG,EAA3D,EAA+D;AAC5E,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKpB,iBAAL;AACE,aAAO,EAAE,GAAGU;AAAL,OAAP;;AACF,SAAKT,iBAAL;AACE,aAAO,EAAE,GAAGiB,KAAL;AAAYL,QAAAA,aAAa,EAAE,IAA3B;AAAiCF,QAAAA,MAAM,EAAEU,OAAO,CAACV;AAAjD,OAAP;;AACF,SAAKT,iBAAL;AACE,aAAOgB,KAAP;;AACF,SAAKf,eAAL;AACE,aAAO,EAAE,GAAGe,KAAL;AAAYL,QAAAA,aAAa,EAAEQ;AAA3B,OAAP;;AAEF,SAAKjB,sBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAGL;AACAN,QAAAA,eAAe,EAAES,OAAO,CAACV,MAAR,KAAmBO,KAAK,CAACP,MAAzB,GAAkCO,KAAK,CAACN,eAAxC,GAA0D,EAJtE;AAMLE,QAAAA,kBAAkB,EAAE;AANf,OAAP;;AAQF,SAAKT,sBAAL;AACE,aAAO,EAAE,GAAGa,KAAL;AAAYN,QAAAA,eAAe,EAAES,OAAO,CAACC;AAArC,OAAP;;AACF,SAAKhB,oBAAL;AACE,aAAO,EAAE,GAAGY,KAAL;AAAYN,QAAAA,eAAe,EAAE,EAA7B;AAAiCE,QAAAA,kBAAkB,EAAEO;AAArD,OAAP;;AACF,SAAKd,qBAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYF,QAAAA,iBAAiB,EAAE;AAA/B,OAAP;;AACF,SAAKR,qBAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYH,QAAAA,OAAO,EAAEM;AAArB,OAAP;;AACF,SAAKZ,mBAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYH,QAAAA,OAAO,EAAE,EAArB;AAAyBC,QAAAA,iBAAiB,EAAEK;AAA5C,OAAP;;AAEF;AACE,aAAOH,KAAP;AA/BJ;AAiCD,C,CAED;;AAEA,OAAO,MAAMK,eAAe,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEpB;AAD8B,CAAP,CAAxB;AAIP,OAAO,MAAMwB,eAAe,GAAGb,MAAM,KAAK;AACxCS,EAAAA,IAAI,EAAEnB,iBADkC;AAExCoB,EAAAA,OAAO,EAAE;AAAEV,IAAAA;AAAF;AAF+B,CAAL,CAA9B;AAKP,OAAO,MAAMc,eAAe,GAAG,OAAO;AACpCL,EAAAA,IAAI,EAAElB;AAD8B,CAAP,CAAxB;AAIP,OAAO,MAAMwB,aAAa,GAAGC,CAAC,KAAK;AACjCP,EAAAA,IAAI,EAAEjB,eAD2B;AAEjCyB,EAAAA,KAAK,EAAE,IAF0B;AAGjCP,EAAAA,OAAO,EAAEM;AAHwB,CAAL,CAAvB;AAMP,OAAO,MAAME,oBAAoB,GAAGlB,MAAM,KAAK;AAC7CS,EAAAA,IAAI,EAAEhB,sBADuC;AAE7CiB,EAAAA,OAAO,EAAE;AAAEV,IAAAA;AAAF;AAFoC,CAAL,CAAnC;AAKP,OAAO,MAAMmB,oBAAoB,GAAGR,WAAW,KAAK;AAClDF,EAAAA,IAAI,EAAEf,sBAD4C;AAElDgB,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAFyC,CAAL,CAAxC;AAKP,OAAO,MAAMR,kBAAkB,GAAGa,CAAC,KAAK;AACtCP,EAAAA,IAAI,EAAEd,oBADgC;AAEtCsB,EAAAA,KAAK,EAAE,IAF+B;AAGtCP,EAAAA,OAAO,EAAEM;AAH6B,CAAL,CAA5B;AAMP,OAAO,MAAMI,mBAAmB,GAAG,OAAO;AACxCX,EAAAA,IAAI,EAAEb;AADkC,CAAP,CAA5B;AAIP,OAAO,MAAMyB,mBAAmB,GAAGjB,OAAO,KAAK;AAC7CK,EAAAA,IAAI,EAAEZ,qBADuC;AAE7Ca,EAAAA,OAAO,EAAEN;AAFoC,CAAL,CAAnC;AAKP,OAAO,MAAMC,iBAAiB,GAAGW,CAAC,KAAK;AACrCP,EAAAA,IAAI,EAAEX,mBAD+B;AAErCmB,EAAAA,KAAK,EAAE,IAF8B;AAGrCP,EAAAA,OAAO,EAAEM;AAH4B,CAAL,CAA3B,C,CAMP;;AAEA,OAAO,MAAMM,iBAAiB,GAAGtB,MAAM,IAAI,CAACuB,QAAD,EAAWC,QAAX,EAAqBC,GAArB,KAA6B;AACtEF,EAAAA,QAAQ,CAACL,oBAAoB,CAAClB,MAAD,CAArB,CAAR;AAEA,QAAM;AAAE0B,IAAAA,WAAW,GAAG,CAAhB;AAAmBC,IAAAA,YAAY,GAAG,CAAlC;AAAqCC,IAAAA,aAAa,GAAG;AAArD,MAAwEhD,MAAM,CAACiD,OAArF;AACA,QAAMC,WAAW,GAAGH,YAAY,GAAGD,WAAnC;AAEA,SAAOD,GAAG,CAACM,QAAJ,CACJC,KADI,CACE;AACLC,IAAAA,SAAS,EAAEjC,MADN;AAELkC,IAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,CAFJ;AAGL,oBAAgB,CAAE,YAAWN,aAAc,EAA3B,EAA+B,YAAWA,aAAc,KAAxD,CAHX;AAIL,OAAG3C,wBAAwB,CAAE,GAAE2C,aAAc,EAAlB,EAAqB,GAArB,EAA0BE,WAA1B,CAJtB;AAKL,OAAG7C,wBAAwB,CAAE,GAAE2C,aAAc,KAAlB,EAAwB,GAAxB,EAA6BE,WAA7B;AALtB,GADF,EAQJK,IARI,CAQCC,QAAQ,IAAI;AAChB;AACA,UAAMzB,WAAW,GAAGyB,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBC,GAAnB,CAAuB,CAAC;AAAEC,MAAAA,EAAF;AAAM9B,MAAAA;AAAN,KAAD,MAAmB;AAAE8B,MAAAA,EAAF;AAAM9B,MAAAA;AAAN,KAAnB,CAAvB,CAApB;AACAc,IAAAA,QAAQ,CAAC1C,sBAAsB,CAACuD,QAAD,CAAvB,CAAR;AACAb,IAAAA,QAAQ,CAACJ,oBAAoB,CAACR,WAAD,CAArB,CAAR;AACA,WAAOyB,QAAP;AACD,GAdI,EAeJI,KAfI,CAeExB,CAAC,IAAIO,QAAQ,CAACpB,kBAAkB,CAAChB,aAAa,CAAC6B,CAAD,CAAd,CAAnB,CAff,CAAP;AAgBD,CAtBM;AAwBP,OAAO,MAAMyB,gBAAgB,GAAGzC,MAAM,IAAI,CAACuB,QAAD,EAAWC,QAAX,EAAqBC,GAArB,KAA6B;AACrEA,EAAAA,GAAG,CAACrB,OAAJ,CACG4B,KADH,CACS;AACLU,IAAAA,UAAU,EAAE1C,MADP;AAELO,IAAAA,KAAK,EAAE,QAFF;AAGL2B,IAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,qBAAX,CAHJ;AAIL,oBAAgB,CAAC,uBAAD,EAA0B,yBAA1B;AAJX,GADT,EAOGC,IAPH,CAOQC,QAAQ,IAAI;AAChB,UAAMhC,OAAO,GAAGlB,4BAA4B,CAACkD,QAAD,CAA5C;AACAb,IAAAA,QAAQ,CAACF,mBAAmB,CAACjB,OAAD,CAApB,CAAR;AACD,GAVH,EAWGoC,KAXH,CAWSxB,CAAC,IAAIO,QAAQ,CAAClB,iBAAiB,CAACW,CAAD,CAAlB,CAXtB;AAYD,CAbM;AAeP,OAAO,MAAM2B,QAAQ,GAAG3C,MAAM,IAAI,CAACuB,QAAD,EAAWC,QAAX,EAAqBC,GAArB,KAA6B;AAC7DF,EAAAA,QAAQ,CAACV,eAAe,CAACb,MAAD,CAAhB,CAAR;AACA,SAAOyB,GAAG,CAACmB,KAAJ,CACJC,IADI,CACC;AACJN,IAAAA,EAAE,EAAEvC,MADA;AAEJkC,IAAAA,OAAO,EAAE,CAAC,cAAD,CAFL;AAGJ,oBAAgB,CAAC,uBAAD,EAA0B,yBAA1B;AAHZ,GADD,EAMJC,IANI,CAMCC,QAAQ,IAAI;AAChBb,IAAAA,QAAQ,CAAC1C,sBAAsB,CAACuD,QAAD,CAAvB,CAAR;AACAb,IAAAA,QAAQ,CAACT,eAAe,EAAhB,CAAR;AACA,WAAOsB,QAAP;AACD,GAVI,EAWJI,KAXI,CAWExB,CAAC,IAAIO,QAAQ,CAACR,aAAa,CAAC5B,aAAa,CAAC6B,CAAD,CAAd,CAAd,CAXf,CAAP;AAYD,CAdM;AAgBP,OAAO,MAAM8B,QAAQ,GAAGC,MAAM,IAAI,CAACxB,QAAD,EAAWC,QAAX,EAAqBC,GAArB,KAA6B;AAC7D,QAAMzB,MAAM,GAAG,IAAIZ,IAAJ,CAAS2D,MAAM,CAACR,EAAhB,CAAf,CAD6D,CAG7D;AACA;;AACAhB,EAAAA,QAAQ,CAACX,eAAe,EAAhB,CAAR;AAEA,SAAOoC,OAAO,CAACC,GAAR,CAAY,CACjB1B,QAAQ,CAACzC,gBAAgB,EAAjB,CADS,EAEjByC,QAAQ,CAACoB,QAAQ,CAAC3C,MAAD,CAAT,CAFS,EAGjBuB,QAAQ,CAACD,iBAAiB,CAACtB,MAAD,CAAlB,CAHS,EAIjBuB,QAAQ,CAACkB,gBAAgB,CAACzC,MAAD,CAAjB,CAJS,CAAZ,CAAP;AAMD,CAbM","sourcesContent":["import config from '../../config';\r\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { fetchCurrentUser } from '../../ducks/user.duck';\r\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\r\nimport { denormalisedResponseEntities } from '../../util/data';\r\nimport { storableError } from '../../util/errors';\r\n\r\nconst { UUID } = sdkTypes;\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const SET_INITIAL_STATE = 'app/ProfilePage/SET_INITIAL_STATE';\r\n\r\nexport const SHOW_USER_REQUEST = 'app/ProfilePage/SHOW_USER_REQUEST';\r\nexport const SHOW_USER_SUCCESS = 'app/ProfilePage/SHOW_USER_SUCCESS';\r\nexport const SHOW_USER_ERROR = 'app/ProfilePage/SHOW_USER_ERROR';\r\n\r\nexport const QUERY_LISTINGS_REQUEST = 'app/ProfilePage/QUERY_LISTINGS_REQUEST';\r\nexport const QUERY_LISTINGS_SUCCESS = 'app/ProfilePage/QUERY_LISTINGS_SUCCESS';\r\nexport const QUERY_LISTINGS_ERROR = 'app/ProfilePage/QUERY_LISTINGS_ERROR';\r\n\r\nexport const QUERY_REVIEWS_REQUEST = 'app/ProfilePage/QUERY_REVIEWS_REQUEST';\r\nexport const QUERY_REVIEWS_SUCCESS = 'app/ProfilePage/QUERY_REVIEWS_SUCCESS';\r\nexport const QUERY_REVIEWS_ERROR = 'app/ProfilePage/QUERY_REVIEWS_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  userId: null,\r\n  userListingRefs: [],\r\n  userShowError: null,\r\n  queryListingsError: null,\r\n  reviews: [],\r\n  queryReviewsError: null,\r\n};\r\n\r\nexport default function profilePageReducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_INITIAL_STATE:\r\n      return { ...initialState };\r\n    case SHOW_USER_REQUEST:\r\n      return { ...state, userShowError: null, userId: payload.userId };\r\n    case SHOW_USER_SUCCESS:\r\n      return state;\r\n    case SHOW_USER_ERROR:\r\n      return { ...state, userShowError: payload };\r\n\r\n    case QUERY_LISTINGS_REQUEST:\r\n      return {\r\n        ...state,\r\n\r\n        // Empty listings only when user id changes\r\n        userListingRefs: payload.userId === state.userId ? state.userListingRefs : [],\r\n\r\n        queryListingsError: null,\r\n      };\r\n    case QUERY_LISTINGS_SUCCESS:\r\n      return { ...state, userListingRefs: payload.listingRefs };\r\n    case QUERY_LISTINGS_ERROR:\r\n      return { ...state, userListingRefs: [], queryListingsError: payload };\r\n    case QUERY_REVIEWS_REQUEST:\r\n      return { ...state, queryReviewsError: null };\r\n    case QUERY_REVIEWS_SUCCESS:\r\n      return { ...state, reviews: payload };\r\n    case QUERY_REVIEWS_ERROR:\r\n      return { ...state, reviews: [], queryReviewsError: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const setInitialState = () => ({\r\n  type: SET_INITIAL_STATE,\r\n});\r\n\r\nexport const showUserRequest = userId => ({\r\n  type: SHOW_USER_REQUEST,\r\n  payload: { userId },\r\n});\r\n\r\nexport const showUserSuccess = () => ({\r\n  type: SHOW_USER_SUCCESS,\r\n});\r\n\r\nexport const showUserError = e => ({\r\n  type: SHOW_USER_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nexport const queryListingsRequest = userId => ({\r\n  type: QUERY_LISTINGS_REQUEST,\r\n  payload: { userId },\r\n});\r\n\r\nexport const queryListingsSuccess = listingRefs => ({\r\n  type: QUERY_LISTINGS_SUCCESS,\r\n  payload: { listingRefs },\r\n});\r\n\r\nexport const queryListingsError = e => ({\r\n  type: QUERY_LISTINGS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nexport const queryReviewsRequest = () => ({\r\n  type: QUERY_REVIEWS_REQUEST,\r\n});\r\n\r\nexport const queryReviewsSuccess = reviews => ({\r\n  type: QUERY_REVIEWS_SUCCESS,\r\n  payload: reviews,\r\n});\r\n\r\nexport const queryReviewsError = e => ({\r\n  type: QUERY_REVIEWS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const queryUserListings = userId => (dispatch, getState, sdk) => {\r\n  dispatch(queryListingsRequest(userId));\r\n\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } = config.listing;\r\n  const aspectRatio = aspectHeight / aspectWidth;\r\n\r\n  return sdk.listings\r\n    .query({\r\n      author_id: userId,\r\n      include: ['author', 'images'],\r\n      'fields.image': [`variants.${variantPrefix}`, `variants.${variantPrefix}-2x`],\r\n      ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\r\n      ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio),\r\n    })\r\n    .then(response => {\r\n      // Pick only the id and type properties from the response listings\r\n      const listingRefs = response.data.data.map(({ id, type }) => ({ id, type }));\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(queryListingsSuccess(listingRefs));\r\n      return response;\r\n    })\r\n    .catch(e => dispatch(queryListingsError(storableError(e))));\r\n};\r\n\r\nexport const queryUserReviews = userId => (dispatch, getState, sdk) => {\r\n  sdk.reviews\r\n    .query({\r\n      subject_id: userId,\r\n      state: 'public',\r\n      include: ['author', 'author.profileImage'],\r\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n    })\r\n    .then(response => {\r\n      const reviews = denormalisedResponseEntities(response);\r\n      dispatch(queryReviewsSuccess(reviews));\r\n    })\r\n    .catch(e => dispatch(queryReviewsError(e)));\r\n};\r\n\r\nexport const showUser = userId => (dispatch, getState, sdk) => {\r\n  dispatch(showUserRequest(userId));\r\n  return sdk.users\r\n    .show({\r\n      id: userId,\r\n      include: ['profileImage'],\r\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n    })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(showUserSuccess());\r\n      return response;\r\n    })\r\n    .catch(e => dispatch(showUserError(storableError(e))));\r\n};\r\n\r\nexport const loadData = params => (dispatch, getState, sdk) => {\r\n  const userId = new UUID(params.id);\r\n\r\n  // Clear state so that previously loaded data is not visible\r\n  // in case this page load fails.\r\n  dispatch(setInitialState());\r\n\r\n  return Promise.all([\r\n    dispatch(fetchCurrentUser()),\r\n    dispatch(showUser(userId)),\r\n    dispatch(queryUserListings(userId)),\r\n    dispatch(queryUserReviews(userId)),\r\n  ]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}