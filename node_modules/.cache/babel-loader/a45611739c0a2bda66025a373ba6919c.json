{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingPage.js\";\nimport React from 'react';\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux'; // Import configs and util modules\n\nimport { intlShape, injectIntl } from '../../util/reactIntl';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES, LISTING_PAGE_PENDING_APPROVAL_VARIANT, createSlug } from '../../util/urlHelpers';\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError, getStripeConnectAccountLink } from '../../ducks/stripeConnectAccount.duck'; // Import shared components\n\nimport { NamedRedirect, Page } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer'; // Import modules from this directory\n\nimport { requestFetchBookings, requestFetchAvailabilityExceptions, requestCreateAvailabilityException, requestDeleteAvailabilityException, requestCreateListingDraft, requestPublishListingDraft, requestUpdateListing, requestImageUpload, removeListingImage, clearUpdatedTab, savePayoutDetails } from './EditListingPage.duck';\nimport EditListingWizard from './EditListingWizard/EditListingWizard';\nimport css from './EditListingPage.module.css';\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [STRIPE_ONBOARDING_RETURN_URL_SUCCESS, STRIPE_ONBOARDING_RETURN_URL_FAILURE];\nconst {\n  UUID\n} = sdkTypes; // Pick images that are currently attached to listing entity and images that are going to be attached.\n// Avoid duplicates and images that should be removed.\n\nconst pickRenderableImages = (currentListing, uploadedImages, uploadedImageIdsInOrder = [], removedImageIds = []) => {\n  // Images are passed to EditListingForm so that it can generate thumbnails out of them\n  const currentListingImages = currentListing && currentListing.images ? currentListing.images : []; // Images not yet connected to the listing\n\n  const unattachedImages = uploadedImageIdsInOrder.map(i => uploadedImages[i]);\n  const allImages = currentListingImages.concat(unattachedImages);\n\n  const pickImagesAndIds = (imgs, img) => {\n    const imgId = img.imageId || img.id; // Pick only unique images that are not marked to be removed\n\n    const shouldInclude = !imgs.imageIds.includes(imgId) && !removedImageIds.includes(imgId);\n\n    if (shouldInclude) {\n      imgs.imageEntities.push(img);\n      imgs.imageIds.push(imgId);\n    }\n\n    return imgs;\n  }; // Return array of image entities. Something like: [{ id, imageId, type, attributes }, ...]\n\n\n  return allImages.reduce(pickImagesAndIds, {\n    imageEntities: [],\n    imageIds: []\n  }).imageEntities;\n}; // N.B. All the presentational content needs to be extracted to their own components\n\n\nexport const EditListingPageComponent = props => {\n  const {\n    currentUser,\n    createStripeAccountError,\n    fetchInProgress,\n    fetchStripeAccountError,\n    getOwnListing,\n    getAccountLinkError,\n    getAccountLinkInProgress,\n    history,\n    intl,\n    onFetchAvailabilityExceptions,\n    onCreateAvailabilityException,\n    onDeleteAvailabilityException,\n    onFetchBookings,\n    onCreateListingDraft,\n    onPublishListingDraft,\n    onUpdateListing,\n    onImageUpload,\n    onRemoveListingImage,\n    onManageDisableScrolling,\n    onPayoutDetailsSubmit,\n    onPayoutDetailsChange,\n    onGetStripeConnectAccountLink,\n    onChange,\n    page,\n    params,\n    scrollingDisabled,\n    stripeAccountFetched,\n    stripeAccount,\n    updateStripeAccountError\n  } = props;\n  const {\n    id,\n    type,\n    returnURLType\n  } = params;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const isNewListingFlow = isNewURI || isDraftURI;\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\n  const {\n    state: currentListingState\n  } = currentListing.attributes;\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\n  const shouldRedirect = isNewListingFlow && listingId && isPastDraft;\n  const hasStripeOnboardingDataIfNeeded = returnURLType ? !!(currentUser && currentUser.id) : true;\n  const showForm = hasStripeOnboardingDataIfNeeded && (isNewURI || currentListing.id);\n\n  if (shouldRedirect) {\n    const isPendingApproval = currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL; // If page has already listingId (after submit) and current listings exist\n    // redirect to listing page\n\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\n    const redirectProps = isPendingApproval ? {\n      name: 'ListingPageVariant',\n      params: {\n        id: listingId.uuid,\n        slug: listingSlug,\n        variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT\n      }\n    } : {\n      name: 'ListingPage',\n      params: {\n        id: listingId.uuid,\n        slug: listingSlug\n      }\n    };\n    return /*#__PURE__*/React.createElement(NamedRedirect, Object.assign({}, redirectProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 12\n      }\n    }));\n  } else if (showForm) {\n    const {\n      createListingDraftError = null,\n      publishListingError = null,\n      updateListingError = null,\n      showListingsError = null,\n      uploadImageError = null,\n      setStockError = null,\n      uploadedImages,\n      uploadedImagesOrder,\n      removedImageIds\n    } = page;\n    const errors = {\n      createListingDraftError,\n      publishListingError,\n      updateListingError,\n      showListingsError,\n      uploadImageError,\n      createStripeAccountError,\n      setStockError\n    }; // TODO: is this dead code? (shouldRedirect is checked before)\n\n    const newListingPublished = isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT; // Show form if user is posting a new listing or editing existing one\n\n    const disableForm = page.redirectToListing && !showListingsError;\n    const images = pickRenderableImages(currentListing, uploadedImages, uploadedImagesOrder, removedImageIds);\n    const title = isNewListingFlow ? intl.formatMessage({\n      id: 'EditListingPage.titleCreateListing'\n    }) : intl.formatMessage({\n      id: 'EditListingPage.titleEditListing'\n    });\n    return /*#__PURE__*/React.createElement(Page, {\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      className: css.topbar,\n      mobileRootClassName: css.mobileTopbar,\n      desktopClassName: css.desktopTopbar,\n      mobileClassName: css.mobileTopbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(EditListingWizard, {\n      id: \"EditListingWizard\",\n      className: css.wizard,\n      params: params,\n      disabled: disableForm,\n      errors: errors,\n      fetchInProgress: fetchInProgress,\n      newListingPublished: newListingPublished,\n      history: history,\n      images: images,\n      listing: currentListing,\n      availability: {\n        calendar: page.availabilityCalendar,\n        onFetchAvailabilityExceptions,\n        onCreateAvailabilityException,\n        onDeleteAvailabilityException,\n        onFetchBookings\n      },\n      onUpdateListing: onUpdateListing,\n      onCreateListingDraft: onCreateListingDraft,\n      onPublishListingDraft: onPublishListingDraft,\n      onPayoutDetailsChange: onPayoutDetailsChange,\n      onPayoutDetailsSubmit: onPayoutDetailsSubmit,\n      onGetStripeConnectAccountLink: onGetStripeConnectAccountLink,\n      getAccountLinkInProgress: getAccountLinkInProgress,\n      onImageUpload: onImageUpload,\n      onRemoveImage: onRemoveListingImage,\n      onChange: onChange,\n      currentUser: currentUser,\n      onManageDisableScrolling: onManageDisableScrolling,\n      stripeOnboardingReturnURL: params.returnURLType,\n      updatedTab: page.updatedTab,\n      updateInProgress: page.updateInProgress || page.createListingDraftInProgress,\n      payoutDetailsSaveInProgress: page.payoutDetailsSaveInProgress,\n      payoutDetailsSaved: page.payoutDetailsSaved,\n      stripeAccountFetched: stripeAccountFetched,\n      stripeAccount: stripeAccount,\n      stripeAccountError: createStripeAccountError || updateStripeAccountError || fetchStripeAccountError,\n      stripeAccountLinkError: getAccountLinkError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    // If user has come to this page through a direct linkto edit existing listing,\n    // we need to load it first.\n    const loadingPageMsg = {\n      id: 'EditListingPage.loadingListingData'\n    };\n    return /*#__PURE__*/React.createElement(Page, {\n      title: intl.formatMessage(loadingPageMsg),\n      scrollingDisabled: scrollingDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }\n    });\n  }\n};\n_c = EditListingPageComponent;\nEditListingPageComponent.defaultProps = {\n  createStripeAccountError: null,\n  fetchStripeAccountError: null,\n  getAccountLinkError: null,\n  getAccountLinkInProgress: null,\n  stripeAccountFetched: null,\n  currentUser: null,\n  stripeAccount: null,\n  currentUserHasOrders: null,\n  listing: null,\n  listingDraft: null,\n  notificationCount: 0,\n  sendVerificationEmailError: null\n};\nEditListingPageComponent.propTypes = {\n  createStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  getAccountLinkError: propTypes.error,\n  getAccountLinkInProgress: bool,\n  updateStripeAccountError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  getOwnListing: func.isRequired,\n  onFetchAvailabilityExceptions: func.isRequired,\n  onCreateAvailabilityException: func.isRequired,\n  onDeleteAvailabilityException: func.isRequired,\n  onFetchBookings: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onPublishListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onPayoutDetailsChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onRemoveListingImage: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onChange: func.isRequired,\n  page: object.isRequired,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: string.isRequired,\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES)\n  }).isRequired,\n  stripeAccountFetched: bool,\n  stripeAccount: object,\n  scrollingDisabled: bool.isRequired,\n\n  /* from withRouter */\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n\n  /* from injectIntl */\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const page = state.EditListingPage;\n  const {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountInProgress,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched\n  } = state.stripeConnectAccount;\n  const {\n    currentUser\n  } = state.user;\n  const fetchInProgress = createStripeAccountInProgress;\n\n  const getOwnListing = id => {\n    const listings = getMarketplaceEntities(state, [{\n      id,\n      type: 'ownListing'\n    }]);\n    return listings.length === 1 ? listings[0] : null;\n  };\n\n  return {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n    currentUser,\n    fetchInProgress,\n    getOwnListing,\n    page,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onUpdateListing: (tab, values) => dispatch(requestUpdateListing(tab, values)),\n  onFetchBookings: params => dispatch(requestFetchBookings(params)),\n  onFetchAvailabilityExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\n  onCreateAvailabilityException: params => dispatch(requestCreateAvailabilityException(params)),\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\n  onCreateListingDraft: values => dispatch(requestCreateListingDraft(values)),\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\n  onImageUpload: data => dispatch(requestImageUpload(data)),\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: (values, isUpdateCall) => dispatch(savePayoutDetails(values, isUpdateCall)),\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\n  onChange: () => dispatch(clearUpdatedTab())\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst EditListingPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(injectIntl(EditListingPageComponent));\nexport default EditListingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingPageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingPage.js"],"names":["React","bool","func","object","shape","string","oneOf","compose","withRouter","connect","intlShape","injectIntl","types","sdkTypes","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","LISTING_PAGE_PENDING_APPROVAL_VARIANT","createSlug","LISTING_STATE_DRAFT","LISTING_STATE_PENDING_APPROVAL","propTypes","ensureOwnListing","getMarketplaceEntities","manageDisableScrolling","isScrollingDisabled","stripeAccountClearError","getStripeConnectAccountLink","NamedRedirect","Page","TopbarContainer","requestFetchBookings","requestFetchAvailabilityExceptions","requestCreateAvailabilityException","requestDeleteAvailabilityException","requestCreateListingDraft","requestPublishListingDraft","requestUpdateListing","requestImageUpload","removeListingImage","clearUpdatedTab","savePayoutDetails","EditListingWizard","css","STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","STRIPE_ONBOARDING_RETURN_URL_TYPES","UUID","pickRenderableImages","currentListing","uploadedImages","uploadedImageIdsInOrder","removedImageIds","currentListingImages","images","unattachedImages","map","i","allImages","concat","pickImagesAndIds","imgs","img","imgId","imageId","id","shouldInclude","imageIds","includes","imageEntities","push","reduce","EditListingPageComponent","props","currentUser","createStripeAccountError","fetchInProgress","fetchStripeAccountError","getOwnListing","getAccountLinkError","getAccountLinkInProgress","history","intl","onFetchAvailabilityExceptions","onCreateAvailabilityException","onDeleteAvailabilityException","onFetchBookings","onCreateListingDraft","onPublishListingDraft","onUpdateListing","onImageUpload","onRemoveListingImage","onManageDisableScrolling","onPayoutDetailsSubmit","onPayoutDetailsChange","onGetStripeConnectAccountLink","onChange","page","params","scrollingDisabled","stripeAccountFetched","stripeAccount","updateStripeAccountError","type","returnURLType","isNewURI","isDraftURI","isNewListingFlow","listingId","submittedListingId","state","currentListingState","attributes","isPastDraft","shouldRedirect","hasStripeOnboardingDataIfNeeded","showForm","isPendingApproval","listingSlug","title","redirectProps","name","uuid","slug","variant","createListingDraftError","publishListingError","updateListingError","showListingsError","uploadImageError","setStockError","uploadedImagesOrder","errors","newListingPublished","disableForm","redirectToListing","formatMessage","topbar","mobileTopbar","desktopTopbar","wizard","calendar","availabilityCalendar","updatedTab","updateInProgress","createListingDraftInProgress","payoutDetailsSaveInProgress","payoutDetailsSaved","loadingPageMsg","defaultProps","currentUserHasOrders","listing","listingDraft","notificationCount","sendVerificationEmailError","error","isRequired","tab","mapStateToProps","EditListingPage","createStripeAccountInProgress","stripeConnectAccount","user","listings","length","mapDispatchToProps","dispatch","values","data","componentId","disableScrolling","isUpdateCall"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// Import configs and util modules\r\nimport { intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\r\n  createSlug,\r\n} from '../../util/urlHelpers';\r\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\r\nimport { ensureOwnListing } from '../../util/data';\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\r\nimport {\r\n  stripeAccountClearError,\r\n  getStripeConnectAccountLink,\r\n} from '../../ducks/stripeConnectAccount.duck';\r\n\r\n// Import shared components\r\nimport { NamedRedirect, Page } from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\n// Import modules from this directory\r\nimport {\r\n  requestFetchBookings,\r\n  requestFetchAvailabilityExceptions,\r\n  requestCreateAvailabilityException,\r\n  requestDeleteAvailabilityException,\r\n  requestCreateListingDraft,\r\n  requestPublishListingDraft,\r\n  requestUpdateListing,\r\n  requestImageUpload,\r\n  removeListingImage,\r\n  clearUpdatedTab,\r\n  savePayoutDetails,\r\n} from './EditListingPage.duck';\r\nimport EditListingWizard from './EditListingWizard/EditListingWizard';\r\nimport css from './EditListingPage.module.css';\r\n\r\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\r\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\r\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\r\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\r\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\r\n];\r\n\r\nconst { UUID } = sdkTypes;\r\n\r\n// Pick images that are currently attached to listing entity and images that are going to be attached.\r\n// Avoid duplicates and images that should be removed.\r\nconst pickRenderableImages = (\r\n  currentListing,\r\n  uploadedImages,\r\n  uploadedImageIdsInOrder = [],\r\n  removedImageIds = []\r\n) => {\r\n  // Images are passed to EditListingForm so that it can generate thumbnails out of them\r\n  const currentListingImages = currentListing && currentListing.images ? currentListing.images : [];\r\n  // Images not yet connected to the listing\r\n  const unattachedImages = uploadedImageIdsInOrder.map(i => uploadedImages[i]);\r\n  const allImages = currentListingImages.concat(unattachedImages);\r\n\r\n  const pickImagesAndIds = (imgs, img) => {\r\n    const imgId = img.imageId || img.id;\r\n    // Pick only unique images that are not marked to be removed\r\n    const shouldInclude = !imgs.imageIds.includes(imgId) && !removedImageIds.includes(imgId);\r\n    if (shouldInclude) {\r\n      imgs.imageEntities.push(img);\r\n      imgs.imageIds.push(imgId);\r\n    }\r\n    return imgs;\r\n  };\r\n\r\n  // Return array of image entities. Something like: [{ id, imageId, type, attributes }, ...]\r\n  return allImages.reduce(pickImagesAndIds, { imageEntities: [], imageIds: [] }).imageEntities;\r\n};\r\n\r\n// N.B. All the presentational content needs to be extracted to their own components\r\nexport const EditListingPageComponent = props => {\r\n  const {\r\n    currentUser,\r\n    createStripeAccountError,\r\n    fetchInProgress,\r\n    fetchStripeAccountError,\r\n    getOwnListing,\r\n    getAccountLinkError,\r\n    getAccountLinkInProgress,\r\n    history,\r\n    intl,\r\n    onFetchAvailabilityExceptions,\r\n    onCreateAvailabilityException,\r\n    onDeleteAvailabilityException,\r\n    onFetchBookings,\r\n    onCreateListingDraft,\r\n    onPublishListingDraft,\r\n    onUpdateListing,\r\n    onImageUpload,\r\n    onRemoveListingImage,\r\n    onManageDisableScrolling,\r\n    onPayoutDetailsSubmit,\r\n    onPayoutDetailsChange,\r\n    onGetStripeConnectAccountLink,\r\n    onChange,\r\n    page,\r\n    params,\r\n    scrollingDisabled,\r\n    stripeAccountFetched,\r\n    stripeAccount,\r\n    updateStripeAccountError,\r\n  } = props;\r\n\r\n  const { id, type, returnURLType } = params;\r\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\r\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\r\n  const isNewListingFlow = isNewURI || isDraftURI;\r\n\r\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\r\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\r\n  const { state: currentListingState } = currentListing.attributes;\r\n\r\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\r\n  const shouldRedirect = isNewListingFlow && listingId && isPastDraft;\r\n\r\n  const hasStripeOnboardingDataIfNeeded = returnURLType ? !!(currentUser && currentUser.id) : true;\r\n  const showForm = hasStripeOnboardingDataIfNeeded && (isNewURI || currentListing.id);\r\n\r\n  if (shouldRedirect) {\r\n    const isPendingApproval =\r\n      currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL;\r\n\r\n    // If page has already listingId (after submit) and current listings exist\r\n    // redirect to listing page\r\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\r\n\r\n    const redirectProps = isPendingApproval\r\n      ? {\r\n          name: 'ListingPageVariant',\r\n          params: {\r\n            id: listingId.uuid,\r\n            slug: listingSlug,\r\n            variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT,\r\n          },\r\n        }\r\n      : {\r\n          name: 'ListingPage',\r\n          params: {\r\n            id: listingId.uuid,\r\n            slug: listingSlug,\r\n          },\r\n        };\r\n\r\n    return <NamedRedirect {...redirectProps} />;\r\n  } else if (showForm) {\r\n    const {\r\n      createListingDraftError = null,\r\n      publishListingError = null,\r\n      updateListingError = null,\r\n      showListingsError = null,\r\n      uploadImageError = null,\r\n      setStockError = null,\r\n      uploadedImages,\r\n      uploadedImagesOrder,\r\n      removedImageIds,\r\n    } = page;\r\n    const errors = {\r\n      createListingDraftError,\r\n      publishListingError,\r\n      updateListingError,\r\n      showListingsError,\r\n      uploadImageError,\r\n      createStripeAccountError,\r\n      setStockError,\r\n    };\r\n    // TODO: is this dead code? (shouldRedirect is checked before)\r\n    const newListingPublished =\r\n      isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT;\r\n\r\n    // Show form if user is posting a new listing or editing existing one\r\n    const disableForm = page.redirectToListing && !showListingsError;\r\n    const images = pickRenderableImages(\r\n      currentListing,\r\n      uploadedImages,\r\n      uploadedImagesOrder,\r\n      removedImageIds\r\n    );\r\n\r\n    const title = isNewListingFlow\r\n      ? intl.formatMessage({ id: 'EditListingPage.titleCreateListing' })\r\n      : intl.formatMessage({ id: 'EditListingPage.titleEditListing' });\r\n\r\n    return (\r\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n        <TopbarContainer\r\n          className={css.topbar}\r\n          mobileRootClassName={css.mobileTopbar}\r\n          desktopClassName={css.desktopTopbar}\r\n          mobileClassName={css.mobileTopbar}\r\n        />\r\n        <EditListingWizard\r\n          id=\"EditListingWizard\"\r\n          className={css.wizard}\r\n          params={params}\r\n          disabled={disableForm}\r\n          errors={errors}\r\n          fetchInProgress={fetchInProgress}\r\n          newListingPublished={newListingPublished}\r\n          history={history}\r\n          images={images}\r\n          listing={currentListing}\r\n          availability={{\r\n            calendar: page.availabilityCalendar,\r\n            onFetchAvailabilityExceptions,\r\n            onCreateAvailabilityException,\r\n            onDeleteAvailabilityException,\r\n            onFetchBookings,\r\n          }}\r\n          onUpdateListing={onUpdateListing}\r\n          onCreateListingDraft={onCreateListingDraft}\r\n          onPublishListingDraft={onPublishListingDraft}\r\n          onPayoutDetailsChange={onPayoutDetailsChange}\r\n          onPayoutDetailsSubmit={onPayoutDetailsSubmit}\r\n          onGetStripeConnectAccountLink={onGetStripeConnectAccountLink}\r\n          getAccountLinkInProgress={getAccountLinkInProgress}\r\n          onImageUpload={onImageUpload}\r\n          onRemoveImage={onRemoveListingImage}\r\n          onChange={onChange}\r\n          currentUser={currentUser}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          stripeOnboardingReturnURL={params.returnURLType}\r\n          updatedTab={page.updatedTab}\r\n          updateInProgress={page.updateInProgress || page.createListingDraftInProgress}\r\n          payoutDetailsSaveInProgress={page.payoutDetailsSaveInProgress}\r\n          payoutDetailsSaved={page.payoutDetailsSaved}\r\n          stripeAccountFetched={stripeAccountFetched}\r\n          stripeAccount={stripeAccount}\r\n          stripeAccountError={\r\n            createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\r\n          }\r\n          stripeAccountLinkError={getAccountLinkError}\r\n        />\r\n      </Page>\r\n    );\r\n  } else {\r\n    // If user has come to this page through a direct linkto edit existing listing,\r\n    // we need to load it first.\r\n    const loadingPageMsg = {\r\n      id: 'EditListingPage.loadingListingData',\r\n    };\r\n    return (\r\n      <Page title={intl.formatMessage(loadingPageMsg)} scrollingDisabled={scrollingDisabled} />\r\n    );\r\n  }\r\n};\r\n\r\nEditListingPageComponent.defaultProps = {\r\n  createStripeAccountError: null,\r\n  fetchStripeAccountError: null,\r\n  getAccountLinkError: null,\r\n  getAccountLinkInProgress: null,\r\n  stripeAccountFetched: null,\r\n  currentUser: null,\r\n  stripeAccount: null,\r\n  currentUserHasOrders: null,\r\n  listing: null,\r\n  listingDraft: null,\r\n  notificationCount: 0,\r\n  sendVerificationEmailError: null,\r\n};\r\n\r\nEditListingPageComponent.propTypes = {\r\n  createStripeAccountError: propTypes.error,\r\n  fetchStripeAccountError: propTypes.error,\r\n  getAccountLinkError: propTypes.error,\r\n  getAccountLinkInProgress: bool,\r\n  updateStripeAccountError: propTypes.error,\r\n  currentUser: propTypes.currentUser,\r\n  fetchInProgress: bool.isRequired,\r\n  getOwnListing: func.isRequired,\r\n  onFetchAvailabilityExceptions: func.isRequired,\r\n  onCreateAvailabilityException: func.isRequired,\r\n  onDeleteAvailabilityException: func.isRequired,\r\n  onFetchBookings: func.isRequired,\r\n  onGetStripeConnectAccountLink: func.isRequired,\r\n  onCreateListingDraft: func.isRequired,\r\n  onPublishListingDraft: func.isRequired,\r\n  onImageUpload: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onPayoutDetailsChange: func.isRequired,\r\n  onPayoutDetailsSubmit: func.isRequired,\r\n  onRemoveListingImage: func.isRequired,\r\n  onUpdateListing: func.isRequired,\r\n  onChange: func.isRequired,\r\n  page: object.isRequired,\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: string.isRequired,\r\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\r\n  }).isRequired,\r\n  stripeAccountFetched: bool,\r\n  stripeAccount: object,\r\n  scrollingDisabled: bool.isRequired,\r\n\r\n  /* from withRouter */\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n\r\n  /* from injectIntl */\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const page = state.EditListingPage;\r\n  const {\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountInProgress,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n  } = state.stripeConnectAccount;\r\n\r\n  const { currentUser } = state.user;\r\n\r\n  const fetchInProgress = createStripeAccountInProgress;\r\n\r\n  const getOwnListing = id => {\r\n    const listings = getMarketplaceEntities(state, [{ id, type: 'ownListing' }]);\r\n\r\n    return listings.length === 1 ? listings[0] : null;\r\n  };\r\n  return {\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n    currentUser,\r\n    fetchInProgress,\r\n    getOwnListing,\r\n    page,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onUpdateListing: (tab, values) => dispatch(requestUpdateListing(tab, values)),\r\n  onFetchBookings: params => dispatch(requestFetchBookings(params)),\r\n  onFetchAvailabilityExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\r\n  onCreateAvailabilityException: params => dispatch(requestCreateAvailabilityException(params)),\r\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\r\n  onCreateListingDraft: values => dispatch(requestCreateListingDraft(values)),\r\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\r\n  onImageUpload: data => dispatch(requestImageUpload(data)),\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\r\n  onPayoutDetailsSubmit: (values, isUpdateCall) =>\r\n    dispatch(savePayoutDetails(values, isUpdateCall)),\r\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\r\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\r\n  onChange: () => dispatch(clearUpdatedTab()),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst EditListingPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(injectIntl(EditListingPageComponent));\r\n\r\nexport default EditListingPage;\r\n"]},"metadata":{},"sourceType":"module"}