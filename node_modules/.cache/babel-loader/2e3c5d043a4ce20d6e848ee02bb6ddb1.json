{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldCurrencyInput\\\\FieldCurrencyInput.example.js\";\n\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport { IntlProvider } from '../../util/reactIntl';\nimport { currencyConfig } from '../../util/test-data';\nimport * as validators from '../../util/validators';\nimport FieldCurrencyInput, { CurrencyInput } from './FieldCurrencyInput';\nconst currencyConfigUSD = { ...currencyConfig,\n  currency: 'USD'\n};\nconst currencyConfigEUR = { ...currencyConfig,\n  currency: 'EUR'\n}; // eslint-disable-next-line no-console\n\nconst onChange = price => console.log('CurrencyInput - value:', price); // Different locales need to be initialized before their currency formatting is in use\n\n\nconst CurrencyInputWithIntl = ({\n  locale,\n  ...rest\n}) => {\n  return /*#__PURE__*/React.createElement(IntlProvider, {\n    locale: locale,\n    textComponent: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInput, Object.assign({}, rest, {\n    input: {\n      onChange\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n};\n\n_c = CurrencyInputWithIntl;\nconst {\n  object,\n  string\n} = PropTypes;\nCurrencyInputWithIntl.propTypes = {\n  currencyConfig: object.isRequired,\n  locale: string.isRequired\n};\nexport const EmptyWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en'\n  },\n  group: 'inputs'\n};\nexport const defaultValueWithEnUSD = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigUSD,\n    locale: 'en',\n    defaultValue: 9999.99\n  },\n  group: 'inputs'\n};\nexport const EmptyWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi'\n  },\n  group: 'inputs'\n};\nexport const defaultValueWithFiEUR = {\n  component: CurrencyInputWithIntl,\n  props: {\n    currencyConfig: currencyConfigEUR,\n    locale: 'fi',\n    defaultValue: 9999.99\n  },\n  group: 'inputs'\n};\n\nconst FormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      handleSubmit,\n      onChange\n    } = fieldRenderProps;\n    const required = validators.required('This field is required');\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormSpy, {\n      onChange: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldCurrencyInput, {\n      id: \"FieldCurrencyInput.price\",\n      name: \"price\",\n      label: \"Set price:\",\n      placeholder: \"Type in amount in EUR...\",\n      currencyConfig: currencyConfigEUR,\n      validate: required,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }\n}));\n\n_c2 = FormComponent;\nexport const FieldInForm = {\n  component: FormComponent,\n  props: {\n    onChange: formState => {\n      if (formState.values && formState.values.price) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('FieldInForm submitted values:', values);\n      return false;\n    }\n  },\n  group: 'inputs'\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CurrencyInputWithIntl\");\n$RefreshReg$(_c2, \"FormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldCurrencyInput/FieldCurrencyInput.example.js"],"names":["React","PropTypes","Form","FinalForm","FormSpy","IntlProvider","currencyConfig","validators","FieldCurrencyInput","CurrencyInput","currencyConfigUSD","currency","currencyConfigEUR","onChange","price","console","log","CurrencyInputWithIntl","locale","rest","object","string","propTypes","isRequired","EmptyWithEnUSD","component","props","group","defaultValueWithEnUSD","defaultValue","EmptyWithFiEUR","defaultValueWithFiEUR","FormComponent","fieldRenderProps","handleSubmit","required","e","preventDefault","FieldInForm","formState","values","onSubmit"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAI,IAAIC,SAAjB,EAA4BC,OAA5B,QAA2C,kBAA3C;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAO,KAAKC,UAAZ,MAA4B,uBAA5B;AACA,OAAOC,kBAAP,IAA6BC,aAA7B,QAAkD,sBAAlD;AAEA,MAAMC,iBAAiB,GAAG,EACxB,GAAGJ,cADqB;AAExBK,EAAAA,QAAQ,EAAE;AAFc,CAA1B;AAKA,MAAMC,iBAAiB,GAAG,EACxB,GAAGN,cADqB;AAExBK,EAAAA,QAAQ,EAAE;AAFc,CAA1B,C,CAKA;;AACA,MAAME,QAAQ,GAAGC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC,CAA1B,C,CAEA;;;AACA,MAAMG,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAU,KAAGC;AAAb,CAAD,KAAyB;AACrD,sBACE,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAED,MAAtB;AAA8B,IAAA,aAAa,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD,oBAAmBC,IAAnB;AAAyB,IAAA,KAAK,EAAE;AAAEN,MAAAA;AAAF,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,CAND;;KAAMI,qB;AAQN,MAAM;AAAEG,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAqBpB,SAA3B;AAEAgB,qBAAqB,CAACK,SAAtB,GAAkC;AAChChB,EAAAA,cAAc,EAAEc,MAAM,CAACG,UADS;AAEhCL,EAAAA,MAAM,EAAEG,MAAM,CAACE;AAFiB,CAAlC;AAKA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,SAAS,EAAER,qBADiB;AAE5BS,EAAAA,KAAK,EAAE;AACLpB,IAAAA,cAAc,EAAEI,iBADX;AAELQ,IAAAA,MAAM,EAAE;AAFH,GAFqB;AAM5BS,EAAAA,KAAK,EAAE;AANqB,CAAvB;AASP,OAAO,MAAMC,qBAAqB,GAAG;AACnCH,EAAAA,SAAS,EAAER,qBADwB;AAEnCS,EAAAA,KAAK,EAAE;AACLpB,IAAAA,cAAc,EAAEI,iBADX;AAELQ,IAAAA,MAAM,EAAE,IAFH;AAGLW,IAAAA,YAAY,EAAE;AAHT,GAF4B;AAOnCF,EAAAA,KAAK,EAAE;AAP4B,CAA9B;AAUP,OAAO,MAAMG,cAAc,GAAG;AAC5BL,EAAAA,SAAS,EAAER,qBADiB;AAE5BS,EAAAA,KAAK,EAAE;AACLpB,IAAAA,cAAc,EAAEM,iBADX;AAELM,IAAAA,MAAM,EAAE;AAFH,GAFqB;AAM5BS,EAAAA,KAAK,EAAE;AANqB,CAAvB;AASP,OAAO,MAAMI,qBAAqB,GAAG;AACnCN,EAAAA,SAAS,EAAER,qBADwB;AAEnCS,EAAAA,KAAK,EAAE;AACLpB,IAAAA,cAAc,EAAEM,iBADX;AAELM,IAAAA,MAAM,EAAE,IAFH;AAGLW,IAAAA,YAAY,EAAE;AAHT,GAF4B;AAOnCF,EAAAA,KAAK,EAAE;AAP4B,CAA9B;;AAUP,MAAMK,aAAa,GAAGN,KAAK,iBACzB,oBAAC,SAAD,oBACMA,KADN;AAEE,EAAA,MAAM,EAAEO,gBAAgB,IAAI;AAC1B,UAAM;AAAEC,MAAAA,YAAF;AAAgBrB,MAAAA;AAAhB,QAA6BoB,gBAAnC;AACA,UAAME,QAAQ,GAAG5B,UAAU,CAAC4B,QAAX,CAAoB,wBAApB,CAAjB;AAEA,wBACE;AACE,MAAA,QAAQ,EAAEC,CAAC,IAAI;AACbA,QAAAA,CAAC,CAACC,cAAF;AACAH,QAAAA,YAAY,CAACE,CAAD,CAAZ;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAEvB,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAOE,oBAAC,kBAAD;AACE,MAAA,EAAE,EAAC,0BADL;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAC,YAHR;AAIE,MAAA,WAAW,EAAC,0BAJd;AAKE,MAAA,cAAc,EAAED,iBALlB;AAME,MAAA,QAAQ,EAAEuB,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAkBD,GAxBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;MAAMH,a;AA6BN,OAAO,MAAMM,WAAW,GAAG;AACzBb,EAAAA,SAAS,EAAEO,aADc;AAEzBN,EAAAA,KAAK,EAAE;AACLb,IAAAA,QAAQ,EAAE0B,SAAS,IAAI;AACrB,UAAIA,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAACC,MAAV,CAAiB1B,KAAzC,EAAgD;AAC9CC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuB,SAAS,CAACC,MAAjD;AACD;AACF,KALI;AAMLC,IAAAA,QAAQ,EAAED,MAAM,IAAI;AAClBzB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CwB,MAA7C;AACA,aAAO,KAAP;AACD;AATI,GAFkB;AAazBb,EAAAA,KAAK,EAAE;AAbkB,CAApB","sourcesContent":["/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\nimport { IntlProvider } from '../../util/reactIntl';\r\nimport { currencyConfig } from '../../util/test-data';\r\nimport * as validators from '../../util/validators';\r\nimport FieldCurrencyInput, { CurrencyInput } from './FieldCurrencyInput';\r\n\r\nconst currencyConfigUSD = {\r\n  ...currencyConfig,\r\n  currency: 'USD',\r\n};\r\n\r\nconst currencyConfigEUR = {\r\n  ...currencyConfig,\r\n  currency: 'EUR',\r\n};\r\n\r\n// eslint-disable-next-line no-console\r\nconst onChange = price => console.log('CurrencyInput - value:', price);\r\n\r\n// Different locales need to be initialized before their currency formatting is in use\r\nconst CurrencyInputWithIntl = ({ locale, ...rest }) => {\r\n  return (\r\n    <IntlProvider locale={locale} textComponent=\"span\">\r\n      <CurrencyInput {...rest} input={{ onChange }} />\r\n    </IntlProvider>\r\n  );\r\n};\r\n\r\nconst { object, string } = PropTypes;\r\n\r\nCurrencyInputWithIntl.propTypes = {\r\n  currencyConfig: object.isRequired,\r\n  locale: string.isRequired,\r\n};\r\n\r\nexport const EmptyWithEnUSD = {\r\n  component: CurrencyInputWithIntl,\r\n  props: {\r\n    currencyConfig: currencyConfigUSD,\r\n    locale: 'en',\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const defaultValueWithEnUSD = {\r\n  component: CurrencyInputWithIntl,\r\n  props: {\r\n    currencyConfig: currencyConfigUSD,\r\n    locale: 'en',\r\n    defaultValue: 9999.99,\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const EmptyWithFiEUR = {\r\n  component: CurrencyInputWithIntl,\r\n  props: {\r\n    currencyConfig: currencyConfigEUR,\r\n    locale: 'fi',\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const defaultValueWithFiEUR = {\r\n  component: CurrencyInputWithIntl,\r\n  props: {\r\n    currencyConfig: currencyConfigEUR,\r\n    locale: 'fi',\r\n    defaultValue: 9999.99,\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nconst FormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const { handleSubmit, onChange } = fieldRenderProps;\r\n      const required = validators.required('This field is required');\r\n\r\n      return (\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            handleSubmit(e);\r\n          }}\r\n        >\r\n          <FormSpy onChange={onChange} />\r\n          <FieldCurrencyInput\r\n            id=\"FieldCurrencyInput.price\"\r\n            name=\"price\"\r\n            label=\"Set price:\"\r\n            placeholder=\"Type in amount in EUR...\"\r\n            currencyConfig={currencyConfigEUR}\r\n            validate={required}\r\n          />\r\n        </form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nexport const FieldInForm = {\r\n  component: FormComponent,\r\n  props: {\r\n    onChange: formState => {\r\n      if (formState.values && formState.values.price) {\r\n        console.log('form values changed to:', formState.values);\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('FieldInForm submitted values:', values);\r\n      return false;\r\n    },\r\n  },\r\n  group: 'inputs',\r\n};\r\n"]},"metadata":{},"sourceType":"module"}