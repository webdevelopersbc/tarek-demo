{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SearchMap\\\\SearchMap.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, number, string, shape, object } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { createResourceLocatorString } from '../../../util/routes';\nimport { createSlug } from '../../../util/urlHelpers';\nimport { propTypes } from '../../../util/types';\nimport { obfuscatedCoordinates } from '../../../util/maps';\nimport { hasParentWithClassName } from './SearchMap.helpers.js';\nimport * as searchMapMapbox from './SearchMapWithMapbox';\nimport * as searchMapGoogleMaps from './SearchMapWithGoogleMaps';\nimport ReusableMapContainer from './ReusableMapContainer';\nimport css from './SearchMap.module.css';\nconst REUSABLE_MAP_HIDDEN_HANDLE = 'reusableMapHidden';\nconst isGoogleMapsInUse = config.maps.mapProvider === 'GOOGLE_MAPS';\nconst searchMapVariant = isGoogleMapsInUse ? searchMapGoogleMaps : searchMapMapbox;\nconst LABEL_HANDLE = searchMapVariant.LABEL_HANDLE;\nconst INFO_CARD_HANDLE = searchMapVariant.INFO_CARD_HANDLE;\nconst fitMapToBounds = searchMapVariant.fitMapToBounds;\nconst SearchMapVariantComponent = searchMapVariant.default;\nconst isMapsLibLoaded = searchMapVariant.isMapsLibLoaded;\nconst getMapBounds = searchMapVariant.getMapBounds;\nconst getMapCenter = searchMapVariant.getMapCenter;\n\nconst withCoordinatesObfuscated = listings => {\n  return listings.map(listing => {\n    const {\n      id,\n      attributes,\n      ...rest\n    } = listing;\n    const origGeolocation = attributes.geolocation;\n    const cacheKey = id ? `${id.uuid}_${origGeolocation.lat}_${origGeolocation.lng}` : null;\n    const geolocation = obfuscatedCoordinates(origGeolocation, cacheKey);\n    return {\n      id,\n      ...rest,\n      attributes: { ...attributes,\n        geolocation\n      }\n    };\n  });\n};\n\nexport class SearchMapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.listings = [];\n    this.mapRef = null;\n    let mapReattachmentCount = 0;\n\n    if (typeof window !== 'undefined') {\n      if (window.mapReattachmentCount) {\n        mapReattachmentCount = window.mapReattachmentCount;\n      } else {\n        window.mapReattachmentCount = 0;\n      }\n    }\n\n    this.state = {\n      infoCardOpen: null,\n      mapReattachmentCount\n    };\n    this.createURLToListing = this.createURLToListing.bind(this);\n    this.onListingInfoCardClicked = this.onListingInfoCardClicked.bind(this);\n    this.onListingClicked = this.onListingClicked.bind(this);\n    this.onMapClicked = this.onMapClicked.bind(this);\n    this.onMapLoadHandler = this.onMapLoadHandler.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.listings = [];\n  }\n\n  createURLToListing(listing) {\n    const routes = routeConfiguration();\n    const id = listing.id.uuid;\n    const slug = createSlug(listing.attributes.title);\n    const pathParams = {\n      id,\n      slug\n    };\n    return createResourceLocatorString('ListingPage', routes, pathParams, {});\n  }\n\n  onListingClicked(listings) {\n    this.setState({\n      infoCardOpen: listings\n    });\n  }\n\n  onListingInfoCardClicked(listing) {\n    if (this.props.onCloseAsModal) {\n      this.props.onCloseAsModal();\n    } // To avoid full page refresh we need to use internal router\n\n\n    const history = this.props.history;\n    history.push(this.createURLToListing(listing));\n  }\n\n  onMapClicked(e) {\n    // Close open listing popup / infobox, unless the click is attached to a price label\n    const labelClicked = hasParentWithClassName(e.nativeEvent.target, LABEL_HANDLE);\n    const infoCardClicked = hasParentWithClassName(e.nativeEvent.target, INFO_CARD_HANDLE);\n\n    if (this.state.infoCardOpen != null && !labelClicked && !infoCardClicked) {\n      this.setState({\n        infoCardOpen: null\n      });\n    }\n  }\n\n  onMapLoadHandler(map) {\n    this.mapRef = map;\n\n    if (this.mapRef && this.state.mapReattachmentCount === 0) {\n      // map is ready, let's fit search area's bounds to map's viewport\n      fitMapToBounds(this.mapRef, this.props.bounds, {\n        padding: 0,\n        isAutocompleteSearch: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      rootClassName,\n      reusableContainerClassName,\n      bounds,\n      center,\n      location,\n      listings: originalListings,\n      onMapMoveEnd,\n      zoom,\n      mapsConfig,\n      activeListingId,\n      messages\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const listingsWithLocation = originalListings.filter(l => !!l.attributes.geolocation);\n    const listings = mapsConfig.fuzzy.enabled ? withCoordinatesObfuscated(listingsWithLocation) : listingsWithLocation;\n    const infoCardOpen = this.state.infoCardOpen;\n\n    const forceUpdateHandler = () => {\n      // Update global reattachement count\n      window.mapReattachmentCount += 1; // Initiate rerendering\n\n      this.setState({\n        mapReattachmentCount: window.mapReattachmentCount\n      });\n    };\n\n    return isMapsLibLoaded() ? /*#__PURE__*/React.createElement(ReusableMapContainer, {\n      className: reusableContainerClassName,\n      reusableMapHiddenHandle: REUSABLE_MAP_HIDDEN_HANDLE,\n      onReattach: forceUpdateHandler,\n      messages: messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SearchMapVariantComponent, {\n      id: id,\n      className: classes,\n      bounds: bounds,\n      center: center,\n      location: location,\n      infoCardOpen: infoCardOpen,\n      listings: listings,\n      activeListingId: activeListingId,\n      mapComponentRefreshToken: this.state.mapReattachmentCount,\n      createURLToListing: this.createURLToListing,\n      onClick: this.onMapClicked,\n      onListingClicked: this.onListingClicked,\n      onListingInfoCardClicked: this.onListingInfoCardClicked,\n      onMapLoad: this.onMapLoadHandler,\n      onMapMoveEnd: onMapMoveEnd,\n      reusableMapHiddenHandle: REUSABLE_MAP_HIDDEN_HANDLE,\n      zoom: zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\nSearchMapComponent.defaultProps = {\n  id: 'searchMap',\n  className: null,\n  rootClassName: null,\n  mapRootClassName: null,\n  reusableContainerClassName: null,\n  bounds: null,\n  center: null,\n  activeListingId: null,\n  listings: [],\n  onCloseAsModal: null,\n  zoom: 11,\n  mapsConfig: config.maps\n};\nSearchMapComponent.propTypes = {\n  id: string,\n  className: string,\n  rootClassName: string,\n  mapRootClassName: string,\n  reusableContainerClassName: string,\n  bounds: propTypes.latlngBounds,\n  center: propTypes.latlng,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  activeListingId: propTypes.uuid,\n  listings: arrayOf(propTypes.listing),\n  onCloseAsModal: func,\n  onMapMoveEnd: func.isRequired,\n  zoom: number,\n  mapsConfig: object,\n  messages: object.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nconst SearchMap = withRouter(SearchMapComponent);\n_c = SearchMap;\nSearchMap.getMapBounds = getMapBounds;\nSearchMap.getMapCenter = getMapCenter;\nexport default SearchMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchMap\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SearchMap/SearchMap.js"],"names":["React","Component","arrayOf","func","number","string","shape","object","withRouter","classNames","config","routeConfiguration","createResourceLocatorString","createSlug","propTypes","obfuscatedCoordinates","hasParentWithClassName","searchMapMapbox","searchMapGoogleMaps","ReusableMapContainer","css","REUSABLE_MAP_HIDDEN_HANDLE","isGoogleMapsInUse","maps","mapProvider","searchMapVariant","LABEL_HANDLE","INFO_CARD_HANDLE","fitMapToBounds","SearchMapVariantComponent","default","isMapsLibLoaded","getMapBounds","getMapCenter","withCoordinatesObfuscated","listings","map","listing","id","attributes","rest","origGeolocation","geolocation","cacheKey","uuid","lat","lng","SearchMapComponent","constructor","props","mapRef","mapReattachmentCount","window","state","infoCardOpen","createURLToListing","bind","onListingInfoCardClicked","onListingClicked","onMapClicked","onMapLoadHandler","componentWillUnmount","routes","slug","title","pathParams","setState","onCloseAsModal","history","push","e","labelClicked","nativeEvent","target","infoCardClicked","bounds","padding","isAutocompleteSearch","render","className","rootClassName","reusableContainerClassName","center","location","originalListings","onMapMoveEnd","zoom","mapsConfig","activeListingId","messages","classes","root","listingsWithLocation","filter","l","fuzzy","enabled","forceUpdateHandler","defaultProps","mapRootClassName","latlngBounds","latlng","search","isRequired","SearchMap"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, func, number, string, shape, object } from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport routeConfiguration from '../../../routing/routeConfiguration';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\nimport { createSlug } from '../../../util/urlHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { obfuscatedCoordinates } from '../../../util/maps';\r\n\r\nimport { hasParentWithClassName } from './SearchMap.helpers.js';\r\nimport * as searchMapMapbox from './SearchMapWithMapbox';\r\nimport * as searchMapGoogleMaps from './SearchMapWithGoogleMaps';\r\nimport ReusableMapContainer from './ReusableMapContainer';\r\nimport css from './SearchMap.module.css';\r\n\r\nconst REUSABLE_MAP_HIDDEN_HANDLE = 'reusableMapHidden';\r\n\r\nconst isGoogleMapsInUse = config.maps.mapProvider === 'GOOGLE_MAPS';\r\nconst searchMapVariant = isGoogleMapsInUse ? searchMapGoogleMaps : searchMapMapbox;\r\nconst LABEL_HANDLE = searchMapVariant.LABEL_HANDLE;\r\nconst INFO_CARD_HANDLE = searchMapVariant.INFO_CARD_HANDLE;\r\nconst fitMapToBounds = searchMapVariant.fitMapToBounds;\r\nconst SearchMapVariantComponent = searchMapVariant.default;\r\nconst isMapsLibLoaded = searchMapVariant.isMapsLibLoaded;\r\nconst getMapBounds = searchMapVariant.getMapBounds;\r\nconst getMapCenter = searchMapVariant.getMapCenter;\r\n\r\nconst withCoordinatesObfuscated = listings => {\r\n  return listings.map(listing => {\r\n    const { id, attributes, ...rest } = listing;\r\n    const origGeolocation = attributes.geolocation;\r\n    const cacheKey = id ? `${id.uuid}_${origGeolocation.lat}_${origGeolocation.lng}` : null;\r\n    const geolocation = obfuscatedCoordinates(origGeolocation, cacheKey);\r\n    return {\r\n      id,\r\n      ...rest,\r\n      attributes: {\r\n        ...attributes,\r\n        geolocation,\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\nexport class SearchMapComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.listings = [];\r\n    this.mapRef = null;\r\n\r\n    let mapReattachmentCount = 0;\r\n\r\n    if (typeof window !== 'undefined') {\r\n      if (window.mapReattachmentCount) {\r\n        mapReattachmentCount = window.mapReattachmentCount;\r\n      } else {\r\n        window.mapReattachmentCount = 0;\r\n      }\r\n    }\r\n\r\n    this.state = { infoCardOpen: null, mapReattachmentCount };\r\n\r\n    this.createURLToListing = this.createURLToListing.bind(this);\r\n    this.onListingInfoCardClicked = this.onListingInfoCardClicked.bind(this);\r\n    this.onListingClicked = this.onListingClicked.bind(this);\r\n    this.onMapClicked = this.onMapClicked.bind(this);\r\n    this.onMapLoadHandler = this.onMapLoadHandler.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.listings = [];\r\n  }\r\n\r\n  createURLToListing(listing) {\r\n    const routes = routeConfiguration();\r\n\r\n    const id = listing.id.uuid;\r\n    const slug = createSlug(listing.attributes.title);\r\n    const pathParams = { id, slug };\r\n\r\n    return createResourceLocatorString('ListingPage', routes, pathParams, {});\r\n  }\r\n\r\n  onListingClicked(listings) {\r\n    this.setState({ infoCardOpen: listings });\r\n  }\r\n\r\n  onListingInfoCardClicked(listing) {\r\n    if (this.props.onCloseAsModal) {\r\n      this.props.onCloseAsModal();\r\n    }\r\n\r\n    // To avoid full page refresh we need to use internal router\r\n    const history = this.props.history;\r\n    history.push(this.createURLToListing(listing));\r\n  }\r\n\r\n  onMapClicked(e) {\r\n    // Close open listing popup / infobox, unless the click is attached to a price label\r\n    const labelClicked = hasParentWithClassName(e.nativeEvent.target, LABEL_HANDLE);\r\n    const infoCardClicked = hasParentWithClassName(e.nativeEvent.target, INFO_CARD_HANDLE);\r\n    if (this.state.infoCardOpen != null && !labelClicked && !infoCardClicked) {\r\n      this.setState({ infoCardOpen: null });\r\n    }\r\n  }\r\n\r\n  onMapLoadHandler(map) {\r\n    this.mapRef = map;\r\n\r\n    if (this.mapRef && this.state.mapReattachmentCount === 0) {\r\n      // map is ready, let's fit search area's bounds to map's viewport\r\n      fitMapToBounds(this.mapRef, this.props.bounds, { padding: 0, isAutocompleteSearch: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      rootClassName,\r\n      reusableContainerClassName,\r\n      bounds,\r\n      center,\r\n      location,\r\n      listings: originalListings,\r\n      onMapMoveEnd,\r\n      zoom,\r\n      mapsConfig,\r\n      activeListingId,\r\n      messages,\r\n    } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const listingsWithLocation = originalListings.filter(l => !!l.attributes.geolocation);\r\n    const listings = mapsConfig.fuzzy.enabled\r\n      ? withCoordinatesObfuscated(listingsWithLocation)\r\n      : listingsWithLocation;\r\n    const infoCardOpen = this.state.infoCardOpen;\r\n\r\n    const forceUpdateHandler = () => {\r\n      // Update global reattachement count\r\n      window.mapReattachmentCount += 1;\r\n      // Initiate rerendering\r\n      this.setState({ mapReattachmentCount: window.mapReattachmentCount });\r\n    };\r\n\r\n    return isMapsLibLoaded() ? (\r\n      <ReusableMapContainer\r\n        className={reusableContainerClassName}\r\n        reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\r\n        onReattach={forceUpdateHandler}\r\n        messages={messages}\r\n      >\r\n        <SearchMapVariantComponent\r\n          id={id}\r\n          className={classes}\r\n          bounds={bounds}\r\n          center={center}\r\n          location={location}\r\n          infoCardOpen={infoCardOpen}\r\n          listings={listings}\r\n          activeListingId={activeListingId}\r\n          mapComponentRefreshToken={this.state.mapReattachmentCount}\r\n          createURLToListing={this.createURLToListing}\r\n          onClick={this.onMapClicked}\r\n          onListingClicked={this.onListingClicked}\r\n          onListingInfoCardClicked={this.onListingInfoCardClicked}\r\n          onMapLoad={this.onMapLoadHandler}\r\n          onMapMoveEnd={onMapMoveEnd}\r\n          reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\r\n          zoom={zoom}\r\n        />\r\n      </ReusableMapContainer>\r\n    ) : (\r\n      <div className={classes} />\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapComponent.defaultProps = {\r\n  id: 'searchMap',\r\n  className: null,\r\n  rootClassName: null,\r\n  mapRootClassName: null,\r\n  reusableContainerClassName: null,\r\n  bounds: null,\r\n  center: null,\r\n  activeListingId: null,\r\n  listings: [],\r\n  onCloseAsModal: null,\r\n  zoom: 11,\r\n  mapsConfig: config.maps,\r\n};\r\n\r\nSearchMapComponent.propTypes = {\r\n  id: string,\r\n  className: string,\r\n  rootClassName: string,\r\n  mapRootClassName: string,\r\n  reusableContainerClassName: string,\r\n  bounds: propTypes.latlngBounds,\r\n  center: propTypes.latlng,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n  activeListingId: propTypes.uuid,\r\n  listings: arrayOf(propTypes.listing),\r\n  onCloseAsModal: func,\r\n  onMapMoveEnd: func.isRequired,\r\n  zoom: number,\r\n  mapsConfig: object,\r\n  messages: object.isRequired,\r\n\r\n  // from withRouter\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst SearchMap = withRouter(SearchMapComponent);\r\n\r\nSearchMap.getMapBounds = getMapBounds;\r\nSearchMap.getMapCenter = getMapCenter;\r\n\r\nexport default SearchMap;\r\n"]},"metadata":{},"sourceType":"module"}