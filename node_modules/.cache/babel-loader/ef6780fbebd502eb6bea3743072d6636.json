{"ast":null,"code":"// This file deals with Flex API which will create Stripe Custom Connect accounts\n// from given bank_account tokens.\nimport config from '../config';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log'; // ================ Action types ================ //\n\nexport const STRIPE_ACCOUNT_CREATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_CREATE_REQUEST';\nexport const STRIPE_ACCOUNT_CREATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_CREATE_SUCCESS';\nexport const STRIPE_ACCOUNT_CREATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_CREATE_ERROR';\nexport const STRIPE_ACCOUNT_UPDATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_UPDATE_REQUEST';\nexport const STRIPE_ACCOUNT_UPDATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_UPDATE_SUCCESS';\nexport const STRIPE_ACCOUNT_UPDATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_UPDATE_ERROR';\nexport const STRIPE_ACCOUNT_FETCH_REQUEST = 'app/stripe/STRIPE_ACCOUNT_FETCH_REQUEST';\nexport const STRIPE_ACCOUNT_FETCH_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_FETCH_SUCCESS';\nexport const STRIPE_ACCOUNT_FETCH_ERROR = 'app/stripe/STRIPE_ACCOUNT_FETCH_ERROR';\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\nexport const GET_ACCOUNT_LINK_REQUEST = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_REQUEST';\nexport const GET_ACCOUNT_LINK_SUCCESS = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_SUCCESS';\nexport const GET_ACCOUNT_LINK_ERROR = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  createStripeAccountInProgress: false,\n  createStripeAccountError: null,\n  updateStripeAccountInProgress: false,\n  updateStripeAccountError: null,\n  fetchStripeAccountInProgress: false,\n  fetchStripeAccountError: null,\n  getAccountLinkInProgress: false,\n  getAccountLinkError: null,\n  stripeAccount: null,\n  stripeAccountFetched: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case STRIPE_ACCOUNT_CREATE_REQUEST:\n      return { ...state,\n        createStripeAccountError: null,\n        createStripeAccountInProgress: true\n      };\n\n    case STRIPE_ACCOUNT_CREATE_SUCCESS:\n      return { ...state,\n        createStripeAccountInProgress: false,\n        stripeAccount: payload,\n        stripeAccountFetched: true\n      };\n\n    case STRIPE_ACCOUNT_CREATE_ERROR:\n      console.error(payload);\n      return { ...state,\n        createStripeAccountError: payload,\n        createStripeAccountInProgress: false\n      };\n\n    case STRIPE_ACCOUNT_UPDATE_REQUEST:\n      return { ...state,\n        updateStripeAccountError: null,\n        updateStripeAccountInProgress: true\n      };\n\n    case STRIPE_ACCOUNT_UPDATE_SUCCESS:\n      return { ...state,\n        updateStripeAccountInProgress: false,\n        stripeAccount: payload,\n        stripeAccountFetched: true\n      };\n\n    case STRIPE_ACCOUNT_UPDATE_ERROR:\n      console.error(payload);\n      return { ...state,\n        updateStripeAccountError: payload,\n        createStripeAccountInProgress: false\n      };\n\n    case STRIPE_ACCOUNT_FETCH_REQUEST:\n      return { ...state,\n        fetchStripeAccountError: null,\n        fetchStripeAccountInProgress: true\n      };\n\n    case STRIPE_ACCOUNT_FETCH_SUCCESS:\n      return { ...state,\n        fetchStripeAccountInProgress: false,\n        stripeAccount: payload,\n        stripeAccountFetched: true\n      };\n\n    case STRIPE_ACCOUNT_FETCH_ERROR:\n      console.error(payload);\n      return { ...state,\n        fetchStripeAccountError: payload,\n        fetchStripeAccountInProgress: false\n      };\n\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\n      return { ...initialState\n      };\n\n    case GET_ACCOUNT_LINK_REQUEST:\n      return { ...state,\n        getAccountLinkError: null,\n        getAccountLinkInProgress: true\n      };\n\n    case GET_ACCOUNT_LINK_ERROR:\n      console.error(payload);\n      return { ...state,\n        getAccountLinkInProgress: false,\n        getAccountLinkError: payload\n      };\n\n    case GET_ACCOUNT_LINK_SUCCESS:\n      return { ...state,\n        getAccountLinkInProgress: false\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const stripeAccountCreateRequest = () => ({\n  type: STRIPE_ACCOUNT_CREATE_REQUEST\n});\nexport const stripeAccountCreateSuccess = stripeAccount => ({\n  type: STRIPE_ACCOUNT_CREATE_SUCCESS,\n  payload: stripeAccount\n});\nexport const stripeAccountCreateError = e => ({\n  type: STRIPE_ACCOUNT_CREATE_ERROR,\n  payload: e,\n  error: true\n});\nexport const stripeAccountUpdateRequest = () => ({\n  type: STRIPE_ACCOUNT_UPDATE_REQUEST\n});\nexport const stripeAccountUpdateSuccess = stripeAccount => ({\n  type: STRIPE_ACCOUNT_UPDATE_SUCCESS,\n  payload: stripeAccount\n});\nexport const stripeAccountUpdateError = e => ({\n  type: STRIPE_ACCOUNT_UPDATE_ERROR,\n  payload: e,\n  error: true\n});\nexport const stripeAccountFetchRequest = () => ({\n  type: STRIPE_ACCOUNT_FETCH_REQUEST\n});\nexport const stripeAccountFetchSuccess = stripeAccount => ({\n  type: STRIPE_ACCOUNT_FETCH_SUCCESS,\n  payload: stripeAccount\n});\nexport const stripeAccountFetchError = e => ({\n  type: STRIPE_ACCOUNT_FETCH_ERROR,\n  payload: e,\n  error: true\n});\nexport const stripeAccountClearError = () => ({\n  type: STRIPE_ACCOUNT_CLEAR_ERROR\n});\nexport const getAccountLinkRequest = () => ({\n  type: GET_ACCOUNT_LINK_REQUEST\n});\nexport const getAccountLinkError = e => ({\n  type: GET_ACCOUNT_LINK_ERROR,\n  payload: e,\n  error: true\n});\nexport const getAccountLinkSuccess = () => ({\n  type: GET_ACCOUNT_LINK_SUCCESS\n}); // ================ Thunks ================ //\n\nexport const createStripeAccount = params => (dispatch, getState, sdk) => {\n  if (typeof window === 'undefined' || !window.Stripe) {\n    throw new Error('Stripe must be loaded for submitting PayoutPreferences');\n  }\n\n  const stripe = window.Stripe(config.stripe.publishableKey);\n  const {\n    country,\n    accountType,\n    bankAccountToken,\n    businessProfileMCC,\n    businessProfileURL\n  } = params; // Capabilities are a collection of settings that can be requested for each provider.\n  // What Capabilities are required determines what information Stripe requires to be\n  // collected from the providers.\n  // You can read more from here: https://stripe.com/docs/connect/capabilities-overview\n  // In Flex both 'card_payments' and 'transfers' are required.\n\n  const requestedCapabilities = ['card_payments', 'transfers'];\n  const accountInfo = {\n    business_type: accountType,\n    tos_shown_and_accepted: true\n  };\n  dispatch(stripeAccountCreateRequest());\n  return stripe.createToken('account', accountInfo).then(response => {\n    const accountToken = response.token.id;\n    return sdk.stripeAccount.create({\n      country,\n      accountToken,\n      bankAccountToken,\n      requestedCapabilities,\n      businessProfileMCC,\n      businessProfileURL\n    }, {\n      expand: true\n    });\n  }).then(response => {\n    const stripeAccount = response.data.data;\n    dispatch(stripeAccountCreateSuccess(stripeAccount));\n    return stripeAccount;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountCreateError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'create-stripe-account-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n}; // This function is used for updating the bank account token\n// but could be expanded to other information as well.\n//\n// If the Stripe account has been created with account token,\n// you need to use account token also to update the account.\n// By default the account token will not be used.\n// See API reference for more information:\n// https://www.sharetribe.com/api-reference/?javascript#update-stripe-account\n\nexport const updateStripeAccount = params => (dispatch, getState, sdk) => {\n  const bankAccountToken = params.bankAccountToken;\n  dispatch(stripeAccountUpdateRequest());\n  return sdk.stripeAccount.update({\n    bankAccountToken,\n    requestedCapabilities: ['card_payments', 'transfers']\n  }, {\n    expand: true\n  }).then(response => {\n    const stripeAccount = response.data.data;\n    dispatch(stripeAccountUpdateSuccess(stripeAccount));\n    return stripeAccount;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountUpdateError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'update-stripe-account-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n};\nexport const fetchStripeAccount = params => (dispatch, getState, sdk) => {\n  dispatch(stripeAccountFetchRequest());\n  return sdk.stripeAccount.fetch().then(response => {\n    const stripeAccount = response.data.data;\n    dispatch(stripeAccountFetchSuccess(stripeAccount));\n    return stripeAccount;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(stripeAccountFetchError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'fetch-stripe-account-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n};\nexport const getStripeConnectAccountLink = params => (dispatch, getState, sdk) => {\n  const {\n    failureURL,\n    successURL,\n    type\n  } = params;\n  dispatch(getAccountLinkRequest());\n  return sdk.stripeAccountLinks.create({\n    failureURL,\n    successURL,\n    type,\n    collect: 'currently_due'\n  }).then(response => {\n    // Return the account link\n    return response.data.data.attributes.url;\n  }).catch(err => {\n    const e = storableError(err);\n    dispatch(getAccountLinkError(e));\n    const stripeMessage = e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta ? e.apiErrors[0].meta.stripeMessage : null;\n    log.error(err, 'get-stripe-account-link-failed', {\n      stripeMessage\n    });\n    throw e;\n  });\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/stripeConnectAccount.duck.js"],"names":["config","storableError","log","STRIPE_ACCOUNT_CREATE_REQUEST","STRIPE_ACCOUNT_CREATE_SUCCESS","STRIPE_ACCOUNT_CREATE_ERROR","STRIPE_ACCOUNT_UPDATE_REQUEST","STRIPE_ACCOUNT_UPDATE_SUCCESS","STRIPE_ACCOUNT_UPDATE_ERROR","STRIPE_ACCOUNT_FETCH_REQUEST","STRIPE_ACCOUNT_FETCH_SUCCESS","STRIPE_ACCOUNT_FETCH_ERROR","STRIPE_ACCOUNT_CLEAR_ERROR","GET_ACCOUNT_LINK_REQUEST","GET_ACCOUNT_LINK_SUCCESS","GET_ACCOUNT_LINK_ERROR","initialState","createStripeAccountInProgress","createStripeAccountError","updateStripeAccountInProgress","updateStripeAccountError","fetchStripeAccountInProgress","fetchStripeAccountError","getAccountLinkInProgress","getAccountLinkError","stripeAccount","stripeAccountFetched","reducer","state","action","type","payload","console","error","stripeAccountCreateRequest","stripeAccountCreateSuccess","stripeAccountCreateError","e","stripeAccountUpdateRequest","stripeAccountUpdateSuccess","stripeAccountUpdateError","stripeAccountFetchRequest","stripeAccountFetchSuccess","stripeAccountFetchError","stripeAccountClearError","getAccountLinkRequest","getAccountLinkSuccess","createStripeAccount","params","dispatch","getState","sdk","window","Stripe","Error","stripe","publishableKey","country","accountType","bankAccountToken","businessProfileMCC","businessProfileURL","requestedCapabilities","accountInfo","business_type","tos_shown_and_accepted","createToken","then","response","accountToken","token","id","create","expand","data","catch","err","stripeMessage","apiErrors","length","meta","updateStripeAccount","update","fetchStripeAccount","fetch","getStripeConnectAccountLink","failureURL","successURL","stripeAccountLinks","collect","attributes","url"],"mappings":"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","sourcesContent":["// This file deals with Flex API which will create Stripe Custom Connect accounts\r\n// from given bank_account tokens.\r\nimport config from '../config';\r\nimport { storableError } from '../util/errors';\r\nimport * as log from '../util/log';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const STRIPE_ACCOUNT_CREATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_CREATE_REQUEST';\r\nexport const STRIPE_ACCOUNT_CREATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_CREATE_SUCCESS';\r\nexport const STRIPE_ACCOUNT_CREATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_CREATE_ERROR';\r\n\r\nexport const STRIPE_ACCOUNT_UPDATE_REQUEST = 'app/stripe/STRIPE_ACCOUNT_UPDATE_REQUEST';\r\nexport const STRIPE_ACCOUNT_UPDATE_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_UPDATE_SUCCESS';\r\nexport const STRIPE_ACCOUNT_UPDATE_ERROR = 'app/stripe/STRIPE_ACCOUNT_UPDATE_ERROR';\r\n\r\nexport const STRIPE_ACCOUNT_FETCH_REQUEST = 'app/stripe/STRIPE_ACCOUNT_FETCH_REQUEST';\r\nexport const STRIPE_ACCOUNT_FETCH_SUCCESS = 'app/stripe/STRIPE_ACCOUNT_FETCH_SUCCESS';\r\nexport const STRIPE_ACCOUNT_FETCH_ERROR = 'app/stripe/STRIPE_ACCOUNT_FETCH_ERROR';\r\n\r\nexport const STRIPE_ACCOUNT_CLEAR_ERROR = 'app/stripe/STRIPE_ACCOUNT_CLEAR_ERROR';\r\n\r\nexport const GET_ACCOUNT_LINK_REQUEST = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_REQUEST';\r\nexport const GET_ACCOUNT_LINK_SUCCESS = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_SUCCESS';\r\nexport const GET_ACCOUNT_LINK_ERROR = 'app/stripeConnectAccount.duck.js/GET_ACCOUNT_LINK_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  createStripeAccountInProgress: false,\r\n  createStripeAccountError: null,\r\n  updateStripeAccountInProgress: false,\r\n  updateStripeAccountError: null,\r\n  fetchStripeAccountInProgress: false,\r\n  fetchStripeAccountError: null,\r\n  getAccountLinkInProgress: false,\r\n  getAccountLinkError: null,\r\n  stripeAccount: null,\r\n  stripeAccountFetched: false,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case STRIPE_ACCOUNT_CREATE_REQUEST:\r\n      return { ...state, createStripeAccountError: null, createStripeAccountInProgress: true };\r\n    case STRIPE_ACCOUNT_CREATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        createStripeAccountInProgress: false,\r\n        stripeAccount: payload,\r\n        stripeAccountFetched: true,\r\n      };\r\n    case STRIPE_ACCOUNT_CREATE_ERROR:\r\n      console.error(payload);\r\n      return { ...state, createStripeAccountError: payload, createStripeAccountInProgress: false };\r\n\r\n    case STRIPE_ACCOUNT_UPDATE_REQUEST:\r\n      return { ...state, updateStripeAccountError: null, updateStripeAccountInProgress: true };\r\n    case STRIPE_ACCOUNT_UPDATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateStripeAccountInProgress: false,\r\n        stripeAccount: payload,\r\n        stripeAccountFetched: true,\r\n      };\r\n    case STRIPE_ACCOUNT_UPDATE_ERROR:\r\n      console.error(payload);\r\n      return { ...state, updateStripeAccountError: payload, createStripeAccountInProgress: false };\r\n\r\n    case STRIPE_ACCOUNT_FETCH_REQUEST:\r\n      return { ...state, fetchStripeAccountError: null, fetchStripeAccountInProgress: true };\r\n    case STRIPE_ACCOUNT_FETCH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetchStripeAccountInProgress: false,\r\n        stripeAccount: payload,\r\n        stripeAccountFetched: true,\r\n      };\r\n    case STRIPE_ACCOUNT_FETCH_ERROR:\r\n      console.error(payload);\r\n      return { ...state, fetchStripeAccountError: payload, fetchStripeAccountInProgress: false };\r\n\r\n    case STRIPE_ACCOUNT_CLEAR_ERROR:\r\n      return { ...initialState };\r\n\r\n    case GET_ACCOUNT_LINK_REQUEST:\r\n      return { ...state, getAccountLinkError: null, getAccountLinkInProgress: true };\r\n    case GET_ACCOUNT_LINK_ERROR:\r\n      console.error(payload);\r\n      return { ...state, getAccountLinkInProgress: false, getAccountLinkError: payload };\r\n    case GET_ACCOUNT_LINK_SUCCESS:\r\n      return { ...state, getAccountLinkInProgress: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const stripeAccountCreateRequest = () => ({ type: STRIPE_ACCOUNT_CREATE_REQUEST });\r\n\r\nexport const stripeAccountCreateSuccess = stripeAccount => ({\r\n  type: STRIPE_ACCOUNT_CREATE_SUCCESS,\r\n  payload: stripeAccount,\r\n});\r\n\r\nexport const stripeAccountCreateError = e => ({\r\n  type: STRIPE_ACCOUNT_CREATE_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const stripeAccountUpdateRequest = () => ({ type: STRIPE_ACCOUNT_UPDATE_REQUEST });\r\n\r\nexport const stripeAccountUpdateSuccess = stripeAccount => ({\r\n  type: STRIPE_ACCOUNT_UPDATE_SUCCESS,\r\n  payload: stripeAccount,\r\n});\r\n\r\nexport const stripeAccountUpdateError = e => ({\r\n  type: STRIPE_ACCOUNT_UPDATE_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const stripeAccountFetchRequest = () => ({ type: STRIPE_ACCOUNT_FETCH_REQUEST });\r\n\r\nexport const stripeAccountFetchSuccess = stripeAccount => ({\r\n  type: STRIPE_ACCOUNT_FETCH_SUCCESS,\r\n  payload: stripeAccount,\r\n});\r\n\r\nexport const stripeAccountFetchError = e => ({\r\n  type: STRIPE_ACCOUNT_FETCH_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const stripeAccountClearError = () => ({\r\n  type: STRIPE_ACCOUNT_CLEAR_ERROR,\r\n});\r\n\r\nexport const getAccountLinkRequest = () => ({\r\n  type: GET_ACCOUNT_LINK_REQUEST,\r\n});\r\nexport const getAccountLinkError = e => ({\r\n  type: GET_ACCOUNT_LINK_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\nexport const getAccountLinkSuccess = () => ({\r\n  type: GET_ACCOUNT_LINK_SUCCESS,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const createStripeAccount = params => (dispatch, getState, sdk) => {\r\n  if (typeof window === 'undefined' || !window.Stripe) {\r\n    throw new Error('Stripe must be loaded for submitting PayoutPreferences');\r\n  }\r\n  const stripe = window.Stripe(config.stripe.publishableKey);\r\n\r\n  const { country, accountType, bankAccountToken, businessProfileMCC, businessProfileURL } = params;\r\n\r\n  // Capabilities are a collection of settings that can be requested for each provider.\r\n  // What Capabilities are required determines what information Stripe requires to be\r\n  // collected from the providers.\r\n  // You can read more from here: https://stripe.com/docs/connect/capabilities-overview\r\n  // In Flex both 'card_payments' and 'transfers' are required.\r\n  const requestedCapabilities = ['card_payments', 'transfers'];\r\n\r\n  const accountInfo = {\r\n    business_type: accountType,\r\n    tos_shown_and_accepted: true,\r\n  };\r\n\r\n  dispatch(stripeAccountCreateRequest());\r\n\r\n  return stripe\r\n    .createToken('account', accountInfo)\r\n    .then(response => {\r\n      const accountToken = response.token.id;\r\n      return sdk.stripeAccount.create(\r\n        {\r\n          country,\r\n          accountToken,\r\n          bankAccountToken,\r\n          requestedCapabilities,\r\n          businessProfileMCC,\r\n          businessProfileURL,\r\n        },\r\n        { expand: true }\r\n      );\r\n    })\r\n    .then(response => {\r\n      const stripeAccount = response.data.data;\r\n      dispatch(stripeAccountCreateSuccess(stripeAccount));\r\n      return stripeAccount;\r\n    })\r\n    .catch(err => {\r\n      const e = storableError(err);\r\n      dispatch(stripeAccountCreateError(e));\r\n      const stripeMessage =\r\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\r\n          ? e.apiErrors[0].meta.stripeMessage\r\n          : null;\r\n      log.error(err, 'create-stripe-account-failed', { stripeMessage });\r\n      throw e;\r\n    });\r\n};\r\n\r\n// This function is used for updating the bank account token\r\n// but could be expanded to other information as well.\r\n//\r\n// If the Stripe account has been created with account token,\r\n// you need to use account token also to update the account.\r\n// By default the account token will not be used.\r\n// See API reference for more information:\r\n// https://www.sharetribe.com/api-reference/?javascript#update-stripe-account\r\nexport const updateStripeAccount = params => (dispatch, getState, sdk) => {\r\n  const bankAccountToken = params.bankAccountToken;\r\n\r\n  dispatch(stripeAccountUpdateRequest());\r\n  return sdk.stripeAccount\r\n    .update(\r\n      { bankAccountToken, requestedCapabilities: ['card_payments', 'transfers'] },\r\n      { expand: true }\r\n    )\r\n    .then(response => {\r\n      const stripeAccount = response.data.data;\r\n      dispatch(stripeAccountUpdateSuccess(stripeAccount));\r\n      return stripeAccount;\r\n    })\r\n    .catch(err => {\r\n      const e = storableError(err);\r\n      dispatch(stripeAccountUpdateError(e));\r\n      const stripeMessage =\r\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\r\n          ? e.apiErrors[0].meta.stripeMessage\r\n          : null;\r\n      log.error(err, 'update-stripe-account-failed', { stripeMessage });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const fetchStripeAccount = params => (dispatch, getState, sdk) => {\r\n  dispatch(stripeAccountFetchRequest());\r\n\r\n  return sdk.stripeAccount\r\n    .fetch()\r\n    .then(response => {\r\n      const stripeAccount = response.data.data;\r\n      dispatch(stripeAccountFetchSuccess(stripeAccount));\r\n      return stripeAccount;\r\n    })\r\n    .catch(err => {\r\n      const e = storableError(err);\r\n      dispatch(stripeAccountFetchError(e));\r\n      const stripeMessage =\r\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\r\n          ? e.apiErrors[0].meta.stripeMessage\r\n          : null;\r\n      log.error(err, 'fetch-stripe-account-failed', { stripeMessage });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const getStripeConnectAccountLink = params => (dispatch, getState, sdk) => {\r\n  const { failureURL, successURL, type } = params;\r\n  dispatch(getAccountLinkRequest());\r\n\r\n  return sdk.stripeAccountLinks\r\n    .create({\r\n      failureURL,\r\n      successURL,\r\n      type,\r\n      collect: 'currently_due',\r\n    })\r\n    .then(response => {\r\n      // Return the account link\r\n      return response.data.data.attributes.url;\r\n    })\r\n    .catch(err => {\r\n      const e = storableError(err);\r\n      dispatch(getAccountLinkError(e));\r\n      const stripeMessage =\r\n        e.apiErrors && e.apiErrors.length > 0 && e.apiErrors[0].meta\r\n          ? e.apiErrors[0].meta.stripeMessage\r\n          : null;\r\n      log.error(err, 'get-stripe-account-link-failed', { stripeMessage });\r\n      throw e;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}