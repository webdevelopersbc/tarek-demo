{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\ProfileSettingsPage\\\\ProfileSettingsPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, UserNav, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer, NamedLink } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport ProfileSettingsForm from './ProfileSettingsForm/ProfileSettingsForm';\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\nimport css from './ProfileSettingsPage.module.css';\n\nconst onImageUploadHandler = (values, fn) => {\n  const {\n    id,\n    imageId,\n    file\n  } = values;\n\n  if (file) {\n    fn({\n      id,\n      imageId,\n      file\n    });\n  }\n};\n\nexport class ProfileSettingsPageComponent extends Component {\n  render() {\n    const {\n      currentUser,\n      image,\n      onImageUpload,\n      onUpdateProfile,\n      scrollingDisabled,\n      updateInProgress,\n      updateProfileError,\n      uploadImageError,\n      uploadInProgress,\n      intl\n    } = this.props;\n\n    const handleSubmit = values => {\n      const {\n        firstName,\n        lastName,\n        bio: rawBio\n      } = values; // Ensure that the optional bio is a string\n\n      const bio = rawBio || '';\n      const profile = {\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        bio\n      };\n      const uploadedImage = this.props.image; // Update profileImage only if file system has been accessed\n\n      const updatedValues = uploadedImage && uploadedImage.imageId && uploadedImage.file ? { ...profile,\n        profileImageId: uploadedImage.imageId\n      } : profile;\n      onUpdateProfile(updatedValues);\n    };\n\n    const user = ensureCurrentUser(currentUser);\n    const {\n      firstName,\n      lastName,\n      bio\n    } = user.attributes.profile;\n    const profileImageId = user.profileImage ? user.profileImage.id : null;\n    const profileImage = image || {\n      imageId: profileImageId\n    };\n    const profileSettingsForm = user.id ? /*#__PURE__*/React.createElement(ProfileSettingsForm, {\n      className: css.form,\n      currentUser: currentUser,\n      initialValues: {\n        firstName,\n        lastName,\n        bio,\n        profileImage: user.profileImage\n      },\n      profileImage: profileImage,\n      onImageUpload: e => onImageUploadHandler(e, onImageUpload),\n      uploadInProgress: uploadInProgress,\n      updateInProgress: updateInProgress,\n      uploadImageError: uploadImageError,\n      updateProfileError: updateProfileError,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }) : null;\n    const title = intl.formatMessage({\n      id: 'ProfileSettingsPage.title'\n    });\n    return /*#__PURE__*/React.createElement(Page, {\n      className: css.root,\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      currentPage: \"ProfileSettingsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(UserNav, {\n      selectedPageName: \"ProfileSettingsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.headingContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProfileSettingsPage.heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    })), user.id ? /*#__PURE__*/React.createElement(NamedLink, {\n      className: css.profileLink,\n      name: \"ProfilePage\",\n      params: {\n        id: user.id.uuid\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProfileSettingsPage.viewProfileLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })) : null), profileSettingsForm)), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nProfileSettingsPageComponent.defaultProps = {\n  currentUser: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  image: null\n};\nconst {\n  bool,\n  func,\n  object,\n  shape,\n  string\n} = PropTypes;\nProfileSettingsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  image: shape({\n    id: string,\n    imageId: propTypes.uuid,\n    file: object,\n    uploadedImage: propTypes.image\n  }),\n  onImageUpload: func.isRequired,\n  onUpdateProfile: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentUser\n  } = state.user;\n  const {\n    image,\n    uploadImageError,\n    uploadInProgress,\n    updateInProgress,\n    updateProfileError\n  } = state.ProfileSettingsPage;\n  return {\n    currentUser,\n    image,\n    scrollingDisabled: isScrollingDisabled(state),\n    updateInProgress,\n    updateProfileError,\n    uploadImageError,\n    uploadInProgress\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onImageUpload: data => dispatch(uploadImage(data)),\n  onUpdateProfile: data => dispatch(updateProfile(data))\n});\n\nconst ProfileSettingsPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(ProfileSettingsPageComponent);\nexport default ProfileSettingsPage;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ProfileSettingsPage/ProfileSettingsPage.js"],"names":["React","Component","PropTypes","compose","connect","FormattedMessage","injectIntl","intlShape","propTypes","ensureCurrentUser","isScrollingDisabled","Page","UserNav","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","NamedLink","TopbarContainer","ProfileSettingsForm","updateProfile","uploadImage","css","onImageUploadHandler","values","fn","id","imageId","file","ProfileSettingsPageComponent","render","currentUser","image","onImageUpload","onUpdateProfile","scrollingDisabled","updateInProgress","updateProfileError","uploadImageError","uploadInProgress","intl","props","handleSubmit","firstName","lastName","bio","rawBio","profile","trim","uploadedImage","updatedValues","profileImageId","user","attributes","profileImage","profileSettingsForm","form","e","title","formatMessage","root","content","headingContainer","heading","profileLink","uuid","defaultProps","bool","func","object","shape","string","isRequired","error","mapStateToProps","state","ProfileSettingsPage","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  Page,\r\n  UserNav,\r\n  LayoutSingleColumn,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  NamedLink,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport ProfileSettingsForm from './ProfileSettingsForm/ProfileSettingsForm';\r\n\r\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\r\nimport css from './ProfileSettingsPage.module.css';\r\n\r\nconst onImageUploadHandler = (values, fn) => {\r\n  const { id, imageId, file } = values;\r\n  if (file) {\r\n    fn({ id, imageId, file });\r\n  }\r\n};\r\n\r\nexport class ProfileSettingsPageComponent extends Component {\r\n  render() {\r\n    const {\r\n      currentUser,\r\n      image,\r\n      onImageUpload,\r\n      onUpdateProfile,\r\n      scrollingDisabled,\r\n      updateInProgress,\r\n      updateProfileError,\r\n      uploadImageError,\r\n      uploadInProgress,\r\n      intl,\r\n    } = this.props;\r\n\r\n    const handleSubmit = values => {\r\n      const { firstName, lastName, bio: rawBio } = values;\r\n\r\n      // Ensure that the optional bio is a string\r\n      const bio = rawBio || '';\r\n\r\n      const profile = {\r\n        firstName: firstName.trim(),\r\n        lastName: lastName.trim(),\r\n        bio,\r\n      };\r\n      const uploadedImage = this.props.image;\r\n\r\n      // Update profileImage only if file system has been accessed\r\n      const updatedValues =\r\n        uploadedImage && uploadedImage.imageId && uploadedImage.file\r\n          ? { ...profile, profileImageId: uploadedImage.imageId }\r\n          : profile;\r\n\r\n      onUpdateProfile(updatedValues);\r\n    };\r\n\r\n    const user = ensureCurrentUser(currentUser);\r\n    const { firstName, lastName, bio } = user.attributes.profile;\r\n    const profileImageId = user.profileImage ? user.profileImage.id : null;\r\n    const profileImage = image || { imageId: profileImageId };\r\n\r\n    const profileSettingsForm = user.id ? (\r\n      <ProfileSettingsForm\r\n        className={css.form}\r\n        currentUser={currentUser}\r\n        initialValues={{ firstName, lastName, bio, profileImage: user.profileImage }}\r\n        profileImage={profileImage}\r\n        onImageUpload={e => onImageUploadHandler(e, onImageUpload)}\r\n        uploadInProgress={uploadInProgress}\r\n        updateInProgress={updateInProgress}\r\n        uploadImageError={uploadImageError}\r\n        updateProfileError={updateProfileError}\r\n        onSubmit={handleSubmit}\r\n      />\r\n    ) : null;\r\n\r\n    const title = intl.formatMessage({ id: 'ProfileSettingsPage.title' });\r\n\r\n    return (\r\n      <Page className={css.root} title={title} scrollingDisabled={scrollingDisabled}>\r\n        <LayoutSingleColumn>\r\n          <LayoutWrapperTopbar>\r\n            <TopbarContainer currentPage=\"ProfileSettingsPage\" />\r\n            <UserNav selectedPageName=\"ProfileSettingsPage\" />\r\n          </LayoutWrapperTopbar>\r\n          <LayoutWrapperMain>\r\n            <div className={css.content}>\r\n              <div className={css.headingContainer}>\r\n                <h1 className={css.heading}>\r\n                  <FormattedMessage id=\"ProfileSettingsPage.heading\" />\r\n                </h1>\r\n                {user.id ? (\r\n                  <NamedLink\r\n                    className={css.profileLink}\r\n                    name=\"ProfilePage\"\r\n                    params={{ id: user.id.uuid }}\r\n                  >\r\n                    <FormattedMessage id=\"ProfileSettingsPage.viewProfileLink\" />\r\n                  </NamedLink>\r\n                ) : null}\r\n              </div>\r\n              {profileSettingsForm}\r\n            </div>\r\n          </LayoutWrapperMain>\r\n          <LayoutWrapperFooter>\r\n            <Footer />\r\n          </LayoutWrapperFooter>\r\n        </LayoutSingleColumn>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nProfileSettingsPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  uploadImageError: null,\r\n  updateProfileError: null,\r\n  image: null,\r\n};\r\n\r\nconst { bool, func, object, shape, string } = PropTypes;\r\n\r\nProfileSettingsPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  image: shape({\r\n    id: string,\r\n    imageId: propTypes.uuid,\r\n    file: object,\r\n    uploadedImage: propTypes.image,\r\n  }),\r\n  onImageUpload: func.isRequired,\r\n  onUpdateProfile: func.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  updateProfileError: propTypes.error,\r\n  uploadImageError: propTypes.error,\r\n  uploadInProgress: bool.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { currentUser } = state.user;\r\n  const {\r\n    image,\r\n    uploadImageError,\r\n    uploadInProgress,\r\n    updateInProgress,\r\n    updateProfileError,\r\n  } = state.ProfileSettingsPage;\r\n  return {\r\n    currentUser,\r\n    image,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    updateInProgress,\r\n    updateProfileError,\r\n    uploadImageError,\r\n    uploadInProgress,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onImageUpload: data => dispatch(uploadImage(data)),\r\n  onUpdateProfile: data => dispatch(updateProfile(data)),\r\n});\r\n\r\nconst ProfileSettingsPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(ProfileSettingsPageComponent);\r\n\r\nexport default ProfileSettingsPage;\r\n"]},"metadata":{},"sourceType":"module"}