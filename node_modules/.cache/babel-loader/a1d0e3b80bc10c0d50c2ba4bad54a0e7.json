{"ast":null,"code":"import has from 'lodash/has';\nimport trimEnd from 'lodash/trimEnd';\nimport Decimal from 'decimal.js';\nimport { types as sdkTypes } from './sdkLoader';\nimport config from '../config';\nconst {\n  subUnitDivisors\n} = config;\nconst {\n  Money\n} = sdkTypes; // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n// https://stackoverflow.com/questions/26380364/why-is-number-max-safe-integer-9-007-199-254-740-991-and-not-9-007-199-254-740-9\n\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -1 * (2 ** 53 - 1);\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 2 ** 53 - 1;\nexport const isSafeNumber = decimalValue => {\n  if (!(decimalValue instanceof Decimal)) {\n    throw new Error('Value must be a Decimal');\n  }\n\n  return decimalValue.gte(MIN_SAFE_INTEGER) && decimalValue.lte(MAX_SAFE_INTEGER);\n}; // Get the minor unit divisor for the given currency\n\nexport const unitDivisor = currency => {\n  if (!has(subUnitDivisors, currency)) {\n    throw new Error(`No minor unit divisor defined for currency: ${currency} in currency-config.js`);\n  }\n\n  return subUnitDivisors[currency];\n}; ////////// Currency manipulation in string format //////////\n\n/**\r\n * Ensures that the given string uses only dots or commas\r\n * e.g. ensureSeparator('9999999,99', false) // => '9999999.99'\r\n *\r\n * @param {String} str - string to be formatted\r\n *\r\n * @return {String} converted string\r\n */\n\nexport const ensureSeparator = (str, useComma = false) => {\n  if (typeof str !== 'string') {\n    throw new TypeError('Parameter must be a string');\n  }\n\n  return useComma ? str.replace(/\\./g, ',') : str.replace(/,/g, '.');\n};\n/**\r\n * Ensures that the given string uses only dots\r\n * (e.g. JavaScript floats use dots)\r\n *\r\n * @param {String} str - string to be formatted\r\n *\r\n * @return {String} converted string\r\n */\n\nexport const ensureDotSeparator = str => {\n  return ensureSeparator(str, false);\n};\n/**\r\n * Convert string to Decimal object (from Decimal.js math library)\r\n * Handles both dots and commas as decimal separators\r\n *\r\n * @param {String} str - string to be converted\r\n *\r\n * @return {Decimal} numeral value\r\n */\n\nexport const convertToDecimal = str => {\n  const dotFormattedStr = ensureDotSeparator(str);\n  return new Decimal(dotFormattedStr);\n};\n/**\r\n * Converts Decimal value to a string (from Decimal.js math library)\r\n *\r\n * @param {Decimal|Number|String} decimalValue\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {String} converted value\r\n */\n\nexport const convertDecimalToString = (decimalValue, useComma = false) => {\n  const d = new Decimal(decimalValue);\n  return ensureSeparator(d.toString(), useComma);\n}; // Divisor can be positive value given as Decimal, Number, or String\n\nconst convertDivisorToDecimal = divisor => {\n  try {\n    const divisorAsDecimal = new Decimal(divisor);\n\n    if (divisorAsDecimal.isNegative()) {\n      throw new Error(`Parameter (${divisor}) must be a positive number.`);\n    }\n\n    return divisorAsDecimal;\n  } catch (e) {\n    throw new Error(`Parameter (${divisor}) must present a number.`, e);\n  }\n};\n/**\r\n * Limits value to sub-unit precision: \"1.4567\" -> \"1.45\"\r\n * Useful in input fields so this doesn't use rounding.\r\n *\r\n * @param {String} inputString - positive number presentation.\r\n *\r\n * @param {Decimal|Number|String} subUnitDivisor - should be something that can be converted to\r\n * Decimal. (This is a ratio between currency's main unit and sub units.)\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {String} truncated value\r\n */\n\n\nexport const truncateToSubUnitPrecision = (inputString, subUnitDivisor, useComma = false) => {\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(subUnitDivisor); // '10,' should be passed through, but that format is not supported as valid number\n\n  const trimmed = trimEnd(inputString, useComma ? ',' : '.'); // create another instance and check if value is convertable\n\n  const value = convertToDecimal(trimmed, useComma);\n\n  if (value.isNegative()) {\n    throw new Error(`Parameter (${inputString}) must be a positive number.`);\n  } // Amount is always counted in subunits\n  // E.g. $10 => 1000¢\n\n\n  const amount = value.times(subUnitDivisorAsDecimal);\n\n  if (!isSafeNumber(amount)) {\n    throw new Error(`Cannot represent money minor unit value ${amount.toString()} safely as a number`);\n  } // Amount must be integer\n  // We don't deal with subunit fragments like 1000.345¢\n\n\n  if (amount.isInteger()) {\n    // accepted strings: '9', '9,' '9.' '9,99'\n    const decimalCount2 = value.toFixed(2);\n    const decimalPrecisionMax2 = decimalCount2.length >= inputString.length ? inputString : value.toFixed(2);\n    return ensureSeparator(decimalPrecisionMax2, useComma);\n  } else {\n    // truncate strings ('9.999' => '9.99')\n    const truncated = amount.truncated().dividedBy(subUnitDivisorAsDecimal);\n    return convertDecimalToString(truncated, useComma);\n  }\n}; ////////// Currency - Money helpers //////////\n\n/**\r\n * Converts given value to sub unit value and returns it as a number\r\n *\r\n * @param {Number|String} value\r\n *\r\n * @param {Decimal|Number|String} subUnitDivisor - should be something that can be converted to\r\n * Decimal. (This is a ratio between currency's main unit and sub units.)\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {number} converted value\r\n */\n\nexport const convertUnitToSubUnit = (value, subUnitDivisor, useComma = false) => {\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(subUnitDivisor);\n\n  if (!(typeof value === 'string' || typeof value === 'number')) {\n    throw new TypeError('Value must be either number or string');\n  }\n\n  const val = typeof value === 'string' ? convertToDecimal(value, useComma) : new Decimal(value);\n  const amount = val.times(subUnitDivisorAsDecimal);\n\n  if (!isSafeNumber(amount)) {\n    throw new Error(`Cannot represent money minor unit value ${amount.toString()} safely as a number`);\n  } else if (amount.isInteger()) {\n    return amount.toNumber();\n  } else {\n    throw new Error(`value must divisible by ${subUnitDivisor}`);\n  }\n};\n\nconst isNumber = value => {\n  return typeof value === 'number' && !isNaN(value);\n};\n/* eslint-disable no-underscore-dangle */\n// Detect if the given value is a goog.math.Long object\n// See: https://google.github.io/closure-library/api/goog.math.Long.html\n\n\nconst isGoogleMathLong = value => {\n  return typeof value === 'object' && isNumber(value.low_) && isNumber(value.high_);\n};\n/* eslint-enable no-underscore-dangle */\n\n/**\r\n * Convert Money to a number\r\n *\r\n * @param {Money} value\r\n *\r\n * @return {Number} converted value\r\n */\n\n\nexport const convertMoneyToNumber = value => {\n  if (!(value instanceof Money)) {\n    throw new Error('Value must be a Money type');\n  }\n\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(unitDivisor(value.currency));\n  let amount;\n\n  if (isGoogleMathLong(value.amount)) {\n    // TODO: temporarily also handle goog.math.Long values created by\n    // the Transit tooling in the Sharetribe JS SDK. This should be\n    // removed when the value.amount will be a proper Decimal type.\n    // eslint-disable-next-line no-console\n    console.warn('goog.math.Long value in money amount:', value.amount, value.amount.toString());\n    amount = new Decimal(value.amount.toString());\n  } else {\n    amount = new Decimal(value.amount);\n  }\n\n  if (!isSafeNumber(amount)) {\n    throw new Error(`Cannot represent money minor unit value ${amount.toString()} safely as a number`);\n  }\n\n  return amount.dividedBy(subUnitDivisorAsDecimal).toNumber();\n};\n/**\r\n * Format the given money to a string\r\n *\r\n * @param {Object} intl\r\n * @param {Money} value\r\n *\r\n * @return {String} formatted money value\r\n */\n\nexport const formatMoney = (intl, value) => {\n  if (!(value instanceof Money)) {\n    throw new Error('Value must be a Money type');\n  }\n\n  const valueAsNumber = convertMoneyToNumber(value); // See: https://github.com/yahoo/react-intl/wiki/API#formatnumber\n\n  const numberFormatOptions = {\n    style: 'currency',\n    currency: value.currency,\n    currencyDisplay: 'symbol',\n    useGrouping: true,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  };\n  return intl.formatNumber(valueAsNumber, numberFormatOptions);\n};\n/**\r\n * Format the given major-unit string value as currency. E.g. \"10\" -> \"$10\".\r\n *\r\n * NOTE: This function should not be used with listing prices or other Money type.\r\n * This can be used with price filters and other components that doesn't send Money types to API.\r\n *\r\n * @param {Object} intl\r\n * @param {String} value\r\n *\r\n * @return {String} formatted money value\r\n */\n\nexport const formatCurrencyMajorUnit = (intl, currency, valueWithoutSubunits) => {\n  const valueAsNumber = new Decimal(valueWithoutSubunits).toNumber(); // See: https://github.com/yahoo/react-intl/wiki/API#formatnumber\n\n  const numberFormatOptions = {\n    style: 'currency',\n    currency,\n    currencyDisplay: 'symbol',\n    useGrouping: true,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  };\n  return intl.formatNumber(valueAsNumber, numberFormatOptions);\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/currency.js"],"names":["has","trimEnd","Decimal","types","sdkTypes","config","subUnitDivisors","Money","MIN_SAFE_INTEGER","Number","MAX_SAFE_INTEGER","isSafeNumber","decimalValue","Error","gte","lte","unitDivisor","currency","ensureSeparator","str","useComma","TypeError","replace","ensureDotSeparator","convertToDecimal","dotFormattedStr","convertDecimalToString","d","toString","convertDivisorToDecimal","divisor","divisorAsDecimal","isNegative","e","truncateToSubUnitPrecision","inputString","subUnitDivisor","subUnitDivisorAsDecimal","trimmed","value","amount","times","isInteger","decimalCount2","toFixed","decimalPrecisionMax2","length","truncated","dividedBy","convertUnitToSubUnit","val","toNumber","isNumber","isNaN","isGoogleMathLong","low_","high_","convertMoneyToNumber","console","warn","formatMoney","intl","valueAsNumber","numberFormatOptions","style","currencyDisplay","useGrouping","minimumFractionDigits","maximumFractionDigits","formatNumber","formatCurrencyMajorUnit","valueWithoutSubunits"],"mappings":"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","sourcesContent":["import has from 'lodash/has';\r\nimport trimEnd from 'lodash/trimEnd';\r\nimport Decimal from 'decimal.js';\r\nimport { types as sdkTypes } from './sdkLoader';\r\nimport config from '../config';\r\n\r\nconst { subUnitDivisors } = config;\r\nconst { Money } = sdkTypes;\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\r\n// https://stackoverflow.com/questions/26380364/why-is-number-max-safe-integer-9-007-199-254-740-991-and-not-9-007-199-254-740-9\r\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -1 * (2 ** 53 - 1);\r\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 2 ** 53 - 1;\r\n\r\nexport const isSafeNumber = decimalValue => {\r\n  if (!(decimalValue instanceof Decimal)) {\r\n    throw new Error('Value must be a Decimal');\r\n  }\r\n  return decimalValue.gte(MIN_SAFE_INTEGER) && decimalValue.lte(MAX_SAFE_INTEGER);\r\n};\r\n\r\n// Get the minor unit divisor for the given currency\r\nexport const unitDivisor = currency => {\r\n  if (!has(subUnitDivisors, currency)) {\r\n    throw new Error(\r\n      `No minor unit divisor defined for currency: ${currency} in currency-config.js`\r\n    );\r\n  }\r\n  return subUnitDivisors[currency];\r\n};\r\n\r\n////////// Currency manipulation in string format //////////\r\n\r\n/**\r\n * Ensures that the given string uses only dots or commas\r\n * e.g. ensureSeparator('9999999,99', false) // => '9999999.99'\r\n *\r\n * @param {String} str - string to be formatted\r\n *\r\n * @return {String} converted string\r\n */\r\nexport const ensureSeparator = (str, useComma = false) => {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('Parameter must be a string');\r\n  }\r\n  return useComma ? str.replace(/\\./g, ',') : str.replace(/,/g, '.');\r\n};\r\n\r\n/**\r\n * Ensures that the given string uses only dots\r\n * (e.g. JavaScript floats use dots)\r\n *\r\n * @param {String} str - string to be formatted\r\n *\r\n * @return {String} converted string\r\n */\r\nexport const ensureDotSeparator = str => {\r\n  return ensureSeparator(str, false);\r\n};\r\n\r\n/**\r\n * Convert string to Decimal object (from Decimal.js math library)\r\n * Handles both dots and commas as decimal separators\r\n *\r\n * @param {String} str - string to be converted\r\n *\r\n * @return {Decimal} numeral value\r\n */\r\nexport const convertToDecimal = str => {\r\n  const dotFormattedStr = ensureDotSeparator(str);\r\n  return new Decimal(dotFormattedStr);\r\n};\r\n\r\n/**\r\n * Converts Decimal value to a string (from Decimal.js math library)\r\n *\r\n * @param {Decimal|Number|String} decimalValue\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {String} converted value\r\n */\r\nexport const convertDecimalToString = (decimalValue, useComma = false) => {\r\n  const d = new Decimal(decimalValue);\r\n  return ensureSeparator(d.toString(), useComma);\r\n};\r\n\r\n// Divisor can be positive value given as Decimal, Number, or String\r\nconst convertDivisorToDecimal = divisor => {\r\n  try {\r\n    const divisorAsDecimal = new Decimal(divisor);\r\n    if (divisorAsDecimal.isNegative()) {\r\n      throw new Error(`Parameter (${divisor}) must be a positive number.`);\r\n    }\r\n    return divisorAsDecimal;\r\n  } catch (e) {\r\n    throw new Error(`Parameter (${divisor}) must present a number.`, e);\r\n  }\r\n};\r\n\r\n/**\r\n * Limits value to sub-unit precision: \"1.4567\" -> \"1.45\"\r\n * Useful in input fields so this doesn't use rounding.\r\n *\r\n * @param {String} inputString - positive number presentation.\r\n *\r\n * @param {Decimal|Number|String} subUnitDivisor - should be something that can be converted to\r\n * Decimal. (This is a ratio between currency's main unit and sub units.)\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {String} truncated value\r\n */\r\nexport const truncateToSubUnitPrecision = (inputString, subUnitDivisor, useComma = false) => {\r\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(subUnitDivisor);\r\n\r\n  // '10,' should be passed through, but that format is not supported as valid number\r\n  const trimmed = trimEnd(inputString, useComma ? ',' : '.');\r\n  // create another instance and check if value is convertable\r\n  const value = convertToDecimal(trimmed, useComma);\r\n\r\n  if (value.isNegative()) {\r\n    throw new Error(`Parameter (${inputString}) must be a positive number.`);\r\n  }\r\n\r\n  // Amount is always counted in subunits\r\n  // E.g. $10 => 1000¢\r\n  const amount = value.times(subUnitDivisorAsDecimal);\r\n\r\n  if (!isSafeNumber(amount)) {\r\n    throw new Error(\r\n      `Cannot represent money minor unit value ${amount.toString()} safely as a number`\r\n    );\r\n  }\r\n\r\n  // Amount must be integer\r\n  // We don't deal with subunit fragments like 1000.345¢\r\n  if (amount.isInteger()) {\r\n    // accepted strings: '9', '9,' '9.' '9,99'\r\n    const decimalCount2 = value.toFixed(2);\r\n    const decimalPrecisionMax2 =\r\n      decimalCount2.length >= inputString.length ? inputString : value.toFixed(2);\r\n    return ensureSeparator(decimalPrecisionMax2, useComma);\r\n  } else {\r\n    // truncate strings ('9.999' => '9.99')\r\n    const truncated = amount.truncated().dividedBy(subUnitDivisorAsDecimal);\r\n    return convertDecimalToString(truncated, useComma);\r\n  }\r\n};\r\n\r\n////////// Currency - Money helpers //////////\r\n\r\n/**\r\n * Converts given value to sub unit value and returns it as a number\r\n *\r\n * @param {Number|String} value\r\n *\r\n * @param {Decimal|Number|String} subUnitDivisor - should be something that can be converted to\r\n * Decimal. (This is a ratio between currency's main unit and sub units.)\r\n *\r\n * @param {boolean} useComma - optional.\r\n * Specify if return value should use comma as separator\r\n *\r\n * @return {number} converted value\r\n */\r\nexport const convertUnitToSubUnit = (value, subUnitDivisor, useComma = false) => {\r\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(subUnitDivisor);\r\n\r\n  if (!(typeof value === 'string' || typeof value === 'number')) {\r\n    throw new TypeError('Value must be either number or string');\r\n  }\r\n\r\n  const val = typeof value === 'string' ? convertToDecimal(value, useComma) : new Decimal(value);\r\n  const amount = val.times(subUnitDivisorAsDecimal);\r\n\r\n  if (!isSafeNumber(amount)) {\r\n    throw new Error(\r\n      `Cannot represent money minor unit value ${amount.toString()} safely as a number`\r\n    );\r\n  } else if (amount.isInteger()) {\r\n    return amount.toNumber();\r\n  } else {\r\n    throw new Error(`value must divisible by ${subUnitDivisor}`);\r\n  }\r\n};\r\n\r\nconst isNumber = value => {\r\n  return typeof value === 'number' && !isNaN(value);\r\n};\r\n\r\n/* eslint-disable no-underscore-dangle */\r\n// Detect if the given value is a goog.math.Long object\r\n// See: https://google.github.io/closure-library/api/goog.math.Long.html\r\nconst isGoogleMathLong = value => {\r\n  return typeof value === 'object' && isNumber(value.low_) && isNumber(value.high_);\r\n};\r\n/* eslint-enable no-underscore-dangle */\r\n\r\n/**\r\n * Convert Money to a number\r\n *\r\n * @param {Money} value\r\n *\r\n * @return {Number} converted value\r\n */\r\nexport const convertMoneyToNumber = value => {\r\n  if (!(value instanceof Money)) {\r\n    throw new Error('Value must be a Money type');\r\n  }\r\n  const subUnitDivisorAsDecimal = convertDivisorToDecimal(unitDivisor(value.currency));\r\n  let amount;\r\n\r\n  if (isGoogleMathLong(value.amount)) {\r\n    // TODO: temporarily also handle goog.math.Long values created by\r\n    // the Transit tooling in the Sharetribe JS SDK. This should be\r\n    // removed when the value.amount will be a proper Decimal type.\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.warn('goog.math.Long value in money amount:', value.amount, value.amount.toString());\r\n\r\n    amount = new Decimal(value.amount.toString());\r\n  } else {\r\n    amount = new Decimal(value.amount);\r\n  }\r\n\r\n  if (!isSafeNumber(amount)) {\r\n    throw new Error(\r\n      `Cannot represent money minor unit value ${amount.toString()} safely as a number`\r\n    );\r\n  }\r\n\r\n  return amount.dividedBy(subUnitDivisorAsDecimal).toNumber();\r\n};\r\n\r\n/**\r\n * Format the given money to a string\r\n *\r\n * @param {Object} intl\r\n * @param {Money} value\r\n *\r\n * @return {String} formatted money value\r\n */\r\nexport const formatMoney = (intl, value) => {\r\n  if (!(value instanceof Money)) {\r\n    throw new Error('Value must be a Money type');\r\n  }\r\n  const valueAsNumber = convertMoneyToNumber(value);\r\n\r\n  // See: https://github.com/yahoo/react-intl/wiki/API#formatnumber\r\n  const numberFormatOptions = {\r\n    style: 'currency',\r\n    currency: value.currency,\r\n    currencyDisplay: 'symbol',\r\n    useGrouping: true,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  };\r\n\r\n  return intl.formatNumber(valueAsNumber, numberFormatOptions);\r\n};\r\n\r\n/**\r\n * Format the given major-unit string value as currency. E.g. \"10\" -> \"$10\".\r\n *\r\n * NOTE: This function should not be used with listing prices or other Money type.\r\n * This can be used with price filters and other components that doesn't send Money types to API.\r\n *\r\n * @param {Object} intl\r\n * @param {String} value\r\n *\r\n * @return {String} formatted money value\r\n */\r\nexport const formatCurrencyMajorUnit = (intl, currency, valueWithoutSubunits) => {\r\n  const valueAsNumber = new Decimal(valueWithoutSubunits).toNumber();\r\n\r\n  // See: https://github.com/yahoo/react-intl/wiki/API#formatnumber\r\n  const numberFormatOptions = {\r\n    style: 'currency',\r\n    currency,\r\n    currencyDisplay: 'symbol',\r\n    useGrouping: true,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  };\r\n\r\n  return intl.formatNumber(valueAsNumber, numberFormatOptions);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}