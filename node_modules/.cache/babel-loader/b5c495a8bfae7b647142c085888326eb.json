{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Map\\\\DynamicMapboxMap.js\";\nimport React, { Component } from 'react';\nimport { string, shape, number, object } from 'prop-types'; // This MultiTouch lib is used for 2-finger panning.\n// which prevents user to experience map-scroll trap, while scrolling the page.\n// https://github.com/mapbox/mapbox-gl-js/issues/2618\n// TODO: we should add an overlay with text \"use two fingers to pan\".\n\nimport MultiTouch from 'mapbox-gl-multitouch';\nimport uniqueId from 'lodash/uniqueId';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\n\nconst mapMarker = mapsConfig => {\n  const {\n    enabled,\n    url,\n    width,\n    height\n  } = mapsConfig.customMarker;\n\n  if (enabled) {\n    const element = document.createElement('div');\n    element.style.backgroundImage = `url(${url})`;\n    element.style.width = `${width}px`;\n    element.style.height = `${height}px`;\n    return new window.mapboxgl.Marker({\n      element\n    });\n  } else {\n    return new window.mapboxgl.Marker();\n  }\n};\n\nconst circleLayer = (center, mapsConfig, layerId) => {\n  const path = circlePolyline(center, mapsConfig.fuzzy.offset).map(([lat, lng]) => [lng, lat]);\n  return {\n    id: layerId,\n    type: 'fill',\n    source: {\n      type: 'geojson',\n      data: {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [path]\n        }\n      }\n    },\n    paint: {\n      'fill-color': mapsConfig.fuzzy.circleColor,\n      'fill-opacity': 0.2\n    }\n  };\n};\n\nconst generateFuzzyLayerId = () => {\n  return uniqueId('fuzzy_layer_');\n};\n\nclass DynamicMapboxMap extends Component {\n  constructor(props) {\n    super(props);\n    this.mapContainer = null;\n    this.map = null;\n    this.centerMarker = null;\n    this.fuzzyLayerId = generateFuzzyLayerId();\n    this.updateFuzzyCirclelayer = this.updateFuzzyCirclelayer.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      center,\n      zoom,\n      mapsConfig\n    } = this.props;\n    const position = [center.lng, center.lat];\n    this.map = new window.mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v10',\n      center: position,\n      zoom,\n      scrollZoom: false\n    });\n    this.map.addControl(new window.mapboxgl.NavigationControl({\n      showCompass: false\n    }), 'top-left');\n    this.map.addControl(new MultiTouch());\n\n    if (mapsConfig.fuzzy.enabled) {\n      this.map.on('load', () => {\n        this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n      });\n    } else {\n      this.centerMarker = mapMarker(mapsConfig);\n      this.centerMarker.setLngLat(position).addTo(this.map);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.map) {\n      this.centerMarker = null;\n      this.map.remove();\n      this.map = null;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.map) {\n      return;\n    }\n\n    const {\n      center,\n      zoom,\n      mapsConfig\n    } = this.props;\n    const {\n      lat,\n      lng\n    } = center;\n    const position = [lng, lat]; // zoom change\n\n    if (zoom !== prevProps.zoom) {\n      this.map.setZoom(this.props.zoom);\n    }\n\n    const centerChanged = lat !== prevProps.center.lat || lng !== prevProps.center.lng; // center marker change\n\n    if (this.centerMarker && centerChanged) {\n      this.centerMarker.setLngLat(position);\n      this.map.setCenter(position);\n    } // fuzzy circle change\n\n\n    if (mapsConfig.fuzzy.enabled && centerChanged) {\n      if (this.map.loaded()) {\n        this.updateFuzzyCirclelayer();\n      } else {\n        this.map.on('load', this.updateFuzzyCirclelayer);\n      }\n    } // NOTE: mapsConfig changes are not handled\n\n  }\n\n  updateFuzzyCirclelayer() {\n    if (!this.map) {\n      // map already removed\n      return;\n    }\n\n    const {\n      center,\n      mapsConfig\n    } = this.props;\n    const {\n      lat,\n      lng\n    } = center;\n    const position = [lng, lat];\n    this.map.removeLayer(this.fuzzyLayerId); // We have to use a different layer id to avoid Mapbox errors\n\n    this.fuzzyLayerId = generateFuzzyLayerId();\n    this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\n    this.map.setCenter(position);\n  }\n\n  render() {\n    const {\n      containerClassName,\n      mapClassName\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: containerClassName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: mapClassName,\n      ref: el => this.mapContainer = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nDynamicMapboxMap.defaultProps = {\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps\n};\nDynamicMapboxMap.propTypes = {\n  address: string,\n  // not used\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object\n};\nexport default DynamicMapboxMap;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Map/DynamicMapboxMap.js"],"names":["React","Component","string","shape","number","object","MultiTouch","uniqueId","circlePolyline","config","mapMarker","mapsConfig","enabled","url","width","height","customMarker","element","document","createElement","style","backgroundImage","window","mapboxgl","Marker","circleLayer","center","layerId","path","fuzzy","offset","map","lat","lng","id","type","source","data","geometry","coordinates","paint","circleColor","generateFuzzyLayerId","DynamicMapboxMap","constructor","props","mapContainer","centerMarker","fuzzyLayerId","updateFuzzyCirclelayer","bind","componentDidMount","zoom","position","Map","container","scrollZoom","addControl","NavigationControl","showCompass","on","addLayer","setLngLat","addTo","componentWillUnmount","remove","componentDidUpdate","prevProps","setZoom","centerChanged","setCenter","loaded","removeLayer","render","containerClassName","mapClassName","el","defaultProps","address","maps","defaultZoomLevel","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { string, shape, number, object } from 'prop-types';\r\n// This MultiTouch lib is used for 2-finger panning.\r\n// which prevents user to experience map-scroll trap, while scrolling the page.\r\n// https://github.com/mapbox/mapbox-gl-js/issues/2618\r\n// TODO: we should add an overlay with text \"use two fingers to pan\".\r\nimport MultiTouch from 'mapbox-gl-multitouch';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { circlePolyline } from '../../util/maps';\r\nimport config from '../../config';\r\n\r\nconst mapMarker = mapsConfig => {\r\n  const { enabled, url, width, height } = mapsConfig.customMarker;\r\n  if (enabled) {\r\n    const element = document.createElement('div');\r\n    element.style.backgroundImage = `url(${url})`;\r\n    element.style.width = `${width}px`;\r\n    element.style.height = `${height}px`;\r\n    return new window.mapboxgl.Marker({ element });\r\n  } else {\r\n    return new window.mapboxgl.Marker();\r\n  }\r\n};\r\n\r\nconst circleLayer = (center, mapsConfig, layerId) => {\r\n  const path = circlePolyline(center, mapsConfig.fuzzy.offset).map(([lat, lng]) => [lng, lat]);\r\n  return {\r\n    id: layerId,\r\n    type: 'fill',\r\n    source: {\r\n      type: 'geojson',\r\n      data: {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Polygon',\r\n          coordinates: [path],\r\n        },\r\n      },\r\n    },\r\n    paint: {\r\n      'fill-color': mapsConfig.fuzzy.circleColor,\r\n      'fill-opacity': 0.2,\r\n    },\r\n  };\r\n};\r\n\r\nconst generateFuzzyLayerId = () => {\r\n  return uniqueId('fuzzy_layer_');\r\n};\r\n\r\nclass DynamicMapboxMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mapContainer = null;\r\n    this.map = null;\r\n    this.centerMarker = null;\r\n    this.fuzzyLayerId = generateFuzzyLayerId();\r\n\r\n    this.updateFuzzyCirclelayer = this.updateFuzzyCirclelayer.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    const { center, zoom, mapsConfig } = this.props;\r\n    const position = [center.lng, center.lat];\r\n\r\n    this.map = new window.mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mapbox/streets-v10',\r\n      center: position,\r\n      zoom,\r\n      scrollZoom: false,\r\n    });\r\n    this.map.addControl(new window.mapboxgl.NavigationControl({ showCompass: false }), 'top-left');\r\n    this.map.addControl(new MultiTouch());\r\n\r\n    if (mapsConfig.fuzzy.enabled) {\r\n      this.map.on('load', () => {\r\n        this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\r\n      });\r\n    } else {\r\n      this.centerMarker = mapMarker(mapsConfig);\r\n      this.centerMarker.setLngLat(position).addTo(this.map);\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.map) {\r\n      this.centerMarker = null;\r\n      this.map.remove();\r\n      this.map = null;\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (!this.map) {\r\n      return;\r\n    }\r\n\r\n    const { center, zoom, mapsConfig } = this.props;\r\n    const { lat, lng } = center;\r\n    const position = [lng, lat];\r\n\r\n    // zoom change\r\n    if (zoom !== prevProps.zoom) {\r\n      this.map.setZoom(this.props.zoom);\r\n    }\r\n\r\n    const centerChanged = lat !== prevProps.center.lat || lng !== prevProps.center.lng;\r\n\r\n    // center marker change\r\n    if (this.centerMarker && centerChanged) {\r\n      this.centerMarker.setLngLat(position);\r\n      this.map.setCenter(position);\r\n    }\r\n\r\n    // fuzzy circle change\r\n    if (mapsConfig.fuzzy.enabled && centerChanged) {\r\n      if (this.map.loaded()) {\r\n        this.updateFuzzyCirclelayer();\r\n      } else {\r\n        this.map.on('load', this.updateFuzzyCirclelayer);\r\n      }\r\n    }\r\n\r\n    // NOTE: mapsConfig changes are not handled\r\n  }\r\n  updateFuzzyCirclelayer() {\r\n    if (!this.map) {\r\n      // map already removed\r\n      return;\r\n    }\r\n    const { center, mapsConfig } = this.props;\r\n    const { lat, lng } = center;\r\n    const position = [lng, lat];\r\n\r\n    this.map.removeLayer(this.fuzzyLayerId);\r\n\r\n    // We have to use a different layer id to avoid Mapbox errors\r\n    this.fuzzyLayerId = generateFuzzyLayerId();\r\n    this.map.addLayer(circleLayer(center, mapsConfig, this.fuzzyLayerId));\r\n\r\n    this.map.setCenter(position);\r\n  }\r\n  render() {\r\n    const { containerClassName, mapClassName } = this.props;\r\n    return (\r\n      <div className={containerClassName}>\r\n        <div className={mapClassName} ref={el => (this.mapContainer = el)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDynamicMapboxMap.defaultProps = {\r\n  address: '',\r\n  center: null,\r\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\r\n  mapsConfig: config.maps,\r\n};\r\n\r\nDynamicMapboxMap.propTypes = {\r\n  address: string, // not used\r\n  center: shape({\r\n    lat: number.isRequired,\r\n    lng: number.isRequired,\r\n  }).isRequired,\r\n  zoom: number,\r\n  mapsConfig: object,\r\n};\r\n\r\nexport default DynamicMapboxMap;\r\n"]},"metadata":{},"sourceType":"module"}