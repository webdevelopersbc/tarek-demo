{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\KeywordFilter\\\\KeywordFilter.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { FieldTextInput } from '../../../components';\nimport FilterPlain from '../FilterPlain/FilterPlain';\nimport FilterPopup from '../FilterPopup/FilterPopup';\nimport css from './KeywordFilter.module.css'; // When user types, we wait for new keystrokes a while before searching new content\n\nconst DEBOUNCE_WAIT_TIME = 600; // Short search queries (e.g. 2 letters) have a longer timeout before search is made\n\nconst TIMEOUT_FOR_SHORT_QUERIES = 2000;\n\nconst getKeywordQueryParam = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : typeof queryParamNames === 'string' ? queryParamNames : 'keywords';\n};\n\nclass KeywordFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.filter = null;\n    this.filterContent = null;\n    this.shortKeywordTimeout = null;\n    this.mobileInputRef = /*#__PURE__*/React.createRef();\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.shortKeywordTimeout);\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      const offset = renderToRight ? {\n        left: contentPlacementOffset\n      } : {\n        right: contentPlacementOffset\n      }; // set a min-width if the content is narrower than the label\n\n      const minWidth = contentWidth < labelWidth ? {\n        minWidth: labelWidth\n      } : null;\n      return { ...offset,\n        ...minWidth\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      name,\n      label,\n      initialValues,\n      contentPlacementOffset,\n      onSubmit,\n      queryParamNames,\n      intl,\n      showAsPopup,\n      ...rest\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const urlParam = getKeywordQueryParam(queryParamNames);\n    const hasInitialValues = !!initialValues && !!initialValues[urlParam] && initialValues[urlParam].length > 0;\n    const labelForPopup = hasInitialValues ? intl.formatMessage({\n      id: 'KeywordFilter.labelSelected'\n    }, {\n      labelText: initialValues[urlParam]\n    }) : label;\n    const labelClass = hasInitialValues ? css.labelPlainSelected : css.labelPlain;\n    const labelForPlain = /*#__PURE__*/React.createElement(\"span\", {\n      className: labelClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 27\n      }\n    }, label);\n    const filterText = intl.formatMessage({\n      id: 'KeywordFilter.filterText'\n    });\n    const placeholder = intl.formatMessage({\n      id: 'KeywordFilter.placeholder'\n    });\n    const contentStyle = this.positionStyleForContent(); // pass the initial values with the name key so that\n    // they can be passed to the correct field\n\n    const namedInitialValues = {\n      [name]: initialValues[urlParam]\n    };\n\n    const handleSubmit = values => {\n      const usedValue = values ? values[name] : values;\n      onSubmit({\n        [urlParam]: usedValue\n      });\n    };\n\n    const debouncedSubmit = debounce(handleSubmit, DEBOUNCE_WAIT_TIME, {\n      leading: false,\n      trailing: true\n    }); // Use timeout for shart queries and debounce for queries with any length\n\n    const handleChangeWithDebounce = values => {\n      // handleSubmit gets values as params.\n      // If this field (\"keyword\") is short, create timeout\n      const hasKeywordValue = values && values[name];\n      const keywordValue = hasKeywordValue ? values && values[name] : '';\n\n      if (!hasKeywordValue || hasKeywordValue && keywordValue.length >= 3) {\n        if (this.shortKeywordTimeout) {\n          window.clearTimeout(this.shortKeywordTimeout);\n        }\n\n        return debouncedSubmit(values);\n      } else {\n        this.shortKeywordTimeout = window.setTimeout(() => {\n          // if mobileInputRef exists, use the most up-to-date value from there\n          return this.mobileInputRef && this.mobileInputRef.current ? handleSubmit({ ...values,\n            [name]: this.mobileInputRef.current.value\n          }) : handleSubmit(values);\n        }, TIMEOUT_FOR_SHORT_QUERIES);\n      }\n    }; // Uncontrolled input needs to be cleared through the reference to DOM element.\n\n\n    const handleClear = () => {\n      if (this.mobileInputRef && this.mobileInputRef.current) {\n        this.mobileInputRef.current.value = '';\n      }\n    };\n\n    return showAsPopup ? /*#__PURE__*/React.createElement(FilterPopup, Object.assign({\n      className: classes,\n      rootClassName: rootClassName,\n      popupClassName: css.popupSize,\n      name: name,\n      label: labelForPopup,\n      isSelected: hasInitialValues,\n      id: `${id}.popup`,\n      showAsPopup: true,\n      labelMaxWidth: 250,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit,\n      initialValues: namedInitialValues,\n      keepDirtyOnReinitialize: true\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.field,\n      name: name,\n      id: `${id}-input`,\n      type: \"text\",\n      label: filterText,\n      placeholder: placeholder,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(FilterPlain, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      label: labelForPlain,\n      isSelected: hasInitialValues,\n      id: `${id}.plain`,\n      liveEdit: true,\n      contentPlacementOffset: contentStyle,\n      onSubmit: handleChangeWithDebounce,\n      onClear: handleClear,\n      initialValues: namedInitialValues\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: css.fieldPlain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: css.fieldPlainLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, filterText), /*#__PURE__*/React.createElement(FieldTextInput, {\n      name: name,\n      id: `${id}-input`,\n      className: css.fieldPlainInput,\n      inputRef: this.mobileInputRef,\n      type: \"text\",\n      placeholder: placeholder,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nKeywordFilter.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  contentPlacementOffset: 0\n};\nKeywordFilter.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  name: string.isRequired,\n  queryParamNames: arrayOf(string).isRequired,\n  label: string.isRequired,\n  onSubmit: func.isRequired,\n  initialValues: shape({\n    keyword: string\n  }),\n  contentPlacementOffset: number,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c = injectIntl(KeywordFilter);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/KeywordFilter/KeywordFilter.js"],"names":["React","Component","arrayOf","func","number","shape","string","classNames","debounce","injectIntl","intlShape","FieldTextInput","FilterPlain","FilterPopup","css","DEBOUNCE_WAIT_TIME","TIMEOUT_FOR_SHORT_QUERIES","getKeywordQueryParam","queryParamNames","Array","isArray","KeywordFilter","constructor","props","filter","filterContent","shortKeywordTimeout","mobileInputRef","createRef","positionStyleForContent","bind","componentWillUnmount","window","clearTimeout","distanceToRight","innerWidth","getBoundingClientRect","right","labelWidth","offsetWidth","contentWidth","contentWidthBiggerThanLabel","renderToRight","contentPlacementOffset","offset","left","minWidth","render","rootClassName","className","id","name","label","initialValues","onSubmit","intl","showAsPopup","rest","classes","root","urlParam","hasInitialValues","length","labelForPopup","formatMessage","labelText","labelClass","labelPlainSelected","labelPlain","labelForPlain","filterText","placeholder","contentStyle","namedInitialValues","handleSubmit","values","usedValue","debouncedSubmit","leading","trailing","handleChangeWithDebounce","hasKeywordValue","keywordValue","setTimeout","current","value","handleClear","popupSize","field","fieldPlain","fieldPlainLabel","fieldPlainInput","defaultProps","propTypes","isRequired","keyword"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, func, number, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport debounce from 'lodash/debounce';\r\n\r\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\r\n\r\nimport { FieldTextInput } from '../../../components';\r\n\r\nimport FilterPlain from '../FilterPlain/FilterPlain';\r\nimport FilterPopup from '../FilterPopup/FilterPopup';\r\n\r\nimport css from './KeywordFilter.module.css';\r\n\r\n// When user types, we wait for new keystrokes a while before searching new content\r\nconst DEBOUNCE_WAIT_TIME = 600;\r\n// Short search queries (e.g. 2 letters) have a longer timeout before search is made\r\nconst TIMEOUT_FOR_SHORT_QUERIES = 2000;\r\n\r\nconst getKeywordQueryParam = queryParamNames => {\r\n  return Array.isArray(queryParamNames)\r\n    ? queryParamNames[0]\r\n    : typeof queryParamNames === 'string'\r\n    ? queryParamNames\r\n    : 'keywords';\r\n};\r\n\r\nclass KeywordFilter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.filter = null;\r\n    this.filterContent = null;\r\n    this.shortKeywordTimeout = null;\r\n    this.mobileInputRef = React.createRef();\r\n\r\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.shortKeywordTimeout);\r\n  }\r\n\r\n  positionStyleForContent() {\r\n    if (this.filter && this.filterContent) {\r\n      // Render the filter content to the right from the menu\r\n      // unless there's no space in which case it is rendered\r\n      // to the left\r\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\r\n      const labelWidth = this.filter.offsetWidth;\r\n      const contentWidth = this.filterContent.offsetWidth;\r\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\r\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\r\n      const contentPlacementOffset = this.props.contentPlacementOffset;\r\n\r\n      const offset = renderToRight\r\n        ? { left: contentPlacementOffset }\r\n        : { right: contentPlacementOffset };\r\n      // set a min-width if the content is narrower than the label\r\n      const minWidth = contentWidth < labelWidth ? { minWidth: labelWidth } : null;\r\n\r\n      return { ...offset, ...minWidth };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      id,\r\n      name,\r\n      label,\r\n      initialValues,\r\n      contentPlacementOffset,\r\n      onSubmit,\r\n      queryParamNames,\r\n      intl,\r\n      showAsPopup,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const urlParam = getKeywordQueryParam(queryParamNames);\r\n    const hasInitialValues =\r\n      !!initialValues && !!initialValues[urlParam] && initialValues[urlParam].length > 0;\r\n    const labelForPopup = hasInitialValues\r\n      ? intl.formatMessage(\r\n          { id: 'KeywordFilter.labelSelected' },\r\n          { labelText: initialValues[urlParam] }\r\n        )\r\n      : label;\r\n\r\n    const labelClass = hasInitialValues ? css.labelPlainSelected : css.labelPlain;\r\n    const labelForPlain = <span className={labelClass}>{label}</span>;\r\n\r\n    const filterText = intl.formatMessage({ id: 'KeywordFilter.filterText' });\r\n\r\n    const placeholder = intl.formatMessage({ id: 'KeywordFilter.placeholder' });\r\n\r\n    const contentStyle = this.positionStyleForContent();\r\n\r\n    // pass the initial values with the name key so that\r\n    // they can be passed to the correct field\r\n    const namedInitialValues = { [name]: initialValues[urlParam] };\r\n\r\n    const handleSubmit = values => {\r\n      const usedValue = values ? values[name] : values;\r\n      onSubmit({ [urlParam]: usedValue });\r\n    };\r\n\r\n    const debouncedSubmit = debounce(handleSubmit, DEBOUNCE_WAIT_TIME, {\r\n      leading: false,\r\n      trailing: true,\r\n    });\r\n    // Use timeout for shart queries and debounce for queries with any length\r\n    const handleChangeWithDebounce = values => {\r\n      // handleSubmit gets values as params.\r\n      // If this field (\"keyword\") is short, create timeout\r\n      const hasKeywordValue = values && values[name];\r\n      const keywordValue = hasKeywordValue ? values && values[name] : '';\r\n      if (!hasKeywordValue || (hasKeywordValue && keywordValue.length >= 3)) {\r\n        if (this.shortKeywordTimeout) {\r\n          window.clearTimeout(this.shortKeywordTimeout);\r\n        }\r\n        return debouncedSubmit(values);\r\n      } else {\r\n        this.shortKeywordTimeout = window.setTimeout(() => {\r\n          // if mobileInputRef exists, use the most up-to-date value from there\r\n          return this.mobileInputRef && this.mobileInputRef.current\r\n            ? handleSubmit({ ...values, [name]: this.mobileInputRef.current.value })\r\n            : handleSubmit(values);\r\n        }, TIMEOUT_FOR_SHORT_QUERIES);\r\n      }\r\n    };\r\n\r\n    // Uncontrolled input needs to be cleared through the reference to DOM element.\r\n    const handleClear = () => {\r\n      if (this.mobileInputRef && this.mobileInputRef.current) {\r\n        this.mobileInputRef.current.value = '';\r\n      }\r\n    };\r\n\r\n    return showAsPopup ? (\r\n      <FilterPopup\r\n        className={classes}\r\n        rootClassName={rootClassName}\r\n        popupClassName={css.popupSize}\r\n        name={name}\r\n        label={labelForPopup}\r\n        isSelected={hasInitialValues}\r\n        id={`${id}.popup`}\r\n        showAsPopup\r\n        labelMaxWidth={250}\r\n        contentPlacementOffset={contentPlacementOffset}\r\n        onSubmit={handleSubmit}\r\n        initialValues={namedInitialValues}\r\n        keepDirtyOnReinitialize\r\n        {...rest}\r\n      >\r\n        <FieldTextInput\r\n          className={css.field}\r\n          name={name}\r\n          id={`${id}-input`}\r\n          type=\"text\"\r\n          label={filterText}\r\n          placeholder={placeholder}\r\n          autoComplete=\"off\"\r\n        />\r\n      </FilterPopup>\r\n    ) : (\r\n      <FilterPlain\r\n        className={className}\r\n        rootClassName={rootClassName}\r\n        label={labelForPlain}\r\n        isSelected={hasInitialValues}\r\n        id={`${id}.plain`}\r\n        liveEdit\r\n        contentPlacementOffset={contentStyle}\r\n        onSubmit={handleChangeWithDebounce}\r\n        onClear={handleClear}\r\n        initialValues={namedInitialValues}\r\n        {...rest}\r\n      >\r\n        <fieldset className={css.fieldPlain}>\r\n          <label className={css.fieldPlainLabel}>{filterText}</label>\r\n          <FieldTextInput\r\n            name={name}\r\n            id={`${id}-input`}\r\n            className={css.fieldPlainInput}\r\n            inputRef={this.mobileInputRef}\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            autoComplete=\"off\"\r\n          />\r\n        </fieldset>\r\n      </FilterPlain>\r\n    );\r\n  }\r\n}\r\n\r\nKeywordFilter.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  initialValues: null,\r\n  contentPlacementOffset: 0,\r\n};\r\n\r\nKeywordFilter.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  id: string.isRequired,\r\n  name: string.isRequired,\r\n  queryParamNames: arrayOf(string).isRequired,\r\n  label: string.isRequired,\r\n  onSubmit: func.isRequired,\r\n  initialValues: shape({\r\n    keyword: string,\r\n  }),\r\n  contentPlacementOffset: number,\r\n\r\n  // form injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(KeywordFilter);\r\n"]},"metadata":{},"sourceType":"module"}