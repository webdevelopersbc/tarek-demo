{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SortBy\\\\SortBy.js\";\nimport React from 'react';\nimport { string, bool } from 'prop-types';\nimport config from '../../../config';\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\nimport { isMainSearchTypeKeywords } from '../../../util/search';\nimport SortByPlain from './SortByPlain';\nimport SortByPopup from './SortByPopup';\n\nconst SortBy = props => {\n  var _selectedFilters$rele;\n\n  const {\n    sort,\n    showAsPopup,\n    selectedFilters,\n    isConflictingFilterActive,\n    hasConflictingFilters,\n    intl,\n    ...rest\n  } = props;\n  const {\n    relevanceKey,\n    relevanceFilter,\n    queryParamName\n  } = config.custom.sortConfig; // Ensure that keywords is included to activeFilter list when needed\n\n  const activeOptions = isMainSearchTypeKeywords(config) ? Object.keys({\n    keywords: '',\n    ...selectedFilters\n  }) : Object.keys(selectedFilters);\n  const isRelevanceOptionActive = activeOptions.includes(relevanceFilter);\n  const options = config.custom.sortConfig.options.map(option => {\n    const isRelevance = option.key === relevanceKey;\n    const isConflictingFilterSetAndActive = hasConflictingFilters && !isConflictingFilterActive;\n    return { ...option,\n      disabled: isRelevance && (!isRelevanceOptionActive || isConflictingFilterSetAndActive) || !isRelevance && isConflictingFilterActive\n    };\n  });\n  const defaultValue = 'createdAt';\n  const isRelevanceSortActive = isRelevanceOptionActive && !sort;\n  const relevanceValue = isRelevanceSortActive && ((_selectedFilters$rele = selectedFilters[relevanceFilter]) === null || _selectedFilters$rele === void 0 ? void 0 : _selectedFilters$rele.length) > 0 ? relevanceKey : null;\n  const initialValue = hasConflictingFilters && !isConflictingFilterActive ? relevanceKey : sort || relevanceValue || defaultValue;\n  const componentProps = {\n    urlParam: queryParamName,\n    label: intl.formatMessage({\n      id: 'SortBy.heading'\n    }),\n    options,\n    initialValue,\n    ...rest\n  };\n  return showAsPopup ? /*#__PURE__*/React.createElement(SortByPopup, Object.assign({}, componentProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 24\n    }\n  })) : /*#__PURE__*/React.createElement(SortByPlain, Object.assign({}, componentProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 62\n    }\n  }));\n};\n\n_c = SortBy;\nSortBy.defaultProps = {\n  sort: null,\n  showAsPopup: false\n};\nSortBy.propTypes = {\n  sort: string,\n  showAsPopup: bool,\n  isConflictingFilterActive: bool.isRequired,\n  intl: intlShape.isRequired\n};\nexport default _c2 = injectIntl(SortBy);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SortBy\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SortBy/SortBy.js"],"names":["React","string","bool","config","intlShape","injectIntl","isMainSearchTypeKeywords","SortByPlain","SortByPopup","SortBy","props","sort","showAsPopup","selectedFilters","isConflictingFilterActive","hasConflictingFilters","intl","rest","relevanceKey","relevanceFilter","queryParamName","custom","sortConfig","activeOptions","Object","keys","keywords","isRelevanceOptionActive","includes","options","map","option","isRelevance","key","isConflictingFilterSetAndActive","disabled","defaultValue","isRelevanceSortActive","relevanceValue","length","initialValue","componentProps","urlParam","label","formatMessage","id","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { string, bool } from 'prop-types';\r\n\r\nimport config from '../../../config';\r\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { isMainSearchTypeKeywords } from '../../../util/search';\r\n\r\nimport SortByPlain from './SortByPlain';\r\nimport SortByPopup from './SortByPopup';\r\n\r\nconst SortBy = props => {\r\n  const {\r\n    sort,\r\n    showAsPopup,\r\n    selectedFilters,\r\n    isConflictingFilterActive,\r\n    hasConflictingFilters,\r\n    intl,\r\n    ...rest\r\n  } = props;\r\n\r\n  const { relevanceKey, relevanceFilter, queryParamName } = config.custom.sortConfig;\r\n\r\n  // Ensure that keywords is included to activeFilter list when needed\r\n  const activeOptions = isMainSearchTypeKeywords(config)\r\n    ? Object.keys({ keywords: '', ...selectedFilters })\r\n    : Object.keys(selectedFilters);\r\n\r\n  const isRelevanceOptionActive = activeOptions.includes(relevanceFilter);\r\n\r\n  const options = config.custom.sortConfig.options.map(option => {\r\n    const isRelevance = option.key === relevanceKey;\r\n    const isConflictingFilterSetAndActive = hasConflictingFilters && !isConflictingFilterActive;\r\n    return {\r\n      ...option,\r\n      disabled:\r\n        (isRelevance && (!isRelevanceOptionActive || isConflictingFilterSetAndActive)) ||\r\n        (!isRelevance && isConflictingFilterActive),\r\n    };\r\n  });\r\n  const defaultValue = 'createdAt';\r\n  const isRelevanceSortActive = isRelevanceOptionActive && !sort;\r\n  const relevanceValue =\r\n    isRelevanceSortActive && selectedFilters[relevanceFilter]?.length > 0 ? relevanceKey : null;\r\n  const initialValue =\r\n    hasConflictingFilters && !isConflictingFilterActive\r\n      ? relevanceKey\r\n      : sort || relevanceValue || defaultValue;\r\n  const componentProps = {\r\n    urlParam: queryParamName,\r\n    label: intl.formatMessage({ id: 'SortBy.heading' }),\r\n    options,\r\n    initialValue,\r\n    ...rest,\r\n  };\r\n  return showAsPopup ? <SortByPopup {...componentProps} /> : <SortByPlain {...componentProps} />;\r\n};\r\n\r\nSortBy.defaultProps = {\r\n  sort: null,\r\n  showAsPopup: false,\r\n};\r\n\r\nSortBy.propTypes = {\r\n  sort: string,\r\n  showAsPopup: bool,\r\n  isConflictingFilterActive: bool.isRequired,\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(SortBy);\r\n"]},"metadata":{},"sourceType":"module"}