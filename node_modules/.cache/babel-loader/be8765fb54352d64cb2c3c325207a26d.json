{"ast":null,"code":"import groupBy from 'lodash/groupBy';\nimport reduce from 'lodash/reduce';\n/**\r\n * hasParentWithClassName searches class name from parent elements of given target\r\n * @param {Node} target - element whose parent might contain given class.\r\n * @param {String} className - class name string to be found\r\n */\n\nexport const hasParentWithClassName = (target, className) => {\n  return [...document.querySelectorAll(`.${className}`)].some(el => el !== target && el.contains(target));\n};\n/**\r\n * Listings array grouped by geolocation\r\n * @param {Array} mapListings - listings to be grouped on map\r\n * @return {Object} - Object where coordinate pair is the key to different listings\r\n */\n\nexport const groupedByCoordinates = mapListings => {\n  return groupBy(mapListings, l => {\n    const g = l.attributes.geolocation;\n    return `${g.lat}-${g.lng}`;\n  });\n};\n/**\r\n * Listings (in location based object literal) is mapped to array\r\n * @param {Object} mapListings - listings to be grouped on map\r\n * @return {Array} - An array where items are arrays of listings\r\n *   (They are arrays containing all the listings in that location)\r\n */\n\nexport const reducedToArray = mapListings => {\n  return reduce(mapListings, (acc, listing) => acc.concat([listing]), []);\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SearchMap/SearchMap.helpers.js"],"names":["groupBy","reduce","hasParentWithClassName","target","className","document","querySelectorAll","some","el","contains","groupedByCoordinates","mapListings","l","g","attributes","geolocation","lat","lng","reducedToArray","acc","listing","concat"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AAC3D,SAAO,CAAC,GAAGC,QAAQ,CAACC,gBAAT,CAA2B,IAAGF,SAAU,EAAxC,CAAJ,EAAgDG,IAAhD,CACLC,EAAE,IAAIA,EAAE,KAAKL,MAAP,IAAiBK,EAAE,CAACC,QAAH,CAAYN,MAAZ,CADlB,CAAP;AAGD,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,oBAAoB,GAAGC,WAAW,IAAI;AACjD,SAAOX,OAAO,CAACW,WAAD,EAAcC,CAAC,IAAI;AAC/B,UAAMC,CAAC,GAAGD,CAAC,CAACE,UAAF,CAAaC,WAAvB;AACA,WAAQ,GAAEF,CAAC,CAACG,GAAI,IAAGH,CAAC,CAACI,GAAI,EAAzB;AACD,GAHa,CAAd;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGP,WAAW,IAAI;AAC3C,SAAOV,MAAM,CAACU,WAAD,EAAc,CAACQ,GAAD,EAAMC,OAAN,KAAkBD,GAAG,CAACE,MAAJ,CAAW,CAACD,OAAD,CAAX,CAAhC,EAAuD,EAAvD,CAAb;AACD,CAFM","sourcesContent":["import groupBy from 'lodash/groupBy';\r\nimport reduce from 'lodash/reduce';\r\n\r\n/**\r\n * hasParentWithClassName searches class name from parent elements of given target\r\n * @param {Node} target - element whose parent might contain given class.\r\n * @param {String} className - class name string to be found\r\n */\r\nexport const hasParentWithClassName = (target, className) => {\r\n  return [...document.querySelectorAll(`.${className}`)].some(\r\n    el => el !== target && el.contains(target)\r\n  );\r\n};\r\n\r\n/**\r\n * Listings array grouped by geolocation\r\n * @param {Array} mapListings - listings to be grouped on map\r\n * @return {Object} - Object where coordinate pair is the key to different listings\r\n */\r\nexport const groupedByCoordinates = mapListings => {\r\n  return groupBy(mapListings, l => {\r\n    const g = l.attributes.geolocation;\r\n    return `${g.lat}-${g.lng}`;\r\n  });\r\n};\r\n\r\n/**\r\n * Listings (in location based object literal) is mapped to array\r\n * @param {Object} mapListings - listings to be grouped on map\r\n * @return {Array} - An array where items are arrays of listings\r\n *   (They are arrays containing all the listings in that location)\r\n */\r\nexport const reducedToArray = mapListings => {\r\n  return reduce(mapListings, (acc, listing) => acc.concat([listing]), []);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}