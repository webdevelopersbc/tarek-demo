{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\OrderPanel\\\\BookingDatesForm\\\\BookingDatesForm.js\";\nimport React, { Component } from 'react';\nimport { string, bool, arrayOf, array, func } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\nimport { required, bookingDatesRequired, composeValidators } from '../../../util/validators';\nimport { START_DATE, END_DATE, getStartOf, addTime } from '../../../util/dates';\nimport { propTypes } from '../../../util/types';\nimport { Form, IconSpinner, PrimaryButton, FieldDateRangeInput } from '../../../components';\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\nimport css from './BookingDatesForm.module.css';\n\nconst identity = v => v;\n\nexport class BookingDatesFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focusedInput: null\n    };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.onFocusedInputChange = this.onFocusedInputChange.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  } // Function that can be passed to nested components\n  // so that they can notify this component when the\n  // focused input changes.\n\n\n  onFocusedInputChange(focusedInput) {\n    this.setState({\n      focusedInput\n    });\n  } // In case start or end date for the booking is missing\n  // focus on that input, otherwise continue with the\n  // default handleSubmit function.\n\n\n  handleFormSubmit(e) {\n    const {\n      startDate,\n      endDate\n    } = e.bookingDates || {};\n\n    if (!startDate) {\n      e.preventDefault();\n      this.setState({\n        focusedInput: START_DATE\n      });\n    } else if (!endDate) {\n      e.preventDefault();\n      this.setState({\n        focusedInput: END_DATE\n      });\n    } else {\n      this.props.onSubmit(e);\n    }\n  } // When the values of the form are updated we need to fetch\n  // lineItems from FTW backend for the EstimatedTransactionMaybe\n  // In case you add more fields to the form, make sure you add\n  // the values here to the orderData object.\n\n\n  handleOnChange(formValues) {\n    const {\n      startDate,\n      endDate\n    } = formValues.values && formValues.values.bookingDates ? formValues.values.bookingDates : {};\n    const listingId = this.props.listingId;\n    const isOwnListing = this.props.isOwnListing;\n\n    if (startDate && endDate && !this.props.fetchLineItemsInProgress) {\n      this.props.onFetchTransactionLineItems({\n        orderData: {\n          bookingDates: {\n            startDate,\n            endDate\n          }\n        },\n        listingId,\n        isOwnListing\n      });\n    }\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      price: unitPrice,\n      ...rest\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n\n    if (!unitPrice) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: css.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"BookingDatesForm.listingPriceMissing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    if (unitPrice.currency !== config.currency) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: css.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"BookingDatesForm.listingCurrencyInvalid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, rest, {\n      unitPrice: unitPrice,\n      onSubmit: this.handleFormSubmit,\n      render: fieldRenderProps => {\n        const {\n          endDatePlaceholder,\n          startDatePlaceholder,\n          formId,\n          handleSubmit,\n          intl,\n          isOwnListing,\n          submitButtonWrapperClassName,\n          unitType,\n          values,\n          timeSlots,\n          fetchTimeSlotsError,\n          lineItems,\n          fetchLineItemsInProgress,\n          fetchLineItemsError\n        } = fieldRenderProps;\n        const {\n          startDate,\n          endDate\n        } = values && values.bookingDates ? values.bookingDates : {};\n        const bookingStartLabel = intl.formatMessage({\n          id: 'BookingDatesForm.bookingStartTitle'\n        });\n        const bookingEndLabel = intl.formatMessage({\n          id: 'BookingDatesForm.bookingEndTitle'\n        });\n        const requiredMessage = intl.formatMessage({\n          id: 'BookingDatesForm.requiredDate'\n        });\n        const startDateErrorMessage = intl.formatMessage({\n          id: 'FieldDateRangeInput.invalidStartDate'\n        });\n        const endDateErrorMessage = intl.formatMessage({\n          id: 'FieldDateRangeInput.invalidEndDate'\n        });\n        const timeSlotsError = fetchTimeSlotsError ? /*#__PURE__*/React.createElement(\"p\", {\n          className: css.sideBarError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.timeSlotsError\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }\n        })) : null; // This is the place to collect breakdown estimation data.\n        // Note: lineItems are calculated and fetched from FTW backend\n        // so we need to pass only booking data that is needed otherwise\n        // If you have added new fields to the form that will affect to pricing,\n        // you need to add the values to handleOnChange function\n\n        const breakdownData = startDate && endDate ? {\n          startDate,\n          endDate\n        } : null;\n        const showEstimatedBreakdown = breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\n        const bookingInfoMaybe = showEstimatedBreakdown ? /*#__PURE__*/React.createElement(\"div\", {\n          className: css.priceBreakdownContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          className: css.priceBreakdownTitle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.priceBreakdownTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(EstimatedCustomerBreakdownMaybe, {\n          unitType: unitType,\n          breakdownData: breakdownData,\n          lineItems: lineItems,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }\n        })) : null;\n        const loadingSpinnerMaybe = fetchLineItemsInProgress ? /*#__PURE__*/React.createElement(IconSpinner, {\n          className: css.spinner,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }\n        }) : null;\n        const bookingInfoErrorMaybe = fetchLineItemsError ? /*#__PURE__*/React.createElement(\"span\", {\n          className: css.sideBarError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.fetchLineItemsError\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }\n        })) : null;\n        const dateFormatOptions = {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        };\n        const now = new Date();\n        const today = getStartOf(now);\n        const tomorrow = addTime(today, 1, 'days');\n        const startDatePlaceholderText = startDatePlaceholder || intl.formatDate(today, dateFormatOptions);\n        const endDatePlaceholderText = endDatePlaceholder || intl.formatDate(tomorrow, dateFormatOptions);\n        const submitButtonClasses = classNames(submitButtonWrapperClassName || css.submitButtonWrapper);\n        return /*#__PURE__*/React.createElement(Form, {\n          onSubmit: handleSubmit,\n          className: classes,\n          enforcePagePreloadFor: \"CheckoutPage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }\n        }, timeSlotsError, /*#__PURE__*/React.createElement(FormSpy, {\n          subscription: {\n            values: true\n          },\n          onChange: values => {\n            this.handleOnChange(values);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(FieldDateRangeInput, {\n          className: css.bookingDates,\n          name: \"bookingDates\",\n          unitType: unitType,\n          startDateId: `${formId}.bookingStartDate`,\n          startDateLabel: bookingStartLabel,\n          startDatePlaceholderText: startDatePlaceholderText,\n          endDateId: `${formId}.bookingEndDate`,\n          endDateLabel: bookingEndLabel,\n          endDatePlaceholderText: endDatePlaceholderText,\n          focusedInput: this.state.focusedInput,\n          onFocusedInputChange: this.onFocusedInputChange,\n          format: identity,\n          timeSlots: timeSlots,\n          useMobileMargins: true,\n          validate: composeValidators(required(requiredMessage), bookingDatesRequired(startDateErrorMessage, endDateErrorMessage)),\n          disabled: fetchLineItemsInProgress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }\n        }), bookingInfoMaybe, loadingSpinnerMaybe, bookingInfoErrorMaybe, /*#__PURE__*/React.createElement(\"p\", {\n          className: css.smallPrint,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: isOwnListing ? 'BookingDatesForm.ownListing' : 'BookingDatesForm.youWontBeChargedInfo',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: submitButtonClasses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(PrimaryButton, {\n          type: \"submit\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"BookingDatesForm.requestToBook\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\nBookingDatesFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  submitButtonWrapperClassName: null,\n  price: null,\n  isOwnListing: false,\n  startDatePlaceholder: null,\n  endDatePlaceholder: null,\n  timeSlots: null,\n  lineItems: null,\n  fetchLineItemsError: null\n};\nBookingDatesFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  submitButtonWrapperClassName: string,\n  unitType: propTypes.lineItemUnitType.isRequired,\n  price: propTypes.money,\n  isOwnListing: bool,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  onFetchTransactionLineItems: func.isRequired,\n  lineItems: array,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n  // from injectIntl\n  intl: intlShape.isRequired,\n  // for tests\n  startDatePlaceholder: string,\n  endDatePlaceholder: string\n};\nconst BookingDatesForm = compose(injectIntl)(BookingDatesFormComponent);\nBookingDatesForm.displayName = 'BookingDatesForm';\nexport default BookingDatesForm;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/OrderPanel/BookingDatesForm/BookingDatesForm.js"],"names":["React","Component","string","bool","arrayOf","array","func","compose","Form","FinalForm","FormSpy","classNames","config","FormattedMessage","intlShape","injectIntl","required","bookingDatesRequired","composeValidators","START_DATE","END_DATE","getStartOf","addTime","propTypes","IconSpinner","PrimaryButton","FieldDateRangeInput","EstimatedCustomerBreakdownMaybe","css","identity","v","BookingDatesFormComponent","constructor","props","state","focusedInput","handleFormSubmit","bind","onFocusedInputChange","handleOnChange","setState","e","startDate","endDate","bookingDates","preventDefault","onSubmit","formValues","values","listingId","isOwnListing","fetchLineItemsInProgress","onFetchTransactionLineItems","orderData","render","rootClassName","className","price","unitPrice","rest","classes","root","error","currency","fieldRenderProps","endDatePlaceholder","startDatePlaceholder","formId","handleSubmit","intl","submitButtonWrapperClassName","unitType","timeSlots","fetchTimeSlotsError","lineItems","fetchLineItemsError","bookingStartLabel","formatMessage","id","bookingEndLabel","requiredMessage","startDateErrorMessage","endDateErrorMessage","timeSlotsError","sideBarError","breakdownData","showEstimatedBreakdown","bookingInfoMaybe","priceBreakdownContainer","priceBreakdownTitle","loadingSpinnerMaybe","spinner","bookingInfoErrorMaybe","dateFormatOptions","weekday","month","day","now","Date","today","tomorrow","startDatePlaceholderText","formatDate","endDatePlaceholderText","submitButtonClasses","submitButtonWrapper","smallPrint","defaultProps","lineItemUnitType","isRequired","money","timeSlot","BookingDatesForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { string, bool, arrayOf, array, func } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { required, bookingDatesRequired, composeValidators } from '../../../util/validators';\r\nimport { START_DATE, END_DATE, getStartOf, addTime } from '../../../util/dates';\r\nimport { propTypes } from '../../../util/types';\r\nimport { Form, IconSpinner, PrimaryButton, FieldDateRangeInput } from '../../../components';\r\n\r\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\r\nimport css from './BookingDatesForm.module.css';\r\n\r\nconst identity = v => v;\r\n\r\nexport class BookingDatesFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { focusedInput: null };\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    this.onFocusedInputChange = this.onFocusedInputChange.bind(this);\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n  }\r\n\r\n  // Function that can be passed to nested components\r\n  // so that they can notify this component when the\r\n  // focused input changes.\r\n  onFocusedInputChange(focusedInput) {\r\n    this.setState({ focusedInput });\r\n  }\r\n\r\n  // In case start or end date for the booking is missing\r\n  // focus on that input, otherwise continue with the\r\n  // default handleSubmit function.\r\n  handleFormSubmit(e) {\r\n    const { startDate, endDate } = e.bookingDates || {};\r\n    if (!startDate) {\r\n      e.preventDefault();\r\n      this.setState({ focusedInput: START_DATE });\r\n    } else if (!endDate) {\r\n      e.preventDefault();\r\n      this.setState({ focusedInput: END_DATE });\r\n    } else {\r\n      this.props.onSubmit(e);\r\n    }\r\n  }\r\n\r\n  // When the values of the form are updated we need to fetch\r\n  // lineItems from FTW backend for the EstimatedTransactionMaybe\r\n  // In case you add more fields to the form, make sure you add\r\n  // the values here to the orderData object.\r\n  handleOnChange(formValues) {\r\n    const { startDate, endDate } =\r\n      formValues.values && formValues.values.bookingDates ? formValues.values.bookingDates : {};\r\n    const listingId = this.props.listingId;\r\n    const isOwnListing = this.props.isOwnListing;\r\n\r\n    if (startDate && endDate && !this.props.fetchLineItemsInProgress) {\r\n      this.props.onFetchTransactionLineItems({\r\n        orderData: { bookingDates: { startDate, endDate } },\r\n        listingId,\r\n        isOwnListing,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { rootClassName, className, price: unitPrice, ...rest } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    if (!unitPrice) {\r\n      return (\r\n        <div className={classes}>\r\n          <p className={css.error}>\r\n            <FormattedMessage id=\"BookingDatesForm.listingPriceMissing\" />\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    if (unitPrice.currency !== config.currency) {\r\n      return (\r\n        <div className={classes}>\r\n          <p className={css.error}>\r\n            <FormattedMessage id=\"BookingDatesForm.listingCurrencyInvalid\" />\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FinalForm\r\n        {...rest}\r\n        unitPrice={unitPrice}\r\n        onSubmit={this.handleFormSubmit}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            endDatePlaceholder,\r\n            startDatePlaceholder,\r\n            formId,\r\n            handleSubmit,\r\n            intl,\r\n            isOwnListing,\r\n            submitButtonWrapperClassName,\r\n            unitType,\r\n            values,\r\n            timeSlots,\r\n            fetchTimeSlotsError,\r\n            lineItems,\r\n            fetchLineItemsInProgress,\r\n            fetchLineItemsError,\r\n          } = fieldRenderProps;\r\n          const { startDate, endDate } = values && values.bookingDates ? values.bookingDates : {};\r\n\r\n          const bookingStartLabel = intl.formatMessage({\r\n            id: 'BookingDatesForm.bookingStartTitle',\r\n          });\r\n          const bookingEndLabel = intl.formatMessage({\r\n            id: 'BookingDatesForm.bookingEndTitle',\r\n          });\r\n          const requiredMessage = intl.formatMessage({\r\n            id: 'BookingDatesForm.requiredDate',\r\n          });\r\n          const startDateErrorMessage = intl.formatMessage({\r\n            id: 'FieldDateRangeInput.invalidStartDate',\r\n          });\r\n          const endDateErrorMessage = intl.formatMessage({\r\n            id: 'FieldDateRangeInput.invalidEndDate',\r\n          });\r\n          const timeSlotsError = fetchTimeSlotsError ? (\r\n            <p className={css.sideBarError}>\r\n              <FormattedMessage id=\"BookingDatesForm.timeSlotsError\" />\r\n            </p>\r\n          ) : null;\r\n\r\n          // This is the place to collect breakdown estimation data.\r\n          // Note: lineItems are calculated and fetched from FTW backend\r\n          // so we need to pass only booking data that is needed otherwise\r\n          // If you have added new fields to the form that will affect to pricing,\r\n          // you need to add the values to handleOnChange function\r\n          const breakdownData =\r\n            startDate && endDate\r\n              ? {\r\n                  startDate,\r\n                  endDate,\r\n                }\r\n              : null;\r\n\r\n          const showEstimatedBreakdown =\r\n            breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\r\n\r\n          const bookingInfoMaybe = showEstimatedBreakdown ? (\r\n            <div className={css.priceBreakdownContainer}>\r\n              <h3 className={css.priceBreakdownTitle}>\r\n                <FormattedMessage id=\"BookingDatesForm.priceBreakdownTitle\" />\r\n              </h3>\r\n              <EstimatedCustomerBreakdownMaybe\r\n                unitType={unitType}\r\n                breakdownData={breakdownData}\r\n                lineItems={lineItems}\r\n              />\r\n            </div>\r\n          ) : null;\r\n\r\n          const loadingSpinnerMaybe = fetchLineItemsInProgress ? (\r\n            <IconSpinner className={css.spinner} />\r\n          ) : null;\r\n\r\n          const bookingInfoErrorMaybe = fetchLineItemsError ? (\r\n            <span className={css.sideBarError}>\r\n              <FormattedMessage id=\"BookingDatesForm.fetchLineItemsError\" />\r\n            </span>\r\n          ) : null;\r\n\r\n          const dateFormatOptions = {\r\n            weekday: 'short',\r\n            month: 'short',\r\n            day: 'numeric',\r\n          };\r\n\r\n          const now = new Date();\r\n          const today = getStartOf(now);\r\n          const tomorrow = addTime(today, 1, 'days');\r\n          const startDatePlaceholderText =\r\n            startDatePlaceholder || intl.formatDate(today, dateFormatOptions);\r\n          const endDatePlaceholderText =\r\n            endDatePlaceholder || intl.formatDate(tomorrow, dateFormatOptions);\r\n          const submitButtonClasses = classNames(\r\n            submitButtonWrapperClassName || css.submitButtonWrapper\r\n          );\r\n\r\n          return (\r\n            <Form onSubmit={handleSubmit} className={classes} enforcePagePreloadFor=\"CheckoutPage\">\r\n              {timeSlotsError}\r\n              <FormSpy\r\n                subscription={{ values: true }}\r\n                onChange={values => {\r\n                  this.handleOnChange(values);\r\n                }}\r\n              />\r\n              <FieldDateRangeInput\r\n                className={css.bookingDates}\r\n                name=\"bookingDates\"\r\n                unitType={unitType}\r\n                startDateId={`${formId}.bookingStartDate`}\r\n                startDateLabel={bookingStartLabel}\r\n                startDatePlaceholderText={startDatePlaceholderText}\r\n                endDateId={`${formId}.bookingEndDate`}\r\n                endDateLabel={bookingEndLabel}\r\n                endDatePlaceholderText={endDatePlaceholderText}\r\n                focusedInput={this.state.focusedInput}\r\n                onFocusedInputChange={this.onFocusedInputChange}\r\n                format={identity}\r\n                timeSlots={timeSlots}\r\n                useMobileMargins\r\n                validate={composeValidators(\r\n                  required(requiredMessage),\r\n                  bookingDatesRequired(startDateErrorMessage, endDateErrorMessage)\r\n                )}\r\n                disabled={fetchLineItemsInProgress}\r\n              />\r\n\r\n              {bookingInfoMaybe}\r\n              {loadingSpinnerMaybe}\r\n              {bookingInfoErrorMaybe}\r\n\r\n              <p className={css.smallPrint}>\r\n                <FormattedMessage\r\n                  id={\r\n                    isOwnListing\r\n                      ? 'BookingDatesForm.ownListing'\r\n                      : 'BookingDatesForm.youWontBeChargedInfo'\r\n                  }\r\n                />\r\n              </p>\r\n              <div className={submitButtonClasses}>\r\n                <PrimaryButton type=\"submit\">\r\n                  <FormattedMessage id=\"BookingDatesForm.requestToBook\" />\r\n                </PrimaryButton>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nBookingDatesFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  submitButtonWrapperClassName: null,\r\n  price: null,\r\n  isOwnListing: false,\r\n  startDatePlaceholder: null,\r\n  endDatePlaceholder: null,\r\n  timeSlots: null,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\nBookingDatesFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  submitButtonWrapperClassName: string,\r\n\r\n  unitType: propTypes.lineItemUnitType.isRequired,\r\n  price: propTypes.money,\r\n  isOwnListing: bool,\r\n  timeSlots: arrayOf(propTypes.timeSlot),\r\n\r\n  onFetchTransactionLineItems: func.isRequired,\r\n  lineItems: array,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // for tests\r\n  startDatePlaceholder: string,\r\n  endDatePlaceholder: string,\r\n};\r\n\r\nconst BookingDatesForm = compose(injectIntl)(BookingDatesFormComponent);\r\nBookingDatesForm.displayName = 'BookingDatesForm';\r\n\r\nexport default BookingDatesForm;\r\n"]},"metadata":{},"sourceType":"module"}