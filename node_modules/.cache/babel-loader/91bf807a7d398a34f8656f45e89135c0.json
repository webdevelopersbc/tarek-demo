{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\TransactionPage\\\\ReviewForm\\\\ReviewForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { isTransactionsTransitionAlreadyReviewed } from '../../../util/errors';\nimport { propTypes } from '../../../util/types';\nimport { required } from '../../../util/validators';\nimport { FieldReviewRating, Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './ReviewForm.module.css';\n\nconst ReviewFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      className,\n      rootClassName,\n      disabled,\n      handleSubmit,\n      intl,\n      formId,\n      invalid,\n      reviewSent,\n      sendReviewError,\n      sendReviewInProgress\n    } = fieldRenderProps;\n    const reviewRating = intl.formatMessage({\n      id: 'ReviewForm.reviewRatingLabel'\n    });\n    const reviewRatingRequiredMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewRatingRequired'\n    });\n    const reviewContent = intl.formatMessage({\n      id: 'ReviewForm.reviewContentLabel'\n    });\n    const reviewContentPlaceholderMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewContentPlaceholder'\n    });\n    const reviewContentRequiredMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewContentRequired'\n    });\n    const errorMessage = isTransactionsTransitionAlreadyReviewed(sendReviewError) ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ReviewForm.reviewSubmitAlreadySent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ReviewForm.reviewSubmitFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }));\n    const errorArea = sendReviewError ? errorMessage : /*#__PURE__*/React.createElement(\"p\", {\n      className: css.errorPlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 58\n      }\n    });\n    const reviewSubmitMessage = intl.formatMessage({\n      id: 'ReviewForm.reviewSubmit'\n    });\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = sendReviewInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FieldReviewRating, {\n      className: css.reviewRating,\n      id: formId ? `${formId}.starRating` : 'starRating',\n      name: \"reviewRating\",\n      label: reviewRating,\n      validate: required(reviewRatingRequiredMessage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.reviewContent,\n      type: \"textarea\",\n      id: formId ? `${formId}.reviewContent` : 'reviewContent',\n      name: \"reviewContent\",\n      label: reviewContent,\n      placeholder: reviewContentPlaceholderMessage,\n      validate: required(reviewContentRequiredMessage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }), errorArea, /*#__PURE__*/React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: reviewSent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, reviewSubmitMessage));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }\n}));\n\n_c = ReviewFormComponent;\nReviewFormComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  sendReviewError: null\n};\nconst {\n  bool,\n  func,\n  string\n} = PropTypes;\nReviewFormComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  reviewSent: bool.isRequired,\n  sendReviewError: propTypes.error,\n  sendReviewInProgress: bool.isRequired\n};\nconst ReviewForm = compose(injectIntl)(ReviewFormComponent);\nReviewForm.displayName = 'ReviewForm';\nexport default ReviewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReviewFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/TransactionPage/ReviewForm/ReviewForm.js"],"names":["React","PropTypes","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","isTransactionsTransitionAlreadyReviewed","propTypes","required","FieldReviewRating","PrimaryButton","FieldTextInput","css","ReviewFormComponent","props","fieldRenderProps","className","rootClassName","disabled","handleSubmit","intl","formId","invalid","reviewSent","sendReviewError","sendReviewInProgress","reviewRating","formatMessage","id","reviewRatingRequiredMessage","reviewContent","reviewContentPlaceholderMessage","reviewContentRequiredMessage","errorMessage","error","errorArea","errorPlaceholder","reviewSubmitMessage","classes","root","submitInProgress","submitDisabled","submitButton","defaultProps","bool","func","string","isRequired","onSubmit","ReviewForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { isTransactionsTransitionAlreadyReviewed } from '../../../util/errors';\r\nimport { propTypes } from '../../../util/types';\r\nimport { required } from '../../../util/validators';\r\n\r\nimport { FieldReviewRating, Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './ReviewForm.module.css';\r\n\r\nconst ReviewFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        className,\r\n        rootClassName,\r\n        disabled,\r\n        handleSubmit,\r\n        intl,\r\n        formId,\r\n        invalid,\r\n        reviewSent,\r\n        sendReviewError,\r\n        sendReviewInProgress,\r\n      } = fieldRenderProps;\r\n\r\n      const reviewRating = intl.formatMessage({ id: 'ReviewForm.reviewRatingLabel' });\r\n      const reviewRatingRequiredMessage = intl.formatMessage({\r\n        id: 'ReviewForm.reviewRatingRequired',\r\n      });\r\n\r\n      const reviewContent = intl.formatMessage({ id: 'ReviewForm.reviewContentLabel' });\r\n      const reviewContentPlaceholderMessage = intl.formatMessage({\r\n        id: 'ReviewForm.reviewContentPlaceholder',\r\n      });\r\n      const reviewContentRequiredMessage = intl.formatMessage({\r\n        id: 'ReviewForm.reviewContentRequired',\r\n      });\r\n\r\n      const errorMessage = isTransactionsTransitionAlreadyReviewed(sendReviewError) ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"ReviewForm.reviewSubmitAlreadySent\" />\r\n        </p>\r\n      ) : (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"ReviewForm.reviewSubmitFailed\" />\r\n        </p>\r\n      );\r\n      const errorArea = sendReviewError ? errorMessage : <p className={css.errorPlaceholder} />;\r\n\r\n      const reviewSubmitMessage = intl.formatMessage({\r\n        id: 'ReviewForm.reviewSubmit',\r\n      });\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n      const submitInProgress = sendReviewInProgress;\r\n      const submitDisabled = invalid || disabled || submitInProgress;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldReviewRating\r\n            className={css.reviewRating}\r\n            id={formId ? `${formId}.starRating` : 'starRating'}\r\n            name=\"reviewRating\"\r\n            label={reviewRating}\r\n            validate={required(reviewRatingRequiredMessage)}\r\n          />\r\n\r\n          <FieldTextInput\r\n            className={css.reviewContent}\r\n            type=\"textarea\"\r\n            id={formId ? `${formId}.reviewContent` : 'reviewContent'}\r\n            name=\"reviewContent\"\r\n            label={reviewContent}\r\n            placeholder={reviewContentPlaceholderMessage}\r\n            validate={required(reviewContentRequiredMessage)}\r\n          />\r\n\r\n          {errorArea}\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n            ready={reviewSent}\r\n          >\r\n            {reviewSubmitMessage}\r\n          </PrimaryButton>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nReviewFormComponent.defaultProps = { className: null, rootClassName: null, sendReviewError: null };\r\n\r\nconst { bool, func, string } = PropTypes;\r\n\r\nReviewFormComponent.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func.isRequired,\r\n  reviewSent: bool.isRequired,\r\n  sendReviewError: propTypes.error,\r\n  sendReviewInProgress: bool.isRequired,\r\n};\r\n\r\nconst ReviewForm = compose(injectIntl)(ReviewFormComponent);\r\nReviewForm.displayName = 'ReviewForm';\r\n\r\nexport default ReviewForm;\r\n"]},"metadata":{},"sourceType":"module"}