{"ast":null,"code":"/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n\n  while (i < str.length) {\n    var char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({\n        type: \"MODIFIER\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({\n        type: \"ESCAPED_CHAR\",\n        index: i++,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({\n        type: \"OPEN\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({\n        type: \"CLOSE\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n\n        if ( // `0-9`\n        code >= 48 && code <= 57 || // `A-Z`\n        code >= 65 && code <= 90 || // `a-z`\n        code >= 97 && code <= 122 || // `_`\n        code === 95) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(\"Missing parameter name at \" + i);\n      tokens.push({\n        type: \"NAME\",\n        index: i,\n        value: name\n      });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \" + j);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \" + j);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(\"Unbalanced pattern at \" + i);\n      if (!pattern) throw new TypeError(\"Missing pattern at \" + i);\n      tokens.push({\n        type: \"PATTERN\",\n        index: i,\n        value: pattern\n      });\n      i = j;\n      continue;\n    }\n\n    tokens.push({\n      type: \"CHAR\",\n      index: i,\n      value: str[i++]\n    });\n  }\n\n  tokens.push({\n    type: \"END\",\n    index: i,\n    value: \"\"\n  });\n  return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\n\n\nexport function parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tokens = lexer(str);\n  var _a = options.prefixes,\n      prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\" + escapeString(options.delimiter || \"/#?\") + \"]+?\";\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n\n  var tryConsume = function (type) {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  var mustConsume = function (type) {\n    var value = tryConsume(type);\n    if (value !== undefined) return value;\n    var _a = tokens[i],\n        nextType = _a.type,\n        index = _a.index;\n    throw new TypeError(\"Unexpected \" + nextType + \" at \" + index + \", expected \" + type);\n  };\n\n  var consumeText = function () {\n    var result = \"\";\n    var value; // tslint:disable-next-line\n\n    while (value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result += value;\n    }\n\n    return result;\n  };\n\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      var prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix: prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    var open = tryConsume(\"OPEN\");\n\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix: prefix,\n        suffix: suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\n\nexport function compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\nexport function tokensToFunction(tokens, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var reFlags = flags(options);\n  var _a = options.encode,\n      encode = _a === void 0 ? function (x) {\n    return x;\n  } : _a,\n      _b = options.validate,\n      validate = _b === void 0 ? true : _b; // Compile all the tokens into regexps.\n\n  var matches = tokens.map(function (token) {\n    if (typeof token === \"object\") {\n      return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n    }\n  });\n  return function (data) {\n    var path = \"\";\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var optional = token.modifier === \"?\" || token.modifier === \"*\";\n      var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          var segment = encode(value[j], token);\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        var segment = encode(String(value), token);\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n      var typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n    }\n\n    return path;\n  };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\n\nexport function match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\n\nexport function regexpToFunction(re, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.decode,\n      decode = _a === void 0 ? function (x) {\n    return x;\n  } : _a;\n  return function (pathname) {\n    var m = re.exec(pathname);\n    if (!m) return false;\n    var path = m[0],\n        index = m.index;\n    var params = Object.create(null);\n\n    var _loop_1 = function (i) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) return \"continue\";\n      var key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    };\n\n    for (var i = 1; i < m.length; i++) {\n      _loop_1(i);\n    }\n\n    return {\n      path: path,\n      index: index,\n      params: params\n    };\n  };\n}\n/**\n * Escape a regular expression string.\n */\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\n\n\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\n\n\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path; // Use a negative lookahead to match only capturing groups.\n\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: \"\",\n        suffix: \"\",\n        modifier: \"\",\n        pattern: \"\"\n      });\n    }\n  }\n\n  return path;\n}\n/**\n * Transform an array into a regexp.\n */\n\n\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function (path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\n\n\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\n\n\nexport function tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.strict,\n      strict = _a === void 0 ? false : _a,\n      _b = options.start,\n      start = _b === void 0 ? true : _b,\n      _c = options.end,\n      end = _c === void 0 ? true : _c,\n      _d = options.encode,\n      encode = _d === void 0 ? function (x) {\n    return x;\n  } : _d;\n  var endsWith = \"[\" + escapeString(options.endsWith || \"\") + \"]|$\";\n  var delimiter = \"[\" + escapeString(options.delimiter || \"/#?\") + \"]\";\n  var route = start ? \"^\" : \"\"; // Iterate over the tokens and create our regexp string.\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\" + prefix + \"((?:\" + token.pattern + \")(?:\" + suffix + prefix + \"(?:\" + token.pattern + \"))*)\" + suffix + \")\" + mod;\n          } else {\n            route += \"(?:\" + prefix + \"(\" + token.pattern + \")\" + suffix + \")\" + token.modifier;\n          }\n        } else {\n          route += \"(\" + token.pattern + \")\" + token.modifier;\n        }\n      } else {\n        route += \"(?:\" + prefix + suffix + \")\" + token.modifier;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += delimiter + \"?\";\n    route += !options.endsWith ? \"$\" : \"(?=\" + endsWith + \")\";\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : // tslint:disable-next-line\n    endToken === undefined;\n\n    if (!strict) {\n      route += \"(?:\" + delimiter + \"(?=\" + endsWith + \"))?\";\n    }\n\n    if (!isEndDelimited) {\n      route += \"(?=\" + delimiter + \"|\" + endsWith + \")\";\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\n\nexport function pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    // tslint:disable-next-line\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map(token => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function(pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(value => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  const groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: \"\",\n        suffix: \"\",\n        modifier: \"\",\n        pattern: \"\"\n      });\n    }\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map(path => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp allows an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x\n  } = options;\n  const endsWith = `[${escapeString(options.endsWith || \"\")}]|$`;\n  const delimiter = `[${escapeString(options.delimiter || \"/#?\")}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiter}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n        : // tslint:disable-next-line\n          endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}