{"ast":null,"code":"/**\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but sometimes it is necessary to sanitize the user-generated content of received entities.\r\n * If you use this data in component props without any sanitization or encoding,\r\n * it might create XSS vulnerabilities.\r\n *\r\n * You should especially consider how you are using extended data inside the app.\r\n */\nconst ESCAPE_TEXT_REGEXP = /[<>]/g;\nconst ESCAPE_TEXT_REPLACEMENTS = {\n  //fullwidth lesser-than character\n  '<': '\\uff1c',\n  //fullwidth greater-than character\n  '>': '\\uff1e'\n}; // An example how you could sanitize text content.\n// This swaps some coding related characters to less dangerous ones\n\nconst sanitizeText = str => str == null ? str : typeof str === 'string' ? str.replace(ESCAPE_TEXT_REGEXP, ch => ESCAPE_TEXT_REPLACEMENTS[ch]) : '';\n/**\r\n * Sanitize user entity.\r\n * If you add public data, you should probably sanitize it here.\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but if you use this data on props, it might create XSS vulnerabilities\r\n * E.g. you should sanitize and encode URI if you are creating links from public data.\r\n */\n\n\nexport const sanitizeUser = entity => {\n  const {\n    attributes,\n    ...restEntity\n  } = entity || {};\n  const {\n    profile,\n    ...restAttributes\n  } = attributes || {};\n  const {\n    bio,\n    displayName,\n    abbreviatedName,\n    publicData,\n    metadata\n  } = profile || {};\n\n  const sanitizePublicData = publicData => {\n    // TODO: If you add public data, you should probably sanitize it here.\n    return publicData ? {\n      publicData\n    } : {};\n  };\n\n  const sanitizeMetadata = metadata => {\n    // TODO: If you add user-generated metadata through Integration API,\n    // you should probably sanitize it here.\n    return metadata ? {\n      metadata\n    } : {};\n  };\n\n  const profileMaybe = profile ? {\n    profile: {\n      abbreviatedName: sanitizeText(abbreviatedName),\n      displayName: sanitizeText(displayName),\n      bio: sanitizeText(bio),\n      ...sanitizePublicData(publicData),\n      ...sanitizeMetadata(metadata)\n    }\n  } : {};\n  const attributesMaybe = attributes ? {\n    attributes: { ...profileMaybe,\n      ...restAttributes\n    }\n  } : {};\n  return { ...attributesMaybe,\n    ...restEntity\n  };\n};\n/**\r\n * Sanitize listing entity.\r\n * If you add public data, you should probably sanitize it here.\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but if you use this data on props, it might create XSS vulnerabilities\r\n * E.g. you should sanitize and encode URI if you are creating links from public data.\r\n */\n\nexport const sanitizeListing = entity => {\n  const {\n    attributes,\n    ...restEntity\n  } = entity;\n  const {\n    title,\n    description,\n    publicData,\n    ...restAttributes\n  } = attributes || {};\n\n  const sanitizeLocation = location => {\n    const {\n      address,\n      building\n    } = location || {};\n    return {\n      address: sanitizeText(address),\n      building: sanitizeText(building)\n    };\n  };\n\n  const sanitizePublicData = publicData => {\n    // Here's an example how you could sanitize location and rules from publicData:\n    // TODO: If you add public data, you should probably sanitize it here.\n    const {\n      location,\n      rules,\n      ...restPublicData\n    } = publicData || {};\n    const locationMaybe = location ? {\n      location: sanitizeLocation(location)\n    } : {};\n    const rulesMaybe = rules ? {\n      rules: sanitizeText(rules)\n    } : {};\n    return publicData ? {\n      publicData: { ...locationMaybe,\n        ...rulesMaybe,\n        ...restPublicData\n      }\n    } : {};\n  };\n\n  const attributesMaybe = attributes ? {\n    attributes: {\n      title: sanitizeText(title),\n      description: sanitizeText(description),\n      ...sanitizePublicData(publicData),\n      ...restAttributes\n    }\n  } : {};\n  return { ...attributesMaybe,\n    ...restEntity\n  };\n};\n/**\r\n * Sanitize entities if needed.\r\n * Remember to add your own sanitization rules for your extended data\r\n */\n\nexport const sanitizeEntity = entity => {\n  const {\n    type\n  } = entity;\n\n  switch (type) {\n    case 'listing':\n      return sanitizeListing(entity);\n\n    case 'user':\n      return sanitizeUser(entity);\n\n    default:\n      return entity;\n  }\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/sanitize.js"],"names":["ESCAPE_TEXT_REGEXP","ESCAPE_TEXT_REPLACEMENTS","sanitizeText","str","replace","ch","sanitizeUser","entity","attributes","restEntity","profile","restAttributes","bio","displayName","abbreviatedName","publicData","metadata","sanitizePublicData","sanitizeMetadata","profileMaybe","attributesMaybe","sanitizeListing","title","description","sanitizeLocation","location","address","building","rules","restPublicData","locationMaybe","rulesMaybe","sanitizeEntity","type"],"mappings":"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","sourcesContent":["/**\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but sometimes it is necessary to sanitize the user-generated content of received entities.\r\n * If you use this data in component props without any sanitization or encoding,\r\n * it might create XSS vulnerabilities.\r\n *\r\n * You should especially consider how you are using extended data inside the app.\r\n */\r\n\r\nconst ESCAPE_TEXT_REGEXP = /[<>]/g;\r\nconst ESCAPE_TEXT_REPLACEMENTS = {\r\n  //fullwidth lesser-than character\r\n  '<': '\\uff1c',\r\n  //fullwidth greater-than character\r\n  '>': '\\uff1e',\r\n};\r\n\r\n// An example how you could sanitize text content.\r\n// This swaps some coding related characters to less dangerous ones\r\nconst sanitizeText = str =>\r\n  str == null\r\n    ? str\r\n    : typeof str === 'string'\r\n    ? str.replace(ESCAPE_TEXT_REGEXP, ch => ESCAPE_TEXT_REPLACEMENTS[ch])\r\n    : '';\r\n\r\n/**\r\n * Sanitize user entity.\r\n * If you add public data, you should probably sanitize it here.\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but if you use this data on props, it might create XSS vulnerabilities\r\n * E.g. you should sanitize and encode URI if you are creating links from public data.\r\n */\r\nexport const sanitizeUser = entity => {\r\n  const { attributes, ...restEntity } = entity || {};\r\n  const { profile, ...restAttributes } = attributes || {};\r\n  const { bio, displayName, abbreviatedName, publicData, metadata } = profile || {};\r\n\r\n  const sanitizePublicData = publicData => {\r\n    // TODO: If you add public data, you should probably sanitize it here.\r\n    return publicData ? { publicData } : {};\r\n  };\r\n  const sanitizeMetadata = metadata => {\r\n    // TODO: If you add user-generated metadata through Integration API,\r\n    // you should probably sanitize it here.\r\n    return metadata ? { metadata } : {};\r\n  };\r\n\r\n  const profileMaybe = profile\r\n    ? {\r\n        profile: {\r\n          abbreviatedName: sanitizeText(abbreviatedName),\r\n          displayName: sanitizeText(displayName),\r\n          bio: sanitizeText(bio),\r\n          ...sanitizePublicData(publicData),\r\n          ...sanitizeMetadata(metadata),\r\n        },\r\n      }\r\n    : {};\r\n  const attributesMaybe = attributes ? { attributes: { ...profileMaybe, ...restAttributes } } : {};\r\n\r\n  return { ...attributesMaybe, ...restEntity };\r\n};\r\n\r\n/**\r\n * Sanitize listing entity.\r\n * If you add public data, you should probably sanitize it here.\r\n * By default, React DOM escapes any values embedded in JSX before rendering them,\r\n * but if you use this data on props, it might create XSS vulnerabilities\r\n * E.g. you should sanitize and encode URI if you are creating links from public data.\r\n */\r\nexport const sanitizeListing = entity => {\r\n  const { attributes, ...restEntity } = entity;\r\n  const { title, description, publicData, ...restAttributes } = attributes || {};\r\n\r\n  const sanitizeLocation = location => {\r\n    const { address, building } = location || {};\r\n    return { address: sanitizeText(address), building: sanitizeText(building) };\r\n  };\r\n\r\n  const sanitizePublicData = publicData => {\r\n    // Here's an example how you could sanitize location and rules from publicData:\r\n    // TODO: If you add public data, you should probably sanitize it here.\r\n    const { location, rules, ...restPublicData } = publicData || {};\r\n    const locationMaybe = location ? { location: sanitizeLocation(location) } : {};\r\n    const rulesMaybe = rules ? { rules: sanitizeText(rules) } : {};\r\n\r\n    return publicData ? { publicData: { ...locationMaybe, ...rulesMaybe, ...restPublicData } } : {};\r\n  };\r\n\r\n  const attributesMaybe = attributes\r\n    ? {\r\n        attributes: {\r\n          title: sanitizeText(title),\r\n          description: sanitizeText(description),\r\n          ...sanitizePublicData(publicData),\r\n          ...restAttributes,\r\n        },\r\n      }\r\n    : {};\r\n\r\n  return { ...attributesMaybe, ...restEntity };\r\n};\r\n\r\n/**\r\n * Sanitize entities if needed.\r\n * Remember to add your own sanitization rules for your extended data\r\n */\r\nexport const sanitizeEntity = entity => {\r\n  const { type } = entity;\r\n  switch (type) {\r\n    case 'listing':\r\n      return sanitizeListing(entity);\r\n    case 'user':\r\n      return sanitizeUser(entity);\r\n    default:\r\n      return entity;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}