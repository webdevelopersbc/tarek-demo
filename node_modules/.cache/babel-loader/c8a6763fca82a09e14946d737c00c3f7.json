{"ast":null,"code":"import toPairs from 'lodash/toPairs';\nimport { types as sdkTypes } from './sdkLoader';\nimport { diffInTime } from './dates';\nconst {\n  LatLng,\n  Money\n} = sdkTypes;\nexport const PASSWORD_MIN_LENGTH = 8;\nexport const PASSWORD_MAX_LENGTH = 256;\n\nconst isNonEmptyString = val => {\n  return typeof val === 'string' && val.trim().length > 0;\n};\n/**\r\n * Validator functions and helpers for Final Forms\r\n */\n// Final Form expects and undefined value for a successful validation\n\n\nconst VALID = undefined;\nexport const required = message => value => {\n  if (typeof value === 'undefined' || value === null) {\n    // undefined or null values are invalid\n    return message;\n  }\n\n  if (typeof value === 'string') {\n    // string must be nonempty when trimmed\n    return isNonEmptyString(value) ? VALID : message;\n  }\n\n  return VALID;\n};\nexport const requiredStringNoTrim = message => value => {\n  return typeof value === 'string' && value.length > 0 ? VALID : message;\n}; // DEPRECATED in favor of required\n\nexport const requiredBoolean = message => value => {\n  return typeof value === 'boolean' ? VALID : message;\n}; // DEPRECATED in favor of required\n\nexport const requiredAndNonEmptyString = message => value => {\n  return isNonEmptyString(value) ? VALID : message;\n};\nexport const requiredFieldArrayCheckbox = message => value => {\n  if (!value) {\n    return message;\n  }\n\n  const entries = toPairs(value);\n  const hasSelectedValues = entries.filter(e => !!e[1]).length > 0;\n  return hasSelectedValues ? VALID : message;\n};\nexport const minLength = (message, minimumLength) => value => {\n  const hasLength = value && typeof value.length === 'number';\n  return hasLength && value.length >= minimumLength ? VALID : message;\n};\nexport const maxLength = (message, maximumLength) => value => {\n  if (!value) {\n    return VALID;\n  }\n\n  const hasLength = value && typeof value.length === 'number';\n  return hasLength && value.length <= maximumLength ? VALID : message;\n};\nexport const nonEmptyArray = message => value => {\n  return value && Array.isArray(value) && value.length > 0 ? VALID : message;\n};\nexport const autocompleteSearchRequired = message => value => {\n  return value && value.search ? VALID : message;\n};\nexport const autocompletePlaceSelected = message => value => {\n  const selectedPlaceIsValid = value && value.selectedPlace && value.selectedPlace.address && value.selectedPlace.origin instanceof LatLng;\n  return selectedPlaceIsValid ? VALID : message;\n};\nexport const bookingDateRequired = inValidDateMessage => value => {\n  const dateIsValid = value && value.date instanceof Date;\n  return !dateIsValid ? inValidDateMessage : VALID;\n};\nexport const bookingDatesRequired = (inValidStartDateMessage, inValidEndDateMessage) => value => {\n  const startDateIsValid = value && value.startDate instanceof Date;\n  const endDateIsValid = value && value.endDate instanceof Date;\n\n  if (!startDateIsValid) {\n    return inValidStartDateMessage;\n  } else if (!endDateIsValid) {\n    return inValidEndDateMessage;\n  } else {\n    return VALID;\n  }\n}; // Source: http://www.regular-expressions.info/email.html\n// See the link above for an explanation of the tradeoffs.\n\nconst EMAIL_RE = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\nexport const emailFormatValid = message => value => {\n  return value && EMAIL_RE.test(value) ? VALID : message;\n};\nexport const moneySubUnitAmountAtLeast = (message, minValue) => value => {\n  return value instanceof Money && value.amount >= minValue ? VALID : message;\n};\n\nconst parseNum = str => {\n  const num = Number.parseInt(str, 10);\n  return Number.isNaN(num) ? null : num;\n};\n\nexport const numberAtLeast = (message, minNumber) => value => {\n  const valueNum = parseNum(value);\n  return typeof valueNum === 'number' && valueNum >= minNumber ? VALID : message;\n};\nexport const ageAtLeast = (message, minYears) => value => {\n  const {\n    year,\n    month,\n    day\n  } = value;\n  const dayNum = parseNum(day);\n  const monthNum = parseNum(month);\n  const yearNum = parseNum(year); // day, month, and year needs to be numbers\n\n  if (dayNum !== null && monthNum !== null && yearNum !== null) {\n    const now = new Date();\n    const age = new Date(yearNum, monthNum - 1, dayNum);\n    const ageInYears = diffInTime(now, age, 'years', true);\n    return age && age instanceof Date && ageInYears >= minYears ? VALID : message;\n  }\n\n  return message;\n};\nexport const validBusinessURL = message => value => {\n  if (typeof value === 'undefined' || value === null) {\n    return message;\n  }\n\n  const disallowedChars = /[^-A-Za-z0-9+&@#/%?=~_|!:,.;()]/;\n  const protocolTokens = value.split(':');\n  const includesProtocol = protocolTokens.length > 1;\n  const usesHttpProtocol = includesProtocol && !!protocolTokens[0].match(/^(https?)/);\n  const invalidCharacters = !!value.match(disallowedChars);\n  const invalidProtocol = !(usesHttpProtocol || !includesProtocol); // Stripe checks against example.com\n\n  const isExampleDotCom = !!value.match(/^(https?:\\/\\/example\\.com|example\\.com)/);\n  const isLocalhost = !!value.match(/^(https?:\\/\\/localhost($|:|\\/)|localhost($|:|\\/))/);\n  return invalidCharacters || invalidProtocol || isExampleDotCom || isLocalhost ? message : VALID;\n};\nexport const validSsnLast4 = message => value => {\n  return value.length === 4 ? VALID : message;\n};\nexport const validHKID = message => value => {\n  // Accept value 000000000 for testing Stripe\n  if (value.length === 9 && value.match(/([0]{9})/)) {\n    return VALID;\n  } // HKID format example: AB364912(5)\n  // ID can start with one or two letters and the check digit in the end can be in brackets or not\n\n\n  if (value.length < 8) {\n    return message;\n  } // Handle possible brackets in value\n\n\n  if (value.charAt(value.length - 3) === '(' && value.charAt(value.length - 1) === ')') {\n    value = value.substring(0, value.length - 3) + value.charAt(value.length - 2);\n  }\n\n  value = value.toUpperCase(); // Check that pattern is correct and split value to array\n\n  const hkidPattern = /^([A-Z]{1,2})([0-9]{6})([A0-9])$/;\n  const matchArray = value.match(hkidPattern);\n\n  if (!matchArray) {\n    return message;\n  }\n\n  const charPart = matchArray[1];\n  const numPart = matchArray[2];\n  const checkDigit = matchArray[3]; // Calculate the checksum for character part.\n  // Transfer letters to numbers so that A=10, B=11, C=12 etc.\n  // If there is only one letter in the ID use 36 as the first value\n  // Total calculation is weighted so that 1st digit is x9, 2nd digit x8, 3rd digit x7 etc.\n\n  const strValidChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let checkSum = 0;\n\n  if (charPart.length === 2) {\n    checkSum += 9 * (10 + strValidChars.indexOf(charPart.charAt(0)));\n    checkSum += 8 * (10 + strValidChars.indexOf(charPart.charAt(1)));\n  } else {\n    checkSum += 9 * 36;\n    checkSum += 8 * (10 + strValidChars.indexOf(charPart));\n  } // Calculate the checksum for numeric part\n\n\n  for (let i = 0, j = 7; i < numPart.length; i++, j--) {\n    checkSum += j * numPart.charAt(i);\n  } // Verify the check digit\n\n\n  const remaining = checkSum % 11;\n  let verify = remaining === 0 ? 0 : 11 - remaining;\n  verify = verify.toString();\n  const isValid = verify === checkDigit || verify === 10 && checkDigit === 'A';\n  return isValid ? VALID : message;\n};\nexport const validSGID = message => value => {\n  return value.length === 9 ? VALID : message;\n};\nexport const composeValidators = (...validators) => value => validators.reduce((error, validator) => error || validator(value), VALID);","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/validators.js"],"names":["toPairs","types","sdkTypes","diffInTime","LatLng","Money","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","isNonEmptyString","val","trim","length","VALID","undefined","required","message","value","requiredStringNoTrim","requiredBoolean","requiredAndNonEmptyString","requiredFieldArrayCheckbox","entries","hasSelectedValues","filter","e","minLength","minimumLength","hasLength","maxLength","maximumLength","nonEmptyArray","Array","isArray","autocompleteSearchRequired","search","autocompletePlaceSelected","selectedPlaceIsValid","selectedPlace","address","origin","bookingDateRequired","inValidDateMessage","dateIsValid","date","Date","bookingDatesRequired","inValidStartDateMessage","inValidEndDateMessage","startDateIsValid","startDate","endDateIsValid","endDate","EMAIL_RE","emailFormatValid","test","moneySubUnitAmountAtLeast","minValue","amount","parseNum","str","num","Number","parseInt","isNaN","numberAtLeast","minNumber","valueNum","ageAtLeast","minYears","year","month","day","dayNum","monthNum","yearNum","now","age","ageInYears","validBusinessURL","disallowedChars","protocolTokens","split","includesProtocol","usesHttpProtocol","match","invalidCharacters","invalidProtocol","isExampleDotCom","isLocalhost","validSsnLast4","validHKID","charAt","substring","toUpperCase","hkidPattern","matchArray","charPart","numPart","checkDigit","strValidChars","checkSum","indexOf","i","j","remaining","verify","toString","isValid","validSGID","composeValidators","validators","reduce","error","validator"],"mappings":"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","sourcesContent":["import toPairs from 'lodash/toPairs';\r\nimport { types as sdkTypes } from './sdkLoader';\r\nimport { diffInTime } from './dates';\r\n\r\nconst { LatLng, Money } = sdkTypes;\r\n\r\nexport const PASSWORD_MIN_LENGTH = 8;\r\nexport const PASSWORD_MAX_LENGTH = 256;\r\n\r\nconst isNonEmptyString = val => {\r\n  return typeof val === 'string' && val.trim().length > 0;\r\n};\r\n\r\n/**\r\n * Validator functions and helpers for Final Forms\r\n */\r\n\r\n// Final Form expects and undefined value for a successful validation\r\nconst VALID = undefined;\r\n\r\nexport const required = message => value => {\r\n  if (typeof value === 'undefined' || value === null) {\r\n    // undefined or null values are invalid\r\n    return message;\r\n  }\r\n  if (typeof value === 'string') {\r\n    // string must be nonempty when trimmed\r\n    return isNonEmptyString(value) ? VALID : message;\r\n  }\r\n  return VALID;\r\n};\r\n\r\nexport const requiredStringNoTrim = message => value => {\r\n  return typeof value === 'string' && value.length > 0 ? VALID : message;\r\n};\r\n\r\n// DEPRECATED in favor of required\r\nexport const requiredBoolean = message => value => {\r\n  return typeof value === 'boolean' ? VALID : message;\r\n};\r\n\r\n// DEPRECATED in favor of required\r\nexport const requiredAndNonEmptyString = message => value => {\r\n  return isNonEmptyString(value) ? VALID : message;\r\n};\r\n\r\nexport const requiredFieldArrayCheckbox = message => value => {\r\n  if (!value) {\r\n    return message;\r\n  }\r\n\r\n  const entries = toPairs(value);\r\n  const hasSelectedValues = entries.filter(e => !!e[1]).length > 0;\r\n  return hasSelectedValues ? VALID : message;\r\n};\r\n\r\nexport const minLength = (message, minimumLength) => value => {\r\n  const hasLength = value && typeof value.length === 'number';\r\n  return hasLength && value.length >= minimumLength ? VALID : message;\r\n};\r\n\r\nexport const maxLength = (message, maximumLength) => value => {\r\n  if (!value) {\r\n    return VALID;\r\n  }\r\n  const hasLength = value && typeof value.length === 'number';\r\n  return hasLength && value.length <= maximumLength ? VALID : message;\r\n};\r\n\r\nexport const nonEmptyArray = message => value => {\r\n  return value && Array.isArray(value) && value.length > 0 ? VALID : message;\r\n};\r\n\r\nexport const autocompleteSearchRequired = message => value => {\r\n  return value && value.search ? VALID : message;\r\n};\r\n\r\nexport const autocompletePlaceSelected = message => value => {\r\n  const selectedPlaceIsValid =\r\n    value &&\r\n    value.selectedPlace &&\r\n    value.selectedPlace.address &&\r\n    value.selectedPlace.origin instanceof LatLng;\r\n  return selectedPlaceIsValid ? VALID : message;\r\n};\r\n\r\nexport const bookingDateRequired = inValidDateMessage => value => {\r\n  const dateIsValid = value && value.date instanceof Date;\r\n  return !dateIsValid ? inValidDateMessage : VALID;\r\n};\r\n\r\nexport const bookingDatesRequired = (inValidStartDateMessage, inValidEndDateMessage) => value => {\r\n  const startDateIsValid = value && value.startDate instanceof Date;\r\n  const endDateIsValid = value && value.endDate instanceof Date;\r\n\r\n  if (!startDateIsValid) {\r\n    return inValidStartDateMessage;\r\n  } else if (!endDateIsValid) {\r\n    return inValidEndDateMessage;\r\n  } else {\r\n    return VALID;\r\n  }\r\n};\r\n\r\n// Source: http://www.regular-expressions.info/email.html\r\n// See the link above for an explanation of the tradeoffs.\r\nconst EMAIL_RE = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n\r\nexport const emailFormatValid = message => value => {\r\n  return value && EMAIL_RE.test(value) ? VALID : message;\r\n};\r\n\r\nexport const moneySubUnitAmountAtLeast = (message, minValue) => value => {\r\n  return value instanceof Money && value.amount >= minValue ? VALID : message;\r\n};\r\n\r\nconst parseNum = str => {\r\n  const num = Number.parseInt(str, 10);\r\n  return Number.isNaN(num) ? null : num;\r\n};\r\n\r\nexport const numberAtLeast = (message, minNumber) => value => {\r\n  const valueNum = parseNum(value);\r\n  return typeof valueNum === 'number' && valueNum >= minNumber ? VALID : message;\r\n};\r\n\r\nexport const ageAtLeast = (message, minYears) => value => {\r\n  const { year, month, day } = value;\r\n  const dayNum = parseNum(day);\r\n  const monthNum = parseNum(month);\r\n  const yearNum = parseNum(year);\r\n\r\n  // day, month, and year needs to be numbers\r\n  if (dayNum !== null && monthNum !== null && yearNum !== null) {\r\n    const now = new Date();\r\n    const age = new Date(yearNum, monthNum - 1, dayNum);\r\n    const ageInYears = diffInTime(now, age, 'years', true);\r\n\r\n    return age && age instanceof Date && ageInYears >= minYears ? VALID : message;\r\n  }\r\n  return message;\r\n};\r\n\r\nexport const validBusinessURL = message => value => {\r\n  if (typeof value === 'undefined' || value === null) {\r\n    return message;\r\n  }\r\n\r\n  const disallowedChars = /[^-A-Za-z0-9+&@#/%?=~_|!:,.;()]/;\r\n  const protocolTokens = value.split(':');\r\n  const includesProtocol = protocolTokens.length > 1;\r\n  const usesHttpProtocol = includesProtocol && !!protocolTokens[0].match(/^(https?)/);\r\n\r\n  const invalidCharacters = !!value.match(disallowedChars);\r\n  const invalidProtocol = !(usesHttpProtocol || !includesProtocol);\r\n  // Stripe checks against example.com\r\n  const isExampleDotCom = !!value.match(/^(https?:\\/\\/example\\.com|example\\.com)/);\r\n  const isLocalhost = !!value.match(/^(https?:\\/\\/localhost($|:|\\/)|localhost($|:|\\/))/);\r\n  return invalidCharacters || invalidProtocol || isExampleDotCom || isLocalhost ? message : VALID;\r\n};\r\n\r\nexport const validSsnLast4 = message => value => {\r\n  return value.length === 4 ? VALID : message;\r\n};\r\n\r\nexport const validHKID = message => value => {\r\n  // Accept value 000000000 for testing Stripe\r\n  if (value.length === 9 && value.match(/([0]{9})/)) {\r\n    return VALID;\r\n  }\r\n\r\n  // HKID format example: AB364912(5)\r\n  // ID can start with one or two letters and the check digit in the end can be in brackets or not\r\n  if (value.length < 8) {\r\n    return message;\r\n  }\r\n\r\n  // Handle possible brackets in value\r\n  if (value.charAt(value.length - 3) === '(' && value.charAt(value.length - 1) === ')') {\r\n    value = value.substring(0, value.length - 3) + value.charAt(value.length - 2);\r\n  }\r\n  value = value.toUpperCase();\r\n\r\n  // Check that pattern is correct and split value to array\r\n  const hkidPattern = /^([A-Z]{1,2})([0-9]{6})([A0-9])$/;\r\n  const matchArray = value.match(hkidPattern);\r\n\r\n  if (!matchArray) {\r\n    return message;\r\n  }\r\n\r\n  const charPart = matchArray[1];\r\n  const numPart = matchArray[2];\r\n  const checkDigit = matchArray[3];\r\n\r\n  // Calculate the checksum for character part.\r\n  // Transfer letters to numbers so that A=10, B=11, C=12 etc.\r\n  // If there is only one letter in the ID use 36 as the first value\r\n  // Total calculation is weighted so that 1st digit is x9, 2nd digit x8, 3rd digit x7 etc.\r\n\r\n  const strValidChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  let checkSum = 0;\r\n\r\n  if (charPart.length === 2) {\r\n    checkSum += 9 * (10 + strValidChars.indexOf(charPart.charAt(0)));\r\n    checkSum += 8 * (10 + strValidChars.indexOf(charPart.charAt(1)));\r\n  } else {\r\n    checkSum += 9 * 36;\r\n    checkSum += 8 * (10 + strValidChars.indexOf(charPart));\r\n  }\r\n\r\n  // Calculate the checksum for numeric part\r\n\r\n  for (let i = 0, j = 7; i < numPart.length; i++, j--) {\r\n    checkSum += j * numPart.charAt(i);\r\n  }\r\n\r\n  // Verify the check digit\r\n  const remaining = checkSum % 11;\r\n  let verify = remaining === 0 ? 0 : 11 - remaining;\r\n  verify = verify.toString();\r\n  const isValid = verify === checkDigit || (verify === 10 && checkDigit === 'A');\r\n\r\n  return isValid ? VALID : message;\r\n};\r\n\r\nexport const validSGID = message => value => {\r\n  return value.length === 9 ? VALID : message;\r\n};\r\n\r\nexport const composeValidators = (...validators) => value =>\r\n  validators.reduce((error, validator) => error || validator(value), VALID);\r\n"]},"metadata":{},"sourceType":"module"}