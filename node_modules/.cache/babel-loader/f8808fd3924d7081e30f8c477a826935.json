{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingPricingPanel\\\\EditListingPricingPanel.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport config from '../../../../config';\nimport { FormattedMessage } from '../../../../util/reactIntl';\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\nimport { ensureOwnListing } from '../../../../util/data';\nimport { types as sdkTypes } from '../../../../util/sdkLoader'; // Import shared components\n\nimport { ListingLink } from '../../../../components'; // Import modules from this directory\n\nimport EditListingPricingForm from './EditListingPricingForm';\nimport css from './EditListingPricingPanel.module.css';\nconst {\n  Money\n} = sdkTypes;\n\nconst EditListingPricingPanel = props => {\n  var _currentListing$curre, _currentListing$curre2;\n\n  const {\n    className,\n    rootClassName,\n    listing,\n    disabled,\n    ready,\n    onSubmit,\n    onChange,\n    submitButtonText,\n    panelUpdated,\n    updateInProgress,\n    errors\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const currentListing = ensureOwnListing(listing); // The listing resource has a relationship: `currentStock`,\n  // which you should include when making API calls.\n\n  const currentStockRaw = (_currentListing$curre = currentListing.currentStock) === null || _currentListing$curre === void 0 ? void 0 : (_currentListing$curre2 = _currentListing$curre.attributes) === null || _currentListing$curre2 === void 0 ? void 0 : _currentListing$curre2.quantity;\n  const currentStock = typeof currentStockRaw != null ? currentStockRaw : 1;\n  const {\n    price\n  } = currentListing.attributes;\n  const isPublished = currentListing.id && currentListing.attributes.state !== LISTING_STATE_DRAFT;\n  const panelTitle = isPublished ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EditListingPricingPanel.title\",\n    values: {\n      listingTitle: /*#__PURE__*/React.createElement(ListingLink, {\n        listing: listing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 31\n        }\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EditListingPricingPanel.createListingTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n  const priceCurrencyValid = price instanceof Money ? price.currency === config.currency : true;\n  const form = priceCurrencyValid ? /*#__PURE__*/React.createElement(EditListingPricingForm, {\n    className: css.form,\n    initialValues: {\n      price,\n      stock: currentStock\n    },\n    onSubmit: values => {\n      const {\n        price,\n        stock\n      } = values; // Update stock only if the value has changed.\n      // NOTE: this is going to be used on a separate call to API\n      // in EditListingPage.duck.js: sdk.stock.compareAndSet();\n\n      const hasStockQuantityChanged = stock && currentStockRaw !== stock; // currentStockRaw is null or undefined, return null - otherwise use the value\n\n      const oldTotal = currentStockRaw != null ? currentStockRaw : null;\n      const stockUpdateMaybe = hasStockQuantityChanged ? {\n        stockUpdate: {\n          oldTotal,\n          newTotal: stock\n        }\n      } : {};\n      const updateValues = {\n        price,\n        ...stockUpdateMaybe\n      };\n      onSubmit(updateValues);\n    },\n    onChange: onChange,\n    saveActionMsg: submitButtonText,\n    disabled: disabled,\n    ready: ready,\n    updated: panelUpdated,\n    updateInProgress: updateInProgress,\n    fetchErrors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: css.priceCurrencyInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EditListingPricingPanel.listingPriceCurrencyInvalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, panelTitle), form);\n};\n\n_c = EditListingPricingPanel;\nconst {\n  func,\n  object,\n  string,\n  bool\n} = PropTypes;\nEditListingPricingPanel.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listing: null\n};\nEditListingPricingPanel.propTypes = {\n  className: string,\n  rootClassName: string,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: object,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  onSubmit: func.isRequired,\n  onChange: func.isRequired,\n  submitButtonText: string.isRequired,\n  panelUpdated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  errors: object.isRequired\n};\nexport default EditListingPricingPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingPricingPanel\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingPricingPanel/EditListingPricingPanel.js"],"names":["React","PropTypes","classNames","config","FormattedMessage","LISTING_STATE_DRAFT","ensureOwnListing","types","sdkTypes","ListingLink","EditListingPricingForm","css","Money","EditListingPricingPanel","props","className","rootClassName","listing","disabled","ready","onSubmit","onChange","submitButtonText","panelUpdated","updateInProgress","errors","classes","root","currentListing","currentStockRaw","currentStock","attributes","quantity","price","isPublished","id","state","panelTitle","listingTitle","priceCurrencyValid","currency","form","stock","values","hasStockQuantityChanged","oldTotal","stockUpdateMaybe","stockUpdate","newTotal","updateValues","priceCurrencyInvalid","title","func","object","string","bool","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport config from '../../../../config';\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\r\nimport { ensureOwnListing } from '../../../../util/data';\r\nimport { types as sdkTypes } from '../../../../util/sdkLoader';\r\n\r\n// Import shared components\r\nimport { ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingPricingForm from './EditListingPricingForm';\r\nimport css from './EditListingPricingPanel.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\n\r\nconst EditListingPricingPanel = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    onChange,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const currentListing = ensureOwnListing(listing);\r\n\r\n  // The listing resource has a relationship: `currentStock`,\r\n  // which you should include when making API calls.\r\n  const currentStockRaw = currentListing.currentStock?.attributes?.quantity;\r\n  const currentStock = typeof currentStockRaw != null ? currentStockRaw : 1;\r\n  const { price } = currentListing.attributes;\r\n\r\n  const isPublished = currentListing.id && currentListing.attributes.state !== LISTING_STATE_DRAFT;\r\n  const panelTitle = isPublished ? (\r\n    <FormattedMessage\r\n      id=\"EditListingPricingPanel.title\"\r\n      values={{ listingTitle: <ListingLink listing={listing} /> }}\r\n    />\r\n  ) : (\r\n    <FormattedMessage id=\"EditListingPricingPanel.createListingTitle\" />\r\n  );\r\n\r\n  const priceCurrencyValid = price instanceof Money ? price.currency === config.currency : true;\r\n  const form = priceCurrencyValid ? (\r\n    <EditListingPricingForm\r\n      className={css.form}\r\n      initialValues={{ price, stock: currentStock }}\r\n      onSubmit={values => {\r\n        const { price, stock } = values;\r\n\r\n        // Update stock only if the value has changed.\r\n        // NOTE: this is going to be used on a separate call to API\r\n        // in EditListingPage.duck.js: sdk.stock.compareAndSet();\r\n        const hasStockQuantityChanged = stock && currentStockRaw !== stock;\r\n        // currentStockRaw is null or undefined, return null - otherwise use the value\r\n        const oldTotal = currentStockRaw != null ? currentStockRaw : null;\r\n        const stockUpdateMaybe = hasStockQuantityChanged\r\n          ? {\r\n              stockUpdate: {\r\n                oldTotal,\r\n                newTotal: stock,\r\n              },\r\n            }\r\n          : {};\r\n\r\n        const updateValues = {\r\n          price,\r\n          ...stockUpdateMaybe,\r\n        };\r\n        onSubmit(updateValues);\r\n      }}\r\n      onChange={onChange}\r\n      saveActionMsg={submitButtonText}\r\n      disabled={disabled}\r\n      ready={ready}\r\n      updated={panelUpdated}\r\n      updateInProgress={updateInProgress}\r\n      fetchErrors={errors}\r\n    />\r\n  ) : (\r\n    <div className={css.priceCurrencyInvalid}>\r\n      <FormattedMessage id=\"EditListingPricingPanel.listingPriceCurrencyInvalid\" />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <h1 className={css.title}>{panelTitle}</h1>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { func, object, string, bool } = PropTypes;\r\n\r\nEditListingPricingPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingPricingPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  onChange: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingPricingPanel;\r\n"]},"metadata":{},"sourceType":"module"}