{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\OrderBreakdown\\\\LineItemUnknownItemsMaybe.js\";\n\n/**\r\n * Renders non-reversal line items that are not listed in the\r\n * `LINE_ITEMS` array in util/types.js\r\n *\r\n * The line items are rendered so that the line item code is formatted to human\r\n * readable form and the line total is printed as price.\r\n *\r\n * If you require another kind of presentation for your line items, add them to\r\n * the `LINE_ITEMS` array in util/types.js and create a specific line item\r\n * component for them that can be used in the `OrderBreakdown` component.\r\n */\nimport React from 'react';\nimport { intlShape } from '../../util/reactIntl';\nimport { formatMoney } from '../../util/currency';\nimport { humanizeLineItemCode } from '../../util/data';\nimport { LINE_ITEMS, propTypes } from '../../util/types';\nimport css from './OrderBreakdown.module.css';\n\nconst LineItemUnknownItemsMaybe = props => {\n  const {\n    lineItems,\n    isProvider,\n    intl\n  } = props; // resolve unknown non-reversal line items\n\n  const allItems = lineItems.filter(item => LINE_ITEMS.indexOf(item.code) === -1 && !item.reversal);\n  const items = isProvider ? allItems.filter(item => item.includeFor.includes('provider')) : allItems.filter(item => item.includeFor.includes('customer'));\n  return items.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, items.map((item, i) => {\n    const quantity = item.quantity;\n    const label = quantity && quantity > 1 ? `${humanizeLineItemCode(item.code)} x ${quantity}` : humanizeLineItemCode(item.code);\n    const formattedTotal = formatMoney(intl, item.lineTotal);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: `${i}-item.code`,\n      className: css.lineItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.itemLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, label), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.itemValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, formattedTotal));\n  })) : null;\n};\n\n_c = LineItemUnknownItemsMaybe;\nLineItemUnknownItemsMaybe.propTypes = {\n  lineItems: propTypes.lineItems.isRequired,\n  intl: intlShape.isRequired\n};\nexport default LineItemUnknownItemsMaybe;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineItemUnknownItemsMaybe\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/OrderBreakdown/LineItemUnknownItemsMaybe.js"],"names":["React","intlShape","formatMoney","humanizeLineItemCode","LINE_ITEMS","propTypes","css","LineItemUnknownItemsMaybe","props","lineItems","isProvider","intl","allItems","filter","item","indexOf","code","reversal","items","includeFor","includes","length","map","i","quantity","label","formattedTotal","lineTotal","lineItem","itemLabel","itemValue","isRequired"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AAEA,OAAOC,GAAP,MAAgB,6BAAhB;;AAEA,MAAMC,yBAAyB,GAAGC,KAAK,IAAI;AACzC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,UAAb;AAAyBC,IAAAA;AAAzB,MAAkCH,KAAxC,CADyC,CAGzC;;AACA,QAAMI,QAAQ,GAAGH,SAAS,CAACI,MAAV,CAAiBC,IAAI,IAAIV,UAAU,CAACW,OAAX,CAAmBD,IAAI,CAACE,IAAxB,MAAkC,CAAC,CAAnC,IAAwC,CAACF,IAAI,CAACG,QAAvE,CAAjB;AAEA,QAAMC,KAAK,GAAGR,UAAU,GACpBE,QAAQ,CAACC,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACK,UAAL,CAAgBC,QAAhB,CAAyB,UAAzB,CAAxB,CADoB,GAEpBR,QAAQ,CAACC,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACK,UAAL,CAAgBC,QAAhB,CAAyB,UAAzB,CAAxB,CAFJ;AAIA,SAAOF,KAAK,CAACG,MAAN,GAAe,CAAf,gBACL,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACI,GAAN,CAAU,CAACR,IAAD,EAAOS,CAAP,KAAa;AACtB,UAAMC,QAAQ,GAAGV,IAAI,CAACU,QAAtB;AAEA,UAAMC,KAAK,GACTD,QAAQ,IAAIA,QAAQ,GAAG,CAAvB,GACK,GAAErB,oBAAoB,CAACW,IAAI,CAACE,IAAN,CAAY,MAAKQ,QAAS,EADrD,GAEIrB,oBAAoB,CAACW,IAAI,CAACE,IAAN,CAH1B;AAKA,UAAMU,cAAc,GAAGxB,WAAW,CAACS,IAAD,EAAOG,IAAI,CAACa,SAAZ,CAAlC;AACA,wBACE;AAAK,MAAA,GAAG,EAAG,GAAEJ,CAAE,YAAf;AAA4B,MAAA,SAAS,EAAEjB,GAAG,CAACsB,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAEtB,GAAG,CAACuB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCJ,KAAjC,CADF,eAEE;AAAM,MAAA,SAAS,EAAEnB,GAAG,CAACwB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCJ,cAAjC,CAFF,CADF;AAMD,GAfA,CADH,CADK,GAmBH,IAnBJ;AAoBD,CA9BD;;KAAMnB,yB;AAgCNA,yBAAyB,CAACF,SAA1B,GAAsC;AACpCI,EAAAA,SAAS,EAAEJ,SAAS,CAACI,SAAV,CAAoBsB,UADK;AAEpCpB,EAAAA,IAAI,EAAEV,SAAS,CAAC8B;AAFoB,CAAtC;AAKA,eAAexB,yBAAf","sourcesContent":["/**\r\n * Renders non-reversal line items that are not listed in the\r\n * `LINE_ITEMS` array in util/types.js\r\n *\r\n * The line items are rendered so that the line item code is formatted to human\r\n * readable form and the line total is printed as price.\r\n *\r\n * If you require another kind of presentation for your line items, add them to\r\n * the `LINE_ITEMS` array in util/types.js and create a specific line item\r\n * component for them that can be used in the `OrderBreakdown` component.\r\n */\r\nimport React from 'react';\r\nimport { intlShape } from '../../util/reactIntl';\r\nimport { formatMoney } from '../../util/currency';\r\nimport { humanizeLineItemCode } from '../../util/data';\r\nimport { LINE_ITEMS, propTypes } from '../../util/types';\r\n\r\nimport css from './OrderBreakdown.module.css';\r\n\r\nconst LineItemUnknownItemsMaybe = props => {\r\n  const { lineItems, isProvider, intl } = props;\r\n\r\n  // resolve unknown non-reversal line items\r\n  const allItems = lineItems.filter(item => LINE_ITEMS.indexOf(item.code) === -1 && !item.reversal);\r\n\r\n  const items = isProvider\r\n    ? allItems.filter(item => item.includeFor.includes('provider'))\r\n    : allItems.filter(item => item.includeFor.includes('customer'));\r\n\r\n  return items.length > 0 ? (\r\n    <React.Fragment>\r\n      {items.map((item, i) => {\r\n        const quantity = item.quantity;\r\n\r\n        const label =\r\n          quantity && quantity > 1\r\n            ? `${humanizeLineItemCode(item.code)} x ${quantity}`\r\n            : humanizeLineItemCode(item.code);\r\n\r\n        const formattedTotal = formatMoney(intl, item.lineTotal);\r\n        return (\r\n          <div key={`${i}-item.code`} className={css.lineItem}>\r\n            <span className={css.itemLabel}>{label}</span>\r\n            <span className={css.itemValue}>{formattedTotal}</span>\r\n          </div>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  ) : null;\r\n};\r\n\r\nLineItemUnknownItemsMaybe.propTypes = {\r\n  lineItems: propTypes.lineItems.isRequired,\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default LineItemUnknownItemsMaybe;\r\n"]},"metadata":{},"sourceType":"module"}