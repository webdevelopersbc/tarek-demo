{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\PriceFilter\\\\PriceFilterPlain.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, node, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { formatCurrencyMajorUnit } from '../../../util/currency';\nimport IconPlus from '../IconPlus/IconPlus';\nimport PriceFilterForm from '../PriceFilterForm/PriceFilterForm';\nimport css from './PriceFilterPlain.module.css';\nconst RADIX = 10;\n\nconst getPriceQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : typeof queryParamNames === 'string' ? queryParamNames : 'price';\n}; // Parse value, which should look like \"0,1000\"\n\n\nconst parse = priceRange => {\n  const [minPrice, maxPrice] = !!priceRange ? priceRange.split(',').map(v => Number.parseInt(v, RADIX)) : []; // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\n\n  return !!priceRange && minPrice != null && maxPrice != null ? {\n    minPrice,\n    maxPrice\n  } : null;\n}; // Format value, which should look like { minPrice, maxPrice }\n\n\nconst format = (range, queryParamName) => {\n  const {\n    minPrice,\n    maxPrice\n  } = range || {}; // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\n\n  const value = minPrice != null && maxPrice != null ? `${minPrice},${maxPrice}` : null;\n  return {\n    [queryParamName]: value\n  };\n};\n\nclass PriceFilterPlainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  handleChange(values) {\n    const {\n      onSubmit,\n      queryParamNames\n    } = this.props;\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\n    onSubmit(format(values, priceQueryParamName));\n  }\n\n  handleClear() {\n    const {\n      onSubmit,\n      queryParamNames\n    } = this.props;\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\n    onSubmit(format(null, priceQueryParamName));\n  }\n\n  toggleIsOpen() {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      label,\n      queryParamNames,\n      initialValues,\n      min,\n      max,\n      step,\n      intl,\n      currencyConfig\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const priceQueryParam = getPriceQueryParamName(queryParamNames);\n    const initialPrice = initialValues ? parse(initialValues[priceQueryParam]) : {};\n    const {\n      minPrice,\n      maxPrice\n    } = initialPrice || {};\n\n    const hasValue = value => value != null;\n\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\n    const labelSelection = hasInitialValues ? intl.formatMessage({\n      id: 'PriceFilter.labelSelectedPlain'\n    }, {\n      minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\n      maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice)\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.filterHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: css.labelButton,\n      onClick: this.toggleIsOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.labelButtonContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.labelWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, label, labelSelection ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 23\n      }\n    }, ': '), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.labelSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }\n    }, labelSelection)) : null)), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.openSign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IconPlus, {\n      isOpen: this.state.isOpen,\n      isSelected: hasInitialValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.formWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PriceFilterForm, {\n      id: id,\n      initialValues: hasInitialValues ? initialPrice : {\n        minPrice: min,\n        maxPrice: max\n      },\n      onChange: this.handleChange,\n      intl: intl,\n      contentRef: node => {\n        this.filterContent = node;\n      },\n      min: min,\n      max: max,\n      step: step,\n      liveEdit: true,\n      isOpen: this.state.isOpen,\n      isInSideBar: true,\n      style: {\n        minWidth: '160px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: css.clearButton,\n      onClick: this.handleClear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'PriceFilter.clear',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nPriceFilterPlainComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  step: number,\n  currencyConfig: config.currencyConfig\n};\nPriceFilterPlainComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  queryParamNames: arrayOf(string).isRequired,\n  onSubmit: func.isRequired,\n  initialValues: shape({\n    price: string\n  }),\n  min: number.isRequired,\n  max: number.isRequired,\n  step: number,\n  currencyConfig: propTypes.currencyConfig,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nconst PriceFilterPlain = injectIntl(PriceFilterPlainComponent);\n_c = PriceFilterPlain;\nexport default PriceFilterPlain;\n\nvar _c;\n\n$RefreshReg$(_c, \"PriceFilterPlain\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/PriceFilter/PriceFilterPlain.js"],"names":["React","Component","arrayOf","func","node","number","shape","string","classNames","config","FormattedMessage","injectIntl","intlShape","propTypes","formatCurrencyMajorUnit","IconPlus","PriceFilterForm","css","RADIX","getPriceQueryParamName","queryParamNames","Array","isArray","parse","priceRange","minPrice","maxPrice","split","map","v","Number","parseInt","format","range","queryParamName","value","PriceFilterPlainComponent","constructor","props","state","isOpen","handleChange","bind","handleClear","toggleIsOpen","values","onSubmit","priceQueryParamName","setState","prevState","render","rootClassName","className","id","label","initialValues","min","max","step","intl","currencyConfig","classes","root","priceQueryParam","initialPrice","hasValue","hasInitialValues","labelSelection","formatMessage","currency","filterHeader","labelButton","labelButtonContent","labelWrapper","labelSelected","openSign","formWrapper","filterContent","minWidth","clearButton","defaultProps","isRequired","price","PriceFilterPlain"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,KAAtC,EAA6CC,MAA7C,QAA2D,YAA3D;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,yBAAxD;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,uBAAT,QAAwC,wBAAxC;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,OAAOC,GAAP,MAAgB,+BAAhB;AAEA,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMC,sBAAsB,GAAGC,eAAe,IAAI;AAChD,SAAOC,KAAK,CAACC,OAAN,CAAcF,eAAd,IACHA,eAAe,CAAC,CAAD,CADZ,GAEH,OAAOA,eAAP,KAA2B,QAA3B,GACAA,eADA,GAEA,OAJJ;AAKD,CAND,C,CAQA;;;AACA,MAAMG,KAAK,GAAGC,UAAU,IAAI;AAC1B,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuB,CAAC,CAACF,UAAF,GACzBA,UAAU,CAACG,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0BC,CAAC,IAAIC,MAAM,CAACC,QAAP,CAAgBF,CAAhB,EAAmBX,KAAnB,CAA/B,CADyB,GAEzB,EAFJ,CAD0B,CAI1B;;AACA,SAAO,CAAC,CAACM,UAAF,IAAgBC,QAAQ,IAAI,IAA5B,IAAoCC,QAAQ,IAAI,IAAhD,GAAuD;AAAED,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAvD,GAAgF,IAAvF;AACD,CAND,C,CAQA;;;AACA,MAAMM,MAAM,GAAG,CAACC,KAAD,EAAQC,cAAR,KAA2B;AACxC,QAAM;AAAET,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBO,KAAK,IAAI,EAAxC,CADwC,CAExC;;AACA,QAAME,KAAK,GAAGV,QAAQ,IAAI,IAAZ,IAAoBC,QAAQ,IAAI,IAAhC,GAAwC,GAAED,QAAS,IAAGC,QAAS,EAA/D,GAAmE,IAAjF;AACA,SAAO;AAAE,KAACQ,cAAD,GAAkBC;AAApB,GAAP;AACD,CALD;;AAOA,MAAMC,yBAAN,SAAwCnC,SAAxC,CAAkD;AAChDoC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACI,MAAD,EAAS;AACnB,UAAM;AAAEC,MAAAA,QAAF;AAAY1B,MAAAA;AAAZ,QAAgC,KAAKkB,KAA3C;AACA,UAAMS,mBAAmB,GAAG5B,sBAAsB,CAACC,eAAD,CAAlD;AACA0B,IAAAA,QAAQ,CAACd,MAAM,CAACa,MAAD,EAASE,mBAAT,CAAP,CAAR;AACD;;AAEDJ,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEG,MAAAA,QAAF;AAAY1B,MAAAA;AAAZ,QAAgC,KAAKkB,KAA3C;AACA,UAAMS,mBAAmB,GAAG5B,sBAAsB,CAACC,eAAD,CAAlD;AACA0B,IAAAA,QAAQ,CAACd,MAAM,CAAC,IAAD,EAAOe,mBAAP,CAAP,CAAR;AACD;;AAEDH,EAAAA,YAAY,GAAG;AACb,SAAKI,QAAL,CAAcC,SAAS,KAAK;AAAET,MAAAA,MAAM,EAAE,CAACS,SAAS,CAACT;AAArB,KAAL,CAAvB;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,EAHI;AAIJC,MAAAA,KAJI;AAKJlC,MAAAA,eALI;AAMJmC,MAAAA,aANI;AAOJC,MAAAA,GAPI;AAQJC,MAAAA,GARI;AASJC,MAAAA,IATI;AAUJC,MAAAA,IAVI;AAWJC,MAAAA;AAXI,QAYF,KAAKtB,KAZT;AAaA,UAAMuB,OAAO,GAAGrD,UAAU,CAAC2C,aAAa,IAAIlC,GAAG,CAAC6C,IAAtB,EAA4BV,SAA5B,CAA1B;AAEA,UAAMW,eAAe,GAAG5C,sBAAsB,CAACC,eAAD,CAA9C;AACA,UAAM4C,YAAY,GAAGT,aAAa,GAAGhC,KAAK,CAACgC,aAAa,CAACQ,eAAD,CAAd,CAAR,GAA2C,EAA7E;AACA,UAAM;AAAEtC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBsC,YAAY,IAAI,EAA/C;;AAEA,UAAMC,QAAQ,GAAG9B,KAAK,IAAIA,KAAK,IAAI,IAAnC;;AACA,UAAM+B,gBAAgB,GAAGX,aAAa,IAAIU,QAAQ,CAACxC,QAAD,CAAzB,IAAuCwC,QAAQ,CAACvC,QAAD,CAAxE;AAEA,UAAMyC,cAAc,GAAGD,gBAAgB,GACnCP,IAAI,CAACS,aAAL,CACE;AAAEf,MAAAA,EAAE,EAAE;AAAN,KADF,EAEE;AACE5B,MAAAA,QAAQ,EAAEX,uBAAuB,CAAC6C,IAAD,EAAOC,cAAc,CAACS,QAAtB,EAAgC5C,QAAhC,CADnC;AAEEC,MAAAA,QAAQ,EAAEZ,uBAAuB,CAAC6C,IAAD,EAAOC,cAAc,CAACS,QAAtB,EAAgC3C,QAAhC;AAFnC,KAFF,CADmC,GAQnC,IARJ;AASA,wBACE;AAAK,MAAA,SAAS,EAAEmC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAE5C,GAAG,CAACqD,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAErD,GAAG,CAACsD,WAArC;AAAkD,MAAA,OAAO,EAAE,KAAK3B,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAE3B,GAAG,CAACuD,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAEvD,GAAG,CAACwD,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAExD,GAAG,CAACqC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KADH,EAEGa,cAAc,gBACb,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,IAAP,CADF,eAEE;AAAM,MAAA,SAAS,EAAElD,GAAG,CAACyD,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCP,cAArC,CAFF,CADa,GAKX,IAPN,CADF,CADF,eAYE;AAAM,MAAA,SAAS,EAAElD,GAAG,CAAC0D,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAE,KAAKpC,KAAL,CAAWC,MAA7B;AAAqC,MAAA,UAAU,EAAE0B,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,CADF,CADF,CADF,eAqBE;AAAK,MAAA,SAAS,EAAEjD,GAAG,CAAC2D,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AACE,MAAA,EAAE,EAAEvB,EADN;AAEE,MAAA,aAAa,EAAEa,gBAAgB,GAAGF,YAAH,GAAkB;AAAEvC,QAAAA,QAAQ,EAAE+B,GAAZ;AAAiB9B,QAAAA,QAAQ,EAAE+B;AAA3B,OAFnD;AAGE,MAAA,QAAQ,EAAE,KAAKhB,YAHjB;AAIE,MAAA,IAAI,EAAEkB,IAJR;AAKE,MAAA,UAAU,EAAEvD,IAAI,IAAI;AAClB,aAAKyE,aAAL,GAAqBzE,IAArB;AACD,OAPH;AAQE,MAAA,GAAG,EAAEoD,GARP;AASE,MAAA,GAAG,EAAEC,GATP;AAUE,MAAA,IAAI,EAAEC,IAVR;AAWE,MAAA,QAAQ,MAXV;AAYE,MAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWC,MAZrB;AAaE,MAAA,WAAW,MAbb;AAcE,MAAA,KAAK,EAAE;AAAEsC,QAAAA,QAAQ,EAAE;AAAZ,OAdT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAgBE;AAAQ,MAAA,SAAS,EAAE7D,GAAG,CAAC8D,WAAvB;AAAoC,MAAA,OAAO,EAAE,KAAKpC,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhBF,CADF,CArBF,CADF;AA8CD;;AAxG+C;;AA2GlDP,yBAAyB,CAAC4C,YAA1B,GAAyC;AACvC7B,EAAAA,aAAa,EAAE,IADwB;AAEvCC,EAAAA,SAAS,EAAE,IAF4B;AAGvCG,EAAAA,aAAa,EAAE,IAHwB;AAIvCG,EAAAA,IAAI,EAAErD,MAJiC;AAKvCuD,EAAAA,cAAc,EAAEnD,MAAM,CAACmD;AALgB,CAAzC;AAQAxB,yBAAyB,CAACvB,SAA1B,GAAsC;AACpCsC,EAAAA,aAAa,EAAE5C,MADqB;AAEpC6C,EAAAA,SAAS,EAAE7C,MAFyB;AAGpC8C,EAAAA,EAAE,EAAE9C,MAAM,CAAC0E,UAHyB;AAIpC3B,EAAAA,KAAK,EAAElD,IAJ6B;AAKpCgB,EAAAA,eAAe,EAAElB,OAAO,CAACK,MAAD,CAAP,CAAgB0E,UALG;AAMpCnC,EAAAA,QAAQ,EAAE3C,IAAI,CAAC8E,UANqB;AAOpC1B,EAAAA,aAAa,EAAEjD,KAAK,CAAC;AACnB4E,IAAAA,KAAK,EAAE3E;AADY,GAAD,CAPgB;AAUpCiD,EAAAA,GAAG,EAAEnD,MAAM,CAAC4E,UAVwB;AAWpCxB,EAAAA,GAAG,EAAEpD,MAAM,CAAC4E,UAXwB;AAYpCvB,EAAAA,IAAI,EAAErD,MAZ8B;AAapCuD,EAAAA,cAAc,EAAE/C,SAAS,CAAC+C,cAbU;AAepC;AACAD,EAAAA,IAAI,EAAE/C,SAAS,CAACqE;AAhBoB,CAAtC;AAmBA,MAAME,gBAAgB,GAAGxE,UAAU,CAACyB,yBAAD,CAAnC;KAAM+C,gB;AAEN,eAAeA,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, func, node, number, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { formatCurrencyMajorUnit } from '../../../util/currency';\r\n\r\nimport IconPlus from '../IconPlus/IconPlus';\r\nimport PriceFilterForm from '../PriceFilterForm/PriceFilterForm';\r\n\r\nimport css from './PriceFilterPlain.module.css';\r\n\r\nconst RADIX = 10;\r\n\r\nconst getPriceQueryParamName = queryParamNames => {\r\n  return Array.isArray(queryParamNames)\r\n    ? queryParamNames[0]\r\n    : typeof queryParamNames === 'string'\r\n    ? queryParamNames\r\n    : 'price';\r\n};\r\n\r\n// Parse value, which should look like \"0,1000\"\r\nconst parse = priceRange => {\r\n  const [minPrice, maxPrice] = !!priceRange\r\n    ? priceRange.split(',').map(v => Number.parseInt(v, RADIX))\r\n    : [];\r\n  // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\r\n  return !!priceRange && minPrice != null && maxPrice != null ? { minPrice, maxPrice } : null;\r\n};\r\n\r\n// Format value, which should look like { minPrice, maxPrice }\r\nconst format = (range, queryParamName) => {\r\n  const { minPrice, maxPrice } = range || {};\r\n  // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\r\n  const value = minPrice != null && maxPrice != null ? `${minPrice},${maxPrice}` : null;\r\n  return { [queryParamName]: value };\r\n};\r\n\r\nclass PriceFilterPlainComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isOpen: true };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\r\n  }\r\n\r\n  handleChange(values) {\r\n    const { onSubmit, queryParamNames } = this.props;\r\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\r\n    onSubmit(format(values, priceQueryParamName));\r\n  }\r\n\r\n  handleClear() {\r\n    const { onSubmit, queryParamNames } = this.props;\r\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\r\n    onSubmit(format(null, priceQueryParamName));\r\n  }\r\n\r\n  toggleIsOpen() {\r\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      id,\r\n      label,\r\n      queryParamNames,\r\n      initialValues,\r\n      min,\r\n      max,\r\n      step,\r\n      intl,\r\n      currencyConfig,\r\n    } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const priceQueryParam = getPriceQueryParamName(queryParamNames);\r\n    const initialPrice = initialValues ? parse(initialValues[priceQueryParam]) : {};\r\n    const { minPrice, maxPrice } = initialPrice || {};\r\n\r\n    const hasValue = value => value != null;\r\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\r\n\r\n    const labelSelection = hasInitialValues\r\n      ? intl.formatMessage(\r\n          { id: 'PriceFilter.labelSelectedPlain' },\r\n          {\r\n            minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\r\n            maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice),\r\n          }\r\n        )\r\n      : null;\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.filterHeader}>\r\n          <button type=\"button\" className={css.labelButton} onClick={this.toggleIsOpen}>\r\n            <span className={css.labelButtonContent}>\r\n              <span className={css.labelWrapper}>\r\n                <span className={css.label}>\r\n                  {label}\r\n                  {labelSelection ? (\r\n                    <>\r\n                      <span>{': '}</span>\r\n                      <span className={css.labelSelected}>{labelSelection}</span>\r\n                    </>\r\n                  ) : null}\r\n                </span>\r\n              </span>\r\n              <span className={css.openSign}>\r\n                <IconPlus isOpen={this.state.isOpen} isSelected={hasInitialValues} />\r\n              </span>\r\n            </span>\r\n          </button>\r\n        </div>\r\n        <div className={css.formWrapper}>\r\n          <PriceFilterForm\r\n            id={id}\r\n            initialValues={hasInitialValues ? initialPrice : { minPrice: min, maxPrice: max }}\r\n            onChange={this.handleChange}\r\n            intl={intl}\r\n            contentRef={node => {\r\n              this.filterContent = node;\r\n            }}\r\n            min={min}\r\n            max={max}\r\n            step={step}\r\n            liveEdit\r\n            isOpen={this.state.isOpen}\r\n            isInSideBar\r\n            style={{ minWidth: '160px' }}\r\n          >\r\n            <button className={css.clearButton} onClick={this.handleClear}>\r\n              <FormattedMessage id={'PriceFilter.clear'} />\r\n            </button>\r\n          </PriceFilterForm>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPriceFilterPlainComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  initialValues: null,\r\n  step: number,\r\n  currencyConfig: config.currencyConfig,\r\n};\r\n\r\nPriceFilterPlainComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  id: string.isRequired,\r\n  label: node,\r\n  queryParamNames: arrayOf(string).isRequired,\r\n  onSubmit: func.isRequired,\r\n  initialValues: shape({\r\n    price: string,\r\n  }),\r\n  min: number.isRequired,\r\n  max: number.isRequired,\r\n  step: number,\r\n  currencyConfig: propTypes.currencyConfig,\r\n\r\n  // form injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst PriceFilterPlain = injectIntl(PriceFilterPlainComponent);\r\n\r\nexport default PriceFilterPlain;\r\n"]},"metadata":{},"sourceType":"module"}