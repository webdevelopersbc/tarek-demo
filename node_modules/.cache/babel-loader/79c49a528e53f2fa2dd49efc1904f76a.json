{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingDeliveryPanel\\\\EditListingDeliveryForm.js\";\nimport React, { useEffect } from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport config from '../../../../config';\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\nimport { propTypes } from '../../../../util/types';\nimport { autocompleteSearchRequired, autocompletePlaceSelected, composeValidators, required } from '../../../../util/validators'; // Import shared components\n\nimport { Form, LocationAutocompleteInputField, Button, FieldCurrencyInput, FieldTextInput, FieldCheckbox } from '../../../../components'; // Import modules from this directory\n\nimport css from './EditListingDeliveryForm.module.css';\n\nconst identity = v => v;\n\nexport const EditListingDeliveryFormComponent = props => {\n  var _s = $RefreshSig$();\n\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n    render: _s(formRenderProps => {\n      var _values$deliveryOptio, _values$deliveryOptio2;\n\n      _s();\n\n      const {\n        form,\n        autoFocus,\n        className,\n        disabled,\n        ready,\n        handleSubmit,\n        intl,\n        pristine,\n        invalid,\n        saveActionMsg,\n        updated,\n        updateInProgress,\n        fetchErrors,\n        values\n      } = formRenderProps; // This is a bug fix for Final Form.\n      // Without this, React will return a warning:\n      //   \"Cannot update a component (`ForwardRef(Field)`)\n      //   while rendering a different component (`ForwardRef(Field)`)\"\n      // This seems to happen because validation calls listeneres and\n      // that causes state to change inside final-form.\n      // https://github.com/final-form/react-final-form/issues/751\n      //\n      // TODO: it might not be worth the trouble to show these fields as disabled,\n      // if this fix causes trouble in future dependency updates.\n\n      const {\n        pauseValidation,\n        resumeValidation\n      } = form;\n      pauseValidation(false);\n      useEffect(() => resumeValidation(), [values]);\n      const shippingEnabled = (_values$deliveryOptio = values.deliveryOptions) === null || _values$deliveryOptio === void 0 ? void 0 : _values$deliveryOptio.includes('shipping');\n      const pickupEnabled = (_values$deliveryOptio2 = values.deliveryOptions) === null || _values$deliveryOptio2 === void 0 ? void 0 : _values$deliveryOptio2.includes('pickup');\n      const titleRequiredMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.address'\n      });\n      const addressPlaceholderMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.addressPlaceholder'\n      });\n      const addressRequiredMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.addressRequired'\n      });\n      const addressNotRecognizedMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.addressNotRecognized'\n      });\n      const optionalText = intl.formatMessage({\n        id: 'EditListingDeliveryForm.optionalText'\n      });\n      const buildingMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.building'\n      }, {\n        optionalText: optionalText\n      });\n      const buildingPlaceholderMessage = intl.formatMessage({\n        id: 'EditListingDeliveryForm.buildingPlaceholder'\n      });\n      const {\n        updateListingError,\n        showListingsError\n      } = fetchErrors || {};\n      const errorMessage = updateListingError ? /*#__PURE__*/React.createElement(\"p\", {\n        className: css.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"EditListingDeliveryForm.updateFailed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      })) : null;\n      const errorMessageShowListing = showListingsError ? /*#__PURE__*/React.createElement(\"p\", {\n        className: css.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"EditListingDeliveryForm.showListingFailed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      })) : null;\n      const classes = classNames(css.root, className);\n      const submitReady = updated && pristine || ready;\n      const submitInProgress = updateInProgress;\n      const submitDisabled = invalid || disabled || submitInProgress || !shippingEnabled && !pickupEnabled;\n      const shippingLabel = intl.formatMessage({\n        id: 'EditListingDeliveryForm.shippingLabel'\n      });\n      const pickupLabel = intl.formatMessage({\n        id: 'EditListingDeliveryForm.pickupLabel'\n      });\n      const pickupClasses = classNames(css.deliveryOption, !pickupEnabled ? css.disabled : null);\n      const shippingClasses = classNames(css.deliveryOption, !shippingEnabled ? css.disabled : null);\n      return /*#__PURE__*/React.createElement(Form, {\n        className: classes,\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FieldCheckbox, {\n        id: \"pickup\",\n        className: css.deliveryCheckbox,\n        name: \"deliveryOptions\",\n        label: pickupLabel,\n        value: \"pickup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: pickupClasses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, errorMessage, errorMessageShowListing, /*#__PURE__*/React.createElement(LocationAutocompleteInputField, {\n        disabled: !pickupEnabled,\n        className: css.input,\n        inputClassName: css.locationAutocompleteInput,\n        iconClassName: css.locationAutocompleteInputIcon,\n        predictionsClassName: css.predictionsRoot,\n        validClassName: css.validLocation,\n        autoFocus: autoFocus,\n        name: \"location\",\n        label: titleRequiredMessage,\n        placeholder: addressPlaceholderMessage,\n        useDefaultPredictions: false,\n        format: identity,\n        valueFromForm: values.location,\n        validate: pickupEnabled ? composeValidators(autocompleteSearchRequired(addressRequiredMessage), autocompletePlaceSelected(addressNotRecognizedMessage)) : () => {},\n        hideErrorMessage: !pickupEnabled // Whatever parameters are being used to calculate\n        // the validation function need to be combined in such\n        // a way that, when they change, this key prop\n        // changes, thus reregistering this field (and its\n        // validation function) with Final Form.\n        // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\n        ,\n        key: pickupEnabled ? 'locationValidation' : 'noLocationValidation',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(FieldTextInput, {\n        className: css.input,\n        type: \"text\",\n        name: \"building\",\n        id: \"building\",\n        label: buildingMessage,\n        placeholder: buildingPlaceholderMessage,\n        disabled: !pickupEnabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(FieldCheckbox, {\n        id: \"shipping\",\n        className: css.deliveryCheckbox,\n        name: \"deliveryOptions\",\n        label: shippingLabel,\n        value: \"shipping\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: shippingClasses,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FieldCurrencyInput, {\n        id: \"shippingPriceInSubunitsOneItem\",\n        name: \"shippingPriceInSubunitsOneItem\",\n        className: css.input,\n        label: intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingOneItemLabel'\n        }),\n        placeholder: intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingOneItemPlaceholder'\n        }),\n        currencyConfig: config.currencyConfig,\n        disabled: !shippingEnabled,\n        validate: shippingEnabled ? required(intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingOneItemRequired'\n        })) : null,\n        hideErrorMessage: !shippingEnabled // Whatever parameters are being used to calculate\n        // the validation function need to be combined in such\n        // a way that, when they change, this key prop\n        // changes, thus reregistering this field (and its\n        // validation function) with Final Form.\n        // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\n        ,\n        key: shippingEnabled ? 'oneItemValidation' : 'noOneItemValidation',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(FieldCurrencyInput, {\n        id: \"shippingPriceInSubunitsAdditionalItems\",\n        name: \"shippingPriceInSubunitsAdditionalItems\",\n        className: css.input,\n        label: intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingAdditionalItemsLabel'\n        }),\n        placeholder: intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingAdditionalItemsPlaceholder'\n        }),\n        currencyConfig: config.currencyConfig,\n        disabled: !shippingEnabled,\n        validate: shippingEnabled ? required(intl.formatMessage({\n          id: 'EditListingDeliveryForm.shippingAdditionalItemsRequired'\n        })) : null,\n        hideErrorMessage: !shippingEnabled // Whatever parameters are being used to calculate\n        // the validation function need to be combined in such\n        // a way that, when they change, this key prop\n        // changes, thus reregistering this field (and its\n        // validation function) with Final Form.\n        // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\n        ,\n        key: shippingEnabled ? 'additionalItemsValidation' : 'noAdditionalItemsValidation',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: css.submitButton,\n        type: \"submit\",\n        inProgress: submitInProgress,\n        disabled: submitDisabled,\n        ready: submitReady,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }\n      }, saveActionMsg));\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }));\n};\n_c = EditListingDeliveryFormComponent;\nEditListingDeliveryFormComponent.defaultProps = {\n  selectedPlace: null,\n  fetchErrors: null\n};\nEditListingDeliveryFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  selectedPlace: propTypes.place,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  })\n};\nexport default compose(injectIntl)(EditListingDeliveryFormComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingDeliveryFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingDeliveryPanel/EditListingDeliveryForm.js"],"names":["React","useEffect","bool","func","shape","string","compose","Form","FinalForm","classNames","config","intlShape","injectIntl","FormattedMessage","propTypes","autocompleteSearchRequired","autocompletePlaceSelected","composeValidators","required","LocationAutocompleteInputField","Button","FieldCurrencyInput","FieldTextInput","FieldCheckbox","css","identity","v","EditListingDeliveryFormComponent","props","formRenderProps","form","autoFocus","className","disabled","ready","handleSubmit","intl","pristine","invalid","saveActionMsg","updated","updateInProgress","fetchErrors","values","pauseValidation","resumeValidation","shippingEnabled","deliveryOptions","includes","pickupEnabled","titleRequiredMessage","formatMessage","id","addressPlaceholderMessage","addressRequiredMessage","addressNotRecognizedMessage","optionalText","buildingMessage","buildingPlaceholderMessage","updateListingError","showListingsError","errorMessage","error","errorMessageShowListing","classes","root","submitReady","submitInProgress","submitDisabled","shippingLabel","pickupLabel","pickupClasses","deliveryOption","shippingClasses","deliveryCheckbox","input","locationAutocompleteInput","locationAutocompleteInputIcon","predictionsRoot","validLocation","location","currencyConfig","submitButton","defaultProps","selectedPlace","isRequired","onSubmit","place"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { bool, func, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport config from '../../../../config';\r\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\r\nimport { propTypes } from '../../../../util/types';\r\nimport {\r\n  autocompleteSearchRequired,\r\n  autocompletePlaceSelected,\r\n  composeValidators,\r\n  required,\r\n} from '../../../../util/validators';\r\n\r\n// Import shared components\r\nimport {\r\n  Form,\r\n  LocationAutocompleteInputField,\r\n  Button,\r\n  FieldCurrencyInput,\r\n  FieldTextInput,\r\n  FieldCheckbox,\r\n} from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport css from './EditListingDeliveryForm.module.css';\r\n\r\nconst identity = v => v;\r\n\r\nexport const EditListingDeliveryFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={formRenderProps => {\r\n      const {\r\n        form,\r\n        autoFocus,\r\n        className,\r\n        disabled,\r\n        ready,\r\n        handleSubmit,\r\n        intl,\r\n        pristine,\r\n        invalid,\r\n        saveActionMsg,\r\n        updated,\r\n        updateInProgress,\r\n        fetchErrors,\r\n        values,\r\n      } = formRenderProps;\r\n\r\n      // This is a bug fix for Final Form.\r\n      // Without this, React will return a warning:\r\n      //   \"Cannot update a component (`ForwardRef(Field)`)\r\n      //   while rendering a different component (`ForwardRef(Field)`)\"\r\n      // This seems to happen because validation calls listeneres and\r\n      // that causes state to change inside final-form.\r\n      // https://github.com/final-form/react-final-form/issues/751\r\n      //\r\n      // TODO: it might not be worth the trouble to show these fields as disabled,\r\n      // if this fix causes trouble in future dependency updates.\r\n      const { pauseValidation, resumeValidation } = form;\r\n      pauseValidation(false);\r\n      useEffect(() => resumeValidation(), [values]);\r\n\r\n      const shippingEnabled = values.deliveryOptions?.includes('shipping');\r\n      const pickupEnabled = values.deliveryOptions?.includes('pickup');\r\n\r\n      const titleRequiredMessage = intl.formatMessage({ id: 'EditListingDeliveryForm.address' });\r\n      const addressPlaceholderMessage = intl.formatMessage({\r\n        id: 'EditListingDeliveryForm.addressPlaceholder',\r\n      });\r\n      const addressRequiredMessage = intl.formatMessage({\r\n        id: 'EditListingDeliveryForm.addressRequired',\r\n      });\r\n      const addressNotRecognizedMessage = intl.formatMessage({\r\n        id: 'EditListingDeliveryForm.addressNotRecognized',\r\n      });\r\n\r\n      const optionalText = intl.formatMessage({\r\n        id: 'EditListingDeliveryForm.optionalText',\r\n      });\r\n\r\n      const buildingMessage = intl.formatMessage(\r\n        { id: 'EditListingDeliveryForm.building' },\r\n        { optionalText: optionalText }\r\n      );\r\n      const buildingPlaceholderMessage = intl.formatMessage({\r\n        id: 'EditListingDeliveryForm.buildingPlaceholder',\r\n      });\r\n\r\n      const { updateListingError, showListingsError } = fetchErrors || {};\r\n      const errorMessage = updateListingError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"EditListingDeliveryForm.updateFailed\" />\r\n        </p>\r\n      ) : null;\r\n\r\n      const errorMessageShowListing = showListingsError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"EditListingDeliveryForm.showListingFailed\" />\r\n        </p>\r\n      ) : null;\r\n\r\n      const classes = classNames(css.root, className);\r\n      const submitReady = (updated && pristine) || ready;\r\n      const submitInProgress = updateInProgress;\r\n      const submitDisabled =\r\n        invalid || disabled || submitInProgress || (!shippingEnabled && !pickupEnabled);\r\n\r\n      const shippingLabel = intl.formatMessage({ id: 'EditListingDeliveryForm.shippingLabel' });\r\n      const pickupLabel = intl.formatMessage({ id: 'EditListingDeliveryForm.pickupLabel' });\r\n\r\n      const pickupClasses = classNames(css.deliveryOption, !pickupEnabled ? css.disabled : null);\r\n      const shippingClasses = classNames(\r\n        css.deliveryOption,\r\n        !shippingEnabled ? css.disabled : null\r\n      );\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldCheckbox\r\n            id=\"pickup\"\r\n            className={css.deliveryCheckbox}\r\n            name=\"deliveryOptions\"\r\n            label={pickupLabel}\r\n            value=\"pickup\"\r\n          />\r\n          <div className={pickupClasses}>\r\n            {errorMessage}\r\n            {errorMessageShowListing}\r\n            <LocationAutocompleteInputField\r\n              disabled={!pickupEnabled}\r\n              className={css.input}\r\n              inputClassName={css.locationAutocompleteInput}\r\n              iconClassName={css.locationAutocompleteInputIcon}\r\n              predictionsClassName={css.predictionsRoot}\r\n              validClassName={css.validLocation}\r\n              autoFocus={autoFocus}\r\n              name=\"location\"\r\n              label={titleRequiredMessage}\r\n              placeholder={addressPlaceholderMessage}\r\n              useDefaultPredictions={false}\r\n              format={identity}\r\n              valueFromForm={values.location}\r\n              validate={\r\n                pickupEnabled\r\n                  ? composeValidators(\r\n                      autocompleteSearchRequired(addressRequiredMessage),\r\n                      autocompletePlaceSelected(addressNotRecognizedMessage)\r\n                    )\r\n                  : () => {}\r\n              }\r\n              hideErrorMessage={!pickupEnabled}\r\n              // Whatever parameters are being used to calculate\r\n              // the validation function need to be combined in such\r\n              // a way that, when they change, this key prop\r\n              // changes, thus reregistering this field (and its\r\n              // validation function) with Final Form.\r\n              // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\r\n              key={pickupEnabled ? 'locationValidation' : 'noLocationValidation'}\r\n            />\r\n\r\n            <FieldTextInput\r\n              className={css.input}\r\n              type=\"text\"\r\n              name=\"building\"\r\n              id=\"building\"\r\n              label={buildingMessage}\r\n              placeholder={buildingPlaceholderMessage}\r\n              disabled={!pickupEnabled}\r\n            />\r\n          </div>\r\n          <FieldCheckbox\r\n            id=\"shipping\"\r\n            className={css.deliveryCheckbox}\r\n            name=\"deliveryOptions\"\r\n            label={shippingLabel}\r\n            value=\"shipping\"\r\n          />\r\n\r\n          <div className={shippingClasses}>\r\n            <FieldCurrencyInput\r\n              id=\"shippingPriceInSubunitsOneItem\"\r\n              name=\"shippingPriceInSubunitsOneItem\"\r\n              className={css.input}\r\n              label={intl.formatMessage({\r\n                id: 'EditListingDeliveryForm.shippingOneItemLabel',\r\n              })}\r\n              placeholder={intl.formatMessage({\r\n                id: 'EditListingDeliveryForm.shippingOneItemPlaceholder',\r\n              })}\r\n              currencyConfig={config.currencyConfig}\r\n              disabled={!shippingEnabled}\r\n              validate={\r\n                shippingEnabled\r\n                  ? required(\r\n                      intl.formatMessage({\r\n                        id: 'EditListingDeliveryForm.shippingOneItemRequired',\r\n                      })\r\n                    )\r\n                  : null\r\n              }\r\n              hideErrorMessage={!shippingEnabled}\r\n              // Whatever parameters are being used to calculate\r\n              // the validation function need to be combined in such\r\n              // a way that, when they change, this key prop\r\n              // changes, thus reregistering this field (and its\r\n              // validation function) with Final Form.\r\n              // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\r\n              key={shippingEnabled ? 'oneItemValidation' : 'noOneItemValidation'}\r\n            />\r\n\r\n            <FieldCurrencyInput\r\n              id=\"shippingPriceInSubunitsAdditionalItems\"\r\n              name=\"shippingPriceInSubunitsAdditionalItems\"\r\n              className={css.input}\r\n              label={intl.formatMessage({\r\n                id: 'EditListingDeliveryForm.shippingAdditionalItemsLabel',\r\n              })}\r\n              placeholder={intl.formatMessage({\r\n                id: 'EditListingDeliveryForm.shippingAdditionalItemsPlaceholder',\r\n              })}\r\n              currencyConfig={config.currencyConfig}\r\n              disabled={!shippingEnabled}\r\n              validate={\r\n                shippingEnabled\r\n                  ? required(\r\n                      intl.formatMessage({\r\n                        id: 'EditListingDeliveryForm.shippingAdditionalItemsRequired',\r\n                      })\r\n                    )\r\n                  : null\r\n              }\r\n              hideErrorMessage={!shippingEnabled}\r\n              // Whatever parameters are being used to calculate\r\n              // the validation function need to be combined in such\r\n              // a way that, when they change, this key prop\r\n              // changes, thus reregistering this field (and its\r\n              // validation function) with Final Form.\r\n              // See example: https://codesandbox.io/s/changing-field-level-validators-zc8ei\r\n              key={shippingEnabled ? 'additionalItemsValidation' : 'noAdditionalItemsValidation'}\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n            ready={submitReady}\r\n          >\r\n            {saveActionMsg}\r\n          </Button>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nEditListingDeliveryFormComponent.defaultProps = {\r\n  selectedPlace: null,\r\n  fetchErrors: null,\r\n};\r\n\r\nEditListingDeliveryFormComponent.propTypes = {\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func.isRequired,\r\n  saveActionMsg: string.isRequired,\r\n  selectedPlace: propTypes.place,\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  updated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  fetchErrors: shape({\r\n    showListingsError: propTypes.error,\r\n    updateListingError: propTypes.error,\r\n  }),\r\n};\r\n\r\nexport default compose(injectIntl)(EditListingDeliveryFormComponent);\r\n"]},"metadata":{},"sourceType":"module"}