{"ast":null,"code":"import pick from 'lodash/pick';\nimport pickBy from 'lodash/pickBy';\nimport isEmpty from 'lodash/isEmpty';\nimport config from '../../config';\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\nimport { getStartOf, addTime } from '../../util/dates';\nimport { isTransactionsTransitionInvalidTransition, storableError } from '../../util/errors';\nimport { txIsEnquired, getReview1Transition, getReview2Transition, txIsInFirstReviewBy, TRANSITION_DISPUTE, TRANSITION_MARK_RECEIVED, TRANSITION_MARK_RECEIVED_FROM_PURCHASED, TRANSITION_MARK_DELIVERED } from '../../util/transaction';\nimport { transactionLineItems } from '../../util/api';\nimport * as log from '../../util/log';\nimport { updatedEntities, denormalisedEntities, denormalisedResponseEntities } from '../../util/data';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { fetchCurrentUserNotifications } from '../../ducks/user.duck';\nconst {\n  UUID\n} = sdkTypes;\nconst MESSAGES_PAGE_SIZE = 100;\nconst CUSTOMER = 'customer';\nconst REVIEW_TX_INCLUDES = ['reviews', 'reviews.author', 'reviews.subject']; // ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/TransactionPage/SET_INITIAL_VALUES';\nexport const FETCH_TRANSACTION_REQUEST = 'app/TransactionPage/FETCH_TRANSACTION_REQUEST';\nexport const FETCH_TRANSACTION_SUCCESS = 'app/TransactionPage/FETCH_TRANSACTION_SUCCESS';\nexport const FETCH_TRANSACTION_ERROR = 'app/TransactionPage/FETCH_TRANSACTION_ERROR';\nexport const FETCH_TRANSITIONS_REQUEST = 'app/TransactionPage/FETCH_TRANSITIONS_REQUEST';\nexport const FETCH_TRANSITIONS_SUCCESS = 'app/TransactionPage/FETCH_TRANSITIONS_SUCCESS';\nexport const FETCH_TRANSITIONS_ERROR = 'app/TransactionPage/FETCH_TRANSITIONS_ERROR';\nexport const MARK_RECEIVED_FROM_PURCHASED_REQUEST = 'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_REQUEST';\nexport const MARK_RECEIVED_FROM_PURCHASED_SUCCESS = 'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_SUCCESS';\nexport const MARK_RECEIVED_FROM_PURCHASED_ERROR = 'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_ERROR';\nexport const MARK_DELIVERED_REQUEST = 'app/TransactionPage/MARK_DELIVERED_REQUEST';\nexport const MARK_DELIVERED_SUCCESS = 'app/TransactionPage/MARK_DELIVERED_SUCCESS';\nexport const MARK_DELIVERED_ERROR = 'app/TransactionPage/MARK_DELIVERED_ERROR';\nexport const MARK_RECEIVED_REQUEST = 'app/TransactionPage/MARK_RECEIVED_REQUEST';\nexport const MARK_RECEIVED_SUCCESS = 'app/TransactionPage/MARK_RECEIVED_SUCCESS';\nexport const MARK_RECEIVED_ERROR = 'app/TransactionPage/MARK_RECEIVED_ERROR';\nexport const DISPUTE_REQUEST = 'app/TransactionPage/DISPUTE_REQUEST';\nexport const DISPUTE_SUCCESS = 'app/TransactionPage/DISPUTE_SUCCESS';\nexport const DISPUTE_ERROR = 'app/TransactionPage/DISPUTE_ERROR';\nexport const FETCH_MESSAGES_REQUEST = 'app/TransactionPage/FETCH_MESSAGES_REQUEST';\nexport const FETCH_MESSAGES_SUCCESS = 'app/TransactionPage/FETCH_MESSAGES_SUCCESS';\nexport const FETCH_MESSAGES_ERROR = 'app/TransactionPage/FETCH_MESSAGES_ERROR';\nexport const SEND_MESSAGE_REQUEST = 'app/TransactionPage/SEND_MESSAGE_REQUEST';\nexport const SEND_MESSAGE_SUCCESS = 'app/TransactionPage/SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'app/TransactionPage/SEND_MESSAGE_ERROR';\nexport const SEND_REVIEW_REQUEST = 'app/TransactionPage/SEND_REVIEW_REQUEST';\nexport const SEND_REVIEW_SUCCESS = 'app/TransactionPage/SEND_REVIEW_SUCCESS';\nexport const SEND_REVIEW_ERROR = 'app/TransactionPage/SEND_REVIEW_ERROR';\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/TransactionPage/FETCH_TIME_SLOTS_REQUEST';\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/TransactionPage/FETCH_TIME_SLOTS_SUCCESS';\nexport const FETCH_TIME_SLOTS_ERROR = 'app/TransactionPage/FETCH_TIME_SLOTS_ERROR';\nexport const FETCH_LINE_ITEMS_REQUEST = 'app/TransactionPage/FETCH_LINE_ITEMS_REQUEST';\nexport const FETCH_LINE_ITEMS_SUCCESS = 'app/TransactionPage/FETCH_LINE_ITEMS_SUCCESS';\nexport const FETCH_LINE_ITEMS_ERROR = 'app/TransactionPage/FETCH_LINE_ITEMS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  fetchTransactionInProgress: false,\n  fetchTransactionError: null,\n  transactionRef: null,\n  markReceivedInProgress: false,\n  markReceivedError: null,\n  markReceivedFromPurchasedInProgress: false,\n  markReceivedFromPurchasedError: null,\n  markDeliveredInProgress: false,\n  markDeliveredError: null,\n  disputeInProgress: false,\n  disputeError: null,\n  fetchMessagesInProgress: false,\n  fetchMessagesError: null,\n  totalMessages: 0,\n  totalMessagePages: 0,\n  oldestMessagePageFetched: 0,\n  messages: [],\n  initialMessageFailedToTransaction: null,\n  savePaymentMethodFailed: false,\n  sendMessageInProgress: false,\n  sendMessageError: null,\n  sendReviewInProgress: false,\n  sendReviewError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n  fetchTransitionsInProgress: false,\n  fetchTransitionsError: null,\n  processTransitions: null,\n  lineItems: null,\n  fetchLineItemsInProgress: false,\n  fetchLineItemsError: null\n}; // Merge entity arrays using ids, so that conflicting items in newer array (b) overwrite old values (a).\n// const a = [{ id: { uuid: 1 } }, { id: { uuid: 3 } }];\n// const b = [{ id: : { uuid: 2 } }, { id: : { uuid: 1 } }];\n// mergeEntityArrays(a, b)\n// => [{ id: { uuid: 3 } }, { id: : { uuid: 2 } }, { id: : { uuid: 1 } }]\n\nconst mergeEntityArrays = (a, b) => {\n  return a.filter(aEntity => !b.find(bEntity => aEntity.id.uuid === bEntity.id.uuid)).concat(b);\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState,\n        ...payload\n      };\n\n    case FETCH_TRANSACTION_REQUEST:\n      return { ...state,\n        fetchTransactionInProgress: true,\n        fetchTransactionError: null\n      };\n\n    case FETCH_TRANSACTION_SUCCESS:\n      {\n        const transactionRef = {\n          id: payload.data.data.id,\n          type: 'transaction'\n        };\n        return { ...state,\n          fetchTransactionInProgress: false,\n          transactionRef\n        };\n      }\n\n    case FETCH_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return { ...state,\n        fetchTransactionInProgress: false,\n        fetchTransactionError: payload\n      };\n\n    case FETCH_TRANSITIONS_REQUEST:\n      return { ...state,\n        fetchTransitionsInProgress: true,\n        fetchTransitionsError: null\n      };\n\n    case FETCH_TRANSITIONS_SUCCESS:\n      return { ...state,\n        fetchTransitionsInProgress: false,\n        processTransitions: payload\n      };\n\n    case FETCH_TRANSITIONS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return { ...state,\n        fetchTransitionsInProgress: false,\n        fetchTransitionsError: payload\n      };\n\n    case MARK_RECEIVED_FROM_PURCHASED_REQUEST:\n      return { ...state,\n        markReceivedFromPurchasedInProgress: true,\n        markReceivedFromPurchasedError: null\n      };\n\n    case MARK_RECEIVED_FROM_PURCHASED_SUCCESS:\n      return { ...state,\n        markReceivedFromPurchasedInProgress: false\n      };\n\n    case MARK_RECEIVED_FROM_PURCHASED_ERROR:\n      return { ...state,\n        markReceivedFromPurchasedInProgress: false,\n        markReceivedFromPurchasedError: payload\n      };\n\n    case MARK_DELIVERED_REQUEST:\n      return { ...state,\n        markDeliveredInProgress: true,\n        markDeliveredError: null\n      };\n\n    case MARK_DELIVERED_SUCCESS:\n      return { ...state,\n        markDeliveredInProgress: false\n      };\n\n    case MARK_DELIVERED_ERROR:\n      return { ...state,\n        markDeliveredInProgress: false,\n        markDeliveredError: payload\n      };\n\n    case MARK_RECEIVED_REQUEST:\n      return { ...state,\n        markReceivedInProgress: true,\n        markReceivedError: null\n      };\n\n    case MARK_RECEIVED_SUCCESS:\n      return { ...state,\n        markReceivedInProgress: false\n      };\n\n    case MARK_RECEIVED_ERROR:\n      return { ...state,\n        markReceivedInProgress: false,\n        markReceivedError: payload\n      };\n\n    case DISPUTE_REQUEST:\n      return { ...state,\n        disputeInProgress: true,\n        disputeError: null\n      };\n\n    case DISPUTE_SUCCESS:\n      return { ...state,\n        disputeInProgress: false\n      };\n\n    case DISPUTE_ERROR:\n      return { ...state,\n        disputeInProgress: false,\n        disputeError: payload\n      };\n\n    case FETCH_MESSAGES_REQUEST:\n      return { ...state,\n        fetchMessagesInProgress: true,\n        fetchMessagesError: null\n      };\n\n    case FETCH_MESSAGES_SUCCESS:\n      {\n        const oldestMessagePageFetched = state.oldestMessagePageFetched > payload.page ? state.oldestMessagePageFetched : payload.page;\n        return { ...state,\n          fetchMessagesInProgress: false,\n          messages: mergeEntityArrays(state.messages, payload.messages),\n          totalMessages: payload.totalItems,\n          totalMessagePages: payload.totalPages,\n          oldestMessagePageFetched\n        };\n      }\n\n    case FETCH_MESSAGES_ERROR:\n      return { ...state,\n        fetchMessagesInProgress: false,\n        fetchMessagesError: payload\n      };\n\n    case SEND_MESSAGE_REQUEST:\n      return { ...state,\n        sendMessageInProgress: true,\n        sendMessageError: null,\n        initialMessageFailedToTransaction: null\n      };\n\n    case SEND_MESSAGE_SUCCESS:\n      return { ...state,\n        sendMessageInProgress: false\n      };\n\n    case SEND_MESSAGE_ERROR:\n      return { ...state,\n        sendMessageInProgress: false,\n        sendMessageError: payload\n      };\n\n    case SEND_REVIEW_REQUEST:\n      return { ...state,\n        sendReviewInProgress: true,\n        sendReviewError: null\n      };\n\n    case SEND_REVIEW_SUCCESS:\n      return { ...state,\n        sendReviewInProgress: false\n      };\n\n    case SEND_REVIEW_ERROR:\n      return { ...state,\n        sendReviewInProgress: false,\n        sendReviewError: payload\n      };\n\n    case FETCH_TIME_SLOTS_REQUEST:\n      return { ...state,\n        fetchTimeSlotsError: null\n      };\n\n    case FETCH_TIME_SLOTS_SUCCESS:\n      return { ...state,\n        timeSlots: payload\n      };\n\n    case FETCH_TIME_SLOTS_ERROR:\n      return { ...state,\n        fetchTimeSlotsError: payload\n      };\n\n    case FETCH_LINE_ITEMS_REQUEST:\n      return { ...state,\n        fetchLineItemsInProgress: true,\n        fetchLineItemsError: null\n      };\n\n    case FETCH_LINE_ITEMS_SUCCESS:\n      return { ...state,\n        fetchLineItemsInProgress: false,\n        lineItems: payload\n      };\n\n    case FETCH_LINE_ITEMS_ERROR:\n      return { ...state,\n        fetchLineItemsInProgress: false,\n        fetchLineItemsError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const transitionInProgress = state => {\n  const pageState = state.TransactionPage;\n  return pageState.markReceivedFromPurchasedInProgress || pageState.markDeliveredInProgress;\n}; // ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\n\nconst fetchTransactionRequest = () => ({\n  type: FETCH_TRANSACTION_REQUEST\n});\n\nconst fetchTransactionSuccess = response => ({\n  type: FETCH_TRANSACTION_SUCCESS,\n  payload: response\n});\n\nconst fetchTransactionError = e => ({\n  type: FETCH_TRANSACTION_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchTransitionsRequest = () => ({\n  type: FETCH_TRANSITIONS_REQUEST\n});\n\nconst fetchTransitionsSuccess = response => ({\n  type: FETCH_TRANSITIONS_SUCCESS,\n  payload: response\n});\n\nconst fetchTransitionsError = e => ({\n  type: FETCH_TRANSITIONS_ERROR,\n  error: true,\n  payload: e\n});\n\nconst markReceivedFromPurchasedRequest = () => ({\n  type: MARK_RECEIVED_FROM_PURCHASED_REQUEST\n});\n\nconst markReceivedFromPurchasedSuccess = () => ({\n  type: MARK_RECEIVED_FROM_PURCHASED_SUCCESS\n});\n\nconst markReceivedFromPurchasedError = e => ({\n  type: MARK_RECEIVED_FROM_PURCHASED_ERROR,\n  error: true,\n  payload: e\n});\n\nconst markDeliveredRequest = () => ({\n  type: MARK_DELIVERED_REQUEST\n});\n\nconst markDeliveredSuccess = () => ({\n  type: MARK_DELIVERED_SUCCESS\n});\n\nconst markDeliveredError = e => ({\n  type: MARK_DELIVERED_ERROR,\n  error: true,\n  payload: e\n});\n\nconst markReceivedRequest = () => ({\n  type: MARK_RECEIVED_REQUEST\n});\n\nconst markReceivedSuccess = () => ({\n  type: MARK_RECEIVED_SUCCESS\n});\n\nconst markReceivedError = e => ({\n  type: MARK_RECEIVED_ERROR,\n  error: true,\n  payload: e\n});\n\nconst disputeRequest = () => ({\n  type: DISPUTE_REQUEST\n});\n\nconst disputeSuccess = () => ({\n  type: DISPUTE_SUCCESS\n});\n\nconst disputeError = e => ({\n  type: DISPUTE_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchMessagesRequest = () => ({\n  type: FETCH_MESSAGES_REQUEST\n});\n\nconst fetchMessagesSuccess = (messages, pagination) => ({\n  type: FETCH_MESSAGES_SUCCESS,\n  payload: {\n    messages,\n    ...pagination\n  }\n});\n\nconst fetchMessagesError = e => ({\n  type: FETCH_MESSAGES_ERROR,\n  error: true,\n  payload: e\n});\n\nconst sendMessageRequest = () => ({\n  type: SEND_MESSAGE_REQUEST\n});\n\nconst sendMessageSuccess = () => ({\n  type: SEND_MESSAGE_SUCCESS\n});\n\nconst sendMessageError = e => ({\n  type: SEND_MESSAGE_ERROR,\n  error: true,\n  payload: e\n});\n\nconst sendReviewRequest = () => ({\n  type: SEND_REVIEW_REQUEST\n});\n\nconst sendReviewSuccess = () => ({\n  type: SEND_REVIEW_SUCCESS\n});\n\nconst sendReviewError = e => ({\n  type: SEND_REVIEW_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchTimeSlotsRequest = () => ({\n  type: FETCH_TIME_SLOTS_REQUEST\n});\n\nconst fetchTimeSlotsSuccess = timeSlots => ({\n  type: FETCH_TIME_SLOTS_SUCCESS,\n  payload: timeSlots\n});\n\nconst fetchTimeSlotsError = e => ({\n  type: FETCH_TIME_SLOTS_ERROR,\n  error: true,\n  payload: e\n});\n\nexport const fetchLineItemsRequest = () => ({\n  type: FETCH_LINE_ITEMS_REQUEST\n});\nexport const fetchLineItemsSuccess = lineItems => ({\n  type: FETCH_LINE_ITEMS_SUCCESS,\n  payload: lineItems\n});\nexport const fetchLineItemsError = error => ({\n  type: FETCH_LINE_ITEMS_ERROR,\n  error: true,\n  payload: error\n}); // ================ Thunks ================ //\n// Helper to fetch correct image variants for different thunk calls\n\nconst getImageVariants = () => {\n  const {\n    aspectWidth = 1,\n    aspectHeight = 1,\n    variantPrefix = 'listing-card'\n  } = config.listing;\n  const aspectRatio = aspectHeight / aspectWidth;\n  return {\n    'fields.image': [// Profile images\n    'variants.square-small', 'variants.square-small2x', // Listing images:\n    `variants.${variantPrefix}`, `variants.${variantPrefix}-2x`],\n    ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\n    ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio)\n  };\n};\n\nconst listingRelationship = txResponse => {\n  return txResponse.data.data.relationships.listing.data;\n};\n\nexport const fetchTransaction = (id, txRole) => (dispatch, getState, sdk) => {\n  dispatch(fetchTransactionRequest());\n  let txResponse = null;\n  return sdk.transactions.show({\n    id,\n    include: ['customer', 'customer.profileImage', 'provider', 'provider.profileImage', 'listing', 'listing.currentStock', 'booking', 'reviews', 'reviews.author', 'reviews.subject'],\n    ...getImageVariants()\n  }, {\n    expand: true\n  }).then(response => {\n    txResponse = response;\n    const listingId = listingRelationship(response).id;\n    const entities = updatedEntities({}, response.data);\n    const listingRef = {\n      id: listingId,\n      type: 'listing'\n    };\n    const transactionRef = {\n      id,\n      type: 'transaction'\n    };\n    const denormalised = denormalisedEntities(entities, [listingRef, transactionRef]);\n    const listing = denormalised[0];\n    const transaction = denormalised[1]; // Fetch time slots for transactions that are in enquired state\n\n    const canFetchTimeslots = txRole === 'customer' && config.listingManagementType === 'availability' && transaction && txIsEnquired(transaction);\n\n    if (canFetchTimeslots) {\n      dispatch(fetchTimeSlots(listingId));\n    }\n\n    const canFetchListing = listing && listing.attributes && !listing.attributes.deleted;\n\n    if (canFetchListing) {\n      return sdk.listings.show({\n        id: listingId,\n        include: ['author', 'author.profileImage', 'images'],\n        ...getImageVariants()\n      });\n    } else {\n      return response;\n    }\n  }).then(response => {\n    dispatch(addMarketplaceEntities(txResponse));\n    dispatch(addMarketplaceEntities(response));\n    dispatch(fetchTransactionSuccess(txResponse));\n    return response;\n  }).catch(e => {\n    dispatch(fetchTransactionError(storableError(e)));\n    throw e;\n  });\n};\nexport const markReceivedFromPurchased = id => (dispatch, getState, sdk) => {\n  if (transitionInProgress(getState())) {\n    return Promise.reject(new Error('Transition already in progress'));\n  }\n\n  dispatch(markReceivedFromPurchasedRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_MARK_RECEIVED_FROM_PURCHASED,\n    params: {}\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(markReceivedFromPurchasedSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(markReceivedFromPurchasedError(storableError(e)));\n    log.error(e, 'mark-received-from-purchase-failed', {\n      txId: id,\n      transition: TRANSITION_MARK_RECEIVED_FROM_PURCHASED\n    });\n    throw e;\n  });\n};\nexport const markDelivered = id => (dispatch, getState, sdk) => {\n  if (transitionInProgress(getState())) {\n    return Promise.reject(new Error('Transition already in progress'));\n  }\n\n  dispatch(markDeliveredRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_MARK_DELIVERED,\n    params: {}\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(markDeliveredSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(markDeliveredError(storableError(e)));\n    log.error(e, 'mark-delivered-failed', {\n      txId: id,\n      transition: TRANSITION_MARK_DELIVERED\n    });\n    throw e;\n  });\n};\nexport const markReceived = id => (dispatch, getState, sdk) => {\n  if (transitionInProgress(getState())) {\n    return Promise.reject(new Error('Transition already in progress'));\n  }\n\n  dispatch(markReceivedRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_MARK_RECEIVED,\n    params: {}\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(markReceivedSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(markReceivedError(storableError(e)));\n    log.error(e, 'mark-received-failed', {\n      txId: id,\n      transition: TRANSITION_MARK_RECEIVED\n    });\n    throw e;\n  });\n};\nexport const dispute = (id, disputeReason) => (dispatch, getState, sdk) => {\n  if (transitionInProgress(getState())) {\n    return Promise.reject(new Error('Transition already in progress'));\n  }\n\n  const params = disputeReason ? {\n    protectedData: {\n      disputeReason\n    }\n  } : {};\n  dispatch(disputeRequest());\n  return sdk.transactions.transition({\n    id,\n    transition: TRANSITION_DISPUTE,\n    params\n  }, {\n    expand: true\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(disputeSuccess());\n    dispatch(fetchCurrentUserNotifications());\n    return response;\n  }).catch(e => {\n    dispatch(disputeError(storableError(e)));\n    log.error(e, 'dispute-failed', {\n      txId: id,\n      transition: TRANSITION_DISPUTE\n    });\n    throw e;\n  });\n};\n\nconst fetchMessages = (txId, page) => (dispatch, getState, sdk) => {\n  const paging = {\n    page,\n    per_page: MESSAGES_PAGE_SIZE\n  };\n  dispatch(fetchMessagesRequest());\n  return sdk.messages.query({\n    transaction_id: txId,\n    include: ['sender', 'sender.profileImage'],\n    ...getImageVariants(),\n    ...paging\n  }).then(response => {\n    const messages = denormalisedResponseEntities(response);\n    const {\n      totalItems,\n      totalPages,\n      page: fetchedPage\n    } = response.data.meta;\n    const pagination = {\n      totalItems,\n      totalPages,\n      page: fetchedPage\n    };\n    const totalMessages = getState().TransactionPage.totalMessages; // Original fetchMessages call succeeded\n\n    dispatch(fetchMessagesSuccess(messages, pagination)); // Check if totalItems has changed between fetched pagination pages\n    // if totalItems has changed, fetch first page again to include new incoming messages.\n    // TODO if there're more than 100 incoming messages,\n    // this should loop through most recent pages instead of fetching just the first one.\n\n    if (totalItems > totalMessages && page > 1) {\n      dispatch(fetchMessages(txId, 1)).then(() => {// Original fetch was enough as a response for user action,\n        // this just includes new incoming messages\n      }).catch(() => {// Background update, no need to to do anything atm.\n      });\n    }\n  }).catch(e => {\n    dispatch(fetchMessagesError(storableError(e)));\n    throw e;\n  });\n};\n\nexport const fetchMoreMessages = txId => (dispatch, getState, sdk) => {\n  const state = getState();\n  const {\n    oldestMessagePageFetched,\n    totalMessagePages\n  } = state.TransactionPage;\n  const hasMoreOldMessages = totalMessagePages > oldestMessagePageFetched; // In case there're no more old pages left we default to fetching the current cursor position\n\n  const nextPage = hasMoreOldMessages ? oldestMessagePageFetched + 1 : oldestMessagePageFetched;\n  return dispatch(fetchMessages(txId, nextPage));\n};\nexport const sendMessage = (txId, message) => (dispatch, getState, sdk) => {\n  dispatch(sendMessageRequest());\n  return sdk.messages.send({\n    transactionId: txId,\n    content: message\n  }).then(response => {\n    const messageId = response.data.data.id; // We fetch the first page again to add sent message to the page data\n    // and update possible incoming messages too.\n    // TODO if there're more than 100 incoming messages,\n    // this should loop through most recent pages instead of fetching just the first one.\n\n    return dispatch(fetchMessages(txId, 1)).then(() => {\n      dispatch(sendMessageSuccess());\n      return messageId;\n    }).catch(() => dispatch(sendMessageSuccess()));\n  }).catch(e => {\n    dispatch(sendMessageError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n    // keep the message in the form for a retry.\n\n    throw e;\n  });\n}; // If other party has already sent a review, we need to make transition to\n// TRANSITION_REVIEW_2_BY_<CUSTOMER/PROVIDER>\n\nconst sendReviewAsSecond = (id, params, role, dispatch, sdk) => {\n  const transition = getReview2Transition(role === CUSTOMER);\n  const include = REVIEW_TX_INCLUDES;\n  return sdk.transactions.transition({\n    id,\n    transition,\n    params\n  }, {\n    expand: true,\n    include,\n    ...getImageVariants()\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(sendReviewSuccess());\n    return response;\n  }).catch(e => {\n    dispatch(sendReviewError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n    // keep the message in the form for a retry.\n\n    throw e;\n  });\n}; // If other party has not yet sent a review, we need to make transition to\n// TRANSITION_REVIEW_1_BY_<CUSTOMER/PROVIDER>\n// However, the other party might have made the review after previous data synch point.\n// So, error is likely to happen and then we must try another state transition\n// by calling sendReviewAsSecond().\n\n\nconst sendReviewAsFirst = (id, params, role, dispatch, sdk) => {\n  const transition = getReview1Transition(role === CUSTOMER);\n  const include = REVIEW_TX_INCLUDES;\n  return sdk.transactions.transition({\n    id,\n    transition,\n    params\n  }, {\n    expand: true,\n    include,\n    ...getImageVariants()\n  }).then(response => {\n    dispatch(addMarketplaceEntities(response));\n    dispatch(sendReviewSuccess());\n    return response;\n  }).catch(e => {\n    // If transaction transition is invalid, lets try another endpoint.\n    if (isTransactionsTransitionInvalidTransition(e)) {\n      return sendReviewAsSecond(id, params, role, dispatch, sdk);\n    } else {\n      dispatch(sendReviewError(storableError(e))); // Rethrow so the page can track whether the sending failed, and\n      // keep the message in the form for a retry.\n\n      throw e;\n    }\n  });\n};\n\nexport const sendReview = (role, tx, reviewRating, reviewContent) => (dispatch, getState, sdk) => {\n  const params = {\n    reviewRating,\n    reviewContent\n  };\n  const txStateOtherPartyFirst = txIsInFirstReviewBy(tx, role !== CUSTOMER);\n  dispatch(sendReviewRequest());\n  return txStateOtherPartyFirst ? sendReviewAsSecond(tx.id, params, role, dispatch, sdk) : sendReviewAsFirst(tx.id, params, role, dispatch, sdk);\n};\n\nconst isNonEmpty = value => {\n  return typeof value === 'object' || Array.isArray(value) ? !isEmpty(value) : !!value;\n};\n\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\n  return sdk.timeslots.query(params).then(response => {\n    return denormalisedResponseEntities(response);\n  });\n};\n\nconst fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\n  dispatch(fetchTimeSlotsRequest); // Time slots can be fetched for 90 days at a time,\n  // for at most 180 days from now. If max number of bookable\n  // day exceeds 90, a second request is made.\n\n  const maxTimeSlots = 90; // booking range: today + bookable days -1\n\n  const bookingRange = config.dayCountAvailableForBooking - 1;\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\n  const now = new Date();\n  const start = getStartOf(now, 'day', 'Etc/UTC');\n  const end = addTime(start, timeSlotsRange, 'days', 'Etc/UTC');\n  const params = {\n    listingId,\n    start,\n    end\n  };\n  return dispatch(timeSlotsRequest(params)).then(timeSlots => {\n    const secondRequest = bookingRange > maxTimeSlots;\n\n    if (secondRequest) {\n      const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\n      const secondParams = {\n        listingId,\n        start: end,\n        end: addTime(end, secondRange, 'days', 'Etc/UTC')\n      };\n      return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\n        const combined = timeSlots.concat(secondBatch);\n        dispatch(fetchTimeSlotsSuccess(combined));\n      });\n    } else {\n      dispatch(fetchTimeSlotsSuccess(timeSlots));\n    }\n  }).catch(e => {\n    dispatch(fetchTimeSlotsError(storableError(e)));\n  });\n};\n\nexport const fetchNextTransitions = id => (dispatch, getState, sdk) => {\n  dispatch(fetchTransitionsRequest());\n  return sdk.processTransitions.query({\n    transactionId: id\n  }).then(res => {\n    dispatch(fetchTransitionsSuccess(res.data.data));\n  }).catch(e => {\n    dispatch(fetchTransitionsError(storableError(e)));\n  });\n};\nexport const fetchTransactionLineItems = ({\n  orderData,\n  listingId,\n  isOwnListing\n}) => dispatch => {\n  dispatch(fetchLineItemsRequest());\n  transactionLineItems({\n    orderData,\n    listingId,\n    isOwnListing\n  }).then(response => {\n    const lineItems = response.data;\n    dispatch(fetchLineItemsSuccess(lineItems));\n  }).catch(e => {\n    dispatch(fetchLineItemsError(storableError(e)));\n    log.error(e, 'fetching-line-items-failed', {\n      listingId: listingId.uuid,\n      orderData\n    });\n  });\n}; // loadData is a collection of async calls that need to be made\n// before page has all the info it needs to render itself\n\nexport const loadData = params => (dispatch, getState) => {\n  const txId = new UUID(params.id);\n  const state = getState().TransactionPage;\n  const txRef = state.transactionRef;\n  const txRole = params.transactionRole; // In case a transaction reference is found from a previous\n  // data load -> clear the state. Otherwise keep the non-null\n  // and non-empty values which may have been set from a previous page.\n\n  const initialValues = txRef ? {} : pickBy(state, isNonEmpty);\n  dispatch(setInitialValues(initialValues)); // Sale / order (i.e. transaction entity in API)\n\n  return Promise.all([dispatch(fetchTransaction(txId, txRole)), dispatch(fetchMessages(txId, 1)), dispatch(fetchNextTransitions(txId))]);\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/TransactionPage/TransactionPage.duck.js"],"names":["pick","pickBy","isEmpty","config","types","sdkTypes","createImageVariantConfig","getStartOf","addTime","isTransactionsTransitionInvalidTransition","storableError","txIsEnquired","getReview1Transition","getReview2Transition","txIsInFirstReviewBy","TRANSITION_DISPUTE","TRANSITION_MARK_RECEIVED","TRANSITION_MARK_RECEIVED_FROM_PURCHASED","TRANSITION_MARK_DELIVERED","transactionLineItems","log","updatedEntities","denormalisedEntities","denormalisedResponseEntities","addMarketplaceEntities","fetchCurrentUserNotifications","UUID","MESSAGES_PAGE_SIZE","CUSTOMER","REVIEW_TX_INCLUDES","SET_INITIAL_VALUES","FETCH_TRANSACTION_REQUEST","FETCH_TRANSACTION_SUCCESS","FETCH_TRANSACTION_ERROR","FETCH_TRANSITIONS_REQUEST","FETCH_TRANSITIONS_SUCCESS","FETCH_TRANSITIONS_ERROR","MARK_RECEIVED_FROM_PURCHASED_REQUEST","MARK_RECEIVED_FROM_PURCHASED_SUCCESS","MARK_RECEIVED_FROM_PURCHASED_ERROR","MARK_DELIVERED_REQUEST","MARK_DELIVERED_SUCCESS","MARK_DELIVERED_ERROR","MARK_RECEIVED_REQUEST","MARK_RECEIVED_SUCCESS","MARK_RECEIVED_ERROR","DISPUTE_REQUEST","DISPUTE_SUCCESS","DISPUTE_ERROR","FETCH_MESSAGES_REQUEST","FETCH_MESSAGES_SUCCESS","FETCH_MESSAGES_ERROR","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_ERROR","SEND_REVIEW_REQUEST","SEND_REVIEW_SUCCESS","SEND_REVIEW_ERROR","FETCH_TIME_SLOTS_REQUEST","FETCH_TIME_SLOTS_SUCCESS","FETCH_TIME_SLOTS_ERROR","FETCH_LINE_ITEMS_REQUEST","FETCH_LINE_ITEMS_SUCCESS","FETCH_LINE_ITEMS_ERROR","initialState","fetchTransactionInProgress","fetchTransactionError","transactionRef","markReceivedInProgress","markReceivedError","markReceivedFromPurchasedInProgress","markReceivedFromPurchasedError","markDeliveredInProgress","markDeliveredError","disputeInProgress","disputeError","fetchMessagesInProgress","fetchMessagesError","totalMessages","totalMessagePages","oldestMessagePageFetched","messages","initialMessageFailedToTransaction","savePaymentMethodFailed","sendMessageInProgress","sendMessageError","sendReviewInProgress","sendReviewError","timeSlots","fetchTimeSlotsError","fetchTransitionsInProgress","fetchTransitionsError","processTransitions","lineItems","fetchLineItemsInProgress","fetchLineItemsError","mergeEntityArrays","a","b","filter","aEntity","find","bEntity","id","uuid","concat","checkoutPageReducer","state","action","type","payload","data","console","error","page","totalItems","totalPages","transitionInProgress","pageState","TransactionPage","setInitialValues","initialValues","Object","keys","fetchTransactionRequest","fetchTransactionSuccess","response","e","fetchTransitionsRequest","fetchTransitionsSuccess","markReceivedFromPurchasedRequest","markReceivedFromPurchasedSuccess","markDeliveredRequest","markDeliveredSuccess","markReceivedRequest","markReceivedSuccess","disputeRequest","disputeSuccess","fetchMessagesRequest","fetchMessagesSuccess","pagination","sendMessageRequest","sendMessageSuccess","sendReviewRequest","sendReviewSuccess","fetchTimeSlotsRequest","fetchTimeSlotsSuccess","fetchLineItemsRequest","fetchLineItemsSuccess","getImageVariants","aspectWidth","aspectHeight","variantPrefix","listing","aspectRatio","listingRelationship","txResponse","relationships","fetchTransaction","txRole","dispatch","getState","sdk","transactions","show","include","expand","then","listingId","entities","listingRef","denormalised","transaction","canFetchTimeslots","listingManagementType","fetchTimeSlots","canFetchListing","attributes","deleted","listings","catch","markReceivedFromPurchased","Promise","reject","Error","transition","params","txId","markDelivered","markReceived","dispute","disputeReason","protectedData","fetchMessages","paging","per_page","query","transaction_id","fetchedPage","meta","fetchMoreMessages","hasMoreOldMessages","nextPage","sendMessage","message","send","transactionId","content","messageId","sendReviewAsSecond","role","sendReviewAsFirst","sendReview","tx","reviewRating","reviewContent","txStateOtherPartyFirst","isNonEmpty","value","Array","isArray","timeSlotsRequest","timeslots","maxTimeSlots","bookingRange","dayCountAvailableForBooking","timeSlotsRange","Math","min","now","Date","start","end","secondRequest","secondRange","secondParams","secondBatch","combined","fetchNextTransitions","res","fetchTransactionLineItems","orderData","isOwnListing","loadData","txRef","transactionRole","all"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\r\nimport pickBy from 'lodash/pickBy';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nimport config from '../../config';\r\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\r\nimport { getStartOf, addTime } from '../../util/dates';\r\nimport { isTransactionsTransitionInvalidTransition, storableError } from '../../util/errors';\r\nimport {\r\n  txIsEnquired,\r\n  getReview1Transition,\r\n  getReview2Transition,\r\n  txIsInFirstReviewBy,\r\n  TRANSITION_DISPUTE,\r\n  TRANSITION_MARK_RECEIVED,\r\n  TRANSITION_MARK_RECEIVED_FROM_PURCHASED,\r\n  TRANSITION_MARK_DELIVERED,\r\n} from '../../util/transaction';\r\nimport { transactionLineItems } from '../../util/api';\r\nimport * as log from '../../util/log';\r\nimport {\r\n  updatedEntities,\r\n  denormalisedEntities,\r\n  denormalisedResponseEntities,\r\n} from '../../util/data';\r\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { fetchCurrentUserNotifications } from '../../ducks/user.duck';\r\n\r\nconst { UUID } = sdkTypes;\r\n\r\nconst MESSAGES_PAGE_SIZE = 100;\r\nconst CUSTOMER = 'customer';\r\nconst REVIEW_TX_INCLUDES = ['reviews', 'reviews.author', 'reviews.subject'];\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const SET_INITIAL_VALUES = 'app/TransactionPage/SET_INITIAL_VALUES';\r\n\r\nexport const FETCH_TRANSACTION_REQUEST = 'app/TransactionPage/FETCH_TRANSACTION_REQUEST';\r\nexport const FETCH_TRANSACTION_SUCCESS = 'app/TransactionPage/FETCH_TRANSACTION_SUCCESS';\r\nexport const FETCH_TRANSACTION_ERROR = 'app/TransactionPage/FETCH_TRANSACTION_ERROR';\r\n\r\nexport const FETCH_TRANSITIONS_REQUEST = 'app/TransactionPage/FETCH_TRANSITIONS_REQUEST';\r\nexport const FETCH_TRANSITIONS_SUCCESS = 'app/TransactionPage/FETCH_TRANSITIONS_SUCCESS';\r\nexport const FETCH_TRANSITIONS_ERROR = 'app/TransactionPage/FETCH_TRANSITIONS_ERROR';\r\n\r\nexport const MARK_RECEIVED_FROM_PURCHASED_REQUEST =\r\n  'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_REQUEST';\r\nexport const MARK_RECEIVED_FROM_PURCHASED_SUCCESS =\r\n  'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_SUCCESS';\r\nexport const MARK_RECEIVED_FROM_PURCHASED_ERROR =\r\n  'app/TransactionPage/MARK_RECEIVED_FROM_PURCHASED_ERROR';\r\n\r\nexport const MARK_DELIVERED_REQUEST = 'app/TransactionPage/MARK_DELIVERED_REQUEST';\r\nexport const MARK_DELIVERED_SUCCESS = 'app/TransactionPage/MARK_DELIVERED_SUCCESS';\r\nexport const MARK_DELIVERED_ERROR = 'app/TransactionPage/MARK_DELIVERED_ERROR';\r\n\r\nexport const MARK_RECEIVED_REQUEST = 'app/TransactionPage/MARK_RECEIVED_REQUEST';\r\nexport const MARK_RECEIVED_SUCCESS = 'app/TransactionPage/MARK_RECEIVED_SUCCESS';\r\nexport const MARK_RECEIVED_ERROR = 'app/TransactionPage/MARK_RECEIVED_ERROR';\r\n\r\nexport const DISPUTE_REQUEST = 'app/TransactionPage/DISPUTE_REQUEST';\r\nexport const DISPUTE_SUCCESS = 'app/TransactionPage/DISPUTE_SUCCESS';\r\nexport const DISPUTE_ERROR = 'app/TransactionPage/DISPUTE_ERROR';\r\n\r\nexport const FETCH_MESSAGES_REQUEST = 'app/TransactionPage/FETCH_MESSAGES_REQUEST';\r\nexport const FETCH_MESSAGES_SUCCESS = 'app/TransactionPage/FETCH_MESSAGES_SUCCESS';\r\nexport const FETCH_MESSAGES_ERROR = 'app/TransactionPage/FETCH_MESSAGES_ERROR';\r\n\r\nexport const SEND_MESSAGE_REQUEST = 'app/TransactionPage/SEND_MESSAGE_REQUEST';\r\nexport const SEND_MESSAGE_SUCCESS = 'app/TransactionPage/SEND_MESSAGE_SUCCESS';\r\nexport const SEND_MESSAGE_ERROR = 'app/TransactionPage/SEND_MESSAGE_ERROR';\r\n\r\nexport const SEND_REVIEW_REQUEST = 'app/TransactionPage/SEND_REVIEW_REQUEST';\r\nexport const SEND_REVIEW_SUCCESS = 'app/TransactionPage/SEND_REVIEW_SUCCESS';\r\nexport const SEND_REVIEW_ERROR = 'app/TransactionPage/SEND_REVIEW_ERROR';\r\n\r\nexport const FETCH_TIME_SLOTS_REQUEST = 'app/TransactionPage/FETCH_TIME_SLOTS_REQUEST';\r\nexport const FETCH_TIME_SLOTS_SUCCESS = 'app/TransactionPage/FETCH_TIME_SLOTS_SUCCESS';\r\nexport const FETCH_TIME_SLOTS_ERROR = 'app/TransactionPage/FETCH_TIME_SLOTS_ERROR';\r\n\r\nexport const FETCH_LINE_ITEMS_REQUEST = 'app/TransactionPage/FETCH_LINE_ITEMS_REQUEST';\r\nexport const FETCH_LINE_ITEMS_SUCCESS = 'app/TransactionPage/FETCH_LINE_ITEMS_SUCCESS';\r\nexport const FETCH_LINE_ITEMS_ERROR = 'app/TransactionPage/FETCH_LINE_ITEMS_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  fetchTransactionInProgress: false,\r\n  fetchTransactionError: null,\r\n  transactionRef: null,\r\n  markReceivedInProgress: false,\r\n  markReceivedError: null,\r\n  markReceivedFromPurchasedInProgress: false,\r\n  markReceivedFromPurchasedError: null,\r\n  markDeliveredInProgress: false,\r\n  markDeliveredError: null,\r\n  disputeInProgress: false,\r\n  disputeError: null,\r\n  fetchMessagesInProgress: false,\r\n  fetchMessagesError: null,\r\n  totalMessages: 0,\r\n  totalMessagePages: 0,\r\n  oldestMessagePageFetched: 0,\r\n  messages: [],\r\n  initialMessageFailedToTransaction: null,\r\n  savePaymentMethodFailed: false,\r\n  sendMessageInProgress: false,\r\n  sendMessageError: null,\r\n  sendReviewInProgress: false,\r\n  sendReviewError: null,\r\n  timeSlots: null,\r\n  fetchTimeSlotsError: null,\r\n  fetchTransitionsInProgress: false,\r\n  fetchTransitionsError: null,\r\n  processTransitions: null,\r\n  lineItems: null,\r\n  fetchLineItemsInProgress: false,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\n// Merge entity arrays using ids, so that conflicting items in newer array (b) overwrite old values (a).\r\n// const a = [{ id: { uuid: 1 } }, { id: { uuid: 3 } }];\r\n// const b = [{ id: : { uuid: 2 } }, { id: : { uuid: 1 } }];\r\n// mergeEntityArrays(a, b)\r\n// => [{ id: { uuid: 3 } }, { id: : { uuid: 2 } }, { id: : { uuid: 1 } }]\r\nconst mergeEntityArrays = (a, b) => {\r\n  return a.filter(aEntity => !b.find(bEntity => aEntity.id.uuid === bEntity.id.uuid)).concat(b);\r\n};\r\n\r\nexport default function checkoutPageReducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_INITIAL_VALUES:\r\n      return { ...initialState, ...payload };\r\n\r\n    case FETCH_TRANSACTION_REQUEST:\r\n      return { ...state, fetchTransactionInProgress: true, fetchTransactionError: null };\r\n    case FETCH_TRANSACTION_SUCCESS: {\r\n      const transactionRef = { id: payload.data.data.id, type: 'transaction' };\r\n      return { ...state, fetchTransactionInProgress: false, transactionRef };\r\n    }\r\n    case FETCH_TRANSACTION_ERROR:\r\n      console.error(payload); // eslint-disable-line\r\n      return { ...state, fetchTransactionInProgress: false, fetchTransactionError: payload };\r\n\r\n    case FETCH_TRANSITIONS_REQUEST:\r\n      return { ...state, fetchTransitionsInProgress: true, fetchTransitionsError: null };\r\n    case FETCH_TRANSITIONS_SUCCESS:\r\n      return { ...state, fetchTransitionsInProgress: false, processTransitions: payload };\r\n    case FETCH_TRANSITIONS_ERROR:\r\n      console.error(payload); // eslint-disable-line\r\n      return { ...state, fetchTransitionsInProgress: false, fetchTransitionsError: payload };\r\n\r\n    case MARK_RECEIVED_FROM_PURCHASED_REQUEST:\r\n      return {\r\n        ...state,\r\n        markReceivedFromPurchasedInProgress: true,\r\n        markReceivedFromPurchasedError: null,\r\n      };\r\n    case MARK_RECEIVED_FROM_PURCHASED_SUCCESS:\r\n      return { ...state, markReceivedFromPurchasedInProgress: false };\r\n    case MARK_RECEIVED_FROM_PURCHASED_ERROR:\r\n      return {\r\n        ...state,\r\n        markReceivedFromPurchasedInProgress: false,\r\n        markReceivedFromPurchasedError: payload,\r\n      };\r\n\r\n    case MARK_DELIVERED_REQUEST:\r\n      return { ...state, markDeliveredInProgress: true, markDeliveredError: null };\r\n    case MARK_DELIVERED_SUCCESS:\r\n      return { ...state, markDeliveredInProgress: false };\r\n    case MARK_DELIVERED_ERROR:\r\n      return { ...state, markDeliveredInProgress: false, markDeliveredError: payload };\r\n\r\n    case MARK_RECEIVED_REQUEST:\r\n      return {\r\n        ...state,\r\n        markReceivedInProgress: true,\r\n        markReceivedError: null,\r\n      };\r\n    case MARK_RECEIVED_SUCCESS:\r\n      return { ...state, markReceivedInProgress: false };\r\n    case MARK_RECEIVED_ERROR:\r\n      return {\r\n        ...state,\r\n        markReceivedInProgress: false,\r\n        markReceivedError: payload,\r\n      };\r\n\r\n    case DISPUTE_REQUEST:\r\n      return { ...state, disputeInProgress: true, disputeError: null };\r\n    case DISPUTE_SUCCESS:\r\n      return { ...state, disputeInProgress: false };\r\n    case DISPUTE_ERROR:\r\n      return { ...state, disputeInProgress: false, disputeError: payload };\r\n\r\n    case FETCH_MESSAGES_REQUEST:\r\n      return { ...state, fetchMessagesInProgress: true, fetchMessagesError: null };\r\n    case FETCH_MESSAGES_SUCCESS: {\r\n      const oldestMessagePageFetched =\r\n        state.oldestMessagePageFetched > payload.page\r\n          ? state.oldestMessagePageFetched\r\n          : payload.page;\r\n      return {\r\n        ...state,\r\n        fetchMessagesInProgress: false,\r\n        messages: mergeEntityArrays(state.messages, payload.messages),\r\n        totalMessages: payload.totalItems,\r\n        totalMessagePages: payload.totalPages,\r\n        oldestMessagePageFetched,\r\n      };\r\n    }\r\n    case FETCH_MESSAGES_ERROR:\r\n      return { ...state, fetchMessagesInProgress: false, fetchMessagesError: payload };\r\n\r\n    case SEND_MESSAGE_REQUEST:\r\n      return {\r\n        ...state,\r\n        sendMessageInProgress: true,\r\n        sendMessageError: null,\r\n        initialMessageFailedToTransaction: null,\r\n      };\r\n    case SEND_MESSAGE_SUCCESS:\r\n      return { ...state, sendMessageInProgress: false };\r\n    case SEND_MESSAGE_ERROR:\r\n      return { ...state, sendMessageInProgress: false, sendMessageError: payload };\r\n\r\n    case SEND_REVIEW_REQUEST:\r\n      return { ...state, sendReviewInProgress: true, sendReviewError: null };\r\n    case SEND_REVIEW_SUCCESS:\r\n      return { ...state, sendReviewInProgress: false };\r\n    case SEND_REVIEW_ERROR:\r\n      return { ...state, sendReviewInProgress: false, sendReviewError: payload };\r\n\r\n    case FETCH_TIME_SLOTS_REQUEST:\r\n      return { ...state, fetchTimeSlotsError: null };\r\n    case FETCH_TIME_SLOTS_SUCCESS:\r\n      return { ...state, timeSlots: payload };\r\n    case FETCH_TIME_SLOTS_ERROR:\r\n      return { ...state, fetchTimeSlotsError: payload };\r\n\r\n    case FETCH_LINE_ITEMS_REQUEST:\r\n      return { ...state, fetchLineItemsInProgress: true, fetchLineItemsError: null };\r\n    case FETCH_LINE_ITEMS_SUCCESS:\r\n      return { ...state, fetchLineItemsInProgress: false, lineItems: payload };\r\n    case FETCH_LINE_ITEMS_ERROR:\r\n      return { ...state, fetchLineItemsInProgress: false, fetchLineItemsError: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\nexport const transitionInProgress = state => {\r\n  const pageState = state.TransactionPage;\r\n  return pageState.markReceivedFromPurchasedInProgress || pageState.markDeliveredInProgress;\r\n};\r\n\r\n// ================ Action creators ================ //\r\nexport const setInitialValues = initialValues => ({\r\n  type: SET_INITIAL_VALUES,\r\n  payload: pick(initialValues, Object.keys(initialState)),\r\n});\r\n\r\nconst fetchTransactionRequest = () => ({ type: FETCH_TRANSACTION_REQUEST });\r\nconst fetchTransactionSuccess = response => ({\r\n  type: FETCH_TRANSACTION_SUCCESS,\r\n  payload: response,\r\n});\r\nconst fetchTransactionError = e => ({ type: FETCH_TRANSACTION_ERROR, error: true, payload: e });\r\n\r\nconst fetchTransitionsRequest = () => ({ type: FETCH_TRANSITIONS_REQUEST });\r\nconst fetchTransitionsSuccess = response => ({\r\n  type: FETCH_TRANSITIONS_SUCCESS,\r\n  payload: response,\r\n});\r\nconst fetchTransitionsError = e => ({ type: FETCH_TRANSITIONS_ERROR, error: true, payload: e });\r\n\r\nconst markReceivedFromPurchasedRequest = () => ({ type: MARK_RECEIVED_FROM_PURCHASED_REQUEST });\r\nconst markReceivedFromPurchasedSuccess = () => ({ type: MARK_RECEIVED_FROM_PURCHASED_SUCCESS });\r\nconst markReceivedFromPurchasedError = e => ({\r\n  type: MARK_RECEIVED_FROM_PURCHASED_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nconst markDeliveredRequest = () => ({ type: MARK_DELIVERED_REQUEST });\r\nconst markDeliveredSuccess = () => ({ type: MARK_DELIVERED_SUCCESS });\r\nconst markDeliveredError = e => ({ type: MARK_DELIVERED_ERROR, error: true, payload: e });\r\n\r\nconst markReceivedRequest = () => ({ type: MARK_RECEIVED_REQUEST });\r\nconst markReceivedSuccess = () => ({ type: MARK_RECEIVED_SUCCESS });\r\nconst markReceivedError = e => ({ type: MARK_RECEIVED_ERROR, error: true, payload: e });\r\n\r\nconst disputeRequest = () => ({ type: DISPUTE_REQUEST });\r\nconst disputeSuccess = () => ({ type: DISPUTE_SUCCESS });\r\nconst disputeError = e => ({ type: DISPUTE_ERROR, error: true, payload: e });\r\n\r\nconst fetchMessagesRequest = () => ({ type: FETCH_MESSAGES_REQUEST });\r\nconst fetchMessagesSuccess = (messages, pagination) => ({\r\n  type: FETCH_MESSAGES_SUCCESS,\r\n  payload: { messages, ...pagination },\r\n});\r\nconst fetchMessagesError = e => ({ type: FETCH_MESSAGES_ERROR, error: true, payload: e });\r\n\r\nconst sendMessageRequest = () => ({ type: SEND_MESSAGE_REQUEST });\r\nconst sendMessageSuccess = () => ({ type: SEND_MESSAGE_SUCCESS });\r\nconst sendMessageError = e => ({ type: SEND_MESSAGE_ERROR, error: true, payload: e });\r\n\r\nconst sendReviewRequest = () => ({ type: SEND_REVIEW_REQUEST });\r\nconst sendReviewSuccess = () => ({ type: SEND_REVIEW_SUCCESS });\r\nconst sendReviewError = e => ({ type: SEND_REVIEW_ERROR, error: true, payload: e });\r\n\r\nconst fetchTimeSlotsRequest = () => ({ type: FETCH_TIME_SLOTS_REQUEST });\r\nconst fetchTimeSlotsSuccess = timeSlots => ({\r\n  type: FETCH_TIME_SLOTS_SUCCESS,\r\n  payload: timeSlots,\r\n});\r\nconst fetchTimeSlotsError = e => ({\r\n  type: FETCH_TIME_SLOTS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nexport const fetchLineItemsRequest = () => ({ type: FETCH_LINE_ITEMS_REQUEST });\r\nexport const fetchLineItemsSuccess = lineItems => ({\r\n  type: FETCH_LINE_ITEMS_SUCCESS,\r\n  payload: lineItems,\r\n});\r\nexport const fetchLineItemsError = error => ({\r\n  type: FETCH_LINE_ITEMS_ERROR,\r\n  error: true,\r\n  payload: error,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\n// Helper to fetch correct image variants for different thunk calls\r\nconst getImageVariants = () => {\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } = config.listing;\r\n  const aspectRatio = aspectHeight / aspectWidth;\r\n  return {\r\n    'fields.image': [\r\n      // Profile images\r\n      'variants.square-small',\r\n      'variants.square-small2x',\r\n\r\n      // Listing images:\r\n      `variants.${variantPrefix}`,\r\n      `variants.${variantPrefix}-2x`,\r\n    ],\r\n    ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\r\n    ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio),\r\n  };\r\n};\r\n\r\nconst listingRelationship = txResponse => {\r\n  return txResponse.data.data.relationships.listing.data;\r\n};\r\n\r\nexport const fetchTransaction = (id, txRole) => (dispatch, getState, sdk) => {\r\n  dispatch(fetchTransactionRequest());\r\n  let txResponse = null;\r\n\r\n  return sdk.transactions\r\n    .show(\r\n      {\r\n        id,\r\n        include: [\r\n          'customer',\r\n          'customer.profileImage',\r\n          'provider',\r\n          'provider.profileImage',\r\n          'listing',\r\n          'listing.currentStock',\r\n          'booking',\r\n          'reviews',\r\n          'reviews.author',\r\n          'reviews.subject',\r\n        ],\r\n        ...getImageVariants(),\r\n      },\r\n      { expand: true }\r\n    )\r\n    .then(response => {\r\n      txResponse = response;\r\n      const listingId = listingRelationship(response).id;\r\n      const entities = updatedEntities({}, response.data);\r\n      const listingRef = { id: listingId, type: 'listing' };\r\n      const transactionRef = { id, type: 'transaction' };\r\n      const denormalised = denormalisedEntities(entities, [listingRef, transactionRef]);\r\n      const listing = denormalised[0];\r\n      const transaction = denormalised[1];\r\n\r\n      // Fetch time slots for transactions that are in enquired state\r\n      const canFetchTimeslots =\r\n        txRole === 'customer' &&\r\n        config.listingManagementType === 'availability' &&\r\n        transaction &&\r\n        txIsEnquired(transaction);\r\n\r\n      if (canFetchTimeslots) {\r\n        dispatch(fetchTimeSlots(listingId));\r\n      }\r\n\r\n      const canFetchListing = listing && listing.attributes && !listing.attributes.deleted;\r\n      if (canFetchListing) {\r\n        return sdk.listings.show({\r\n          id: listingId,\r\n          include: ['author', 'author.profileImage', 'images'],\r\n          ...getImageVariants(),\r\n        });\r\n      } else {\r\n        return response;\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(txResponse));\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(fetchTransactionSuccess(txResponse));\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(fetchTransactionError(storableError(e)));\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const markReceivedFromPurchased = id => (dispatch, getState, sdk) => {\r\n  if (transitionInProgress(getState())) {\r\n    return Promise.reject(new Error('Transition already in progress'));\r\n  }\r\n  dispatch(markReceivedFromPurchasedRequest());\r\n\r\n  return sdk.transactions\r\n    .transition(\r\n      { id, transition: TRANSITION_MARK_RECEIVED_FROM_PURCHASED, params: {} },\r\n      { expand: true }\r\n    )\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(markReceivedFromPurchasedSuccess());\r\n      dispatch(fetchCurrentUserNotifications());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(markReceivedFromPurchasedError(storableError(e)));\r\n      log.error(e, 'mark-received-from-purchase-failed', {\r\n        txId: id,\r\n        transition: TRANSITION_MARK_RECEIVED_FROM_PURCHASED,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const markDelivered = id => (dispatch, getState, sdk) => {\r\n  if (transitionInProgress(getState())) {\r\n    return Promise.reject(new Error('Transition already in progress'));\r\n  }\r\n  dispatch(markDeliveredRequest());\r\n\r\n  return sdk.transactions\r\n    .transition({ id, transition: TRANSITION_MARK_DELIVERED, params: {} }, { expand: true })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(markDeliveredSuccess());\r\n      dispatch(fetchCurrentUserNotifications());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(markDeliveredError(storableError(e)));\r\n      log.error(e, 'mark-delivered-failed', {\r\n        txId: id,\r\n        transition: TRANSITION_MARK_DELIVERED,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const markReceived = id => (dispatch, getState, sdk) => {\r\n  if (transitionInProgress(getState())) {\r\n    return Promise.reject(new Error('Transition already in progress'));\r\n  }\r\n  dispatch(markReceivedRequest());\r\n\r\n  return sdk.transactions\r\n    .transition({ id, transition: TRANSITION_MARK_RECEIVED, params: {} }, { expand: true })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(markReceivedSuccess());\r\n      dispatch(fetchCurrentUserNotifications());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(markReceivedError(storableError(e)));\r\n      log.error(e, 'mark-received-failed', {\r\n        txId: id,\r\n        transition: TRANSITION_MARK_RECEIVED,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const dispute = (id, disputeReason) => (dispatch, getState, sdk) => {\r\n  if (transitionInProgress(getState())) {\r\n    return Promise.reject(new Error('Transition already in progress'));\r\n  }\r\n\r\n  const params = disputeReason ? { protectedData: { disputeReason } } : {};\r\n  dispatch(disputeRequest());\r\n  return sdk.transactions\r\n    .transition({ id, transition: TRANSITION_DISPUTE, params }, { expand: true })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(disputeSuccess());\r\n      dispatch(fetchCurrentUserNotifications());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(disputeError(storableError(e)));\r\n      log.error(e, 'dispute-failed', {\r\n        txId: id,\r\n        transition: TRANSITION_DISPUTE,\r\n      });\r\n      throw e;\r\n    });\r\n};\r\n\r\nconst fetchMessages = (txId, page) => (dispatch, getState, sdk) => {\r\n  const paging = { page, per_page: MESSAGES_PAGE_SIZE };\r\n  dispatch(fetchMessagesRequest());\r\n\r\n  return sdk.messages\r\n    .query({\r\n      transaction_id: txId,\r\n      include: ['sender', 'sender.profileImage'],\r\n      ...getImageVariants(),\r\n      ...paging,\r\n    })\r\n    .then(response => {\r\n      const messages = denormalisedResponseEntities(response);\r\n      const { totalItems, totalPages, page: fetchedPage } = response.data.meta;\r\n      const pagination = { totalItems, totalPages, page: fetchedPage };\r\n      const totalMessages = getState().TransactionPage.totalMessages;\r\n\r\n      // Original fetchMessages call succeeded\r\n      dispatch(fetchMessagesSuccess(messages, pagination));\r\n\r\n      // Check if totalItems has changed between fetched pagination pages\r\n      // if totalItems has changed, fetch first page again to include new incoming messages.\r\n      // TODO if there're more than 100 incoming messages,\r\n      // this should loop through most recent pages instead of fetching just the first one.\r\n      if (totalItems > totalMessages && page > 1) {\r\n        dispatch(fetchMessages(txId, 1))\r\n          .then(() => {\r\n            // Original fetch was enough as a response for user action,\r\n            // this just includes new incoming messages\r\n          })\r\n          .catch(() => {\r\n            // Background update, no need to to do anything atm.\r\n          });\r\n      }\r\n    })\r\n    .catch(e => {\r\n      dispatch(fetchMessagesError(storableError(e)));\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const fetchMoreMessages = txId => (dispatch, getState, sdk) => {\r\n  const state = getState();\r\n  const { oldestMessagePageFetched, totalMessagePages } = state.TransactionPage;\r\n  const hasMoreOldMessages = totalMessagePages > oldestMessagePageFetched;\r\n\r\n  // In case there're no more old pages left we default to fetching the current cursor position\r\n  const nextPage = hasMoreOldMessages ? oldestMessagePageFetched + 1 : oldestMessagePageFetched;\r\n\r\n  return dispatch(fetchMessages(txId, nextPage));\r\n};\r\n\r\nexport const sendMessage = (txId, message) => (dispatch, getState, sdk) => {\r\n  dispatch(sendMessageRequest());\r\n\r\n  return sdk.messages\r\n    .send({ transactionId: txId, content: message })\r\n    .then(response => {\r\n      const messageId = response.data.data.id;\r\n\r\n      // We fetch the first page again to add sent message to the page data\r\n      // and update possible incoming messages too.\r\n      // TODO if there're more than 100 incoming messages,\r\n      // this should loop through most recent pages instead of fetching just the first one.\r\n      return dispatch(fetchMessages(txId, 1))\r\n        .then(() => {\r\n          dispatch(sendMessageSuccess());\r\n          return messageId;\r\n        })\r\n        .catch(() => dispatch(sendMessageSuccess()));\r\n    })\r\n    .catch(e => {\r\n      dispatch(sendMessageError(storableError(e)));\r\n      // Rethrow so the page can track whether the sending failed, and\r\n      // keep the message in the form for a retry.\r\n      throw e;\r\n    });\r\n};\r\n\r\n// If other party has already sent a review, we need to make transition to\r\n// TRANSITION_REVIEW_2_BY_<CUSTOMER/PROVIDER>\r\nconst sendReviewAsSecond = (id, params, role, dispatch, sdk) => {\r\n  const transition = getReview2Transition(role === CUSTOMER);\r\n\r\n  const include = REVIEW_TX_INCLUDES;\r\n\r\n  return sdk.transactions\r\n    .transition({ id, transition, params }, { expand: true, include, ...getImageVariants() })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(sendReviewSuccess());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(sendReviewError(storableError(e)));\r\n\r\n      // Rethrow so the page can track whether the sending failed, and\r\n      // keep the message in the form for a retry.\r\n      throw e;\r\n    });\r\n};\r\n\r\n// If other party has not yet sent a review, we need to make transition to\r\n// TRANSITION_REVIEW_1_BY_<CUSTOMER/PROVIDER>\r\n// However, the other party might have made the review after previous data synch point.\r\n// So, error is likely to happen and then we must try another state transition\r\n// by calling sendReviewAsSecond().\r\nconst sendReviewAsFirst = (id, params, role, dispatch, sdk) => {\r\n  const transition = getReview1Transition(role === CUSTOMER);\r\n  const include = REVIEW_TX_INCLUDES;\r\n\r\n  return sdk.transactions\r\n    .transition({ id, transition, params }, { expand: true, include, ...getImageVariants() })\r\n    .then(response => {\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(sendReviewSuccess());\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      // If transaction transition is invalid, lets try another endpoint.\r\n      if (isTransactionsTransitionInvalidTransition(e)) {\r\n        return sendReviewAsSecond(id, params, role, dispatch, sdk);\r\n      } else {\r\n        dispatch(sendReviewError(storableError(e)));\r\n\r\n        // Rethrow so the page can track whether the sending failed, and\r\n        // keep the message in the form for a retry.\r\n        throw e;\r\n      }\r\n    });\r\n};\r\n\r\nexport const sendReview = (role, tx, reviewRating, reviewContent) => (dispatch, getState, sdk) => {\r\n  const params = { reviewRating, reviewContent };\r\n\r\n  const txStateOtherPartyFirst = txIsInFirstReviewBy(tx, role !== CUSTOMER);\r\n\r\n  dispatch(sendReviewRequest());\r\n\r\n  return txStateOtherPartyFirst\r\n    ? sendReviewAsSecond(tx.id, params, role, dispatch, sdk)\r\n    : sendReviewAsFirst(tx.id, params, role, dispatch, sdk);\r\n};\r\n\r\nconst isNonEmpty = value => {\r\n  return typeof value === 'object' || Array.isArray(value) ? !isEmpty(value) : !!value;\r\n};\r\n\r\nconst timeSlotsRequest = params => (dispatch, getState, sdk) => {\r\n  return sdk.timeslots.query(params).then(response => {\r\n    return denormalisedResponseEntities(response);\r\n  });\r\n};\r\n\r\nconst fetchTimeSlots = listingId => (dispatch, getState, sdk) => {\r\n  dispatch(fetchTimeSlotsRequest);\r\n\r\n  // Time slots can be fetched for 90 days at a time,\r\n  // for at most 180 days from now. If max number of bookable\r\n  // day exceeds 90, a second request is made.\r\n\r\n  const maxTimeSlots = 90;\r\n  // booking range: today + bookable days -1\r\n  const bookingRange = config.dayCountAvailableForBooking - 1;\r\n  const timeSlotsRange = Math.min(bookingRange, maxTimeSlots);\r\n\r\n  const now = new Date();\r\n  const start = getStartOf(now, 'day', 'Etc/UTC');\r\n  const end = addTime(start, timeSlotsRange, 'days', 'Etc/UTC');\r\n  const params = { listingId, start, end };\r\n\r\n  return dispatch(timeSlotsRequest(params))\r\n    .then(timeSlots => {\r\n      const secondRequest = bookingRange > maxTimeSlots;\r\n\r\n      if (secondRequest) {\r\n        const secondRange = Math.min(maxTimeSlots, bookingRange - maxTimeSlots);\r\n        const secondParams = {\r\n          listingId,\r\n          start: end,\r\n          end: addTime(end, secondRange, 'days', 'Etc/UTC'),\r\n        };\r\n\r\n        return dispatch(timeSlotsRequest(secondParams)).then(secondBatch => {\r\n          const combined = timeSlots.concat(secondBatch);\r\n          dispatch(fetchTimeSlotsSuccess(combined));\r\n        });\r\n      } else {\r\n        dispatch(fetchTimeSlotsSuccess(timeSlots));\r\n      }\r\n    })\r\n    .catch(e => {\r\n      dispatch(fetchTimeSlotsError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const fetchNextTransitions = id => (dispatch, getState, sdk) => {\r\n  dispatch(fetchTransitionsRequest());\r\n\r\n  return sdk.processTransitions\r\n    .query({ transactionId: id })\r\n    .then(res => {\r\n      dispatch(fetchTransitionsSuccess(res.data.data));\r\n    })\r\n    .catch(e => {\r\n      dispatch(fetchTransitionsError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const fetchTransactionLineItems = ({ orderData, listingId, isOwnListing }) => dispatch => {\r\n  dispatch(fetchLineItemsRequest());\r\n  transactionLineItems({ orderData, listingId, isOwnListing })\r\n    .then(response => {\r\n      const lineItems = response.data;\r\n      dispatch(fetchLineItemsSuccess(lineItems));\r\n    })\r\n    .catch(e => {\r\n      dispatch(fetchLineItemsError(storableError(e)));\r\n      log.error(e, 'fetching-line-items-failed', {\r\n        listingId: listingId.uuid,\r\n        orderData,\r\n      });\r\n    });\r\n};\r\n\r\n// loadData is a collection of async calls that need to be made\r\n// before page has all the info it needs to render itself\r\nexport const loadData = params => (dispatch, getState) => {\r\n  const txId = new UUID(params.id);\r\n  const state = getState().TransactionPage;\r\n  const txRef = state.transactionRef;\r\n  const txRole = params.transactionRole;\r\n\r\n  // In case a transaction reference is found from a previous\r\n  // data load -> clear the state. Otherwise keep the non-null\r\n  // and non-empty values which may have been set from a previous page.\r\n  const initialValues = txRef ? {} : pickBy(state, isNonEmpty);\r\n  dispatch(setInitialValues(initialValues));\r\n\r\n  // Sale / order (i.e. transaction entity in API)\r\n  return Promise.all([\r\n    dispatch(fetchTransaction(txId, txRole)),\r\n    dispatch(fetchMessages(txId, 1)),\r\n    dispatch(fetchNextTransitions(txId)),\r\n  ]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}