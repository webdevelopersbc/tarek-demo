{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PaymentMethodsPage\\\\PaymentMethodsForm\\\\PaymentMethodsForm.js\";\n\n/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\nimport React, { Component } from 'react';\nimport { func, object, string } from 'prop-types';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { Form, PrimaryButton, FieldTextInput, StripePaymentAddress } from '../../../components';\nimport css from './PaymentMethodsForm.module.css';\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\n\nconst stripeErrorTranslation = (intl, stripeError) => {\n  const {\n    message,\n    code,\n    type\n  } = stripeError;\n\n  if (!code || !type) {\n    // Not a proper Stripe error object\n    return intl.formatMessage({\n      id: 'PaymentMethodsForm.genericError'\n    });\n  }\n\n  const translationId = type === 'validation_error' ? `PaymentMethodsForm.stripe.validation_error.${code}` : `PaymentMethodsForm.stripe.${type}`;\n  return intl.formatMessage({\n    id: translationId,\n    defaultMessage: message\n  });\n};\n\nconst stripeElementsOptions = {\n  fonts: [{\n    family: 'poppins',\n    fontSmoothing: 'antialiased',\n    src: 'local(\"poppins\"), local(\"Poppins\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/poppins/Poppins-Medium.ttf\") format(\"truetype\")'\n  }]\n}; // card (being a Stripe Elements component), can have own styling passed to it.\n// However, its internal width-calculation seems to break if font-size is too big\n// compared to component's own width.\n\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\nconst cardStyles = {\n  base: {\n    fontFamily: '\"poppins\", Helvetica, Arial, sans-serif',\n    fontSize: isMobile ? '14px' : '18px',\n    fontSmoothing: 'antialiased',\n    lineHeight: '24px',\n    letterSpacing: '-0.1px',\n    color: '#4A4A4A',\n    '::placeholder': {\n      color: '#B2B2B2'\n    }\n  }\n};\nconst initialState = {\n  error: null,\n  cardValueValid: false\n};\n/**\r\n * Payment methods form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle card setup. `stripe.handleCardSetup`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\n\nclass PaymentMethodsForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.paymentForm = this.paymentForm.bind(this);\n    this.finalFormAPI = null;\n    this.stripe = null;\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for PaymentMethodsForm');\n    }\n\n    if (config.stripe.publishableKey) {\n      this.stripe = window.Stripe(config.stripe.publishableKey);\n      const elements = this.stripe.elements(stripeElementsOptions);\n      this.card = elements.create('card', {\n        style: cardStyles\n      });\n      this.card.mount(this.cardContainer);\n      this.card.addEventListener('change', this.handleCardValueChange); // EventListener is the only way to simulate breakpoints with Stripe.\n\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 768) {\n          this.card.update({\n            style: {\n              base: {\n                fontSize: '14px',\n                lineHeight: '24px'\n              }\n            }\n          });\n        } else {\n          this.card.update({\n            style: {\n              base: {\n                fontSize: '18px',\n                lineHeight: '24px'\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.card) {\n      this.card.removeEventListener('change', this.handleCardValueChange);\n      this.card.unmount();\n    }\n  }\n\n  handleCardValueChange(event) {\n    const {\n      intl\n    } = this.props;\n    const {\n      error,\n      complete\n    } = event;\n    const postalCode = event.value.postalCode;\n\n    if (this.finalFormAPI) {\n      this.finalFormAPI.change('postal', postalCode);\n    }\n\n    this.setState(prevState => {\n      return {\n        error: error ? stripeErrorTranslation(intl, error) : null,\n        cardValueValid: complete\n      };\n    });\n  }\n\n  handleSubmit(values) {\n    const {\n      onSubmit,\n      inProgress,\n      formId\n    } = this.props;\n    const cardInputNeedsAttention = !this.state.cardValueValid;\n\n    if (inProgress || cardInputNeedsAttention) {\n      // Already submitting or card value incomplete/invalid\n      return;\n    }\n\n    const params = {\n      stripe: this.stripe,\n      card: this.card,\n      formId,\n      formValues: values\n    };\n    onSubmit(params);\n  }\n\n  paymentForm(formRenderProps) {\n    const {\n      className,\n      rootClassName,\n      inProgress: submitInProgress,\n      formId,\n      intl,\n      invalid,\n      handleSubmit,\n      addPaymentMethodError,\n      deletePaymentMethodError,\n      createStripeCustomerError,\n      handleCardSetupError,\n      form\n    } = formRenderProps;\n    this.finalFormAPI = form;\n    const cardInputNeedsAttention = !this.state.cardValueValid;\n    const submitDisabled = invalid || cardInputNeedsAttention || submitInProgress;\n    const hasCardError = this.state.error && !submitInProgress;\n    const classes = classNames(rootClassName || css.root, className);\n    const cardClasses = classNames(css.card, {\n      [css.cardSuccess]: this.state.cardValueValid,\n      [css.cardError]: hasCardError\n    });\n    const hasErrors = addPaymentMethodError || deletePaymentMethodError || createStripeCustomerError || handleCardSetupError;\n    const errorMessage = intl.formatMessage({\n      id: 'PaymentMethodsForm.genericError'\n    });\n    const billingDetailsNameLabel = intl.formatMessage({\n      id: 'PaymentMethodsForm.billingDetailsNameLabel'\n    });\n    const billingDetailsNamePlaceholder = intl.formatMessage({\n      id: 'PaymentMethodsForm.billingDetailsNamePlaceholder'\n    });\n    const infoText = intl.formatMessage({\n      id: 'PaymentMethodsForm.infoText'\n    }); // Stripe recommends asking billing address.\n    // In PaymentMethodsForm, we send name and email as billing details, but address only if it exists.\n\n    const billingAddress = /*#__PURE__*/React.createElement(StripePaymentAddress, {\n      intl: intl,\n      form: form,\n      fieldId: formId,\n      card: this.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }\n    });\n    const hasStripeKey = config.stripe.publishableKey;\n    return hasStripeKey ? /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: css.paymentLabel,\n      htmlFor: `${formId}-card`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PaymentMethodsForm.paymentCardDetails\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cardClasses,\n      id: `${formId}-card`,\n      ref: el => {\n        this.cardContainer = el;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.infoText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, infoText), hasCardError ? /*#__PURE__*/React.createElement(\"span\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 25\n      }\n    }, this.state.error) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.paymentAddressField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: css.billingHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PaymentMethodsForm.billingDetails\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.field,\n      type: \"text\",\n      id: \"name\",\n      name: \"name\",\n      autoComplete: \"cc-name\",\n      label: billingDetailsNameLabel,\n      placeholder: billingDetailsNamePlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }), billingAddress), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.submitContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }\n    }, hasErrors ? /*#__PURE__*/React.createElement(\"span\", {\n      className: css.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, hasErrors.message ? hasErrors.message : errorMessage) : null, /*#__PURE__*/React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PaymentMethodsForm.submitPaymentInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }\n    })))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: css.missingStripeKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PaymentMethodsForm.missingStripeKey\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      onSubmit,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({\n      onSubmit: this.handleSubmit\n    }, rest, {\n      render: this.paymentForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nPaymentMethodsForm.defaultProps = {\n  className: null,\n  rootClassName: null,\n  inProgress: false,\n  onSubmit: null,\n  addPaymentMethodError: null,\n  deletePaymentMethodError: null,\n  createStripeCustomerError: null,\n  handleCardSetupError: null,\n  form: null\n};\nPaymentMethodsForm.propTypes = {\n  formId: string,\n  intl: intlShape.isRequired,\n  onSubmit: func,\n  addPaymentMethodError: object,\n  deletePaymentMethodError: object,\n  createStripeCustomerError: object,\n  handleCardSetupError: object,\n  form: object\n};\nexport default _c = injectIntl(PaymentMethodsForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PaymentMethodsPage/PaymentMethodsForm/PaymentMethodsForm.js"],"names":["React","Component","func","object","string","Form","FinalForm","classNames","config","FormattedMessage","injectIntl","intlShape","PrimaryButton","FieldTextInput","StripePaymentAddress","css","stripeErrorTranslation","intl","stripeError","message","code","type","formatMessage","id","translationId","defaultMessage","stripeElementsOptions","fonts","family","fontSmoothing","src","isMobile","window","innerWidth","cardStyles","base","fontFamily","fontSize","lineHeight","letterSpacing","color","initialState","error","cardValueValid","PaymentMethodsForm","constructor","props","state","handleCardValueChange","bind","handleSubmit","paymentForm","finalFormAPI","stripe","componentDidMount","Stripe","Error","publishableKey","elements","card","create","style","mount","cardContainer","addEventListener","update","componentWillUnmount","removeEventListener","unmount","event","complete","postalCode","value","change","setState","prevState","values","onSubmit","inProgress","formId","cardInputNeedsAttention","params","formValues","formRenderProps","className","rootClassName","submitInProgress","invalid","addPaymentMethodError","deletePaymentMethodError","createStripeCustomerError","handleCardSetupError","form","submitDisabled","hasCardError","classes","root","cardClasses","cardSuccess","cardError","hasErrors","errorMessage","billingDetailsNameLabel","billingDetailsNamePlaceholder","infoText","billingAddress","hasStripeKey","paymentLabel","el","paymentAddressField","billingHeading","field","submitContainer","submitButton","missingStripeKey","render","rest","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\r\nimport React, { Component } from 'react';\r\nimport { func, object, string } from 'prop-types';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput, StripePaymentAddress } from '../../../components';\r\n\r\nimport css from './PaymentMethodsForm.module.css';\r\n\r\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\r\nconst stripeErrorTranslation = (intl, stripeError) => {\r\n  const { message, code, type } = stripeError;\r\n\r\n  if (!code || !type) {\r\n    // Not a proper Stripe error object\r\n    return intl.formatMessage({ id: 'PaymentMethodsForm.genericError' });\r\n  }\r\n\r\n  const translationId =\r\n    type === 'validation_error'\r\n      ? `PaymentMethodsForm.stripe.validation_error.${code}`\r\n      : `PaymentMethodsForm.stripe.${type}`;\r\n\r\n  return intl.formatMessage({\r\n    id: translationId,\r\n    defaultMessage: message,\r\n  });\r\n};\r\n\r\nconst stripeElementsOptions = {\r\n  fonts: [\r\n    {\r\n      family: 'poppins',\r\n      fontSmoothing: 'antialiased',\r\n      src:\r\n        'local(\"poppins\"), local(\"Poppins\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/poppins/Poppins-Medium.ttf\") format(\"truetype\")',\r\n    },\r\n  ],\r\n};\r\n\r\n// card (being a Stripe Elements component), can have own styling passed to it.\r\n// However, its internal width-calculation seems to break if font-size is too big\r\n// compared to component's own width.\r\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\r\nconst cardStyles = {\r\n  base: {\r\n    fontFamily: '\"poppins\", Helvetica, Arial, sans-serif',\r\n    fontSize: isMobile ? '14px' : '18px',\r\n    fontSmoothing: 'antialiased',\r\n    lineHeight: '24px',\r\n    letterSpacing: '-0.1px',\r\n    color: '#4A4A4A',\r\n    '::placeholder': {\r\n      color: '#B2B2B2',\r\n    },\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  error: null,\r\n  cardValueValid: false,\r\n};\r\n\r\n/**\r\n * Payment methods form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle card setup. `stripe.handleCardSetup`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\r\nclass PaymentMethodsForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.paymentForm = this.paymentForm.bind(this);\r\n    this.finalFormAPI = null;\r\n    this.stripe = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.Stripe) {\r\n      throw new Error('Stripe must be loaded for PaymentMethodsForm');\r\n    }\r\n\r\n    if (config.stripe.publishableKey) {\r\n      this.stripe = window.Stripe(config.stripe.publishableKey);\r\n\r\n      const elements = this.stripe.elements(stripeElementsOptions);\r\n      this.card = elements.create('card', { style: cardStyles });\r\n      this.card.mount(this.cardContainer);\r\n      this.card.addEventListener('change', this.handleCardValueChange);\r\n      // EventListener is the only way to simulate breakpoints with Stripe.\r\n      window.addEventListener('resize', () => {\r\n        if (window.innerWidth < 768) {\r\n          this.card.update({ style: { base: { fontSize: '14px', lineHeight: '24px' } } });\r\n        } else {\r\n          this.card.update({ style: { base: { fontSize: '18px', lineHeight: '24px' } } });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.card) {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n    }\r\n  }\r\n  handleCardValueChange(event) {\r\n    const { intl } = this.props;\r\n    const { error, complete } = event;\r\n\r\n    const postalCode = event.value.postalCode;\r\n    if (this.finalFormAPI) {\r\n      this.finalFormAPI.change('postal', postalCode);\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        error: error ? stripeErrorTranslation(intl, error) : null,\r\n        cardValueValid: complete,\r\n      };\r\n    });\r\n  }\r\n  handleSubmit(values) {\r\n    const { onSubmit, inProgress, formId } = this.props;\r\n    const cardInputNeedsAttention = !this.state.cardValueValid;\r\n\r\n    if (inProgress || cardInputNeedsAttention) {\r\n      // Already submitting or card value incomplete/invalid\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      stripe: this.stripe,\r\n      card: this.card,\r\n      formId,\r\n      formValues: values,\r\n    };\r\n\r\n    onSubmit(params);\r\n  }\r\n\r\n  paymentForm(formRenderProps) {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      inProgress: submitInProgress,\r\n      formId,\r\n      intl,\r\n      invalid,\r\n      handleSubmit,\r\n      addPaymentMethodError,\r\n      deletePaymentMethodError,\r\n      createStripeCustomerError,\r\n      handleCardSetupError,\r\n      form,\r\n    } = formRenderProps;\r\n\r\n    this.finalFormAPI = form;\r\n    const cardInputNeedsAttention = !this.state.cardValueValid;\r\n    const submitDisabled = invalid || cardInputNeedsAttention || submitInProgress;\r\n    const hasCardError = this.state.error && !submitInProgress;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const cardClasses = classNames(css.card, {\r\n      [css.cardSuccess]: this.state.cardValueValid,\r\n      [css.cardError]: hasCardError,\r\n    });\r\n\r\n    const hasErrors =\r\n      addPaymentMethodError ||\r\n      deletePaymentMethodError ||\r\n      createStripeCustomerError ||\r\n      handleCardSetupError;\r\n\r\n    const errorMessage = intl.formatMessage({ id: 'PaymentMethodsForm.genericError' });\r\n\r\n    const billingDetailsNameLabel = intl.formatMessage({\r\n      id: 'PaymentMethodsForm.billingDetailsNameLabel',\r\n    });\r\n\r\n    const billingDetailsNamePlaceholder = intl.formatMessage({\r\n      id: 'PaymentMethodsForm.billingDetailsNamePlaceholder',\r\n    });\r\n\r\n    const infoText = intl.formatMessage({\r\n      id: 'PaymentMethodsForm.infoText',\r\n    });\r\n\r\n    // Stripe recommends asking billing address.\r\n    // In PaymentMethodsForm, we send name and email as billing details, but address only if it exists.\r\n    const billingAddress = (\r\n      <StripePaymentAddress intl={intl} form={form} fieldId={formId} card={this.card} />\r\n    );\r\n\r\n    const hasStripeKey = config.stripe.publishableKey;\r\n\r\n    return hasStripeKey ? (\r\n      <Form className={classes} onSubmit={handleSubmit}>\r\n        <label className={css.paymentLabel} htmlFor={`${formId}-card`}>\r\n          <FormattedMessage id=\"PaymentMethodsForm.paymentCardDetails\" />\r\n        </label>\r\n\r\n        <div\r\n          className={cardClasses}\r\n          id={`${formId}-card`}\r\n          ref={el => {\r\n            this.cardContainer = el;\r\n          }}\r\n        />\r\n        <div className={css.infoText}>{infoText}</div>\r\n        {hasCardError ? <span className={css.error}>{this.state.error}</span> : null}\r\n        <div className={css.paymentAddressField}>\r\n          <h3 className={css.billingHeading}>\r\n            <FormattedMessage id=\"PaymentMethodsForm.billingDetails\" />\r\n          </h3>\r\n\r\n          <FieldTextInput\r\n            className={css.field}\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            autoComplete=\"cc-name\"\r\n            label={billingDetailsNameLabel}\r\n            placeholder={billingDetailsNamePlaceholder}\r\n          />\r\n\r\n          {billingAddress}\r\n        </div>\r\n\r\n        <div className={css.submitContainer}>\r\n          {hasErrors ? (\r\n            <span className={css.errorMessage}>\r\n              {hasErrors.message ? hasErrors.message : errorMessage}\r\n            </span>\r\n          ) : null}\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n          >\r\n            <FormattedMessage id=\"PaymentMethodsForm.submitPaymentInfo\" />\r\n          </PrimaryButton>\r\n        </div>\r\n      </Form>\r\n    ) : (\r\n      <div className={css.missingStripeKey}>\r\n        <FormattedMessage id=\"PaymentMethodsForm.missingStripeKey\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { onSubmit, ...rest } = this.props;\r\n    return <FinalForm onSubmit={this.handleSubmit} {...rest} render={this.paymentForm} />;\r\n  }\r\n}\r\n\r\nPaymentMethodsForm.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  inProgress: false,\r\n  onSubmit: null,\r\n  addPaymentMethodError: null,\r\n  deletePaymentMethodError: null,\r\n  createStripeCustomerError: null,\r\n  handleCardSetupError: null,\r\n  form: null,\r\n};\r\n\r\nPaymentMethodsForm.propTypes = {\r\n  formId: string,\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func,\r\n  addPaymentMethodError: object,\r\n  deletePaymentMethodError: object,\r\n  createStripeCustomerError: object,\r\n  handleCardSetupError: object,\r\n  form: object,\r\n};\r\n\r\nexport default injectIntl(PaymentMethodsForm);\r\n"]},"metadata":{},"sourceType":"module"}