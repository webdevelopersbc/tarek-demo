{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\OrderPanel\\\\EstimatedCustomerBreakdownMaybe.js\";\n\n/**\r\n * Booking breakdown estimation\r\n *\r\n * Transactions have payment information that can be shown with the\r\n * OrderBreakdown component. However, when selecting booking\r\n * details, there is no transaction object present and we have to\r\n * estimate the breakdown of the transaction without data from the\r\n * API.\r\n *\r\n * If the payment process of a customized marketplace is something\r\n * else than simply daily or nightly bookings, the estimation will\r\n * most likely need some changes.\r\n *\r\n * To customize the estimation, first change the BookingDatesForm to\r\n * collect all booking information from the user (in addition to the\r\n * default date pickers), and provide that data to the\r\n * EstimatedBreakdownMaybe components. You can then make customization\r\n * within this file to create a fake transaction object that\r\n * calculates the breakdown information correctly according to the\r\n * process.\r\n *\r\n * In the future, the optimal scenario would be to use the same\r\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\r\n * is using to get the breakdown information from the API, but\r\n * currently the API doesn't support that for logged out users, and we\r\n * are forced to estimate the information here.\r\n */\nimport React from 'react';\nimport Decimal from 'decimal.js';\nimport config from '../../config';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { timeOfDayFromLocalToTimeZone, getStartOf } from '../../util/dates';\nimport { TRANSITION_REQUEST_PAYMENT, TX_TRANSITION_ACTOR_CUSTOMER } from '../../util/transaction';\nimport { DATE_TYPE_DATE, LINE_ITEM_DAY, LINE_ITEM_NIGHT } from '../../util/types';\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\nimport { OrderBreakdown } from '../../components';\nimport css from './OrderPanel.module.css';\nconst {\n  Money,\n  UUID\n} = sdkTypes;\n\nconst estimatedTotalPrice = lineItems => {\n  const numericTotalPrice = lineItems.reduce((sum, lineItem) => {\n    const numericPrice = convertMoneyToNumber(lineItem.lineTotal);\n    return new Decimal(numericPrice).add(sum);\n  }, new Decimal(0)); // All the lineItems should have same currency so we can use the first one to check that\n  // In case there are no lineItems we use currency from config.js as default\n\n  const currency = lineItems[0] && lineItems[0].unitPrice ? lineItems[0].unitPrice.currency : config.currency;\n  return new Money(convertUnitToSubUnit(numericTotalPrice.toNumber(), unitDivisor(currency)), currency);\n};\n\nconst estimatedBooking = (bookingStart, bookingEnd) => {\n  // Server normalizes night/day bookings to start from 00:00 UTC. In this case, it would remove 23 hours.\n  // We convert local (start of day) to the same time-of-day in UTC time zone to prevent untracked conversions.\n  // local noon -> startOf('day') => 00:00 local\n  // => convert to the same time of day to server's tz aka remove timezoneoffset => 00:00 API (UTC)\n  const apiTimeZone = 'Etc/UTC';\n  const serverDayStart = timeOfDayFromLocalToTimeZone(getStartOf(bookingStart, 'day'), apiTimeZone);\n  const serverDayEnd = timeOfDayFromLocalToTimeZone(getStartOf(bookingEnd, 'day'), apiTimeZone);\n  return {\n    id: new UUID('estimated-booking'),\n    type: 'booking',\n    attributes: {\n      start: serverDayStart,\n      end: serverDayEnd\n    }\n  };\n}; // When we cannot speculatively initiate a transaction (i.e. logged\n// out), we must estimate the transaction for booking breakdown. This function creates\n// an estimated transaction object for that use case.\n//\n// We need to use FTW backend to calculate the correct line items through thransactionLineItems\n// endpoint so that they can be passed to this estimated transaction.\n\n\nconst estimatedCustomerTransaction = (lineItems, bookingStart, bookingEnd) => {\n  const now = new Date();\n  const customerLineItems = lineItems.filter(item => item.includeFor.includes('customer'));\n  const providerLineItems = lineItems.filter(item => item.includeFor.includes('provider'));\n  const payinTotal = estimatedTotalPrice(customerLineItems);\n  const payoutTotal = estimatedTotalPrice(providerLineItems);\n  const bookingMaybe = bookingStart && bookingEnd ? {\n    booking: estimatedBooking(bookingStart, bookingEnd)\n  } : {};\n  return {\n    id: new UUID('estimated-transaction'),\n    type: 'transaction',\n    attributes: {\n      createdAt: now,\n      lastTransitionedAt: now,\n      lastTransition: TRANSITION_REQUEST_PAYMENT,\n      payinTotal,\n      payoutTotal,\n      lineItems: customerLineItems,\n      transitions: [{\n        createdAt: now,\n        by: TX_TRANSITION_ACTOR_CUSTOMER,\n        transition: TRANSITION_REQUEST_PAYMENT\n      }]\n    },\n    ...bookingMaybe\n  };\n};\n\nconst EstimatedCustomerBreakdownMaybe = props => {\n  const {\n    unitType,\n    breakdownData = {},\n    lineItems\n  } = props;\n  const {\n    startDate,\n    endDate\n  } = breakdownData;\n  const shouldHaveBooking = unitType === LINE_ITEM_DAY || unitType === LINE_ITEM_NIGHT;\n  const hasLineItems = lineItems && lineItems.length > 0;\n  const hasRequiredBookingData = !shouldHaveBooking || startDate && endDate;\n  const tx = hasLineItems && hasRequiredBookingData ? estimatedCustomerTransaction(lineItems, startDate, endDate) : null;\n  return tx ? /*#__PURE__*/React.createElement(OrderBreakdown, {\n    className: css.receipt,\n    userRole: \"customer\",\n    unitType: unitType,\n    transaction: tx,\n    booking: tx.booking,\n    dateType: DATE_TYPE_DATE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }) : null;\n};\n\n_c = EstimatedCustomerBreakdownMaybe;\nexport default EstimatedCustomerBreakdownMaybe;\n\nvar _c;\n\n$RefreshReg$(_c, \"EstimatedCustomerBreakdownMaybe\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/OrderPanel/EstimatedCustomerBreakdownMaybe.js"],"names":["React","Decimal","config","types","sdkTypes","timeOfDayFromLocalToTimeZone","getStartOf","TRANSITION_REQUEST_PAYMENT","TX_TRANSITION_ACTOR_CUSTOMER","DATE_TYPE_DATE","LINE_ITEM_DAY","LINE_ITEM_NIGHT","unitDivisor","convertMoneyToNumber","convertUnitToSubUnit","OrderBreakdown","css","Money","UUID","estimatedTotalPrice","lineItems","numericTotalPrice","reduce","sum","lineItem","numericPrice","lineTotal","add","currency","unitPrice","toNumber","estimatedBooking","bookingStart","bookingEnd","apiTimeZone","serverDayStart","serverDayEnd","id","type","attributes","start","end","estimatedCustomerTransaction","now","Date","customerLineItems","filter","item","includeFor","includes","providerLineItems","payinTotal","payoutTotal","bookingMaybe","booking","createdAt","lastTransitionedAt","lastTransition","transitions","by","transition","EstimatedCustomerBreakdownMaybe","props","unitType","breakdownData","startDate","endDate","shouldHaveBooking","hasLineItems","length","hasRequiredBookingData","tx","receipt"],"mappings":"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","sourcesContent":["/**\r\n * Booking breakdown estimation\r\n *\r\n * Transactions have payment information that can be shown with the\r\n * OrderBreakdown component. However, when selecting booking\r\n * details, there is no transaction object present and we have to\r\n * estimate the breakdown of the transaction without data from the\r\n * API.\r\n *\r\n * If the payment process of a customized marketplace is something\r\n * else than simply daily or nightly bookings, the estimation will\r\n * most likely need some changes.\r\n *\r\n * To customize the estimation, first change the BookingDatesForm to\r\n * collect all booking information from the user (in addition to the\r\n * default date pickers), and provide that data to the\r\n * EstimatedBreakdownMaybe components. You can then make customization\r\n * within this file to create a fake transaction object that\r\n * calculates the breakdown information correctly according to the\r\n * process.\r\n *\r\n * In the future, the optimal scenario would be to use the same\r\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\r\n * is using to get the breakdown information from the API, but\r\n * currently the API doesn't support that for logged out users, and we\r\n * are forced to estimate the information here.\r\n */\r\nimport React from 'react';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport config from '../../config';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { timeOfDayFromLocalToTimeZone, getStartOf } from '../../util/dates';\r\nimport { TRANSITION_REQUEST_PAYMENT, TX_TRANSITION_ACTOR_CUSTOMER } from '../../util/transaction';\r\nimport { DATE_TYPE_DATE, LINE_ITEM_DAY, LINE_ITEM_NIGHT } from '../../util/types';\r\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\r\n\r\nimport { OrderBreakdown } from '../../components';\r\n\r\nimport css from './OrderPanel.module.css';\r\n\r\nconst { Money, UUID } = sdkTypes;\r\n\r\nconst estimatedTotalPrice = lineItems => {\r\n  const numericTotalPrice = lineItems.reduce((sum, lineItem) => {\r\n    const numericPrice = convertMoneyToNumber(lineItem.lineTotal);\r\n    return new Decimal(numericPrice).add(sum);\r\n  }, new Decimal(0));\r\n\r\n  // All the lineItems should have same currency so we can use the first one to check that\r\n  // In case there are no lineItems we use currency from config.js as default\r\n  const currency =\r\n    lineItems[0] && lineItems[0].unitPrice ? lineItems[0].unitPrice.currency : config.currency;\r\n\r\n  return new Money(\r\n    convertUnitToSubUnit(numericTotalPrice.toNumber(), unitDivisor(currency)),\r\n    currency\r\n  );\r\n};\r\n\r\nconst estimatedBooking = (bookingStart, bookingEnd) => {\r\n  // Server normalizes night/day bookings to start from 00:00 UTC. In this case, it would remove 23 hours.\r\n  // We convert local (start of day) to the same time-of-day in UTC time zone to prevent untracked conversions.\r\n  // local noon -> startOf('day') => 00:00 local\r\n  // => convert to the same time of day to server's tz aka remove timezoneoffset => 00:00 API (UTC)\r\n  const apiTimeZone = 'Etc/UTC';\r\n  const serverDayStart = timeOfDayFromLocalToTimeZone(getStartOf(bookingStart, 'day'), apiTimeZone);\r\n  const serverDayEnd = timeOfDayFromLocalToTimeZone(getStartOf(bookingEnd, 'day'), apiTimeZone);\r\n\r\n  return {\r\n    id: new UUID('estimated-booking'),\r\n    type: 'booking',\r\n    attributes: {\r\n      start: serverDayStart,\r\n      end: serverDayEnd,\r\n    },\r\n  };\r\n};\r\n\r\n// When we cannot speculatively initiate a transaction (i.e. logged\r\n// out), we must estimate the transaction for booking breakdown. This function creates\r\n// an estimated transaction object for that use case.\r\n//\r\n// We need to use FTW backend to calculate the correct line items through thransactionLineItems\r\n// endpoint so that they can be passed to this estimated transaction.\r\nconst estimatedCustomerTransaction = (lineItems, bookingStart, bookingEnd) => {\r\n  const now = new Date();\r\n  const customerLineItems = lineItems.filter(item => item.includeFor.includes('customer'));\r\n  const providerLineItems = lineItems.filter(item => item.includeFor.includes('provider'));\r\n  const payinTotal = estimatedTotalPrice(customerLineItems);\r\n  const payoutTotal = estimatedTotalPrice(providerLineItems);\r\n\r\n  const bookingMaybe =\r\n    bookingStart && bookingEnd ? { booking: estimatedBooking(bookingStart, bookingEnd) } : {};\r\n\r\n  return {\r\n    id: new UUID('estimated-transaction'),\r\n    type: 'transaction',\r\n    attributes: {\r\n      createdAt: now,\r\n      lastTransitionedAt: now,\r\n      lastTransition: TRANSITION_REQUEST_PAYMENT,\r\n      payinTotal,\r\n      payoutTotal,\r\n      lineItems: customerLineItems,\r\n      transitions: [\r\n        {\r\n          createdAt: now,\r\n          by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n          transition: TRANSITION_REQUEST_PAYMENT,\r\n        },\r\n      ],\r\n    },\r\n    ...bookingMaybe,\r\n  };\r\n};\r\n\r\nconst EstimatedCustomerBreakdownMaybe = props => {\r\n  const { unitType, breakdownData = {}, lineItems } = props;\r\n  const { startDate, endDate } = breakdownData;\r\n\r\n  const shouldHaveBooking = unitType === LINE_ITEM_DAY || unitType === LINE_ITEM_NIGHT;\r\n  const hasLineItems = lineItems && lineItems.length > 0;\r\n  const hasRequiredBookingData = !shouldHaveBooking || (startDate && endDate);\r\n  const tx =\r\n    hasLineItems && hasRequiredBookingData\r\n      ? estimatedCustomerTransaction(lineItems, startDate, endDate)\r\n      : null;\r\n\r\n  return tx ? (\r\n    <OrderBreakdown\r\n      className={css.receipt}\r\n      userRole=\"customer\"\r\n      unitType={unitType}\r\n      transaction={tx}\r\n      booking={tx.booking}\r\n      dateType={DATE_TYPE_DATE}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nexport default EstimatedCustomerBreakdownMaybe;\r\n"]},"metadata":{},"sourceType":"module"}