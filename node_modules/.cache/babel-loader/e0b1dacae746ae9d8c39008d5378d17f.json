{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\AuthenticationPage\\\\AuthenticationPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport config from '../../config';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { pathByRouteName } from '../../util/routes';\nimport { apiBaseUrl } from '../../util/api';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isSignupEmailTakenError, isTooManyEmailVerificationRequestsError } from '../../util/errors';\nimport { login, authenticationInProgress, signup, signupWithIdp } from '../../ducks/Auth.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { sendVerificationEmail } from '../../ducks/user.duck';\nimport { manageDisableScrolling } from '../../ducks/UI.duck';\nimport { Page, NamedLink, NamedRedirect, LinkTabNavHorizontal, IconEmailSent, InlineTextButton, SocialLoginButton, IconClose, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer, Modal, TermsOfService } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport ConfirmSignupForm from './ConfirmSignupForm/ConfirmSignupForm';\nimport LoginForm from './LoginForm/LoginForm';\nimport SignupForm from './SignupForm/SignupForm';\nimport css from './AuthenticationPage.module.css';\nimport { FacebookLogo, GoogleLogo } from './socialLoginLogos';\nexport class AuthenticationPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tosModalOpen: false,\n      authError: Cookies.get('st-autherror') ? JSON.parse(Cookies.get('st-autherror').replace('j:', '')) : null,\n      authInfo: Cookies.get('st-authinfo') ? JSON.parse(Cookies.get('st-authinfo').replace('j:', '')) : null\n    };\n  }\n\n  componentDidMount() {\n    // Remove the autherror cookie once the content is saved to state\n    // because we don't want to show the error message e.g. after page refresh\n    Cookies.remove('st-autherror');\n  }\n\n  render() {\n    const {\n      authInProgress,\n      currentUser,\n      intl,\n      isAuthenticated,\n      location,\n      loginError,\n      scrollingDisabled,\n      signupError,\n      submitLogin,\n      submitSignup,\n      confirmError,\n      submitSingupWithIdp,\n      tab,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      onResendVerificationEmail,\n      onManageDisableScrolling\n    } = this.props;\n    const isConfirm = tab === 'confirm';\n    const isLogin = tab === 'login';\n    const locationFrom = location.state && location.state.from ? location.state.from : null;\n    const authinfoFrom = this.state.authInfo && this.state.authInfo.from ? this.state.authInfo.from : null;\n    const from = locationFrom ? locationFrom : authinfoFrom ? authinfoFrom : null;\n    const user = ensureCurrentUser(currentUser);\n    const currentUserLoaded = !!user.id; // We only want to show the email verification dialog in the signup\n    // tab if the user isn't being redirected somewhere else\n    // (i.e. `from` is present). We must also check the `emailVerified`\n    // flag only when the current user is fully loaded.\n\n    const showEmailVerification = !isLogin && currentUserLoaded && !user.attributes.emailVerified; // Already authenticated, redirect away from auth page\n\n    if (isAuthenticated && from) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: from,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 14\n        }\n      });\n    } else if (isAuthenticated && currentUserLoaded && !showEmailVerification) {\n      return /*#__PURE__*/React.createElement(NamedRedirect, {\n        name: \"LandingPage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const loginErrorMessage = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.loginFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }));\n    const signupErrorMessage = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, isSignupEmailTakenError(signupError) ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupFailedEmailAlreadyTaken\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }));\n    const confirmErrorMessage = confirmError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, isSignupEmailTakenError(confirmError) ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupFailedEmailAlreadyTaken\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })) : null; // eslint-disable-next-line no-confusing-arrow\n\n    const errorMessage = (error, message) => error ? message : null;\n\n    const loginOrSignupError = isLogin ? errorMessage(loginError, loginErrorMessage) : errorMessage(signupError, signupErrorMessage);\n    const fromState = {\n      state: from ? {\n        from\n      } : null\n    };\n    const tabs = [{\n      text: /*#__PURE__*/React.createElement(\"h1\", {\n        className: css.tab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"AuthenticationPage.signupLinkText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      })),\n      selected: !isLogin,\n      linkProps: {\n        name: 'SignupPage',\n        to: fromState\n      }\n    }, {\n      text: /*#__PURE__*/React.createElement(\"h1\", {\n        className: css.tab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"AuthenticationPage.loginLinkText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      })),\n      selected: isLogin,\n      linkProps: {\n        name: 'LoginPage',\n        to: fromState\n      }\n    }];\n\n    const handleSubmitSignup = values => {\n      const {\n        fname,\n        lname,\n        ...rest\n      } = values;\n      const params = {\n        firstName: fname.trim(),\n        lastName: lname.trim(),\n        ...rest\n      };\n      submitSignup(params);\n    };\n\n    const handleSubmitConfirm = values => {\n      const {\n        idpToken,\n        email,\n        firstName,\n        lastName,\n        idpId\n      } = this.state.authInfo;\n      const {\n        email: newEmail,\n        firstName: newFirstName,\n        lastName: newLastName,\n        ...rest\n      } = values; // Pass email, fistName or lastName to Flex API only if user has edited them\n      // sand they can't be fetched directly from idp provider (e.g. Facebook)\n\n      const authParams = { ...(newEmail !== email && {\n          email: newEmail\n        }),\n        ...(newFirstName !== firstName && {\n          firstName: newFirstName\n        }),\n        ...(newLastName !== lastName && {\n          lastName: newLastName\n        })\n      }; // If the confirm form has any additional values, pass them forward as user's protected data\n\n      const protectedData = !isEmpty(rest) ? { ...rest\n      } : null;\n      submitSingupWithIdp({\n        idpToken,\n        idpId,\n        ...authParams,\n        ...(!!protectedData && {\n          protectedData\n        })\n      });\n    };\n\n    const getDefaultRoutes = () => {\n      const routes = routeConfiguration();\n      const baseUrl = apiBaseUrl(); // Route where the user should be returned after authentication\n      // This is used e.g. with EditListingPage and ListingPage\n\n      const fromParam = from ? `from=${from}` : ''; // Default route where user is returned after successfull authentication\n\n      const defaultReturn = pathByRouteName('LandingPage', routes);\n      const defaultReturnParam = defaultReturn ? `&defaultReturn=${defaultReturn}` : ''; // Route for confirming user data before creating a new user\n\n      const defaultConfirm = pathByRouteName('ConfirmPage', routes);\n      const defaultConfirmParam = defaultConfirm ? `&defaultConfirm=${defaultConfirm}` : '';\n      return {\n        baseUrl,\n        fromParam,\n        defaultReturnParam,\n        defaultConfirmParam\n      };\n    };\n\n    const authWithFacebook = () => {\n      const defaultRoutes = getDefaultRoutes();\n      const {\n        baseUrl,\n        fromParam,\n        defaultReturnParam,\n        defaultConfirmParam\n      } = defaultRoutes;\n      window.location.href = `${baseUrl}/api/auth/facebook?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\n    };\n\n    const authWithGoogle = () => {\n      const defaultRoutes = getDefaultRoutes();\n      const {\n        baseUrl,\n        fromParam,\n        defaultReturnParam,\n        defaultConfirmParam\n      } = defaultRoutes;\n      window.location.href = `${baseUrl}/api/auth/google?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\n    };\n\n    const idp = this.state.authInfo ? this.state.authInfo.idpId.replace(/^./, str => str.toUpperCase()) : null; // Form for confirming information frm IdP (e.g. Facebook)\n    // before new user is created to Flex\n\n    const confirmForm = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.signupWithIdpTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.confirmSignupWithIdpTitle\",\n      values: {\n        idp\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.confirmInfoText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.confirmSignupInfoText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }\n    })), confirmErrorMessage, /*#__PURE__*/React.createElement(ConfirmSignupForm, {\n      className: css.form,\n      onSubmit: handleSubmitConfirm,\n      inProgress: authInProgress,\n      onOpenTermsOfService: () => this.setState({\n        tosModalOpen: true\n      }),\n      authInfo: this.state.authInfo,\n      idp: idp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    })); // Social login buttons\n\n    const showFacebookLogin = !!process.env.REACT_APP_FACEBOOK_APP_ID;\n    const showGoogleLogin = !!process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    const showSocialLogins = showFacebookLogin || showGoogleLogin;\n    const facebookButtonText = isLogin ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.loginWithFacebook\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupWithFacebook\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 7\n      }\n    });\n    const googleButtonText = isLogin ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.loginWithGoogle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.signupWithGoogle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    });\n    const socialLoginButtonsMaybe = showSocialLogins ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.idpButtons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.socialButtonsOr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.socialButtonsOrText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.or\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }))), showFacebookLogin ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.socialButtonWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SocialLoginButton, {\n      onClick: () => authWithFacebook(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.buttonIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, FacebookLogo), facebookButtonText)) : null, showGoogleLogin ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.socialButtonWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SocialLoginButton, {\n      onClick: () => authWithGoogle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.buttonIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }, GoogleLogo), googleButtonText)) : null) : null; // Tabs for SignupForm and LoginForm\n\n    const authenticationForms = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LinkTabNavHorizontal, {\n      className: css.tabs,\n      tabs: tabs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    }), loginOrSignupError, isLogin ? /*#__PURE__*/React.createElement(LoginForm, {\n      className: css.loginForm,\n      onSubmit: submitLogin,\n      inProgress: authInProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(SignupForm, {\n      className: css.signupForm,\n      onSubmit: handleSubmitSignup,\n      inProgress: authInProgress,\n      onOpenTermsOfService: () => this.setState({\n        tosModalOpen: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }), socialLoginButtonsMaybe);\n    const formContent = isConfirm ? confirmForm : authenticationForms;\n    const name = user.attributes.profile.firstName;\n    const email = /*#__PURE__*/React.createElement(\"span\", {\n      className: css.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 19\n      }\n    }, user.attributes.email);\n    const resendEmailLink = /*#__PURE__*/React.createElement(InlineTextButton, {\n      rootClassName: css.modalHelperLink,\n      onClick: onResendVerificationEmail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.resendEmailLinkText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }));\n    const fixEmailLink = /*#__PURE__*/React.createElement(NamedLink, {\n      className: css.modalHelperLink,\n      name: \"ContactDetailsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.fixEmailLinkText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }\n    }));\n    const resendErrorTranslationId = isTooManyEmailVerificationRequestsError(sendVerificationEmailError) ? 'AuthenticationPage.resendFailedTooManyRequests' : 'AuthenticationPage.resendFailed';\n    const resendErrorMessage = sendVerificationEmailError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: resendErrorTranslationId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }\n    })) : null;\n    const emailVerificationContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NamedLink, {\n      className: css.verifyClose,\n      name: \"ProfileSettingsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.closeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.verifyEmailClose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(IconClose, {\n      rootClassName: css.closeIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(IconEmailSent, {\n      className: css.modalIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.verifyEmailTitle\",\n      values: {\n        name\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.verifyEmailText\",\n      values: {\n        email\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }\n    })), resendErrorMessage, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalHelperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }\n    }, sendVerificationEmailInProgress ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.sendingEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.resendEmail\",\n      values: {\n        resendEmailLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalHelperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.fixEmail\",\n      values: {\n        fixEmailLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 13\n      }\n    }))));\n    const siteTitle = config.siteTitle;\n    const schemaTitle = isLogin ? intl.formatMessage({\n      id: 'AuthenticationPage.schemaTitleLogin'\n    }, {\n      siteTitle\n    }) : intl.formatMessage({\n      id: 'AuthenticationPage.schemaTitleSignup'\n    }, {\n      siteTitle\n    });\n    const topbarClasses = classNames({\n      [css.hideOnMobile]: showEmailVerification\n    });\n    return /*#__PURE__*/React.createElement(Page, {\n      title: schemaTitle,\n      scrollingDisabled: scrollingDisabled,\n      schema: {\n        '@context': 'http://schema.org',\n        '@type': 'WebPage',\n        name: schemaTitle\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      className: topbarClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n      className: css.layoutWrapperMain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 13\n      }\n    }, showEmailVerification ? emailVerificationContent : formContent), /*#__PURE__*/React.createElement(Modal, {\n      id: \"AuthenticationPage.tos\",\n      isOpen: this.state.tosModalOpen,\n      onClose: () => this.setState({\n        tosModalOpen: false\n      }),\n      usePortal: true,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.termsWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: css.termsHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"AuthenticationPage.termsHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(TermsOfService, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nAuthenticationPageComponent.defaultProps = {\n  currentUser: null,\n  loginError: null,\n  signupError: null,\n  confirmError: null,\n  tab: 'signup',\n  sendVerificationEmailError: null,\n  showSocialLoginsForTests: false\n};\nconst {\n  bool,\n  func,\n  object,\n  oneOf,\n  shape\n} = PropTypes;\nAuthenticationPageComponent.propTypes = {\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  isAuthenticated: bool.isRequired,\n  loginError: propTypes.error,\n  scrollingDisabled: bool.isRequired,\n  signupError: propTypes.error,\n  confirmError: propTypes.error,\n  submitLogin: func.isRequired,\n  submitSignup: func.isRequired,\n  tab: oneOf(['login', 'signup', 'confirm']),\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  onResendVerificationEmail: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  // from withRouter\n  location: shape({\n    state: object\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    isAuthenticated,\n    loginError,\n    signupError,\n    confirmError\n  } = state.Auth;\n  const {\n    currentUser,\n    sendVerificationEmailInProgress,\n    sendVerificationEmailError\n  } = state.user;\n  return {\n    authInProgress: authenticationInProgress(state),\n    currentUser,\n    isAuthenticated,\n    loginError,\n    scrollingDisabled: isScrollingDisabled(state),\n    signupError,\n    confirmError,\n    sendVerificationEmailInProgress,\n    sendVerificationEmailError\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitLogin: ({\n    email,\n    password\n  }) => dispatch(login(email, password)),\n  submitSignup: params => dispatch(signup(params)),\n  submitSingupWithIdp: params => dispatch(signupWithIdp(params)),\n  onResendVerificationEmail: () => dispatch(sendVerificationEmail()),\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst AuthenticationPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(AuthenticationPageComponent);\nexport default AuthenticationPage;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/AuthenticationPage/AuthenticationPage.js"],"names":["React","Component","PropTypes","compose","connect","withRouter","Redirect","Cookies","classNames","isEmpty","config","routeConfiguration","pathByRouteName","apiBaseUrl","FormattedMessage","injectIntl","intlShape","propTypes","ensureCurrentUser","isSignupEmailTakenError","isTooManyEmailVerificationRequestsError","login","authenticationInProgress","signup","signupWithIdp","isScrollingDisabled","sendVerificationEmail","manageDisableScrolling","Page","NamedLink","NamedRedirect","LinkTabNavHorizontal","IconEmailSent","InlineTextButton","SocialLoginButton","IconClose","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","Modal","TermsOfService","TopbarContainer","ConfirmSignupForm","LoginForm","SignupForm","css","FacebookLogo","GoogleLogo","AuthenticationPageComponent","constructor","props","state","tosModalOpen","authError","get","JSON","parse","replace","authInfo","componentDidMount","remove","render","authInProgress","currentUser","intl","isAuthenticated","location","loginError","scrollingDisabled","signupError","submitLogin","submitSignup","confirmError","submitSingupWithIdp","tab","sendVerificationEmailInProgress","sendVerificationEmailError","onResendVerificationEmail","onManageDisableScrolling","isConfirm","isLogin","locationFrom","from","authinfoFrom","user","currentUserLoaded","id","showEmailVerification","attributes","emailVerified","loginErrorMessage","error","signupErrorMessage","confirmErrorMessage","errorMessage","message","loginOrSignupError","fromState","tabs","text","selected","linkProps","name","to","handleSubmitSignup","values","fname","lname","rest","params","firstName","trim","lastName","handleSubmitConfirm","idpToken","email","idpId","newEmail","newFirstName","newLastName","authParams","protectedData","getDefaultRoutes","routes","baseUrl","fromParam","defaultReturn","defaultReturnParam","defaultConfirm","defaultConfirmParam","authWithFacebook","defaultRoutes","window","href","authWithGoogle","idp","str","toUpperCase","confirmForm","content","signupWithIdpTitle","confirmInfoText","form","setState","showFacebookLogin","process","env","REACT_APP_FACEBOOK_APP_ID","showGoogleLogin","REACT_APP_GOOGLE_CLIENT_ID","showSocialLogins","facebookButtonText","googleButtonText","socialLoginButtonsMaybe","idpButtons","socialButtonsOr","socialButtonsOrText","socialButtonWrapper","buttonIcon","authenticationForms","loginForm","signupForm","formContent","profile","resendEmailLink","modalHelperLink","fixEmailLink","resendErrorTranslationId","resendErrorMessage","emailVerificationContent","verifyClose","closeText","closeIcon","modalIcon","modalTitle","modalMessage","bottomWrapper","modalHelperText","siteTitle","schemaTitle","formatMessage","topbarClasses","hideOnMobile","layoutWrapperMain","root","termsWrapper","termsHeading","defaultProps","showSocialLoginsForTests","bool","func","object","oneOf","shape","isRequired","mapStateToProps","Auth","mapDispatchToProps","dispatch","password","componentId","disableScrolling","AuthenticationPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport classNames from 'classnames';\r\nimport { isEmpty } from 'lodash';\r\n\r\nimport config from '../../config';\r\nimport routeConfiguration from '../../routing/routeConfiguration';\r\nimport { pathByRouteName } from '../../util/routes';\r\nimport { apiBaseUrl } from '../../util/api';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport {\r\n  isSignupEmailTakenError,\r\n  isTooManyEmailVerificationRequestsError,\r\n} from '../../util/errors';\r\n\r\nimport { login, authenticationInProgress, signup, signupWithIdp } from '../../ducks/Auth.duck';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\nimport { sendVerificationEmail } from '../../ducks/user.duck';\r\nimport { manageDisableScrolling } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  Page,\r\n  NamedLink,\r\n  NamedRedirect,\r\n  LinkTabNavHorizontal,\r\n  IconEmailSent,\r\n  InlineTextButton,\r\n  SocialLoginButton,\r\n  IconClose,\r\n  LayoutSingleColumn,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  Modal,\r\n  TermsOfService,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport ConfirmSignupForm from './ConfirmSignupForm/ConfirmSignupForm';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport SignupForm from './SignupForm/SignupForm';\r\n\r\nimport css from './AuthenticationPage.module.css';\r\nimport { FacebookLogo, GoogleLogo } from './socialLoginLogos';\r\n\r\nexport class AuthenticationPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tosModalOpen: false,\r\n      authError: Cookies.get('st-autherror')\r\n        ? JSON.parse(Cookies.get('st-autherror').replace('j:', ''))\r\n        : null,\r\n      authInfo: Cookies.get('st-authinfo')\r\n        ? JSON.parse(Cookies.get('st-authinfo').replace('j:', ''))\r\n        : null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Remove the autherror cookie once the content is saved to state\r\n    // because we don't want to show the error message e.g. after page refresh\r\n    Cookies.remove('st-autherror');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      authInProgress,\r\n      currentUser,\r\n      intl,\r\n      isAuthenticated,\r\n      location,\r\n      loginError,\r\n      scrollingDisabled,\r\n      signupError,\r\n      submitLogin,\r\n      submitSignup,\r\n      confirmError,\r\n      submitSingupWithIdp,\r\n      tab,\r\n      sendVerificationEmailInProgress,\r\n      sendVerificationEmailError,\r\n      onResendVerificationEmail,\r\n      onManageDisableScrolling,\r\n    } = this.props;\r\n\r\n    const isConfirm = tab === 'confirm';\r\n    const isLogin = tab === 'login';\r\n    const locationFrom = location.state && location.state.from ? location.state.from : null;\r\n    const authinfoFrom =\r\n      this.state.authInfo && this.state.authInfo.from ? this.state.authInfo.from : null;\r\n    const from = locationFrom ? locationFrom : authinfoFrom ? authinfoFrom : null;\r\n\r\n    const user = ensureCurrentUser(currentUser);\r\n    const currentUserLoaded = !!user.id;\r\n\r\n    // We only want to show the email verification dialog in the signup\r\n    // tab if the user isn't being redirected somewhere else\r\n    // (i.e. `from` is present). We must also check the `emailVerified`\r\n    // flag only when the current user is fully loaded.\r\n    const showEmailVerification = !isLogin && currentUserLoaded && !user.attributes.emailVerified;\r\n\r\n    // Already authenticated, redirect away from auth page\r\n    if (isAuthenticated && from) {\r\n      return <Redirect to={from} />;\r\n    } else if (isAuthenticated && currentUserLoaded && !showEmailVerification) {\r\n      return <NamedRedirect name=\"LandingPage\" />;\r\n    }\r\n\r\n    const loginErrorMessage = (\r\n      <div className={css.error}>\r\n        <FormattedMessage id=\"AuthenticationPage.loginFailed\" />\r\n      </div>\r\n    );\r\n\r\n    const signupErrorMessage = (\r\n      <div className={css.error}>\r\n        {isSignupEmailTakenError(signupError) ? (\r\n          <FormattedMessage id=\"AuthenticationPage.signupFailedEmailAlreadyTaken\" />\r\n        ) : (\r\n          <FormattedMessage id=\"AuthenticationPage.signupFailed\" />\r\n        )}\r\n      </div>\r\n    );\r\n\r\n    const confirmErrorMessage = confirmError ? (\r\n      <div className={css.error}>\r\n        {isSignupEmailTakenError(confirmError) ? (\r\n          <FormattedMessage id=\"AuthenticationPage.signupFailedEmailAlreadyTaken\" />\r\n        ) : (\r\n          <FormattedMessage id=\"AuthenticationPage.signupFailed\" />\r\n        )}\r\n      </div>\r\n    ) : null;\r\n\r\n    // eslint-disable-next-line no-confusing-arrow\r\n    const errorMessage = (error, message) => (error ? message : null);\r\n    const loginOrSignupError = isLogin\r\n      ? errorMessage(loginError, loginErrorMessage)\r\n      : errorMessage(signupError, signupErrorMessage);\r\n\r\n    const fromState = { state: from ? { from } : null };\r\n\r\n    const tabs = [\r\n      {\r\n        text: (\r\n          <h1 className={css.tab}>\r\n            <FormattedMessage id=\"AuthenticationPage.signupLinkText\" />\r\n          </h1>\r\n        ),\r\n        selected: !isLogin,\r\n        linkProps: {\r\n          name: 'SignupPage',\r\n          to: fromState,\r\n        },\r\n      },\r\n      {\r\n        text: (\r\n          <h1 className={css.tab}>\r\n            <FormattedMessage id=\"AuthenticationPage.loginLinkText\" />\r\n          </h1>\r\n        ),\r\n        selected: isLogin,\r\n        linkProps: {\r\n          name: 'LoginPage',\r\n          to: fromState,\r\n        },\r\n      },\r\n    ];\r\n\r\n    const handleSubmitSignup = values => {\r\n      const { fname, lname, ...rest } = values;\r\n      const params = { firstName: fname.trim(), lastName: lname.trim(), ...rest };\r\n      submitSignup(params);\r\n    };\r\n\r\n    const handleSubmitConfirm = values => {\r\n      const { idpToken, email, firstName, lastName, idpId } = this.state.authInfo;\r\n      const { email: newEmail, firstName: newFirstName, lastName: newLastName, ...rest } = values;\r\n\r\n      // Pass email, fistName or lastName to Flex API only if user has edited them\r\n      // sand they can't be fetched directly from idp provider (e.g. Facebook)\r\n\r\n      const authParams = {\r\n        ...(newEmail !== email && { email: newEmail }),\r\n        ...(newFirstName !== firstName && { firstName: newFirstName }),\r\n        ...(newLastName !== lastName && { lastName: newLastName }),\r\n      };\r\n\r\n      // If the confirm form has any additional values, pass them forward as user's protected data\r\n      const protectedData = !isEmpty(rest) ? { ...rest } : null;\r\n\r\n      submitSingupWithIdp({\r\n        idpToken,\r\n        idpId,\r\n        ...authParams,\r\n        ...(!!protectedData && { protectedData }),\r\n      });\r\n    };\r\n\r\n    const getDefaultRoutes = () => {\r\n      const routes = routeConfiguration();\r\n      const baseUrl = apiBaseUrl();\r\n\r\n      // Route where the user should be returned after authentication\r\n      // This is used e.g. with EditListingPage and ListingPage\r\n      const fromParam = from ? `from=${from}` : '';\r\n\r\n      // Default route where user is returned after successfull authentication\r\n      const defaultReturn = pathByRouteName('LandingPage', routes);\r\n      const defaultReturnParam = defaultReturn ? `&defaultReturn=${defaultReturn}` : '';\r\n\r\n      // Route for confirming user data before creating a new user\r\n      const defaultConfirm = pathByRouteName('ConfirmPage', routes);\r\n      const defaultConfirmParam = defaultConfirm ? `&defaultConfirm=${defaultConfirm}` : '';\r\n\r\n      return { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam };\r\n    };\r\n    const authWithFacebook = () => {\r\n      const defaultRoutes = getDefaultRoutes();\r\n      const { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam } = defaultRoutes;\r\n      window.location.href = `${baseUrl}/api/auth/facebook?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\r\n    };\r\n\r\n    const authWithGoogle = () => {\r\n      const defaultRoutes = getDefaultRoutes();\r\n      const { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam } = defaultRoutes;\r\n      window.location.href = `${baseUrl}/api/auth/google?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\r\n    };\r\n\r\n    const idp = this.state.authInfo\r\n      ? this.state.authInfo.idpId.replace(/^./, str => str.toUpperCase())\r\n      : null;\r\n\r\n    // Form for confirming information frm IdP (e.g. Facebook)\r\n    // before new user is created to Flex\r\n    const confirmForm = (\r\n      <div className={css.content}>\r\n        <h1 className={css.signupWithIdpTitle}>\r\n          <FormattedMessage id=\"AuthenticationPage.confirmSignupWithIdpTitle\" values={{ idp }} />\r\n        </h1>\r\n\r\n        <p className={css.confirmInfoText}>\r\n          <FormattedMessage id=\"AuthenticationPage.confirmSignupInfoText\" />\r\n        </p>\r\n        {confirmErrorMessage}\r\n        <ConfirmSignupForm\r\n          className={css.form}\r\n          onSubmit={handleSubmitConfirm}\r\n          inProgress={authInProgress}\r\n          onOpenTermsOfService={() => this.setState({ tosModalOpen: true })}\r\n          authInfo={this.state.authInfo}\r\n          idp={idp}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    // Social login buttons\r\n    const showFacebookLogin = !!process.env.REACT_APP_FACEBOOK_APP_ID;\r\n    const showGoogleLogin = !!process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n    const showSocialLogins = showFacebookLogin || showGoogleLogin;\r\n\r\n    const facebookButtonText = isLogin ? (\r\n      <FormattedMessage id=\"AuthenticationPage.loginWithFacebook\" />\r\n    ) : (\r\n      <FormattedMessage id=\"AuthenticationPage.signupWithFacebook\" />\r\n    );\r\n\r\n    const googleButtonText = isLogin ? (\r\n      <FormattedMessage id=\"AuthenticationPage.loginWithGoogle\" />\r\n    ) : (\r\n      <FormattedMessage id=\"AuthenticationPage.signupWithGoogle\" />\r\n    );\r\n    const socialLoginButtonsMaybe = showSocialLogins ? (\r\n      <div className={css.idpButtons}>\r\n        <div className={css.socialButtonsOr}>\r\n          <span className={css.socialButtonsOrText}>\r\n            <FormattedMessage id=\"AuthenticationPage.or\" />\r\n          </span>\r\n        </div>\r\n\r\n        {showFacebookLogin ? (\r\n          <div className={css.socialButtonWrapper}>\r\n            <SocialLoginButton onClick={() => authWithFacebook()}>\r\n              <span className={css.buttonIcon}>{FacebookLogo}</span>\r\n              {facebookButtonText}\r\n            </SocialLoginButton>\r\n          </div>\r\n        ) : null}\r\n\r\n        {showGoogleLogin ? (\r\n          <div className={css.socialButtonWrapper}>\r\n            <SocialLoginButton onClick={() => authWithGoogle()}>\r\n              <span className={css.buttonIcon}>{GoogleLogo}</span>\r\n              {googleButtonText}\r\n            </SocialLoginButton>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    ) : null;\r\n\r\n    // Tabs for SignupForm and LoginForm\r\n    const authenticationForms = (\r\n      <div className={css.content}>\r\n        <LinkTabNavHorizontal className={css.tabs} tabs={tabs} />\r\n        {loginOrSignupError}\r\n\r\n        {isLogin ? (\r\n          <LoginForm className={css.loginForm} onSubmit={submitLogin} inProgress={authInProgress} />\r\n        ) : (\r\n          <SignupForm\r\n            className={css.signupForm}\r\n            onSubmit={handleSubmitSignup}\r\n            inProgress={authInProgress}\r\n            onOpenTermsOfService={() => this.setState({ tosModalOpen: true })}\r\n          />\r\n        )}\r\n\r\n        {socialLoginButtonsMaybe}\r\n      </div>\r\n    );\r\n\r\n    const formContent = isConfirm ? confirmForm : authenticationForms;\r\n\r\n    const name = user.attributes.profile.firstName;\r\n    const email = <span className={css.email}>{user.attributes.email}</span>;\r\n\r\n    const resendEmailLink = (\r\n      <InlineTextButton rootClassName={css.modalHelperLink} onClick={onResendVerificationEmail}>\r\n        <FormattedMessage id=\"AuthenticationPage.resendEmailLinkText\" />\r\n      </InlineTextButton>\r\n    );\r\n    const fixEmailLink = (\r\n      <NamedLink className={css.modalHelperLink} name=\"ContactDetailsPage\">\r\n        <FormattedMessage id=\"AuthenticationPage.fixEmailLinkText\" />\r\n      </NamedLink>\r\n    );\r\n\r\n    const resendErrorTranslationId = isTooManyEmailVerificationRequestsError(\r\n      sendVerificationEmailError\r\n    )\r\n      ? 'AuthenticationPage.resendFailedTooManyRequests'\r\n      : 'AuthenticationPage.resendFailed';\r\n    const resendErrorMessage = sendVerificationEmailError ? (\r\n      <p className={css.error}>\r\n        <FormattedMessage id={resendErrorTranslationId} />\r\n      </p>\r\n    ) : null;\r\n\r\n    const emailVerificationContent = (\r\n      <div className={css.content}>\r\n        <NamedLink className={css.verifyClose} name=\"ProfileSettingsPage\">\r\n          <span className={css.closeText}>\r\n            <FormattedMessage id=\"AuthenticationPage.verifyEmailClose\" />\r\n          </span>\r\n          <IconClose rootClassName={css.closeIcon} />\r\n        </NamedLink>\r\n        <IconEmailSent className={css.modalIcon} />\r\n        <h1 className={css.modalTitle}>\r\n          <FormattedMessage id=\"AuthenticationPage.verifyEmailTitle\" values={{ name }} />\r\n        </h1>\r\n        <p className={css.modalMessage}>\r\n          <FormattedMessage id=\"AuthenticationPage.verifyEmailText\" values={{ email }} />\r\n        </p>\r\n        {resendErrorMessage}\r\n\r\n        <div className={css.bottomWrapper}>\r\n          <p className={css.modalHelperText}>\r\n            {sendVerificationEmailInProgress ? (\r\n              <FormattedMessage id=\"AuthenticationPage.sendingEmail\" />\r\n            ) : (\r\n              <FormattedMessage id=\"AuthenticationPage.resendEmail\" values={{ resendEmailLink }} />\r\n            )}\r\n          </p>\r\n          <p className={css.modalHelperText}>\r\n            <FormattedMessage id=\"AuthenticationPage.fixEmail\" values={{ fixEmailLink }} />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    const siteTitle = config.siteTitle;\r\n    const schemaTitle = isLogin\r\n      ? intl.formatMessage({ id: 'AuthenticationPage.schemaTitleLogin' }, { siteTitle })\r\n      : intl.formatMessage({ id: 'AuthenticationPage.schemaTitleSignup' }, { siteTitle });\r\n\r\n    const topbarClasses = classNames({\r\n      [css.hideOnMobile]: showEmailVerification,\r\n    });\r\n\r\n    return (\r\n      <Page\r\n        title={schemaTitle}\r\n        scrollingDisabled={scrollingDisabled}\r\n        schema={{\r\n          '@context': 'http://schema.org',\r\n          '@type': 'WebPage',\r\n          name: schemaTitle,\r\n        }}\r\n      >\r\n        <LayoutSingleColumn>\r\n          <LayoutWrapperTopbar>\r\n            <TopbarContainer className={topbarClasses} />\r\n          </LayoutWrapperTopbar>\r\n          <LayoutWrapperMain className={css.layoutWrapperMain}>\r\n            <div className={css.root}>\r\n              {showEmailVerification ? emailVerificationContent : formContent}\r\n            </div>\r\n            <Modal\r\n              id=\"AuthenticationPage.tos\"\r\n              isOpen={this.state.tosModalOpen}\r\n              onClose={() => this.setState({ tosModalOpen: false })}\r\n              usePortal\r\n              onManageDisableScrolling={onManageDisableScrolling}\r\n            >\r\n              <div className={css.termsWrapper}>\r\n                <h2 className={css.termsHeading}>\r\n                  <FormattedMessage id=\"AuthenticationPage.termsHeading\" />\r\n                </h2>\r\n                <TermsOfService />\r\n              </div>\r\n            </Modal>\r\n          </LayoutWrapperMain>\r\n          <LayoutWrapperFooter>\r\n            <Footer />\r\n          </LayoutWrapperFooter>\r\n        </LayoutSingleColumn>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nAuthenticationPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  loginError: null,\r\n  signupError: null,\r\n  confirmError: null,\r\n  tab: 'signup',\r\n  sendVerificationEmailError: null,\r\n  showSocialLoginsForTests: false,\r\n};\r\n\r\nconst { bool, func, object, oneOf, shape } = PropTypes;\r\n\r\nAuthenticationPageComponent.propTypes = {\r\n  authInProgress: bool.isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  isAuthenticated: bool.isRequired,\r\n  loginError: propTypes.error,\r\n  scrollingDisabled: bool.isRequired,\r\n  signupError: propTypes.error,\r\n  confirmError: propTypes.error,\r\n\r\n  submitLogin: func.isRequired,\r\n  submitSignup: func.isRequired,\r\n  tab: oneOf(['login', 'signup', 'confirm']),\r\n\r\n  sendVerificationEmailInProgress: bool.isRequired,\r\n  sendVerificationEmailError: propTypes.error,\r\n  onResendVerificationEmail: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n\r\n  // from withRouter\r\n  location: shape({ state: object }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { isAuthenticated, loginError, signupError, confirmError } = state.Auth;\r\n  const { currentUser, sendVerificationEmailInProgress, sendVerificationEmailError } = state.user;\r\n  return {\r\n    authInProgress: authenticationInProgress(state),\r\n    currentUser,\r\n    isAuthenticated,\r\n    loginError,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    signupError,\r\n    confirmError,\r\n    sendVerificationEmailInProgress,\r\n    sendVerificationEmailError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  submitLogin: ({ email, password }) => dispatch(login(email, password)),\r\n  submitSignup: params => dispatch(signup(params)),\r\n  submitSingupWithIdp: params => dispatch(signupWithIdp(params)),\r\n  onResendVerificationEmail: () => dispatch(sendVerificationEmail()),\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst AuthenticationPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(AuthenticationPageComponent);\r\n\r\nexport default AuthenticationPage;\r\n"]},"metadata":{},"sourceType":"module"}