{"ast":null,"code":"import { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { currentUserShowSuccess } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const CLEAR_UPDATED_FORM = 'app/ProfileSettingsPage/CLEAR_UPDATED_FORM';\nexport const UPLOAD_IMAGE_REQUEST = 'app/ProfileSettingsPage/UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'app/ProfileSettingsPage/UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_ERROR = 'app/ProfileSettingsPage/UPLOAD_IMAGE_ERROR';\nexport const UPDATE_PROFILE_REQUEST = 'app/ProfileSettingsPage/UPDATE_PROFILE_REQUEST';\nexport const UPDATE_PROFILE_SUCCESS = 'app/ProfileSettingsPage/UPDATE_PROFILE_SUCCESS';\nexport const UPDATE_PROFILE_ERROR = 'app/ProfileSettingsPage/UPDATE_PROFILE_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  image: null,\n  uploadImageError: null,\n  uploadInProgress: false,\n  updateInProgress: false,\n  updateProfileError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case UPLOAD_IMAGE_REQUEST:\n      // payload.params: { id: 'tempId', file }\n      return { ...state,\n        image: { ...payload.params\n        },\n        uploadInProgress: true,\n        uploadImageError: null\n      };\n\n    case UPLOAD_IMAGE_SUCCESS:\n      {\n        // payload: { id: 'tempId', uploadedImage }\n        const {\n          id,\n          uploadedImage\n        } = payload;\n        const {\n          file\n        } = state.image || {};\n        const image = {\n          id,\n          imageId: uploadedImage.id,\n          file,\n          uploadedImage\n        };\n        return { ...state,\n          image,\n          uploadInProgress: false\n        };\n      }\n\n    case UPLOAD_IMAGE_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        return { ...state,\n          image: null,\n          uploadInProgress: false,\n          uploadImageError: payload.error\n        };\n      }\n\n    case UPDATE_PROFILE_REQUEST:\n      return { ...state,\n        updateInProgress: true,\n        updateProfileError: null\n      };\n\n    case UPDATE_PROFILE_SUCCESS:\n      return { ...state,\n        image: null,\n        updateInProgress: false\n      };\n\n    case UPDATE_PROFILE_ERROR:\n      return { ...state,\n        image: null,\n        updateInProgress: false,\n        updateProfileError: payload\n      };\n\n    case CLEAR_UPDATED_FORM:\n      return { ...state,\n        updateProfileError: null,\n        uploadImageError: null\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n// ================ Action creators ================ //\n\nexport const clearUpdatedForm = () => ({\n  type: CLEAR_UPDATED_FORM\n}); // SDK method: images.upload\n\nexport const uploadImageRequest = params => ({\n  type: UPLOAD_IMAGE_REQUEST,\n  payload: {\n    params\n  }\n});\nexport const uploadImageSuccess = result => ({\n  type: UPLOAD_IMAGE_SUCCESS,\n  payload: result.data\n});\nexport const uploadImageError = error => ({\n  type: UPLOAD_IMAGE_ERROR,\n  payload: error,\n  error: true\n}); // SDK method: sdk.currentUser.updateProfile\n\nexport const updateProfileRequest = params => ({\n  type: UPDATE_PROFILE_REQUEST,\n  payload: {\n    params\n  }\n});\nexport const updateProfileSuccess = result => ({\n  type: UPDATE_PROFILE_SUCCESS,\n  payload: result.data\n});\nexport const updateProfileError = error => ({\n  type: UPDATE_PROFILE_ERROR,\n  payload: error,\n  error: true\n}); // ================ Thunk ================ //\n// Images return imageId which we need to map with previously generated temporary id\n\nexport function uploadImage(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    const id = actionPayload.id;\n    dispatch(uploadImageRequest(actionPayload));\n    const bodyParams = {\n      image: actionPayload.file\n    };\n    const queryParams = {\n      expand: true,\n      'fields.image': ['variants.square-small', 'variants.square-small2x']\n    };\n    return sdk.images.upload(bodyParams, queryParams).then(resp => {\n      const uploadedImage = resp.data.data;\n      dispatch(uploadImageSuccess({\n        data: {\n          id,\n          uploadedImage\n        }\n      }));\n    }).catch(e => dispatch(uploadImageError({\n      id,\n      error: storableError(e)\n    })));\n  };\n}\nexport const updateProfile = actionPayload => {\n  return (dispatch, getState, sdk) => {\n    dispatch(updateProfileRequest());\n    const queryParams = {\n      expand: true,\n      include: ['profileImage'],\n      'fields.image': ['variants.square-small', 'variants.square-small2x']\n    };\n    return sdk.currentUser.updateProfile(actionPayload, queryParams).then(response => {\n      dispatch(updateProfileSuccess(response));\n      const entities = denormalisedResponseEntities(response);\n\n      if (entities.length !== 1) {\n        throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\n      }\n\n      const currentUser = entities[0]; // Update current user in state.user.currentUser through user.duck.js\n\n      dispatch(currentUserShowSuccess(currentUser));\n    }).catch(e => dispatch(updateProfileError(storableError(e))));\n  };\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ProfileSettingsPage/ProfileSettingsPage.duck.js"],"names":["denormalisedResponseEntities","storableError","currentUserShowSuccess","CLEAR_UPDATED_FORM","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_ERROR","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_ERROR","initialState","image","uploadImageError","uploadInProgress","updateInProgress","updateProfileError","reducer","state","action","type","payload","params","id","uploadedImage","file","imageId","error","clearUpdatedForm","uploadImageRequest","uploadImageSuccess","result","data","updateProfileRequest","updateProfileSuccess","uploadImage","actionPayload","dispatch","getState","sdk","bodyParams","queryParams","expand","images","upload","then","resp","catch","e","updateProfile","include","currentUser","response","entities","length","Error"],"mappings":"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","sourcesContent":["import { denormalisedResponseEntities } from '../../util/data';\r\nimport { storableError } from '../../util/errors';\r\nimport { currentUserShowSuccess } from '../../ducks/user.duck';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const CLEAR_UPDATED_FORM = 'app/ProfileSettingsPage/CLEAR_UPDATED_FORM';\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = 'app/ProfileSettingsPage/UPLOAD_IMAGE_REQUEST';\r\nexport const UPLOAD_IMAGE_SUCCESS = 'app/ProfileSettingsPage/UPLOAD_IMAGE_SUCCESS';\r\nexport const UPLOAD_IMAGE_ERROR = 'app/ProfileSettingsPage/UPLOAD_IMAGE_ERROR';\r\n\r\nexport const UPDATE_PROFILE_REQUEST = 'app/ProfileSettingsPage/UPDATE_PROFILE_REQUEST';\r\nexport const UPDATE_PROFILE_SUCCESS = 'app/ProfileSettingsPage/UPDATE_PROFILE_SUCCESS';\r\nexport const UPDATE_PROFILE_ERROR = 'app/ProfileSettingsPage/UPDATE_PROFILE_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  image: null,\r\n  uploadImageError: null,\r\n  uploadInProgress: false,\r\n  updateInProgress: false,\r\n  updateProfileError: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case UPLOAD_IMAGE_REQUEST:\r\n      // payload.params: { id: 'tempId', file }\r\n      return {\r\n        ...state,\r\n        image: { ...payload.params },\r\n        uploadInProgress: true,\r\n        uploadImageError: null,\r\n      };\r\n    case UPLOAD_IMAGE_SUCCESS: {\r\n      // payload: { id: 'tempId', uploadedImage }\r\n      const { id, uploadedImage } = payload;\r\n      const { file } = state.image || {};\r\n      const image = { id, imageId: uploadedImage.id, file, uploadedImage };\r\n      return { ...state, image, uploadInProgress: false };\r\n    }\r\n    case UPLOAD_IMAGE_ERROR: {\r\n      // eslint-disable-next-line no-console\r\n      return { ...state, image: null, uploadInProgress: false, uploadImageError: payload.error };\r\n    }\r\n\r\n    case UPDATE_PROFILE_REQUEST:\r\n      return {\r\n        ...state,\r\n        updateInProgress: true,\r\n        updateProfileError: null,\r\n      };\r\n    case UPDATE_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        image: null,\r\n        updateInProgress: false,\r\n      };\r\n    case UPDATE_PROFILE_ERROR:\r\n      return {\r\n        ...state,\r\n        image: null,\r\n        updateInProgress: false,\r\n        updateProfileError: payload,\r\n      };\r\n\r\n    case CLEAR_UPDATED_FORM:\r\n      return { ...state, updateProfileError: null, uploadImageError: null };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const clearUpdatedForm = () => ({\r\n  type: CLEAR_UPDATED_FORM,\r\n});\r\n\r\n// SDK method: images.upload\r\nexport const uploadImageRequest = params => ({ type: UPLOAD_IMAGE_REQUEST, payload: { params } });\r\nexport const uploadImageSuccess = result => ({ type: UPLOAD_IMAGE_SUCCESS, payload: result.data });\r\nexport const uploadImageError = error => ({\r\n  type: UPLOAD_IMAGE_ERROR,\r\n  payload: error,\r\n  error: true,\r\n});\r\n\r\n// SDK method: sdk.currentUser.updateProfile\r\nexport const updateProfileRequest = params => ({\r\n  type: UPDATE_PROFILE_REQUEST,\r\n  payload: { params },\r\n});\r\nexport const updateProfileSuccess = result => ({\r\n  type: UPDATE_PROFILE_SUCCESS,\r\n  payload: result.data,\r\n});\r\nexport const updateProfileError = error => ({\r\n  type: UPDATE_PROFILE_ERROR,\r\n  payload: error,\r\n  error: true,\r\n});\r\n\r\n// ================ Thunk ================ //\r\n\r\n// Images return imageId which we need to map with previously generated temporary id\r\nexport function uploadImage(actionPayload) {\r\n  return (dispatch, getState, sdk) => {\r\n    const id = actionPayload.id;\r\n    dispatch(uploadImageRequest(actionPayload));\r\n\r\n    const bodyParams = {\r\n      image: actionPayload.file,\r\n    };\r\n    const queryParams = {\r\n      expand: true,\r\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n    };\r\n\r\n    return sdk.images\r\n      .upload(bodyParams, queryParams)\r\n      .then(resp => {\r\n        const uploadedImage = resp.data.data;\r\n        dispatch(uploadImageSuccess({ data: { id, uploadedImage } }));\r\n      })\r\n      .catch(e => dispatch(uploadImageError({ id, error: storableError(e) })));\r\n  };\r\n}\r\n\r\nexport const updateProfile = actionPayload => {\r\n  return (dispatch, getState, sdk) => {\r\n    dispatch(updateProfileRequest());\r\n\r\n    const queryParams = {\r\n      expand: true,\r\n      include: ['profileImage'],\r\n      'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n    };\r\n\r\n    return sdk.currentUser\r\n      .updateProfile(actionPayload, queryParams)\r\n      .then(response => {\r\n        dispatch(updateProfileSuccess(response));\r\n\r\n        const entities = denormalisedResponseEntities(response);\r\n        if (entities.length !== 1) {\r\n          throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\r\n        }\r\n        const currentUser = entities[0];\r\n\r\n        // Update current user in state.user.currentUser through user.duck.js\r\n        dispatch(currentUserShowSuccess(currentUser));\r\n      })\r\n      .catch(e => dispatch(updateProfileError(storableError(e))));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}