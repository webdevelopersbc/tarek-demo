{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\TransactionPage\\\\DisputeModal\\\\DisputeModal.js\";\nimport React from 'react';\nimport { bool, func, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { Form as FinalForm } from 'react-final-form';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { required } from '../../../util/validators';\nimport { FieldTextInput, Form, IconDisputeOrder, Modal, PrimaryButton } from '../../../components';\nimport css from './DisputeModal.module.css';\n\nconst DisputeForm = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      className,\n      rootClassName,\n      disabled,\n      handleSubmit,\n      intl,\n      formId,\n      invalid,\n      disputeSubmitted,\n      disputeError,\n      disputeInProgress\n    } = fieldRenderProps;\n    const errorMessageMaybe = disputeError ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"DisputeModal.disputeSubmitFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }) : null;\n    const classes = classNames(rootClassName || css.formRoot, className);\n    const submitInProgress = disputeInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress || disputeSubmitted;\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.disputeMessage,\n      type: \"textarea\",\n      id: formId ? `${formId}.disputeReason` : 'disputeReason',\n      name: \"disputeReason\",\n      label: intl.formatMessage({\n        id: 'DisputeModal.label'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'DisputeModal.disputePlaceholder'\n      }),\n      validate: required(intl.formatMessage({\n        id: 'DisputeModal.disputeReasonRequired'\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.errorPlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, errorMessageMaybe), /*#__PURE__*/React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: disputeInProgress,\n      disabled: submitDisabled,\n      ready: disputeSubmitted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, intl.formatMessage({\n      id: 'DisputeModal.submit'\n    })));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n})); // Show dispute form\n\n\n_c = DisputeForm;\n\nconst DisputeInfo = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n  className: css.modalTitle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"DisputeModal.title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }\n})), /*#__PURE__*/React.createElement(\"p\", {\n  className: css.modalMessage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"DisputeModal.description\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }\n})), /*#__PURE__*/React.createElement(DisputeForm, {\n  onSubmit: props.onDisputeOrder,\n  disputeSubmitted: props.disputeSubmitted,\n  disputeInProgress: props.disputeInProgress,\n  disputeError: props.disputeError,\n  intl: props.intl,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }\n})); // Show info that dispute form has been sent already.\n\n\n_c2 = DisputeInfo;\n\nconst DisputeSentInfo = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n  className: css.modalTitle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"DisputeModal.sentTitle\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }\n})), /*#__PURE__*/React.createElement(\"p\", {\n  className: css.modalMessage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"DisputeModal.sentMessage\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 7\n  }\n})), /*#__PURE__*/React.createElement(\"p\", {\n  className: css.modalMessage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"DisputeModal.sentNextStep\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }\n}))); // Dispute modal\n\n\n_c3 = DisputeSentInfo;\n\nconst DisputeModal = props => {\n  const {\n    className,\n    rootClassName,\n    id,\n    intl,\n    isOpen,\n    onCloseModal,\n    onManageDisableScrolling,\n    onDisputeOrder,\n    disputeSubmitted,\n    disputeInProgress,\n    disputeError\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    containerClassName: classes,\n    contentClassName: css.modalContent,\n    isOpen: isOpen,\n    onClose: onCloseModal,\n    onManageDisableScrolling: onManageDisableScrolling,\n    usePortal: true,\n    closeButtonMessage: intl.formatMessage({\n      id: 'DisputeModal.close'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconDisputeOrder, {\n    className: css.modalIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), disputeSubmitted ? /*#__PURE__*/React.createElement(DisputeSentInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(DisputeInfo, {\n    onDisputeOrder: onDisputeOrder,\n    disputeSubmitted: disputeSubmitted,\n    disputeInProgress: disputeInProgress,\n    disputeError: disputeError,\n    intl: intl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }));\n};\n\n_c4 = DisputeModal;\nDisputeModal.defaultProps = {\n  className: null,\n  rootClassName: null,\n  isOpen: false,\n  disputeSubmitted: false,\n  disputeInProgress: false,\n  disputeError: null\n};\nDisputeModal.propTypes = {\n  className: string,\n  rootClassName: string,\n  id: string.isRequired,\n  isOpen: bool,\n  intl: intlShape.isRequired,\n  onCloseModal: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onDisputeOrder: func.isRequired,\n  disputeSubmitted: bool,\n  disputeInProgress: bool,\n  disputeError: propTypes.error\n};\nexport default _c5 = injectIntl(DisputeModal);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"DisputeForm\");\n$RefreshReg$(_c2, \"DisputeInfo\");\n$RefreshReg$(_c3, \"DisputeSentInfo\");\n$RefreshReg$(_c4, \"DisputeModal\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/TransactionPage/DisputeModal/DisputeModal.js"],"names":["React","bool","func","string","classNames","Form","FinalForm","FormattedMessage","intlShape","injectIntl","propTypes","required","FieldTextInput","IconDisputeOrder","Modal","PrimaryButton","css","DisputeForm","props","fieldRenderProps","className","rootClassName","disabled","handleSubmit","intl","formId","invalid","disputeSubmitted","disputeError","disputeInProgress","errorMessageMaybe","classes","formRoot","submitInProgress","submitDisabled","disputeMessage","formatMessage","id","errorPlaceholder","submitButton","DisputeInfo","modalTitle","modalMessage","onDisputeOrder","DisputeSentInfo","DisputeModal","isOpen","onCloseModal","onManageDisableScrolling","root","modalContent","modalIcon","defaultProps","isRequired","error"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { bool, func, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { Form as FinalForm } from 'react-final-form';\r\n\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { required } from '../../../util/validators';\r\n\r\nimport { FieldTextInput, Form, IconDisputeOrder, Modal, PrimaryButton } from '../../../components';\r\n\r\nimport css from './DisputeModal.module.css';\r\n\r\nconst DisputeForm = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        className,\r\n        rootClassName,\r\n        disabled,\r\n        handleSubmit,\r\n        intl,\r\n        formId,\r\n        invalid,\r\n        disputeSubmitted,\r\n        disputeError,\r\n        disputeInProgress,\r\n      } = fieldRenderProps;\r\n\r\n      const errorMessageMaybe = disputeError ? (\r\n        <FormattedMessage id=\"DisputeModal.disputeSubmitFailed\" />\r\n      ) : null;\r\n\r\n      const classes = classNames(rootClassName || css.formRoot, className);\r\n      const submitInProgress = disputeInProgress;\r\n      const submitDisabled = invalid || disabled || submitInProgress || disputeSubmitted;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldTextInput\r\n            className={css.disputeMessage}\r\n            type=\"textarea\"\r\n            id={formId ? `${formId}.disputeReason` : 'disputeReason'}\r\n            name=\"disputeReason\"\r\n            label={intl.formatMessage({ id: 'DisputeModal.label' })}\r\n            placeholder={intl.formatMessage({ id: 'DisputeModal.disputePlaceholder' })}\r\n            validate={required(intl.formatMessage({ id: 'DisputeModal.disputeReasonRequired' }))}\r\n          />\r\n          <p className={css.errorPlaceholder}>{errorMessageMaybe}</p>\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={disputeInProgress}\r\n            disabled={submitDisabled}\r\n            ready={disputeSubmitted}\r\n          >\r\n            {intl.formatMessage({ id: 'DisputeModal.submit' })}\r\n          </PrimaryButton>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\n// Show dispute form\r\nconst DisputeInfo = props => (\r\n  <>\r\n    <p className={css.modalTitle}>\r\n      <FormattedMessage id=\"DisputeModal.title\" />\r\n    </p>\r\n    <p className={css.modalMessage}>\r\n      <FormattedMessage id=\"DisputeModal.description\" />\r\n    </p>\r\n    <DisputeForm\r\n      onSubmit={props.onDisputeOrder}\r\n      disputeSubmitted={props.disputeSubmitted}\r\n      disputeInProgress={props.disputeInProgress}\r\n      disputeError={props.disputeError}\r\n      intl={props.intl}\r\n    />\r\n  </>\r\n);\r\n\r\n// Show info that dispute form has been sent already.\r\nconst DisputeSentInfo = props => (\r\n  <>\r\n    <p className={css.modalTitle}>\r\n      <FormattedMessage id=\"DisputeModal.sentTitle\" />\r\n    </p>\r\n    <p className={css.modalMessage}>\r\n      <FormattedMessage id=\"DisputeModal.sentMessage\" />\r\n    </p>\r\n    <p className={css.modalMessage}>\r\n      <FormattedMessage id=\"DisputeModal.sentNextStep\" />\r\n    </p>\r\n  </>\r\n);\r\n\r\n// Dispute modal\r\nconst DisputeModal = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    id,\r\n    intl,\r\n    isOpen,\r\n    onCloseModal,\r\n    onManageDisableScrolling,\r\n    onDisputeOrder,\r\n    disputeSubmitted,\r\n    disputeInProgress,\r\n    disputeError,\r\n  } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  return (\r\n    <Modal\r\n      id={id}\r\n      containerClassName={classes}\r\n      contentClassName={css.modalContent}\r\n      isOpen={isOpen}\r\n      onClose={onCloseModal}\r\n      onManageDisableScrolling={onManageDisableScrolling}\r\n      usePortal\r\n      closeButtonMessage={intl.formatMessage({ id: 'DisputeModal.close' })}\r\n    >\r\n      <IconDisputeOrder className={css.modalIcon} />\r\n      {disputeSubmitted ? (\r\n        <DisputeSentInfo />\r\n      ) : (\r\n        <DisputeInfo\r\n          onDisputeOrder={onDisputeOrder}\r\n          disputeSubmitted={disputeSubmitted}\r\n          disputeInProgress={disputeInProgress}\r\n          disputeError={disputeError}\r\n          intl={intl}\r\n        />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nDisputeModal.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  isOpen: false,\r\n  disputeSubmitted: false,\r\n  disputeInProgress: false,\r\n  disputeError: null,\r\n};\r\n\r\nDisputeModal.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  id: string.isRequired,\r\n  isOpen: bool,\r\n  intl: intlShape.isRequired,\r\n  onCloseModal: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onDisputeOrder: func.isRequired,\r\n  disputeSubmitted: bool,\r\n  disputeInProgress: bool,\r\n  disputeError: propTypes.error,\r\n};\r\n\r\nexport default injectIntl(DisputeModal);\r\n"]},"metadata":{},"sourceType":"module"}