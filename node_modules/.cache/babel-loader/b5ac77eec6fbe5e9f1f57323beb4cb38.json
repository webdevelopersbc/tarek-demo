{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\ListingPage\\\\ListingImageGallery\\\\ListingImageGallery.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ReactImageGallery from 'react-image-gallery';\nimport { propTypes } from '../../../util/types';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { AspectRatioWrapper, Button, IconClose, IconArrowHead, ResponsiveImage } from '../../../components'; // Copied directly from\n// `node_modules/react-image-gallery/styles/css/image-gallery.css`. The\n// copied file is left unedited, and all the overrides are defined in\n// the component CSS file below.\n\nimport './image-gallery.css';\nimport css from './ListingImageGallery.module.css';\nconst IMAGE_GALLERY_OPTIONS = {\n  showPlayButton: false,\n  disableThumbnailScroll: true\n};\n\nconst ListingImageGallery = props => {\n  _s();\n\n  const {\n    intl,\n    rootClassName,\n    className,\n    images,\n    imageVariants,\n    thumbnailVariants\n  } = props;\n  const thumbVariants = thumbnailVariants || imageVariants;\n  const items = images.map((img, i) => {\n    return {\n      // We will only use the image resource, but react-image-gallery\n      // requires the `original` key from each item.\n      original: '',\n      alt: intl.formatMessage({\n        id: 'ListingImageGallery.imageAltText'\n      }, {\n        index: i + 1,\n        count: images.length\n      }),\n      thumbAlt: intl.formatMessage({\n        id: 'ListingImageGallery.imageThumbnailAltText'\n      }, {\n        index: i + 1,\n        count: images.length\n      }),\n      image: img\n    };\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const renderItem = item => {\n    return /*#__PURE__*/React.createElement(AspectRatioWrapper, {\n      width: 1,\n      height: 1,\n      className: isFullscreen ? css.itemWrapperFullscreen : css.itemWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.itemCentering,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ResponsiveImage, {\n      rootClassName: css.item,\n      image: item.image,\n      alt: item.alt,\n      variants: imageVariants,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  const renderThumbInner = item => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ResponsiveImage, {\n      rootClassName: css.thumb,\n      image: item.image,\n      alt: item.thumbAlt,\n      variants: thumbVariants,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const onScreenChange = isFull => {\n    setIsFullscreen(isFull);\n  };\n\n  const renderLeftNav = (onClick, disabled) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: css.navLeft,\n      disabled: disabled,\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.navArrowWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconArrowHead, {\n      direction: \"left\",\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  const renderRightNav = (onClick, disabled) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: css.navRight,\n      disabled: disabled,\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.navArrowWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconArrowHead, {\n      direction: \"right\",\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  const renderFullscreenButton = (onClick, isFullscreen) => {\n    return isFullscreen ? /*#__PURE__*/React.createElement(Button, {\n      onClick: onClick,\n      rootClassName: css.close,\n      title: intl.formatMessage({\n        id: 'ListingImageGallery.closeModalTitle'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.closeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ListingImageGallery.closeModal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(IconClose, {\n      rootClassName: css.closeIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"button\", {\n      className: css.openFullscreen,\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ListingImageGallery.viewImagesButton\",\n      values: {\n        count: images.length\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  if (items.length === 0) {\n    const classes = classNames(rootClassName || css.noImage, className);\n    return /*#__PURE__*/React.createElement(ResponsiveImage, {\n      className: css.noImage,\n      image: null,\n      variants: [],\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const classes = classNames(rootClassName || css.root, className);\n  return /*#__PURE__*/React.createElement(ReactImageGallery, Object.assign({\n    additionalClass: classes,\n    items: items,\n    renderItem: renderItem,\n    renderThumbInner: renderThumbInner,\n    onScreenChange: onScreenChange,\n    renderLeftNav: renderLeftNav,\n    renderRightNav: renderRightNav,\n    renderFullscreenButton: renderFullscreenButton\n  }, IMAGE_GALLERY_OPTIONS, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }));\n};\n\n_s(ListingImageGallery, \"LI0KkFuciCdLvQ6T7dAtFOAXj0Y=\");\n\n_c = ListingImageGallery;\nListingImageGallery.defaultProps = {\n  rootClassName: null,\n  className: null,\n  thumbnailVariants: null\n};\nconst {\n  string,\n  arrayOf\n} = PropTypes;\nListingImageGallery.propTypes = {\n  rootClassName: string,\n  className: string,\n  images: arrayOf(propTypes.image).isRequired,\n  imageVariants: arrayOf(string).isRequired,\n  thumbnailVariants: arrayOf(string),\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c2 = injectIntl(ListingImageGallery);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListingImageGallery\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ListingPage/ListingImageGallery/ListingImageGallery.js"],"names":["React","useState","PropTypes","classNames","ReactImageGallery","propTypes","FormattedMessage","injectIntl","intlShape","AspectRatioWrapper","Button","IconClose","IconArrowHead","ResponsiveImage","css","IMAGE_GALLERY_OPTIONS","showPlayButton","disableThumbnailScroll","ListingImageGallery","props","intl","rootClassName","className","images","imageVariants","thumbnailVariants","thumbVariants","items","map","img","i","original","alt","formatMessage","id","index","count","length","thumbAlt","image","isFullscreen","setIsFullscreen","renderItem","item","itemWrapperFullscreen","itemWrapper","itemCentering","renderThumbInner","thumb","onScreenChange","isFull","renderLeftNav","onClick","disabled","navLeft","navArrowWrapper","renderRightNav","navRight","renderFullscreenButton","close","closeText","closeIcon","openFullscreen","classes","noImage","root","defaultProps","string","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport ReactImageGallery from 'react-image-gallery';\r\n\r\nimport { propTypes } from '../../../util/types';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport {\r\n  AspectRatioWrapper,\r\n  Button,\r\n  IconClose,\r\n  IconArrowHead,\r\n  ResponsiveImage,\r\n} from '../../../components';\r\n\r\n// Copied directly from\r\n// `node_modules/react-image-gallery/styles/css/image-gallery.css`. The\r\n// copied file is left unedited, and all the overrides are defined in\r\n// the component CSS file below.\r\nimport './image-gallery.css';\r\n\r\nimport css from './ListingImageGallery.module.css';\r\n\r\nconst IMAGE_GALLERY_OPTIONS = {\r\n  showPlayButton: false,\r\n  disableThumbnailScroll: true,\r\n};\r\n\r\nconst ListingImageGallery = props => {\r\n  const { intl, rootClassName, className, images, imageVariants, thumbnailVariants } = props;\r\n  const thumbVariants = thumbnailVariants || imageVariants;\r\n  const items = images.map((img, i) => {\r\n    return {\r\n      // We will only use the image resource, but react-image-gallery\r\n      // requires the `original` key from each item.\r\n      original: '',\r\n      alt: intl.formatMessage(\r\n        { id: 'ListingImageGallery.imageAltText' },\r\n        { index: i + 1, count: images.length }\r\n      ),\r\n      thumbAlt: intl.formatMessage(\r\n        { id: 'ListingImageGallery.imageThumbnailAltText' },\r\n        { index: i + 1, count: images.length }\r\n      ),\r\n      image: img,\r\n    };\r\n  });\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  const renderItem = item => {\r\n    return (\r\n      <AspectRatioWrapper\r\n        width={1}\r\n        height={1}\r\n        className={isFullscreen ? css.itemWrapperFullscreen : css.itemWrapper}\r\n      >\r\n        <div className={css.itemCentering}>\r\n          <ResponsiveImage\r\n            rootClassName={css.item}\r\n            image={item.image}\r\n            alt={item.alt}\r\n            variants={imageVariants}\r\n          />\r\n        </div>\r\n      </AspectRatioWrapper>\r\n    );\r\n  };\r\n  const renderThumbInner = item => {\r\n    return (\r\n      <div>\r\n        <ResponsiveImage\r\n          rootClassName={css.thumb}\r\n          image={item.image}\r\n          alt={item.thumbAlt}\r\n          variants={thumbVariants}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onScreenChange = isFull => {\r\n    setIsFullscreen(isFull);\r\n  };\r\n\r\n  const renderLeftNav = (onClick, disabled) => {\r\n    return (\r\n      <button className={css.navLeft} disabled={disabled} onClick={onClick}>\r\n        <div className={css.navArrowWrapper}>\r\n          <IconArrowHead direction=\"left\" size=\"big\" />\r\n        </div>\r\n      </button>\r\n    );\r\n  };\r\n  const renderRightNav = (onClick, disabled) => {\r\n    return (\r\n      <button className={css.navRight} disabled={disabled} onClick={onClick}>\r\n        <div className={css.navArrowWrapper}>\r\n          <IconArrowHead direction=\"right\" size=\"big\" />\r\n        </div>\r\n      </button>\r\n    );\r\n  };\r\n  const renderFullscreenButton = (onClick, isFullscreen) => {\r\n    return isFullscreen ? (\r\n      <Button\r\n        onClick={onClick}\r\n        rootClassName={css.close}\r\n        title={intl.formatMessage({ id: 'ListingImageGallery.closeModalTitle' })}\r\n      >\r\n        <span className={css.closeText}>\r\n          <FormattedMessage id=\"ListingImageGallery.closeModal\" />\r\n        </span>\r\n        <IconClose rootClassName={css.closeIcon} />\r\n      </Button>\r\n    ) : (\r\n      <button className={css.openFullscreen} onClick={onClick}>\r\n        <FormattedMessage\r\n          id=\"ListingImageGallery.viewImagesButton\"\r\n          values={{ count: images.length }}\r\n        />\r\n      </button>\r\n    );\r\n  };\r\n\r\n  if (items.length === 0) {\r\n    const classes = classNames(rootClassName || css.noImage, className);\r\n    return <ResponsiveImage className={css.noImage} image={null} variants={[]} alt=\"\" />;\r\n  }\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  return (\r\n    <ReactImageGallery\r\n      additionalClass={classes}\r\n      items={items}\r\n      renderItem={renderItem}\r\n      renderThumbInner={renderThumbInner}\r\n      onScreenChange={onScreenChange}\r\n      renderLeftNav={renderLeftNav}\r\n      renderRightNav={renderRightNav}\r\n      renderFullscreenButton={renderFullscreenButton}\r\n      {...IMAGE_GALLERY_OPTIONS}\r\n    />\r\n  );\r\n};\r\n\r\nListingImageGallery.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  thumbnailVariants: null,\r\n};\r\n\r\nconst { string, arrayOf } = PropTypes;\r\n\r\nListingImageGallery.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  images: arrayOf(propTypes.image).isRequired,\r\n  imageVariants: arrayOf(string).isRequired,\r\n  thumbnailVariants: arrayOf(string),\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(ListingImageGallery);\r\n"]},"metadata":{},"sourceType":"module"}