{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PasswordChangePage\\\\PasswordChangePage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperAccountSettingsSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, Page, UserNav } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport PasswordChangeForm from './PasswordChangeForm/PasswordChangeForm';\nimport { changePassword, changePasswordClear, resetPassword } from './PasswordChangePage.duck';\nimport css from './PasswordChangePage.module.css';\nexport const PasswordChangePageComponent = props => {\n  const {\n    changePasswordError,\n    changePasswordInProgress,\n    currentUser,\n    onChange,\n    onSubmitChangePassword,\n    onResetPassword,\n    resetPasswordInProgress,\n    resetPasswordError,\n    passwordChanged,\n    scrollingDisabled,\n    intl\n  } = props;\n  const changePasswordForm = currentUser && currentUser.id ? /*#__PURE__*/React.createElement(PasswordChangeForm, {\n    className: css.form,\n    changePasswordError: changePasswordError,\n    currentUser: currentUser,\n    onSubmit: onSubmitChangePassword,\n    onChange: onChange,\n    onResetPassword: onResetPassword,\n    resetPasswordInProgress: resetPasswordInProgress,\n    resetPasswordError: resetPasswordError,\n    inProgress: changePasswordInProgress,\n    ready: passwordChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }) : null;\n  const title = intl.formatMessage({\n    id: 'PasswordChangePage.title'\n  });\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSideNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    currentPage: \"PasswordChangePage\",\n    desktopClassName: css.desktopTopbar,\n    mobileClassName: css.mobileTopbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(UserNav, {\n    selectedPageName: \"PasswordChangePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperAccountSettingsSideNav, {\n    currentTab: \"PasswordChangePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordChangePage.heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  })), changePasswordForm)), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))));\n};\n_c = PasswordChangePageComponent;\nPasswordChangePageComponent.defaultProps = {\n  changePasswordError: null,\n  currentUser: null,\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nconst {\n  bool,\n  func\n} = PropTypes;\nPasswordChangePageComponent.propTypes = {\n  changePasswordError: propTypes.error,\n  changePasswordInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  onChange: func.isRequired,\n  onSubmitChangePassword: func.isRequired,\n  passwordChanged: bool.isRequired,\n  scrollingDisabled: bool.isRequired,\n  resetPasswordInProgress: bool,\n  resetPasswordError: propTypes.error,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  // Topbar needs user info.\n  const {\n    changePasswordError,\n    changePasswordInProgress,\n    passwordChanged,\n    resetPasswordInProgress,\n    resetPasswordError\n  } = state.PasswordChangePage;\n  const {\n    currentUser\n  } = state.user;\n  return {\n    changePasswordError,\n    changePasswordInProgress,\n    currentUser,\n    passwordChanged,\n    scrollingDisabled: isScrollingDisabled(state),\n    resetPasswordInProgress,\n    resetPasswordError\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: () => dispatch(changePasswordClear()),\n  onSubmitChangePassword: values => dispatch(changePassword(values)),\n  onResetPassword: values => dispatch(resetPassword(values))\n});\n\nconst PasswordChangePage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(PasswordChangePageComponent);\nexport default PasswordChangePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordChangePageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PasswordChangePage/PasswordChangePage.js"],"names":["React","PropTypes","compose","connect","FormattedMessage","injectIntl","intlShape","propTypes","isScrollingDisabled","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperAccountSettingsSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","Page","UserNav","TopbarContainer","PasswordChangeForm","changePassword","changePasswordClear","resetPassword","css","PasswordChangePageComponent","props","changePasswordError","changePasswordInProgress","currentUser","onChange","onSubmitChangePassword","onResetPassword","resetPasswordInProgress","resetPasswordError","passwordChanged","scrollingDisabled","intl","changePasswordForm","id","form","title","formatMessage","desktopTopbar","mobileTopbar","content","defaultProps","bool","func","error","isRequired","mapStateToProps","state","PasswordChangePage","user","mapDispatchToProps","dispatch","values"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  LayoutSideNavigation,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperAccountSettingsSideNav,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  Page,\r\n  UserNav,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport PasswordChangeForm from './PasswordChangeForm/PasswordChangeForm';\r\n\r\nimport { changePassword, changePasswordClear, resetPassword } from './PasswordChangePage.duck';\r\nimport css from './PasswordChangePage.module.css';\r\n\r\nexport const PasswordChangePageComponent = props => {\r\n  const {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    currentUser,\r\n    onChange,\r\n    onSubmitChangePassword,\r\n    onResetPassword,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n    passwordChanged,\r\n    scrollingDisabled,\r\n    intl,\r\n  } = props;\r\n\r\n  const changePasswordForm =\r\n    currentUser && currentUser.id ? (\r\n      <PasswordChangeForm\r\n        className={css.form}\r\n        changePasswordError={changePasswordError}\r\n        currentUser={currentUser}\r\n        onSubmit={onSubmitChangePassword}\r\n        onChange={onChange}\r\n        onResetPassword={onResetPassword}\r\n        resetPasswordInProgress={resetPasswordInProgress}\r\n        resetPasswordError={resetPasswordError}\r\n        inProgress={changePasswordInProgress}\r\n        ready={passwordChanged}\r\n      />\r\n    ) : null;\r\n\r\n  const title = intl.formatMessage({ id: 'PasswordChangePage.title' });\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation>\r\n        <LayoutWrapperTopbar>\r\n          <TopbarContainer\r\n            currentPage=\"PasswordChangePage\"\r\n            desktopClassName={css.desktopTopbar}\r\n            mobileClassName={css.mobileTopbar}\r\n          />\r\n          <UserNav selectedPageName=\"PasswordChangePage\" />\r\n        </LayoutWrapperTopbar>\r\n        <LayoutWrapperAccountSettingsSideNav currentTab=\"PasswordChangePage\" />\r\n        <LayoutWrapperMain>\r\n          <div className={css.content}>\r\n            <h1 className={css.title}>\r\n              <FormattedMessage id=\"PasswordChangePage.heading\" />\r\n            </h1>\r\n            {changePasswordForm}\r\n          </div>\r\n        </LayoutWrapperMain>\r\n        <LayoutWrapperFooter>\r\n          <Footer />\r\n        </LayoutWrapperFooter>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPasswordChangePageComponent.defaultProps = {\r\n  changePasswordError: null,\r\n  currentUser: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, func } = PropTypes;\r\n\r\nPasswordChangePageComponent.propTypes = {\r\n  changePasswordError: propTypes.error,\r\n  changePasswordInProgress: bool.isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  onChange: func.isRequired,\r\n  onSubmitChangePassword: func.isRequired,\r\n  passwordChanged: bool.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  // Topbar needs user info.\r\n  const {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    passwordChanged,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  } = state.PasswordChangePage;\r\n  const { currentUser } = state.user;\r\n  return {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    currentUser,\r\n    passwordChanged,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: () => dispatch(changePasswordClear()),\r\n  onSubmitChangePassword: values => dispatch(changePassword(values)),\r\n  onResetPassword: values => dispatch(resetPassword(values)),\r\n});\r\n\r\nconst PasswordChangePage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordChangePageComponent);\r\n\r\nexport default PasswordChangePage;\r\n"]},"metadata":{},"sourceType":"module"}