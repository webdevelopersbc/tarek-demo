{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PasswordRecoveryPage\\\\PasswordRecoveryPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { isPasswordRecoveryEmailNotFoundError } from '../../util/errors';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, InlineTextButton, IconKeys, LayoutSingleColumn, LayoutWrapperMain, LayoutWrapperTopbar, LayoutWrapperFooter, Footer } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport PasswordRecoveryForm from './PasswordRecoveryForm/PasswordRecoveryForm';\nimport { recoverPassword, retypePasswordRecoveryEmail, clearPasswordRecoveryError } from './PasswordRecoveryPage.duck';\nimport css from './PasswordRecoveryPage.module.css';\nexport const PasswordRecoveryPageComponent = props => {\n  const {\n    scrollingDisabled,\n    initialEmail,\n    submittedEmail,\n    recoveryError,\n    recoveryInProgress,\n    passwordRequested,\n    onChange,\n    onSubmitEmail,\n    onRetypeEmail,\n    intl\n  } = props;\n  const title = intl.formatMessage({\n    id: 'PasswordRecoveryPage.title'\n  });\n  const resendEmailLink = /*#__PURE__*/React.createElement(InlineTextButton, {\n    rootClassName: css.helperLink,\n    onClick: () => onSubmitEmail(submittedEmail),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.resendEmailLinkText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n  const fixEmailLink = /*#__PURE__*/React.createElement(InlineTextButton, {\n    rootClassName: css.helperLink,\n    onClick: onRetypeEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.fixEmailLinkText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n  const submitEmailContent = /*#__PURE__*/React.createElement(\"div\", {\n    className: css.submitEmailContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconKeys, {\n    className: css.modalIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.modalTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.forgotPasswordTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.modalMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.forgotPasswordMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PasswordRecoveryForm, {\n    inProgress: recoveryInProgress,\n    onChange: onChange,\n    onSubmit: values => onSubmitEmail(values.email),\n    initialValues: {\n      email: initialEmail\n    },\n    recoveryError: recoveryError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n  const submittedEmailText = passwordRequested ? /*#__PURE__*/React.createElement(\"span\", {\n    className: css.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, initialEmail) : /*#__PURE__*/React.createElement(\"span\", {\n    className: css.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, submittedEmail);\n  const emailSubmittedContent = /*#__PURE__*/React.createElement(\"div\", {\n    className: css.emailSubmittedContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconKeys, {\n    className: css.modalIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.modalTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.emailSubmittedTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.modalMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.emailSubmittedMessage\",\n    values: {\n      submittedEmailText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.bottomWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: css.helperText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, recoveryInProgress ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.resendingEmailInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.resendEmailInfo\",\n    values: {\n      resendEmailLink\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.helperText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.fixEmailInfo\",\n    values: {\n      fixEmailLink\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }))));\n  const genericErrorContent = /*#__PURE__*/React.createElement(\"div\", {\n    className: css.genericErrorContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconKeys, {\n    className: css.modalIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.modalTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.actionFailedTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.modalMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PasswordRecoveryPage.actionFailedMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n  let content;\n\n  if (isPasswordRecoveryEmailNotFoundError(recoveryError)) {\n    content = submitEmailContent;\n  } else if (recoveryError) {\n    content = genericErrorContent;\n  } else if (submittedEmail || passwordRequested) {\n    content = emailSubmittedContent;\n  } else {\n    content = submitEmailContent;\n  }\n\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    className: css.layoutWrapperMain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, content)), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }))));\n};\n_c = PasswordRecoveryPageComponent;\nPasswordRecoveryPageComponent.defaultProps = {\n  sendVerificationEmailError: null,\n  initialEmail: null,\n  submittedEmail: null,\n  recoveryError: null\n};\nconst {\n  bool,\n  func,\n  string\n} = PropTypes;\nPasswordRecoveryPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  initialEmail: string,\n  submittedEmail: string,\n  recoveryError: propTypes.error,\n  recoveryInProgress: bool.isRequired,\n  passwordRequested: bool.isRequired,\n  onChange: func.isRequired,\n  onSubmitEmail: func.isRequired,\n  onRetypeEmail: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    initialEmail,\n    submittedEmail,\n    recoveryError,\n    recoveryInProgress,\n    passwordRequested\n  } = state.PasswordRecoveryPage;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    initialEmail,\n    submittedEmail,\n    recoveryError,\n    recoveryInProgress,\n    passwordRequested\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: () => dispatch(clearPasswordRecoveryError()),\n  onSubmitEmail: email => dispatch(recoverPassword(email)),\n  onRetypeEmail: () => dispatch(retypePasswordRecoveryEmail())\n});\n\nconst PasswordRecoveryPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(PasswordRecoveryPageComponent);\nexport default PasswordRecoveryPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordRecoveryPageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PasswordRecoveryPage/PasswordRecoveryPage.js"],"names":["React","PropTypes","compose","connect","FormattedMessage","injectIntl","intlShape","propTypes","isPasswordRecoveryEmailNotFoundError","isScrollingDisabled","Page","InlineTextButton","IconKeys","LayoutSingleColumn","LayoutWrapperMain","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","TopbarContainer","PasswordRecoveryForm","recoverPassword","retypePasswordRecoveryEmail","clearPasswordRecoveryError","css","PasswordRecoveryPageComponent","props","scrollingDisabled","initialEmail","submittedEmail","recoveryError","recoveryInProgress","passwordRequested","onChange","onSubmitEmail","onRetypeEmail","intl","title","formatMessage","id","resendEmailLink","helperLink","fixEmailLink","submitEmailContent","modalIcon","modalTitle","modalMessage","values","email","submittedEmailText","emailSubmittedContent","bottomWrapper","helperText","genericErrorContent","content","layoutWrapperMain","root","defaultProps","sendVerificationEmailError","bool","func","string","isRequired","error","mapStateToProps","state","PasswordRecoveryPage","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { isPasswordRecoveryEmailNotFoundError } from '../../util/errors';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  Page,\r\n  InlineTextButton,\r\n  IconKeys,\r\n  LayoutSingleColumn,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport PasswordRecoveryForm from './PasswordRecoveryForm/PasswordRecoveryForm';\r\n\r\nimport {\r\n  recoverPassword,\r\n  retypePasswordRecoveryEmail,\r\n  clearPasswordRecoveryError,\r\n} from './PasswordRecoveryPage.duck';\r\nimport css from './PasswordRecoveryPage.module.css';\r\n\r\nexport const PasswordRecoveryPageComponent = props => {\r\n  const {\r\n    scrollingDisabled,\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n    onChange,\r\n    onSubmitEmail,\r\n    onRetypeEmail,\r\n    intl,\r\n  } = props;\r\n\r\n  const title = intl.formatMessage({\r\n    id: 'PasswordRecoveryPage.title',\r\n  });\r\n\r\n  const resendEmailLink = (\r\n    <InlineTextButton rootClassName={css.helperLink} onClick={() => onSubmitEmail(submittedEmail)}>\r\n      <FormattedMessage id=\"PasswordRecoveryPage.resendEmailLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n\r\n  const fixEmailLink = (\r\n    <InlineTextButton rootClassName={css.helperLink} onClick={onRetypeEmail}>\r\n      <FormattedMessage id=\"PasswordRecoveryPage.fixEmailLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n\r\n  const submitEmailContent = (\r\n    <div className={css.submitEmailContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <h1 className={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.forgotPasswordTitle\" />\r\n      </h1>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.forgotPasswordMessage\" />\r\n      </p>\r\n      <PasswordRecoveryForm\r\n        inProgress={recoveryInProgress}\r\n        onChange={onChange}\r\n        onSubmit={values => onSubmitEmail(values.email)}\r\n        initialValues={{ email: initialEmail }}\r\n        recoveryError={recoveryError}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const submittedEmailText = passwordRequested ? (\r\n    <span className={css.email}>{initialEmail}</span>\r\n  ) : (\r\n    <span className={css.email}>{submittedEmail}</span>\r\n  );\r\n\r\n  const emailSubmittedContent = (\r\n    <div className={css.emailSubmittedContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <h1 className={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.emailSubmittedTitle\" />\r\n      </h1>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage\r\n          id=\"PasswordRecoveryPage.emailSubmittedMessage\"\r\n          values={{ submittedEmailText }}\r\n        />\r\n      </p>\r\n      <div className={css.bottomWrapper}>\r\n        <p className={css.helperText}>\r\n          {recoveryInProgress ? (\r\n            <FormattedMessage id=\"PasswordRecoveryPage.resendingEmailInfo\" />\r\n          ) : (\r\n            <FormattedMessage\r\n              id=\"PasswordRecoveryPage.resendEmailInfo\"\r\n              values={{ resendEmailLink }}\r\n            />\r\n          )}\r\n        </p>\r\n        <p className={css.helperText}>\r\n          <FormattedMessage id=\"PasswordRecoveryPage.fixEmailInfo\" values={{ fixEmailLink }} />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const genericErrorContent = (\r\n    <div className={css.genericErrorContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <h1 className={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.actionFailedTitle\" />\r\n      </h1>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.actionFailedMessage\" />\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  let content;\r\n  if (isPasswordRecoveryEmailNotFoundError(recoveryError)) {\r\n    content = submitEmailContent;\r\n  } else if (recoveryError) {\r\n    content = genericErrorContent;\r\n  } else if (submittedEmail || passwordRequested) {\r\n    content = emailSubmittedContent;\r\n  } else {\r\n    content = submitEmailContent;\r\n  }\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSingleColumn>\r\n        <LayoutWrapperTopbar>\r\n          <TopbarContainer />\r\n        </LayoutWrapperTopbar>\r\n        <LayoutWrapperMain className={css.layoutWrapperMain}>\r\n          <div className={css.root}>{content}</div>\r\n        </LayoutWrapperMain>\r\n        <LayoutWrapperFooter>\r\n          <Footer />\r\n        </LayoutWrapperFooter>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPasswordRecoveryPageComponent.defaultProps = {\r\n  sendVerificationEmailError: null,\r\n  initialEmail: null,\r\n  submittedEmail: null,\r\n  recoveryError: null,\r\n};\r\n\r\nconst { bool, func, string } = PropTypes;\r\n\r\nPasswordRecoveryPageComponent.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  initialEmail: string,\r\n  submittedEmail: string,\r\n  recoveryError: propTypes.error,\r\n  recoveryInProgress: bool.isRequired,\r\n  passwordRequested: bool.isRequired,\r\n  onChange: func.isRequired,\r\n  onSubmitEmail: func.isRequired,\r\n  onRetypeEmail: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n  } = state.PasswordRecoveryPage;\r\n  return {\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: () => dispatch(clearPasswordRecoveryError()),\r\n  onSubmitEmail: email => dispatch(recoverPassword(email)),\r\n  onRetypeEmail: () => dispatch(retypePasswordRecoveryEmail()),\r\n});\r\n\r\nconst PasswordRecoveryPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordRecoveryPageComponent);\r\n\r\nexport default PasswordRecoveryPage;\r\n"]},"metadata":{},"sourceType":"module"}