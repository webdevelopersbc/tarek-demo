{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldTextInput\\\\FieldTextInput.js\";\nimport React, { Component } from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError, ExpandingTextarea } from '../../components';\nimport css from './FieldTextInput.module.css';\nconst CONTENT_MAX_LENGTH = 5000;\n\nclass FieldTextInputComponent extends Component {\n  render() {\n    /* eslint-disable no-unused-vars */\n    const {\n      rootClassName,\n      className,\n      inputRootClass,\n      customErrorText,\n      id,\n      label,\n      input,\n      meta,\n      onUnmount,\n      isUncontrolled,\n      inputRef,\n      hideErrorMessage,\n      ...rest\n    } = this.props;\n    /* eslint-enable no-unused-vars */\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const {\n      valid,\n      invalid,\n      touched,\n      error\n    } = meta;\n    const isTextarea = input.type === 'textarea';\n    const errorText = customErrorText || error; // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n\n    const hasError = !!customErrorText || !!(touched && invalid && error);\n    const fieldMeta = {\n      touched: hasError,\n      error: errorText\n    }; // Textarea doesn't need type.\n\n    const {\n      type,\n      ...inputWithoutType\n    } = input; // Uncontrolled input uses defaultValue instead of value.\n\n    const {\n      value: defaultValue,\n      ...inputWithoutValue\n    } = input; // Use inputRef if it is passed as prop.\n\n    const refMaybe = inputRef ? {\n      ref: inputRef\n    } : {};\n    const inputClasses = inputRootClass || classNames(css.input, {\n      [css.inputSuccess]: valid,\n      [css.inputError]: hasError,\n      [css.textarea]: isTextarea\n    });\n    const maxLength = CONTENT_MAX_LENGTH;\n    const inputProps = isTextarea ? {\n      className: inputClasses,\n      id,\n      rows: 1,\n      maxLength,\n      ...refMaybe,\n      ...inputWithoutType,\n      ...rest\n    } : isUncontrolled ? {\n      className: inputClasses,\n      id,\n      type,\n      defaultValue,\n      ...refMaybe,\n      ...inputWithoutValue,\n      ...rest\n    } : {\n      className: inputClasses,\n      id,\n      type,\n      ...refMaybe,\n      ...input,\n      ...rest\n    };\n    const classes = classNames(rootClassName || css.root, className);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, label ? /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 18\n      }\n    }, label) : null, isTextarea ? /*#__PURE__*/React.createElement(ExpandingTextarea, Object.assign({}, inputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    })) : /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 63\n      }\n    })), hideErrorMessage ? null : /*#__PURE__*/React.createElement(ValidationError, {\n      fieldMeta: fieldMeta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 36\n      }\n    }));\n  }\n\n}\n\nFieldTextInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inputRootClass: null,\n  onUnmount: null,\n  customErrorText: null,\n  id: null,\n  label: null,\n  isUncontrolled: false,\n  inputRef: null\n};\nFieldTextInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inputRootClass: string,\n  onUnmount: func,\n  // Error message that can be manually passed to input field,\n  // overrides default validation message\n  customErrorText: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  // Uncontrolled input uses defaultValue prop, but doesn't pass value from form to the field.\n  // https://reactjs.org/docs/uncontrolled-components.html#default-values\n  isUncontrolled: bool,\n  // a ref object passed for input element.\n  inputRef: object,\n  // Generated by final-form's Field component\n  input: shape({\n    onChange: func.isRequired,\n    // Either 'textarea' or something that is passed to the input element\n    type: string.isRequired\n  }).isRequired,\n  meta: object.isRequired\n};\n\nclass FieldTextInput extends Component {\n  componentWillUnmount() {\n    // Unmounting happens too late if it is done inside Field component\n    // (Then Form has already registered its (new) fields and\n    // changing the value without corresponding field is prohibited in Final Form\n    if (this.props.onUnmount) {\n      this.props.onUnmount();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Field, Object.assign({\n      component: FieldTextInputComponent\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nexport default FieldTextInput;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldTextInput/FieldTextInput.js"],"names":["React","Component","bool","func","object","shape","string","Field","classNames","ValidationError","ExpandingTextarea","css","CONTENT_MAX_LENGTH","FieldTextInputComponent","render","rootClassName","className","inputRootClass","customErrorText","id","label","input","meta","onUnmount","isUncontrolled","inputRef","hideErrorMessage","rest","props","Error","valid","invalid","touched","error","isTextarea","type","errorText","hasError","fieldMeta","inputWithoutType","value","defaultValue","inputWithoutValue","refMaybe","ref","inputClasses","inputSuccess","inputError","textarea","maxLength","inputProps","rows","classes","root","defaultProps","propTypes","onChange","isRequired","FieldTextInput","componentWillUnmount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { bool, func, object, shape, string } from 'prop-types';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport { ValidationError, ExpandingTextarea } from '../../components';\r\n\r\nimport css from './FieldTextInput.module.css';\r\n\r\nconst CONTENT_MAX_LENGTH = 5000;\r\n\r\nclass FieldTextInputComponent extends Component {\r\n  render() {\r\n    /* eslint-disable no-unused-vars */\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      inputRootClass,\r\n      customErrorText,\r\n      id,\r\n      label,\r\n      input,\r\n      meta,\r\n      onUnmount,\r\n      isUncontrolled,\r\n      inputRef,\r\n      hideErrorMessage,\r\n      ...rest\r\n    } = this.props;\r\n    /* eslint-enable no-unused-vars */\r\n\r\n    if (label && !id) {\r\n      throw new Error('id required when a label is given');\r\n    }\r\n\r\n    const { valid, invalid, touched, error } = meta;\r\n    const isTextarea = input.type === 'textarea';\r\n\r\n    const errorText = customErrorText || error;\r\n\r\n    // Error message and input error styles are only shown if the\r\n    // field has been touched and the validation has failed.\r\n    const hasError = !!customErrorText || !!(touched && invalid && error);\r\n\r\n    const fieldMeta = { touched: hasError, error: errorText };\r\n\r\n    // Textarea doesn't need type.\r\n    const { type, ...inputWithoutType } = input;\r\n    // Uncontrolled input uses defaultValue instead of value.\r\n    const { value: defaultValue, ...inputWithoutValue } = input;\r\n    // Use inputRef if it is passed as prop.\r\n    const refMaybe = inputRef ? { ref: inputRef } : {};\r\n\r\n    const inputClasses =\r\n      inputRootClass ||\r\n      classNames(css.input, {\r\n        [css.inputSuccess]: valid,\r\n        [css.inputError]: hasError,\r\n        [css.textarea]: isTextarea,\r\n      });\r\n    const maxLength = CONTENT_MAX_LENGTH;\r\n    const inputProps = isTextarea\r\n      ? {\r\n          className: inputClasses,\r\n          id,\r\n          rows: 1,\r\n          maxLength,\r\n          ...refMaybe,\r\n          ...inputWithoutType,\r\n          ...rest,\r\n        }\r\n      : isUncontrolled\r\n      ? {\r\n          className: inputClasses,\r\n          id,\r\n          type,\r\n          defaultValue,\r\n          ...refMaybe,\r\n          ...inputWithoutValue,\r\n          ...rest,\r\n        }\r\n      : { className: inputClasses, id, type, ...refMaybe, ...input, ...rest };\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    return (\r\n      <div className={classes}>\r\n        {label ? <label htmlFor={id}>{label}</label> : null}\r\n        {isTextarea ? <ExpandingTextarea {...inputProps} /> : <input {...inputProps} />}\r\n        {hideErrorMessage ? null : <ValidationError fieldMeta={fieldMeta} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFieldTextInputComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  inputRootClass: null,\r\n  onUnmount: null,\r\n  customErrorText: null,\r\n  id: null,\r\n  label: null,\r\n  isUncontrolled: false,\r\n  inputRef: null,\r\n};\r\n\r\nFieldTextInputComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  inputRootClass: string,\r\n\r\n  onUnmount: func,\r\n\r\n  // Error message that can be manually passed to input field,\r\n  // overrides default validation message\r\n  customErrorText: string,\r\n\r\n  // Label is optional, but if it is given, an id is also required so\r\n  // the label can reference the input in the `for` attribute\r\n  id: string,\r\n  label: string,\r\n\r\n  // Uncontrolled input uses defaultValue prop, but doesn't pass value from form to the field.\r\n  // https://reactjs.org/docs/uncontrolled-components.html#default-values\r\n  isUncontrolled: bool,\r\n  // a ref object passed for input element.\r\n  inputRef: object,\r\n\r\n  // Generated by final-form's Field component\r\n  input: shape({\r\n    onChange: func.isRequired,\r\n    // Either 'textarea' or something that is passed to the input element\r\n    type: string.isRequired,\r\n  }).isRequired,\r\n  meta: object.isRequired,\r\n};\r\n\r\nclass FieldTextInput extends Component {\r\n  componentWillUnmount() {\r\n    // Unmounting happens too late if it is done inside Field component\r\n    // (Then Form has already registered its (new) fields and\r\n    // changing the value without corresponding field is prohibited in Final Form\r\n    if (this.props.onUnmount) {\r\n      this.props.onUnmount();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Field component={FieldTextInputComponent} {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default FieldTextInput;\r\n"]},"metadata":{},"sourceType":"module"}