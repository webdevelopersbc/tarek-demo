{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\PriceFilterForm\\\\PriceFilterForm.js\";\nimport React from 'react';\nimport { bool, func, number, object, string } from 'prop-types';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { Field, Form as FinalForm, FormSpy } from 'react-final-form';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { Form, RangeSlider } from '../../../components';\nimport css from './PriceFilterForm.module.css';\nconst DEBOUNCE_WAIT_TIME = 400; // Helper function to parse value for min handle\n// Value needs to be between slider's minimum value and current maximum value\n\nconst parseMin = (min, currentMax) => value => {\n  const parsedValue = Number.parseInt(value, 10);\n\n  if (isNaN(parsedValue)) {\n    return '';\n  }\n\n  return parsedValue < min ? min : parsedValue > currentMax ? currentMax : parsedValue;\n}; // Helper function to parse value for max handle\n// Value needs to be between slider's max value and current minimum value\n\n\nconst parseMax = (max, currentMin) => value => {\n  const parsedValue = Number.parseInt(value, 10);\n\n  if (isNaN(parsedValue)) {\n    return '';\n  }\n\n  return parsedValue < currentMin ? currentMin : parsedValue > max ? max : parsedValue;\n}; // PriceFilterForm component\n\n\nconst PriceFilterFormComponent = props => {\n  const {\n    liveEdit,\n    onChange,\n    onSubmit,\n    onCancel,\n    onClear,\n    ...rest\n  } = props;\n\n  if (liveEdit && !onChange) {\n    throw new Error('PriceFilterForm: if liveEdit is true you need to provide onChange function');\n  }\n\n  if (!liveEdit && !(onCancel && onClear && onSubmit)) {\n    throw new Error('PriceFilterForm: if liveEdit is false you need to provide onCancel, onClear, and onSubmit functions');\n  }\n\n  const handleChange = debounce(formState => {\n    if (formState.dirty) {\n      const {\n        minPrice,\n        maxPrice,\n        ...restValues\n      } = formState.values;\n      onChange({\n        minPrice: minPrice === '' ? rest.min : minPrice,\n        maxPrice: maxPrice === '' ? rest.max : maxPrice,\n        ...restValues\n      });\n    }\n  }, DEBOUNCE_WAIT_TIME, {\n    leading: false,\n    trailing: true\n  });\n\n  const handleSubmit = values => {\n    const {\n      minPrice,\n      maxPrice,\n      ...restValues\n    } = values;\n    return onSubmit({\n      minPrice: minPrice === '' ? rest.min : minPrice,\n      maxPrice: maxPrice === '' ? rest.max : maxPrice,\n      ...restValues\n    });\n  };\n\n  const formCallbacks = liveEdit ? {\n    onSubmit: () => null\n  } : {\n    onSubmit: handleSubmit,\n    onCancel,\n    onClear\n  };\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, rest, formCallbacks, {\n    render: formRenderProps => {\n      const {\n        form,\n        handleSubmit,\n        id,\n        showAsPopup,\n        onClear,\n        onCancel,\n        isOpen,\n        isInSideBar,\n        contentRef,\n        style,\n        intl,\n        values,\n        min,\n        max,\n        step,\n        children\n      } = formRenderProps;\n      const {\n        minPrice: minPriceRaw,\n        maxPrice: maxPriceRaw\n      } = values;\n      const minPrice = typeof minPriceRaw !== 'string' ? minPriceRaw : min;\n      const maxPrice = typeof maxPriceRaw !== 'string' ? maxPriceRaw : max;\n\n      const handleCancel = () => {\n        // reset the final form to initialValues\n        form.reset();\n        onCancel();\n      };\n\n      const clear = intl.formatMessage({\n        id: 'PriceFilterForm.clear'\n      });\n      const cancel = intl.formatMessage({\n        id: 'PriceFilterForm.cancel'\n      });\n      const submit = intl.formatMessage({\n        id: 'PriceFilterForm.submit'\n      });\n      const classes = classNames(css.root, {\n        [css.popup]: showAsPopup,\n        [css.isOpenAsPopup]: showAsPopup && isOpen,\n        [css.plain]: !showAsPopup,\n        [css.isOpen]: !showAsPopup && isOpen\n      });\n      return /*#__PURE__*/React.createElement(Form, {\n        className: classes,\n        onSubmit: handleSubmit,\n        tabIndex: \"0\",\n        contentRef: contentRef,\n        style: {\n          minWidth: '300px',\n          ...style\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: css.contentWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, showAsPopup ? /*#__PURE__*/React.createElement(\"span\", {\n        className: css.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"PriceFilterForm.label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: css.inputsWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        className: classNames(css.minPrice, {\n          [css.priceInSidebar]: isInSideBar\n        }),\n        id: `${id}.minPrice`,\n        name: \"minPrice\",\n        component: \"input\",\n        type: \"number\",\n        placeholder: min,\n        min: min,\n        max: max,\n        step: step,\n        parse: parseMin(min, maxPrice),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: css.priceSeparator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, \"-\"), /*#__PURE__*/React.createElement(Field, {\n        className: classNames(css.maxPrice, {\n          [css.priceInSidebar]: isInSideBar\n        }),\n        id: `${id}.maxPrice`,\n        name: \"maxPrice\",\n        component: \"input\",\n        type: \"number\",\n        placeholder: max,\n        min: min,\n        max: max,\n        step: step,\n        parse: parseMax(max, minPrice),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: css.sliderWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(RangeSlider, {\n        min: min,\n        max: max,\n        step: step,\n        handles: [minPrice, maxPrice],\n        onChange: handles => {\n          form.change('minPrice', handles[0]);\n          form.change('maxPrice', handles[1]);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      })), liveEdit ? /*#__PURE__*/React.createElement(FormSpy, {\n        onChange: handleChange,\n        subscription: {\n          values: true,\n          dirty: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        className: css.buttonsWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: css.clearButton,\n        type: \"button\",\n        onClick: onClear,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, clear), /*#__PURE__*/React.createElement(\"button\", {\n        className: css.cancelButton,\n        type: \"button\",\n        onClick: handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, cancel), /*#__PURE__*/React.createElement(\"button\", {\n        className: css.submitButton,\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, submit)), children);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }));\n};\n\n_c = PriceFilterFormComponent;\nPriceFilterFormComponent.defaultProps = {\n  liveEdit: false,\n  showAsPopup: false,\n  isOpen: false,\n  contentRef: null,\n  style: null,\n  min: 0,\n  step: 1,\n  onCancel: null,\n  onChange: null,\n  onClear: null,\n  onSubmit: null\n};\nPriceFilterFormComponent.propTypes = {\n  id: string.isRequired,\n  liveEdit: bool,\n  showAsPopup: bool,\n  onCancel: func,\n  onChange: func,\n  onClear: func,\n  onSubmit: func,\n  isOpen: bool,\n  contentRef: func,\n  style: object,\n  min: number.isRequired,\n  max: number.isRequired,\n  step: number,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nconst PriceFilterForm = injectIntl(PriceFilterFormComponent);\n_c2 = PriceFilterForm;\nexport default PriceFilterForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceFilterFormComponent\");\n$RefreshReg$(_c2, \"PriceFilterForm\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/PriceFilterForm/PriceFilterForm.js"],"names":["React","bool","func","number","object","string","classNames","debounce","Field","Form","FinalForm","FormSpy","FormattedMessage","injectIntl","intlShape","RangeSlider","css","DEBOUNCE_WAIT_TIME","parseMin","min","currentMax","value","parsedValue","Number","parseInt","isNaN","parseMax","max","currentMin","PriceFilterFormComponent","props","liveEdit","onChange","onSubmit","onCancel","onClear","rest","Error","handleChange","formState","dirty","minPrice","maxPrice","restValues","values","leading","trailing","handleSubmit","formCallbacks","formRenderProps","form","id","showAsPopup","isOpen","isInSideBar","contentRef","style","intl","step","children","minPriceRaw","maxPriceRaw","handleCancel","reset","clear","formatMessage","cancel","submit","classes","root","popup","isOpenAsPopup","plain","minWidth","contentWrapper","label","inputsWrapper","priceInSidebar","priceSeparator","sliderWrapper","handles","change","buttonsWrapper","clearButton","cancelButton","submitButton","defaultProps","propTypes","isRequired","PriceFilterForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { bool, func, number, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport debounce from 'lodash/debounce';\r\nimport { Field, Form as FinalForm, FormSpy } from 'react-final-form';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\n\r\nimport { Form, RangeSlider } from '../../../components';\r\n\r\nimport css from './PriceFilterForm.module.css';\r\n\r\nconst DEBOUNCE_WAIT_TIME = 400;\r\n\r\n// Helper function to parse value for min handle\r\n// Value needs to be between slider's minimum value and current maximum value\r\nconst parseMin = (min, currentMax) => value => {\r\n  const parsedValue = Number.parseInt(value, 10);\r\n  if (isNaN(parsedValue)) {\r\n    return '';\r\n  }\r\n  return parsedValue < min ? min : parsedValue > currentMax ? currentMax : parsedValue;\r\n};\r\n\r\n// Helper function to parse value for max handle\r\n// Value needs to be between slider's max value and current minimum value\r\nconst parseMax = (max, currentMin) => value => {\r\n  const parsedValue = Number.parseInt(value, 10);\r\n  if (isNaN(parsedValue)) {\r\n    return '';\r\n  }\r\n  return parsedValue < currentMin ? currentMin : parsedValue > max ? max : parsedValue;\r\n};\r\n\r\n// PriceFilterForm component\r\nconst PriceFilterFormComponent = props => {\r\n  const { liveEdit, onChange, onSubmit, onCancel, onClear, ...rest } = props;\r\n\r\n  if (liveEdit && !onChange) {\r\n    throw new Error('PriceFilterForm: if liveEdit is true you need to provide onChange function');\r\n  }\r\n\r\n  if (!liveEdit && !(onCancel && onClear && onSubmit)) {\r\n    throw new Error(\r\n      'PriceFilterForm: if liveEdit is false you need to provide onCancel, onClear, and onSubmit functions'\r\n    );\r\n  }\r\n\r\n  const handleChange = debounce(\r\n    formState => {\r\n      if (formState.dirty) {\r\n        const { minPrice, maxPrice, ...restValues } = formState.values;\r\n        onChange({\r\n          minPrice: minPrice === '' ? rest.min : minPrice,\r\n          maxPrice: maxPrice === '' ? rest.max : maxPrice,\r\n          ...restValues,\r\n        });\r\n      }\r\n    },\r\n    DEBOUNCE_WAIT_TIME,\r\n    { leading: false, trailing: true }\r\n  );\r\n\r\n  const handleSubmit = values => {\r\n    const { minPrice, maxPrice, ...restValues } = values;\r\n    return onSubmit({\r\n      minPrice: minPrice === '' ? rest.min : minPrice,\r\n      maxPrice: maxPrice === '' ? rest.max : maxPrice,\r\n      ...restValues,\r\n    });\r\n  };\r\n\r\n  const formCallbacks = liveEdit\r\n    ? { onSubmit: () => null }\r\n    : { onSubmit: handleSubmit, onCancel, onClear };\r\n  return (\r\n    <FinalForm\r\n      {...rest}\r\n      {...formCallbacks}\r\n      render={formRenderProps => {\r\n        const {\r\n          form,\r\n          handleSubmit,\r\n          id,\r\n          showAsPopup,\r\n          onClear,\r\n          onCancel,\r\n          isOpen,\r\n          isInSideBar,\r\n          contentRef,\r\n          style,\r\n          intl,\r\n          values,\r\n          min,\r\n          max,\r\n          step,\r\n          children,\r\n        } = formRenderProps;\r\n        const { minPrice: minPriceRaw, maxPrice: maxPriceRaw } = values;\r\n        const minPrice = typeof minPriceRaw !== 'string' ? minPriceRaw : min;\r\n        const maxPrice = typeof maxPriceRaw !== 'string' ? maxPriceRaw : max;\r\n\r\n        const handleCancel = () => {\r\n          // reset the final form to initialValues\r\n          form.reset();\r\n          onCancel();\r\n        };\r\n\r\n        const clear = intl.formatMessage({ id: 'PriceFilterForm.clear' });\r\n        const cancel = intl.formatMessage({ id: 'PriceFilterForm.cancel' });\r\n        const submit = intl.formatMessage({ id: 'PriceFilterForm.submit' });\r\n\r\n        const classes = classNames(css.root, {\r\n          [css.popup]: showAsPopup,\r\n          [css.isOpenAsPopup]: showAsPopup && isOpen,\r\n          [css.plain]: !showAsPopup,\r\n          [css.isOpen]: !showAsPopup && isOpen,\r\n        });\r\n\r\n        return (\r\n          <Form\r\n            className={classes}\r\n            onSubmit={handleSubmit}\r\n            tabIndex=\"0\"\r\n            contentRef={contentRef}\r\n            style={{ minWidth: '300px', ...style }}\r\n          >\r\n            <div className={css.contentWrapper}>\r\n              {showAsPopup ? (\r\n                <span className={css.label}>\r\n                  <FormattedMessage id=\"PriceFilterForm.label\" />\r\n                </span>\r\n              ) : null}\r\n              <div className={css.inputsWrapper}>\r\n                <Field\r\n                  className={classNames(css.minPrice, { [css.priceInSidebar]: isInSideBar })}\r\n                  id={`${id}.minPrice`}\r\n                  name=\"minPrice\"\r\n                  component=\"input\"\r\n                  type=\"number\"\r\n                  placeholder={min}\r\n                  min={min}\r\n                  max={max}\r\n                  step={step}\r\n                  parse={parseMin(min, maxPrice)}\r\n                />\r\n                <span className={css.priceSeparator}>-</span>\r\n                <Field\r\n                  className={classNames(css.maxPrice, { [css.priceInSidebar]: isInSideBar })}\r\n                  id={`${id}.maxPrice`}\r\n                  name=\"maxPrice\"\r\n                  component=\"input\"\r\n                  type=\"number\"\r\n                  placeholder={max}\r\n                  min={min}\r\n                  max={max}\r\n                  step={step}\r\n                  parse={parseMax(max, minPrice)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className={css.sliderWrapper}>\r\n              <RangeSlider\r\n                min={min}\r\n                max={max}\r\n                step={step}\r\n                handles={[minPrice, maxPrice]}\r\n                onChange={handles => {\r\n                  form.change('minPrice', handles[0]);\r\n                  form.change('maxPrice', handles[1]);\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            {liveEdit ? (\r\n              <FormSpy onChange={handleChange} subscription={{ values: true, dirty: true }} />\r\n            ) : (\r\n              <div className={css.buttonsWrapper}>\r\n                <button className={css.clearButton} type=\"button\" onClick={onClear}>\r\n                  {clear}\r\n                </button>\r\n                <button className={css.cancelButton} type=\"button\" onClick={handleCancel}>\r\n                  {cancel}\r\n                </button>\r\n                <button className={css.submitButton} type=\"submit\">\r\n                  {submit}\r\n                </button>\r\n              </div>\r\n            )}\r\n            {children}\r\n          </Form>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nPriceFilterFormComponent.defaultProps = {\r\n  liveEdit: false,\r\n  showAsPopup: false,\r\n  isOpen: false,\r\n  contentRef: null,\r\n  style: null,\r\n  min: 0,\r\n  step: 1,\r\n  onCancel: null,\r\n  onChange: null,\r\n  onClear: null,\r\n  onSubmit: null,\r\n};\r\n\r\nPriceFilterFormComponent.propTypes = {\r\n  id: string.isRequired,\r\n  liveEdit: bool,\r\n  showAsPopup: bool,\r\n  onCancel: func,\r\n  onChange: func,\r\n  onClear: func,\r\n  onSubmit: func,\r\n  isOpen: bool,\r\n  contentRef: func,\r\n  style: object,\r\n  min: number.isRequired,\r\n  max: number.isRequired,\r\n  step: number,\r\n\r\n  // form injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst PriceFilterForm = injectIntl(PriceFilterFormComponent);\r\n\r\nexport default PriceFilterForm;\r\n"]},"metadata":{},"sourceType":"module"}