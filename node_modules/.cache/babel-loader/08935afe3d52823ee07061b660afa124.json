{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PasswordResetPage\\\\PasswordResetForm\\\\PasswordResetForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport * as validators from '../../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './PasswordResetForm.module.css';\n\nconst PasswordResetFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      rootClassName,\n      className,\n      formId,\n      handleSubmit,\n      inProgress,\n      intl,\n      invalid\n    } = fieldRenderProps; // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'PasswordResetForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'PasswordResetForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordRequired'\n    });\n    const passwordMinLengthMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordTooShort'\n    }, {\n      minLength: validators.PASSWORD_MIN_LENGTH\n    });\n    const passwordMaxLengthMessage = intl.formatMessage({\n      id: 'PasswordResetForm.passwordTooLong'\n    }, {\n      maxLength: validators.PASSWORD_MAX_LENGTH\n    });\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n    const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? `${formId}.password` : 'password',\n      name: \"password\",\n      autoComplete: \"new-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetForm.submitButtonText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    })));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}));\n\n_c = PasswordResetFormComponent;\nPasswordResetFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  formId: null\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nPasswordResetFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  formId: string\n};\nconst PasswordResetForm = compose(injectIntl)(PasswordResetFormComponent);\nPasswordResetForm.displayName = 'PasswordResetForm';\nexport default PasswordResetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordResetFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PasswordResetPage/PasswordResetForm/PasswordResetForm.js"],"names":["React","PropTypes","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","validators","PrimaryButton","FieldTextInput","css","PasswordResetFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","intl","invalid","passwordLabel","formatMessage","id","passwordPlaceholder","passwordRequiredMessage","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordRequired","requiredStringNoTrim","passwordMinLength","passwordMaxLength","classes","root","submitInProgress","submitDisabled","password","composeValidators","defaultProps","string","bool","propTypes","isRequired","PasswordResetForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './PasswordResetForm.module.css';\r\n\r\nconst PasswordResetFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        rootClassName,\r\n        className,\r\n        formId,\r\n        handleSubmit,\r\n        inProgress,\r\n        intl,\r\n        invalid,\r\n      } = fieldRenderProps;\r\n\r\n      // password\r\n      const passwordLabel = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordLabel',\r\n      });\r\n      const passwordPlaceholder = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordPlaceholder',\r\n      });\r\n      const passwordRequiredMessage = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordRequired',\r\n      });\r\n      const passwordMinLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'PasswordResetForm.passwordTooShort',\r\n        },\r\n        {\r\n          minLength: validators.PASSWORD_MIN_LENGTH,\r\n        }\r\n      );\r\n      const passwordMaxLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'PasswordResetForm.passwordTooLong',\r\n        },\r\n        {\r\n          maxLength: validators.PASSWORD_MAX_LENGTH,\r\n        }\r\n      );\r\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n      const passwordMinLength = validators.minLength(\r\n        passwordMinLengthMessage,\r\n        validators.PASSWORD_MIN_LENGTH\r\n      );\r\n      const passwordMaxLength = validators.maxLength(\r\n        passwordMaxLengthMessage,\r\n        validators.PASSWORD_MAX_LENGTH\r\n      );\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = invalid || submitInProgress;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldTextInput\r\n            className={css.password}\r\n            type=\"password\"\r\n            id={formId ? `${formId}.password` : 'password'}\r\n            name=\"password\"\r\n            autoComplete=\"new-password\"\r\n            label={passwordLabel}\r\n            placeholder={passwordPlaceholder}\r\n            validate={validators.composeValidators(\r\n              passwordRequired,\r\n              passwordMinLength,\r\n              passwordMaxLength\r\n            )}\r\n          />\r\n          <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n            <FormattedMessage id=\"PasswordResetForm.submitButtonText\" />\r\n          </PrimaryButton>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nPasswordResetFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  inProgress: false,\r\n  formId: null,\r\n};\r\n\r\nconst { string, bool } = PropTypes;\r\n\r\nPasswordResetFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n  formId: string,\r\n};\r\n\r\nconst PasswordResetForm = compose(injectIntl)(PasswordResetFormComponent);\r\nPasswordResetForm.displayName = 'PasswordResetForm';\r\n\r\nexport default PasswordResetForm;\r\n"]},"metadata":{},"sourceType":"module"}