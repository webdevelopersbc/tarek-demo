{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldDateInput\\\\FieldDateInput.js\";\n\n/**\r\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\r\n *\r\n * NOTE: If you are using this component inside BookingDatesForm,\r\n * you should convert value.date to start date and end date before submitting it to API\r\n */\nimport React, { Component } from 'react';\nimport { bool, object, string, arrayOf } from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\nimport { propTypes } from '../../util/types';\nimport DateInput from './DateInput';\nimport css from './FieldDateInput.module.css';\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nclass FieldDateInputComponent extends Component {\n  render() {\n    const {\n      className,\n      rootClassName,\n      id,\n      label,\n      input,\n      meta,\n      useMobileMargins,\n      ...rest\n    } = this.props;\n\n    if (label && !id) {\n      throw new Error('id required when a label is given');\n    }\n\n    const {\n      touched,\n      invalid,\n      error\n    } = meta;\n    const value = input.value; // If startDate is valid label changes color and bottom border changes color too\n\n    const dateIsValid = value && value.date instanceof Date; // Error message and input error styles are only shown if the\n    // field has been touched and the validation has failed.\n\n    const hasError = touched && invalid && error;\n    const inputClasses = classNames({\n      [css.pickerSuccess]: dateIsValid,\n      [css.pickerError]: hasError\n    });\n    const {\n      onBlur,\n      onFocus,\n      type,\n      checked,\n      ...restOfInput\n    } = input;\n    const inputProps = {\n      onBlur: input.onBlur,\n      onFocus: input.onFocus,\n      useMobileMargins,\n      id,\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH,\n      ...restOfInput,\n      ...rest\n    };\n    const classes = classNames(rootClassName || css.fieldRoot, className);\n    const errorClasses = classNames({\n      [css.mobileMargins]: useMobileMargins\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, label ? /*#__PURE__*/React.createElement(\"label\", {\n      className: classNames({\n        [css.mobileMargins]: useMobileMargins\n      }),\n      htmlFor: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, label) : null, /*#__PURE__*/React.createElement(DateInput, Object.assign({\n      className: inputClasses\n    }, inputProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(ValidationError, {\n      className: errorClasses,\n      fieldMeta: meta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nFieldDateInputComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  useMobileMargins: false,\n  id: null,\n  label: null,\n  placeholderText: null,\n  timeSlots: null\n};\nFieldDateInputComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  useMobileMargins: bool,\n  id: string,\n  label: string,\n  placeholderText: string,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  input: object.isRequired,\n  meta: object.isRequired\n};\n\nconst FieldDateInput = props => {\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    component: FieldDateInputComponent\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c = FieldDateInput;\nexport { DateInput };\nexport default FieldDateInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FieldDateInput\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldDateInput/FieldDateInput.js"],"names":["React","Component","bool","object","string","arrayOf","Field","classNames","ValidationError","propTypes","DateInput","css","MAX_MOBILE_SCREEN_WIDTH","FieldDateInputComponent","render","className","rootClassName","id","label","input","meta","useMobileMargins","rest","props","Error","touched","invalid","error","value","dateIsValid","date","Date","hasError","inputClasses","pickerSuccess","pickerError","onBlur","onFocus","type","checked","restOfInput","inputProps","readOnly","window","innerWidth","classes","fieldRoot","errorClasses","mobileMargins","defaultProps","placeholderText","timeSlots","timeSlot","isRequired","FieldDateInput"],"mappings":"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","sourcesContent":["/**\r\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\r\n *\r\n * NOTE: If you are using this component inside BookingDatesForm,\r\n * you should convert value.date to start date and end date before submitting it to API\r\n */\r\nimport React, { Component } from 'react';\r\nimport { bool, object, string, arrayOf } from 'prop-types';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport { ValidationError } from '../../components';\r\nimport { propTypes } from '../../util/types';\r\n\r\nimport DateInput from './DateInput';\r\nimport css from './FieldDateInput.module.css';\r\n\r\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\r\n\r\nclass FieldDateInputComponent extends Component {\r\n  render() {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      id,\r\n      label,\r\n      input,\r\n      meta,\r\n      useMobileMargins,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    if (label && !id) {\r\n      throw new Error('id required when a label is given');\r\n    }\r\n\r\n    const { touched, invalid, error } = meta;\r\n    const value = input.value;\r\n\r\n    // If startDate is valid label changes color and bottom border changes color too\r\n    const dateIsValid = value && value.date instanceof Date;\r\n    // Error message and input error styles are only shown if the\r\n    // field has been touched and the validation has failed.\r\n    const hasError = touched && invalid && error;\r\n\r\n    const inputClasses = classNames({\r\n      [css.pickerSuccess]: dateIsValid,\r\n      [css.pickerError]: hasError,\r\n    });\r\n\r\n    const { onBlur, onFocus, type, checked, ...restOfInput } = input;\r\n    const inputProps = {\r\n      onBlur: input.onBlur,\r\n      onFocus: input.onFocus,\r\n      useMobileMargins,\r\n      id,\r\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH,\r\n      ...restOfInput,\r\n      ...rest,\r\n    };\r\n    const classes = classNames(rootClassName || css.fieldRoot, className);\r\n    const errorClasses = classNames({ [css.mobileMargins]: useMobileMargins });\r\n\r\n    return (\r\n      <div className={classes}>\r\n        {label ? (\r\n          <label className={classNames({ [css.mobileMargins]: useMobileMargins })} htmlFor={id}>\r\n            {label}\r\n          </label>\r\n        ) : null}\r\n        <DateInput className={inputClasses} {...inputProps} />\r\n        <ValidationError className={errorClasses} fieldMeta={meta} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFieldDateInputComponent.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  useMobileMargins: false,\r\n  id: null,\r\n  label: null,\r\n  placeholderText: null,\r\n  timeSlots: null,\r\n};\r\n\r\nFieldDateInputComponent.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  useMobileMargins: bool,\r\n  id: string,\r\n  label: string,\r\n  placeholderText: string,\r\n  timeSlots: arrayOf(propTypes.timeSlot),\r\n  input: object.isRequired,\r\n  meta: object.isRequired,\r\n};\r\n\r\nconst FieldDateInput = props => {\r\n  return <Field component={FieldDateInputComponent} {...props} />;\r\n};\r\n\r\nexport { DateInput };\r\nexport default FieldDateInput;\r\n"]},"metadata":{},"sourceType":"module"}