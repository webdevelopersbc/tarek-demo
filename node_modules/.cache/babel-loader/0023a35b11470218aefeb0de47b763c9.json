{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingLocationPanel\\\\EditListingLocationForm.js\";\nimport React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\nimport { propTypes } from '../../../../util/types';\nimport { autocompleteSearchRequired, autocompletePlaceSelected, composeValidators } from '../../../../util/validators'; // Import shared components\n\nimport { Form, LocationAutocompleteInputField, Button, FieldTextInput } from '../../../../components'; // Import modules from this directory\n\nimport css from './EditListingLocationForm.module.css';\n\nconst identity = v => v;\n\nexport const EditListingLocationFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: formRenderProps => {\n    const {\n      autoFocus,\n      className,\n      disabled,\n      ready,\n      handleSubmit,\n      intl,\n      invalid,\n      pristine,\n      saveActionMsg,\n      updated,\n      updateInProgress,\n      fetchErrors,\n      values\n    } = formRenderProps;\n    const titleRequiredMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.address'\n    });\n    const addressPlaceholderMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressPlaceholder'\n    });\n    const addressRequiredMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressRequired'\n    });\n    const addressNotRecognizedMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.addressNotRecognized'\n    });\n    const optionalText = intl.formatMessage({\n      id: 'EditListingLocationForm.optionalText'\n    });\n    const buildingMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.building'\n    }, {\n      optionalText: optionalText\n    });\n    const buildingPlaceholderMessage = intl.formatMessage({\n      id: 'EditListingLocationForm.buildingPlaceholder'\n    });\n    const {\n      updateListingError,\n      showListingsError\n    } = fetchErrors || {};\n    const errorMessage = updateListingError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingLocationForm.updateFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })) : null;\n    const errorMessageShowListing = showListingsError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingLocationForm.showListingFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    })) : null;\n    const classes = classNames(css.root, className);\n    const submitReady = updated && pristine || ready;\n    const submitInProgress = updateInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, errorMessage, errorMessageShowListing, /*#__PURE__*/React.createElement(LocationAutocompleteInputField, {\n      className: css.locationAddress,\n      inputClassName: css.locationAutocompleteInput,\n      iconClassName: css.locationAutocompleteInputIcon,\n      predictionsClassName: css.predictionsRoot,\n      validClassName: css.validLocation,\n      autoFocus: autoFocus,\n      name: \"location\",\n      label: titleRequiredMessage,\n      placeholder: addressPlaceholderMessage,\n      useDefaultPredictions: false,\n      format: identity,\n      valueFromForm: values.location,\n      validate: composeValidators(autocompleteSearchRequired(addressRequiredMessage), autocompletePlaceSelected(addressNotRecognizedMessage)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.building,\n      type: \"text\",\n      name: \"building\",\n      id: \"building\",\n      label: buildingMessage,\n      placeholder: buildingPlaceholderMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: submitReady,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, saveActionMsg));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }\n}));\n_c = EditListingLocationFormComponent;\nEditListingLocationFormComponent.defaultProps = {\n  selectedPlace: null,\n  fetchErrors: null\n};\nEditListingLocationFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  selectedPlace: propTypes.place,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  })\n};\nexport default compose(injectIntl)(EditListingLocationFormComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingLocationFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingLocationPanel/EditListingLocationForm.js"],"names":["React","bool","func","shape","string","compose","Form","FinalForm","classNames","intlShape","injectIntl","FormattedMessage","propTypes","autocompleteSearchRequired","autocompletePlaceSelected","composeValidators","LocationAutocompleteInputField","Button","FieldTextInput","css","identity","v","EditListingLocationFormComponent","props","formRenderProps","autoFocus","className","disabled","ready","handleSubmit","intl","invalid","pristine","saveActionMsg","updated","updateInProgress","fetchErrors","values","titleRequiredMessage","formatMessage","id","addressPlaceholderMessage","addressRequiredMessage","addressNotRecognizedMessage","optionalText","buildingMessage","buildingPlaceholderMessage","updateListingError","showListingsError","errorMessage","error","errorMessageShowListing","classes","root","submitReady","submitInProgress","submitDisabled","locationAddress","locationAutocompleteInput","locationAutocompleteInputIcon","predictionsRoot","validLocation","location","building","submitButton","defaultProps","selectedPlace","isRequired","onSubmit","place"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { bool, func, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\r\nimport { propTypes } from '../../../../util/types';\r\nimport {\r\n  autocompleteSearchRequired,\r\n  autocompletePlaceSelected,\r\n  composeValidators,\r\n} from '../../../../util/validators';\r\n\r\n// Import shared components\r\nimport {\r\n  Form,\r\n  LocationAutocompleteInputField,\r\n  Button,\r\n  FieldTextInput,\r\n} from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport css from './EditListingLocationForm.module.css';\r\n\r\nconst identity = v => v;\r\n\r\nexport const EditListingLocationFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={formRenderProps => {\r\n      const {\r\n        autoFocus,\r\n        className,\r\n        disabled,\r\n        ready,\r\n        handleSubmit,\r\n        intl,\r\n        invalid,\r\n        pristine,\r\n        saveActionMsg,\r\n        updated,\r\n        updateInProgress,\r\n        fetchErrors,\r\n        values,\r\n      } = formRenderProps;\r\n\r\n      const titleRequiredMessage = intl.formatMessage({ id: 'EditListingLocationForm.address' });\r\n      const addressPlaceholderMessage = intl.formatMessage({\r\n        id: 'EditListingLocationForm.addressPlaceholder',\r\n      });\r\n      const addressRequiredMessage = intl.formatMessage({\r\n        id: 'EditListingLocationForm.addressRequired',\r\n      });\r\n      const addressNotRecognizedMessage = intl.formatMessage({\r\n        id: 'EditListingLocationForm.addressNotRecognized',\r\n      });\r\n\r\n      const optionalText = intl.formatMessage({\r\n        id: 'EditListingLocationForm.optionalText',\r\n      });\r\n\r\n      const buildingMessage = intl.formatMessage(\r\n        { id: 'EditListingLocationForm.building' },\r\n        { optionalText: optionalText }\r\n      );\r\n      const buildingPlaceholderMessage = intl.formatMessage({\r\n        id: 'EditListingLocationForm.buildingPlaceholder',\r\n      });\r\n\r\n      const { updateListingError, showListingsError } = fetchErrors || {};\r\n      const errorMessage = updateListingError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"EditListingLocationForm.updateFailed\" />\r\n        </p>\r\n      ) : null;\r\n\r\n      const errorMessageShowListing = showListingsError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"EditListingLocationForm.showListingFailed\" />\r\n        </p>\r\n      ) : null;\r\n\r\n      const classes = classNames(css.root, className);\r\n      const submitReady = (updated && pristine) || ready;\r\n      const submitInProgress = updateInProgress;\r\n      const submitDisabled = invalid || disabled || submitInProgress;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          {errorMessage}\r\n          {errorMessageShowListing}\r\n          <LocationAutocompleteInputField\r\n            className={css.locationAddress}\r\n            inputClassName={css.locationAutocompleteInput}\r\n            iconClassName={css.locationAutocompleteInputIcon}\r\n            predictionsClassName={css.predictionsRoot}\r\n            validClassName={css.validLocation}\r\n            autoFocus={autoFocus}\r\n            name=\"location\"\r\n            label={titleRequiredMessage}\r\n            placeholder={addressPlaceholderMessage}\r\n            useDefaultPredictions={false}\r\n            format={identity}\r\n            valueFromForm={values.location}\r\n            validate={composeValidators(\r\n              autocompleteSearchRequired(addressRequiredMessage),\r\n              autocompletePlaceSelected(addressNotRecognizedMessage)\r\n            )}\r\n          />\r\n\r\n          <FieldTextInput\r\n            className={css.building}\r\n            type=\"text\"\r\n            name=\"building\"\r\n            id=\"building\"\r\n            label={buildingMessage}\r\n            placeholder={buildingPlaceholderMessage}\r\n          />\r\n\r\n          <Button\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n            ready={submitReady}\r\n          >\r\n            {saveActionMsg}\r\n          </Button>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nEditListingLocationFormComponent.defaultProps = {\r\n  selectedPlace: null,\r\n  fetchErrors: null,\r\n};\r\n\r\nEditListingLocationFormComponent.propTypes = {\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func.isRequired,\r\n  saveActionMsg: string.isRequired,\r\n  selectedPlace: propTypes.place,\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  updated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  fetchErrors: shape({\r\n    showListingsError: propTypes.error,\r\n    updateListingError: propTypes.error,\r\n  }),\r\n};\r\n\r\nexport default compose(injectIntl)(EditListingLocationFormComponent);\r\n"]},"metadata":{},"sourceType":"module"}