{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingWizardTab.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // Import configs and util modules\n\nimport { intlShape } from '../../../util/reactIntl';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES } from '../../../util/urlHelpers';\nimport { ensureListing } from '../../../util/data';\nimport { createResourceLocatorString } from '../../../util/routes'; // Import modules from this directory\n\nimport EditListingDetailsPanel from './EditListingDetailsPanel/EditListingDetailsPanel';\nimport EditListingDeliveryPanel from './EditListingDeliveryPanel/EditListingDeliveryPanel';\nimport EditListingPhotosPanel from './EditListingPhotosPanel/EditListingPhotosPanel';\nimport EditListingPricingPanel from './EditListingPricingPanel/EditListingPricingPanel';\nimport css from './EditListingWizard.module.css';\nexport const DETAILS = 'details';\nexport const DELIVERY = 'delivery';\nexport const PRICING = 'pricing';\nexport const PHOTOS = 'photos'; // EditListingWizardTab component supports these tabs\n\nexport const SUPPORTED_TABS = [DETAILS, DELIVERY, PRICING, PHOTOS];\n\nconst pathParamsToNextTab = (params, tab, marketplaceTabs) => {\n  const nextTabIndex = marketplaceTabs.findIndex(s => s === tab) + 1;\n  const nextTab = nextTabIndex < marketplaceTabs.length ? marketplaceTabs[nextTabIndex] : marketplaceTabs[marketplaceTabs.length - 1];\n  return { ...params,\n    tab: nextTab\n  };\n}; // When user has update draft listing, he should be redirected to next EditListingWizardTab\n\n\nconst redirectAfterDraftUpdate = (listingId, params, tab, marketplaceTabs, history) => {\n  const listingUUID = listingId.uuid;\n  const currentPathParams = { ...params,\n    type: LISTING_PAGE_PARAM_TYPE_DRAFT,\n    id: listingUUID\n  };\n  const routes = routeConfiguration(); // Replace current \"new\" path to \"draft\" path.\n  // Browser's back button should lead to editing current draft instead of creating a new one.\n\n  if (params.type === LISTING_PAGE_PARAM_TYPE_NEW) {\n    const draftURI = createResourceLocatorString('EditListingPage', routes, currentPathParams, {});\n    history.replace(draftURI);\n  } // Redirect to next tab\n\n\n  const nextPathParams = pathParamsToNextTab(currentPathParams, tab, marketplaceTabs);\n  const to = createResourceLocatorString('EditListingPage', routes, nextPathParams, {});\n  history.push(to);\n};\n\nconst EditListingWizardTab = props => {\n  const {\n    tab,\n    marketplaceTabs,\n    params,\n    errors,\n    fetchInProgress,\n    newListingPublished,\n    history,\n    images,\n    availability,\n    listing,\n    handleCreateFlowTabScrolling,\n    handlePublishListing,\n    onUpdateListing,\n    onCreateListingDraft,\n    onImageUpload,\n    onRemoveImage,\n    onChange,\n    updatedTab,\n    updateInProgress,\n    intl\n  } = props;\n  const {\n    type\n  } = params;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const isNewListingFlow = isNewURI || isDraftURI;\n  const currentListing = ensureListing(listing); // New listing flow has automatic redirects to new tab on the wizard\n  // and the last panel calls publishListing API endpoint.\n\n  const automaticRedirectsForNewListingFlow = (tab, listingId) => {\n    if (tab !== marketplaceTabs[marketplaceTabs.length - 1]) {\n      // Create listing flow: smooth scrolling polyfill to scroll to correct tab\n      handleCreateFlowTabScrolling(false); // After successful saving of draft data, user should be redirected to next tab\n\n      redirectAfterDraftUpdate(listingId, params, tab, marketplaceTabs, history);\n    } else {\n      handlePublishListing(listingId);\n    }\n  };\n\n  const onCompleteEditListingWizardTab = (tab, updateValues) => {\n    const onUpdateListingOrCreateListingDraft = isNewURI ? (tab, values) => onCreateListingDraft(values) : onUpdateListing;\n    const updateListingValues = isNewURI ? updateValues : { ...updateValues,\n      id: currentListing.id\n    };\n    onUpdateListingOrCreateListingDraft(tab, updateListingValues).then(r => {\n      if (isNewListingFlow) {\n        const listingId = r.data.data.id;\n        automaticRedirectsForNewListingFlow(tab, listingId);\n      }\n    }).catch(e => {// No need for extra actions\n    });\n  };\n\n  const panelProps = tab => {\n    return {\n      className: css.panel,\n      errors,\n      listing,\n      onChange,\n      panelUpdated: updatedTab === tab,\n      updateInProgress,\n      // newListingPublished and fetchInProgress are flags for the last wizard tab\n      ready: newListingPublished,\n      disabled: fetchInProgress\n    };\n  };\n\n  switch (tab) {\n    case DETAILS:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewDetails' : 'EditListingWizard.saveEditDetails';\n        return /*#__PURE__*/React.createElement(EditListingDetailsPanel, Object.assign({}, panelProps(DETAILS), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 9\n          }\n        }));\n      }\n\n    case DELIVERY:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewDelivery' : 'EditListingWizard.saveEditDelivery';\n        return /*#__PURE__*/React.createElement(EditListingDeliveryPanel, Object.assign({}, panelProps(DELIVERY), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 9\n          }\n        }));\n      }\n\n    case PRICING:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewPricing' : 'EditListingWizard.saveEditPricing';\n        return /*#__PURE__*/React.createElement(EditListingPricingPanel, Object.assign({}, panelProps(PRICING), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 9\n          }\n        }));\n      }\n\n    case PHOTOS:\n      {\n        const submitButtonTranslationKey = isNewListingFlow ? 'EditListingWizard.saveNewPhotos' : 'EditListingWizard.saveEditPhotos';\n        return /*#__PURE__*/React.createElement(EditListingPhotosPanel, Object.assign({}, panelProps(PHOTOS), {\n          submitButtonText: intl.formatMessage({\n            id: submitButtonTranslationKey\n          }),\n          images: images,\n          onImageUpload: onImageUpload,\n          onRemoveImage: onRemoveImage,\n          onSubmit: values => {\n            onCompleteEditListingWizardTab(tab, values);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }\n        }));\n      }\n\n    default:\n      return null;\n  }\n};\n\n_c = EditListingWizardTab;\nEditListingWizardTab.defaultProps = {\n  listing: null,\n  updatedTab: null\n};\nconst {\n  array,\n  bool,\n  func,\n  object,\n  oneOf,\n  shape,\n  string\n} = PropTypes;\nEditListingWizardTab.propTypes = {\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(SUPPORTED_TABS).isRequired\n  }).isRequired,\n  errors: shape({\n    createListingDraftError: object,\n    publishListingError: object,\n    updateListingError: object,\n    showListingsError: object,\n    uploadImageError: object\n  }).isRequired,\n  fetchInProgress: bool.isRequired,\n  newListingPublished: bool.isRequired,\n  history: shape({\n    push: func.isRequired,\n    replace: func.isRequired\n  }).isRequired,\n  images: array.isRequired,\n  availability: object.isRequired,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string\n    }),\n    images: array\n  }),\n  handleCreateFlowTabScrolling: func.isRequired,\n  handlePublishListing: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onRemoveImage: func.isRequired,\n  onChange: func.isRequired,\n  updatedTab: string,\n  updateInProgress: bool.isRequired,\n  intl: intlShape.isRequired\n};\nexport default EditListingWizardTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingWizardTab\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingWizardTab.js"],"names":["React","PropTypes","intlShape","routeConfiguration","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","ensureListing","createResourceLocatorString","EditListingDetailsPanel","EditListingDeliveryPanel","EditListingPhotosPanel","EditListingPricingPanel","css","DETAILS","DELIVERY","PRICING","PHOTOS","SUPPORTED_TABS","pathParamsToNextTab","params","tab","marketplaceTabs","nextTabIndex","findIndex","s","nextTab","length","redirectAfterDraftUpdate","listingId","history","listingUUID","uuid","currentPathParams","type","id","routes","draftURI","replace","nextPathParams","to","push","EditListingWizardTab","props","errors","fetchInProgress","newListingPublished","images","availability","listing","handleCreateFlowTabScrolling","handlePublishListing","onUpdateListing","onCreateListingDraft","onImageUpload","onRemoveImage","onChange","updatedTab","updateInProgress","intl","isNewURI","isDraftURI","isNewListingFlow","currentListing","automaticRedirectsForNewListingFlow","onCompleteEditListingWizardTab","updateValues","onUpdateListingOrCreateListingDraft","values","updateListingValues","then","r","data","catch","e","panelProps","className","panel","panelUpdated","ready","disabled","submitButtonTranslationKey","formatMessage","defaultProps","array","bool","func","object","oneOf","shape","string","propTypes","isRequired","slug","createListingDraftError","publishListingError","updateListingError","showListingsError","uploadImageError","attributes","publicData","description","geolocation","pricing","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Import configs and util modules\r\nimport { intlShape } from '../../../util/reactIntl';\r\nimport routeConfiguration from '../../../routing/routeConfiguration';\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n} from '../../../util/urlHelpers';\r\nimport { ensureListing } from '../../../util/data';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\n\r\n// Import modules from this directory\r\nimport EditListingDetailsPanel from './EditListingDetailsPanel/EditListingDetailsPanel';\r\nimport EditListingDeliveryPanel from './EditListingDeliveryPanel/EditListingDeliveryPanel';\r\nimport EditListingPhotosPanel from './EditListingPhotosPanel/EditListingPhotosPanel';\r\nimport EditListingPricingPanel from './EditListingPricingPanel/EditListingPricingPanel';\r\n\r\nimport css from './EditListingWizard.module.css';\r\n\r\nexport const DETAILS = 'details';\r\nexport const DELIVERY = 'delivery';\r\nexport const PRICING = 'pricing';\r\nexport const PHOTOS = 'photos';\r\n\r\n// EditListingWizardTab component supports these tabs\r\nexport const SUPPORTED_TABS = [DETAILS, DELIVERY, PRICING, PHOTOS];\r\n\r\nconst pathParamsToNextTab = (params, tab, marketplaceTabs) => {\r\n  const nextTabIndex = marketplaceTabs.findIndex(s => s === tab) + 1;\r\n  const nextTab =\r\n    nextTabIndex < marketplaceTabs.length\r\n      ? marketplaceTabs[nextTabIndex]\r\n      : marketplaceTabs[marketplaceTabs.length - 1];\r\n  return { ...params, tab: nextTab };\r\n};\r\n\r\n// When user has update draft listing, he should be redirected to next EditListingWizardTab\r\nconst redirectAfterDraftUpdate = (listingId, params, tab, marketplaceTabs, history) => {\r\n  const listingUUID = listingId.uuid;\r\n  const currentPathParams = {\r\n    ...params,\r\n    type: LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n    id: listingUUID,\r\n  };\r\n  const routes = routeConfiguration();\r\n\r\n  // Replace current \"new\" path to \"draft\" path.\r\n  // Browser's back button should lead to editing current draft instead of creating a new one.\r\n  if (params.type === LISTING_PAGE_PARAM_TYPE_NEW) {\r\n    const draftURI = createResourceLocatorString('EditListingPage', routes, currentPathParams, {});\r\n    history.replace(draftURI);\r\n  }\r\n\r\n  // Redirect to next tab\r\n  const nextPathParams = pathParamsToNextTab(currentPathParams, tab, marketplaceTabs);\r\n  const to = createResourceLocatorString('EditListingPage', routes, nextPathParams, {});\r\n  history.push(to);\r\n};\r\n\r\nconst EditListingWizardTab = props => {\r\n  const {\r\n    tab,\r\n    marketplaceTabs,\r\n    params,\r\n    errors,\r\n    fetchInProgress,\r\n    newListingPublished,\r\n    history,\r\n    images,\r\n    availability,\r\n    listing,\r\n    handleCreateFlowTabScrolling,\r\n    handlePublishListing,\r\n    onUpdateListing,\r\n    onCreateListingDraft,\r\n    onImageUpload,\r\n    onRemoveImage,\r\n    onChange,\r\n    updatedTab,\r\n    updateInProgress,\r\n    intl,\r\n  } = props;\r\n\r\n  const { type } = params;\r\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\r\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\r\n  const isNewListingFlow = isNewURI || isDraftURI;\r\n\r\n  const currentListing = ensureListing(listing);\r\n\r\n  // New listing flow has automatic redirects to new tab on the wizard\r\n  // and the last panel calls publishListing API endpoint.\r\n  const automaticRedirectsForNewListingFlow = (tab, listingId) => {\r\n    if (tab !== marketplaceTabs[marketplaceTabs.length - 1]) {\r\n      // Create listing flow: smooth scrolling polyfill to scroll to correct tab\r\n      handleCreateFlowTabScrolling(false);\r\n\r\n      // After successful saving of draft data, user should be redirected to next tab\r\n      redirectAfterDraftUpdate(listingId, params, tab, marketplaceTabs, history);\r\n    } else {\r\n      handlePublishListing(listingId);\r\n    }\r\n  };\r\n\r\n  const onCompleteEditListingWizardTab = (tab, updateValues) => {\r\n    const onUpdateListingOrCreateListingDraft = isNewURI\r\n      ? (tab, values) => onCreateListingDraft(values)\r\n      : onUpdateListing;\r\n\r\n    const updateListingValues = isNewURI\r\n      ? updateValues\r\n      : { ...updateValues, id: currentListing.id };\r\n\r\n    onUpdateListingOrCreateListingDraft(tab, updateListingValues)\r\n      .then(r => {\r\n        if (isNewListingFlow) {\r\n          const listingId = r.data.data.id;\r\n          automaticRedirectsForNewListingFlow(tab, listingId);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        // No need for extra actions\r\n      });\r\n  };\r\n\r\n  const panelProps = tab => {\r\n    return {\r\n      className: css.panel,\r\n      errors,\r\n      listing,\r\n      onChange,\r\n      panelUpdated: updatedTab === tab,\r\n      updateInProgress,\r\n      // newListingPublished and fetchInProgress are flags for the last wizard tab\r\n      ready: newListingPublished,\r\n      disabled: fetchInProgress,\r\n    };\r\n  };\r\n\r\n  switch (tab) {\r\n    case DETAILS: {\r\n      const submitButtonTranslationKey = isNewListingFlow\r\n        ? 'EditListingWizard.saveNewDetails'\r\n        : 'EditListingWizard.saveEditDetails';\r\n      return (\r\n        <EditListingDetailsPanel\r\n          {...panelProps(DETAILS)}\r\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\r\n          onSubmit={values => {\r\n            onCompleteEditListingWizardTab(tab, values);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    case DELIVERY: {\r\n      const submitButtonTranslationKey = isNewListingFlow\r\n        ? 'EditListingWizard.saveNewDelivery'\r\n        : 'EditListingWizard.saveEditDelivery';\r\n      return (\r\n        <EditListingDeliveryPanel\r\n          {...panelProps(DELIVERY)}\r\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\r\n          onSubmit={values => {\r\n            onCompleteEditListingWizardTab(tab, values);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    case PRICING: {\r\n      const submitButtonTranslationKey = isNewListingFlow\r\n        ? 'EditListingWizard.saveNewPricing'\r\n        : 'EditListingWizard.saveEditPricing';\r\n      return (\r\n        <EditListingPricingPanel\r\n          {...panelProps(PRICING)}\r\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\r\n          onSubmit={values => {\r\n            onCompleteEditListingWizardTab(tab, values);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    case PHOTOS: {\r\n      const submitButtonTranslationKey = isNewListingFlow\r\n        ? 'EditListingWizard.saveNewPhotos'\r\n        : 'EditListingWizard.saveEditPhotos';\r\n\r\n      return (\r\n        <EditListingPhotosPanel\r\n          {...panelProps(PHOTOS)}\r\n          submitButtonText={intl.formatMessage({ id: submitButtonTranslationKey })}\r\n          images={images}\r\n          onImageUpload={onImageUpload}\r\n          onRemoveImage={onRemoveImage}\r\n          onSubmit={values => {\r\n            onCompleteEditListingWizardTab(tab, values);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nEditListingWizardTab.defaultProps = {\r\n  listing: null,\r\n  updatedTab: null,\r\n};\r\n\r\nconst { array, bool, func, object, oneOf, shape, string } = PropTypes;\r\n\r\nEditListingWizardTab.propTypes = {\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: oneOf(SUPPORTED_TABS).isRequired,\r\n  }).isRequired,\r\n  errors: shape({\r\n    createListingDraftError: object,\r\n    publishListingError: object,\r\n    updateListingError: object,\r\n    showListingsError: object,\r\n    uploadImageError: object,\r\n  }).isRequired,\r\n  fetchInProgress: bool.isRequired,\r\n  newListingPublished: bool.isRequired,\r\n  history: shape({\r\n    push: func.isRequired,\r\n    replace: func.isRequired,\r\n  }).isRequired,\r\n  images: array.isRequired,\r\n  availability: object.isRequired,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: shape({\r\n    attributes: shape({\r\n      publicData: object,\r\n      description: string,\r\n      geolocation: object,\r\n      pricing: object,\r\n      title: string,\r\n    }),\r\n    images: array,\r\n  }),\r\n\r\n  handleCreateFlowTabScrolling: func.isRequired,\r\n  handlePublishListing: func.isRequired,\r\n  onUpdateListing: func.isRequired,\r\n  onCreateListingDraft: func.isRequired,\r\n  onImageUpload: func.isRequired,\r\n  onRemoveImage: func.isRequired,\r\n  onChange: func.isRequired,\r\n  updatedTab: string,\r\n  updateInProgress: bool.isRequired,\r\n\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default EditListingWizardTab;\r\n"]},"metadata":{},"sourceType":"module"}