{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SelectSingleFilter\\\\SelectSingleFilterPlain.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, bool, func, node, object, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '../../../util/reactIntl';\nimport IconPlus from '../IconPlus/IconPlus';\nimport css from './SelectSingleFilterPlain.module.css';\n\nconst getQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\n};\n\nclass SelectSingleFilterPlain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.selectOption = this.selectOption.bind(this);\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  selectOption(option, e) {\n    const {\n      queryParamNames,\n      onSelect\n    } = this.props;\n    const queryParamName = getQueryParamName(queryParamNames);\n    onSelect({\n      [queryParamName]: option\n    }); // blur event target if event is passed\n\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  toggleIsOpen() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      label,\n      options,\n      queryParamNames,\n      initialValues,\n      twoColumns,\n      useBorder,\n      useHighlight\n    } = this.props;\n    const queryParamName = getQueryParamName(queryParamNames);\n    const initialValue = initialValues && initialValues[queryParamName] ? initialValues[queryParamName] : null;\n    const labelClass = initialValue ? css.labelSelected : css.label;\n    const optionsContainerClass = classNames({\n      [css.optionsContainerOpen]: this.state.isOpen,\n      [css.optionsContainerClosed]: !this.state.isOpen,\n      [css.twoColumns]: twoColumns\n    });\n    const classes = classNames(rootClassName || css.root, className);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.filterHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: css.labelButton,\n      onClick: this.toggleIsOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.labelButtonContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: labelClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, label), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.openSign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IconPlus, {\n      isOpen: this.state.isOpen,\n      isSelected: !!initialValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: optionsContainerClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, options.map(option => {\n      // check if this option is selected\n      const selected = initialValue === option.key;\n      const optionClass = classNames(css.option, {\n        [css.optionHighlight]: selected && useHighlight\n      }); // menu item selected bullet or border class\n\n      const optionBorderClass = useBorder ? classNames({\n        [css.optionBorderSelected]: selected,\n        [css.optionBorder]: !selected\n      }) : null;\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: option.key,\n        className: optionClass,\n        onClick: () => this.selectOption(option.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, useBorder ? /*#__PURE__*/React.createElement(\"span\", {\n        className: optionBorderClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 30\n        }\n      }) : null, option.label);\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: css.clearButton,\n      onClick: e => this.selectOption(null, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SelectSingleFilter.plainClear',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nSelectSingleFilterPlain.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  twoColumns: false,\n  useHighlight: true,\n  useBorder: false\n};\nSelectSingleFilterPlain.propTypes = {\n  rootClassName: string,\n  className: string,\n  queryParamNames: arrayOf(string).isRequired,\n  label: node.isRequired,\n  onSelect: func.isRequired,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: string.isRequired\n  })).isRequired,\n  initialValues: object,\n  twoColumns: bool,\n  useHighlight: bool,\n  useBorder: bool\n};\nexport default SelectSingleFilterPlain;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SelectSingleFilter/SelectSingleFilterPlain.js"],"names":["React","Component","arrayOf","bool","func","node","object","shape","string","classNames","FormattedMessage","IconPlus","css","getQueryParamName","queryParamNames","Array","isArray","SelectSingleFilterPlain","constructor","props","state","isOpen","selectOption","bind","toggleIsOpen","option","e","onSelect","queryParamName","currentTarget","blur","setState","render","rootClassName","className","label","options","initialValues","twoColumns","useBorder","useHighlight","initialValue","labelClass","labelSelected","optionsContainerClass","optionsContainerOpen","optionsContainerClosed","classes","root","filterHeader","labelButton","labelButtonContent","openSign","map","selected","key","optionClass","optionHighlight","optionBorderClass","optionBorderSelected","optionBorder","clearButton","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, bool, func, node, object, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport IconPlus from '../IconPlus/IconPlus';\r\n\r\nimport css from './SelectSingleFilterPlain.module.css';\r\n\r\nconst getQueryParamName = queryParamNames => {\r\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\r\n};\r\n\r\nclass SelectSingleFilterPlain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isOpen: true };\r\n    this.selectOption = this.selectOption.bind(this);\r\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\r\n  }\r\n\r\n  selectOption(option, e) {\r\n    const { queryParamNames, onSelect } = this.props;\r\n    const queryParamName = getQueryParamName(queryParamNames);\r\n    onSelect({ [queryParamName]: option });\r\n\r\n    // blur event target if event is passed\r\n    if (e && e.currentTarget) {\r\n      e.currentTarget.blur();\r\n    }\r\n  }\r\n\r\n  toggleIsOpen() {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      label,\r\n      options,\r\n      queryParamNames,\r\n      initialValues,\r\n      twoColumns,\r\n      useBorder,\r\n      useHighlight,\r\n    } = this.props;\r\n\r\n    const queryParamName = getQueryParamName(queryParamNames);\r\n    const initialValue =\r\n      initialValues && initialValues[queryParamName] ? initialValues[queryParamName] : null;\r\n    const labelClass = initialValue ? css.labelSelected : css.label;\r\n\r\n    const optionsContainerClass = classNames({\r\n      [css.optionsContainerOpen]: this.state.isOpen,\r\n      [css.optionsContainerClosed]: !this.state.isOpen,\r\n      [css.twoColumns]: twoColumns,\r\n    });\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.filterHeader}>\r\n          <button className={css.labelButton} onClick={this.toggleIsOpen}>\r\n            <span className={css.labelButtonContent}>\r\n              <span className={labelClass}>{label}</span>\r\n              <span className={css.openSign}>\r\n                <IconPlus isOpen={this.state.isOpen} isSelected={!!initialValue} />\r\n              </span>\r\n            </span>\r\n          </button>\r\n        </div>\r\n        <div className={optionsContainerClass}>\r\n          {options.map(option => {\r\n            // check if this option is selected\r\n            const selected = initialValue === option.key;\r\n            const optionClass = classNames(css.option, {\r\n              [css.optionHighlight]: selected && useHighlight,\r\n            });\r\n            // menu item selected bullet or border class\r\n            const optionBorderClass = useBorder\r\n              ? classNames({\r\n                  [css.optionBorderSelected]: selected,\r\n                  [css.optionBorder]: !selected,\r\n                })\r\n              : null;\r\n            return (\r\n              <button\r\n                key={option.key}\r\n                className={optionClass}\r\n                onClick={() => this.selectOption(option.key)}\r\n              >\r\n                {useBorder ? <span className={optionBorderClass} /> : null}\r\n                {option.label}\r\n              </button>\r\n            );\r\n          })}\r\n          <button className={css.clearButton} onClick={e => this.selectOption(null, e)}>\r\n            <FormattedMessage id={'SelectSingleFilter.plainClear'} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSelectSingleFilterPlain.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  initialValues: null,\r\n  twoColumns: false,\r\n  useHighlight: true,\r\n  useBorder: false,\r\n};\r\n\r\nSelectSingleFilterPlain.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  queryParamNames: arrayOf(string).isRequired,\r\n  label: node.isRequired,\r\n  onSelect: func.isRequired,\r\n\r\n  options: arrayOf(\r\n    shape({\r\n      key: string.isRequired,\r\n      label: string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  initialValues: object,\r\n  twoColumns: bool,\r\n  useHighlight: bool,\r\n  useBorder: bool,\r\n};\r\n\r\nexport default SelectSingleFilterPlain;\r\n"]},"metadata":{},"sourceType":"module"}