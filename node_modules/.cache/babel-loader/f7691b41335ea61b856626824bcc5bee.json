{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar PseudoNumberFormat = /*#__PURE__*/function () {\n  function PseudoNumberFormat(lc, // locale is ignored; always use 'en'\n  _ref) {\n    var minID = _ref.minimumIntegerDigits,\n        minFD = _ref.minimumFractionDigits,\n        maxFD = _ref.maximumFractionDigits,\n        minSD = _ref.minimumSignificantDigits,\n        maxSD = _ref.maximumSignificantDigits;\n\n    _classCallCheck(this, PseudoNumberFormat);\n\n    this._minID = typeof minID === 'number' ? minID : 1;\n    this._minFD = typeof minFD === 'number' ? minFD : 0;\n    this._maxFD = typeof maxFD === 'number' ? maxFD : Math.max(this._minFD, 3);\n\n    if (typeof minSD === 'number' || typeof maxSD === 'number') {\n      this._minSD = typeof minSD === 'number' ? minSD : 1;\n      this._maxSD = typeof maxSD === 'number' ? maxSD : 21;\n    }\n  }\n\n  _createClass(PseudoNumberFormat, [{\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var opt = {\n        minimumIntegerDigits: this._minID,\n        minimumFractionDigits: this._minFD,\n        maximumFractionDigits: this._maxFD\n      };\n\n      if (typeof this._minSD === 'number') {\n        opt.minimumSignificantDigits = this._minSD;\n        opt.maximumSignificantDigits = this._maxSD;\n      }\n\n      return opt;\n    }\n  }, {\n    key: \"format\",\n    value: function format(n) {\n      if (this._minSD) {\n        var raw = String(n);\n        var prec = 0;\n\n        for (var i = 0; i < raw.length; ++i) {\n          var c = raw[i];\n          if (c >= '0' && c <= '9') ++prec;\n        }\n\n        if (prec < this._minSD) return n.toPrecision(this._minSD);\n        if (prec > this._maxSD) return n.toPrecision(this._maxSD);\n        return raw;\n      }\n\n      if (this._minFD > 0) return n.toFixed(this._minFD);\n      if (this._maxFD === 0) return n.toFixed(0);\n      return String(n);\n    }\n  }]);\n\n  return PseudoNumberFormat;\n}();\n\nmodule.exports = PseudoNumberFormat;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/node_modules/intl-pluralrules/pseudo-number-format.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","PseudoNumberFormat","lc","_ref","minID","minimumIntegerDigits","minFD","minimumFractionDigits","maxFD","maximumFractionDigits","minSD","minimumSignificantDigits","maxSD","maximumSignificantDigits","_minID","_minFD","_maxFD","Math","max","_minSD","_maxSD","value","resolvedOptions","opt","format","n","raw","String","prec","c","toPrecision","toFixed","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar PseudoNumberFormat = /*#__PURE__*/function () {\n  function PseudoNumberFormat(lc, // locale is ignored; always use 'en'\n  _ref) {\n    var minID = _ref.minimumIntegerDigits,\n        minFD = _ref.minimumFractionDigits,\n        maxFD = _ref.maximumFractionDigits,\n        minSD = _ref.minimumSignificantDigits,\n        maxSD = _ref.maximumSignificantDigits;\n\n    _classCallCheck(this, PseudoNumberFormat);\n\n    this._minID = typeof minID === 'number' ? minID : 1;\n    this._minFD = typeof minFD === 'number' ? minFD : 0;\n    this._maxFD = typeof maxFD === 'number' ? maxFD : Math.max(this._minFD, 3);\n\n    if (typeof minSD === 'number' || typeof maxSD === 'number') {\n      this._minSD = typeof minSD === 'number' ? minSD : 1;\n      this._maxSD = typeof maxSD === 'number' ? maxSD : 21;\n    }\n  }\n\n  _createClass(PseudoNumberFormat, [{\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var opt = {\n        minimumIntegerDigits: this._minID,\n        minimumFractionDigits: this._minFD,\n        maximumFractionDigits: this._maxFD\n      };\n\n      if (typeof this._minSD === 'number') {\n        opt.minimumSignificantDigits = this._minSD;\n        opt.maximumSignificantDigits = this._maxSD;\n      }\n\n      return opt;\n    }\n  }, {\n    key: \"format\",\n    value: function format(n) {\n      if (this._minSD) {\n        var raw = String(n);\n        var prec = 0;\n\n        for (var i = 0; i < raw.length; ++i) {\n          var c = raw[i];\n          if (c >= '0' && c <= '9') ++prec;\n        }\n\n        if (prec < this._minSD) return n.toPrecision(this._minSD);\n        if (prec > this._maxSD) return n.toPrecision(this._maxSD);\n        return raw;\n      }\n\n      if (this._minFD > 0) return n.toFixed(this._minFD);\n      if (this._maxFD === 0) return n.toFixed(0);\n      return String(n);\n    }\n  }]);\n\n  return PseudoNumberFormat;\n}();\n\nmodule.exports = PseudoNumberFormat;\n"]},"metadata":{},"sourceType":"script"}