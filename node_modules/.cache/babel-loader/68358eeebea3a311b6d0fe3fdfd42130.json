{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\ListingPage\\\\ImageCarousel\\\\ImageCarousel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { propTypes } from '../../../util/types';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { ResponsiveImage, IconSpinner } from '../../../components';\nimport css from './ImageCarousel.module.css';\nconst KEY_CODE_LEFT_ARROW = 37;\nconst KEY_CODE_RIGHT_ARROW = 39;\n\nclass ImageCarousel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedImageIndex: 0,\n      selectedImageLoaded: false\n    };\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.prev = this.prev.bind(this);\n    this.next = this.next.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  onKeyUp(e) {\n    if (e.keyCode === KEY_CODE_LEFT_ARROW) {\n      this.prev();\n    } else if (e.keyCode === KEY_CODE_RIGHT_ARROW) {\n      this.next();\n    }\n  }\n\n  prev() {\n    const count = this.props.images.length;\n\n    if (count < 2) {\n      return;\n    }\n\n    this.setState(prevState => {\n      const newIndex = count > 0 ? (count + prevState.selectedImageIndex - 1) % count : 0;\n      return {\n        selectedImageIndex: newIndex,\n        selectedImageLoaded: false\n      };\n    });\n  }\n\n  next() {\n    const count = this.props.images.length;\n\n    if (count < 2) {\n      return;\n    }\n\n    this.setState(prevState => {\n      const newIndex = count > 0 ? (count + prevState.selectedImageIndex + 1) % count : 0;\n      return {\n        selectedImageIndex: newIndex,\n        selectedImageLoaded: false\n      };\n    });\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      images,\n      intl\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const naturalIndex = this.state.selectedImageIndex + 1;\n    const imageIndex = images.length > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n      className: css.imageIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, naturalIndex, \"/\", images.length) : null;\n    const prevButton = images.length > 1 ? /*#__PURE__*/React.createElement(\"button\", {\n      className: css.prev,\n      onClick: this.prev,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 27\n      }\n    }) : null;\n    const nextButton = images.length > 1 ? /*#__PURE__*/React.createElement(\"button\", {\n      className: css.next,\n      onClick: this.next,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 27\n      }\n    }) : null;\n    const imageAltText = intl.formatMessage({\n      id: 'ImageCarousel.imageAltText'\n    }, {\n      index: naturalIndex,\n      count: images.length\n    });\n\n    const markImageLoaded = index => () => {\n      this.setState(prevState => {\n        if (prevState.selectedImageIndex === index) {\n          // Only mark the image loaded if the current index hasn't\n          // changed, i.e. user hasn't already changed to another\n          // image index.\n          return {\n            selectedImageLoaded: true\n          };\n        }\n\n        return {};\n      });\n    };\n\n    const currentImageIsLoaded = images.length === 0 || this.state.selectedImageLoaded;\n    const loadingIconClasses = classNames(css.loading, {\n      [css.loadingVisible]: !currentImageIsLoaded\n    });\n    const imageClasses = classNames(css.image, {\n      [css.imageLoading]: !currentImageIsLoaded\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.imageWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconSpinner, {\n      className: loadingIconClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ResponsiveImage, {\n      className: imageClasses,\n      alt: imageAltText,\n      image: images[this.state.selectedImageIndex],\n      onLoad: markImageLoaded(this.state.selectedImageIndex),\n      onError: markImageLoaded(this.state.selectedImageIndex),\n      variants: ['scaled-small', 'scaled-medium', 'scaled-large', 'scaled-xlarge'],\n      sizes: \"(max-width: 767px) 100vw, 80vw\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })), imageIndex, prevButton, nextButton);\n  }\n\n}\n\nImageCarousel.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nconst {\n  string,\n  arrayOf\n} = PropTypes;\nImageCarousel.propTypes = {\n  rootClassName: string,\n  className: string,\n  images: arrayOf(propTypes.image).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c = injectIntl(ImageCarousel);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ListingPage/ImageCarousel/ImageCarousel.js"],"names":["React","Component","PropTypes","classNames","propTypes","injectIntl","intlShape","ResponsiveImage","IconSpinner","css","KEY_CODE_LEFT_ARROW","KEY_CODE_RIGHT_ARROW","ImageCarousel","constructor","props","state","selectedImageIndex","selectedImageLoaded","onKeyUp","bind","prev","next","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","e","keyCode","count","images","length","setState","prevState","newIndex","render","rootClassName","className","intl","classes","root","naturalIndex","imageIndex","prevButton","nextButton","imageAltText","formatMessage","id","index","markImageLoaded","currentImageIsLoaded","loadingIconClasses","loading","loadingVisible","imageClasses","image","imageLoading","imageWrapper","defaultProps","string","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { propTypes } from '../../../util/types';\r\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { ResponsiveImage, IconSpinner } from '../../../components';\r\n\r\nimport css from './ImageCarousel.module.css';\r\n\r\nconst KEY_CODE_LEFT_ARROW = 37;\r\nconst KEY_CODE_RIGHT_ARROW = 39;\r\n\r\nclass ImageCarousel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { selectedImageIndex: 0, selectedImageLoaded: false };\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.prev = this.prev.bind(this);\r\n    this.next = this.next.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n  }\r\n  onKeyUp(e) {\r\n    if (e.keyCode === KEY_CODE_LEFT_ARROW) {\r\n      this.prev();\r\n    } else if (e.keyCode === KEY_CODE_RIGHT_ARROW) {\r\n      this.next();\r\n    }\r\n  }\r\n  prev() {\r\n    const count = this.props.images.length;\r\n    if (count < 2) {\r\n      return;\r\n    }\r\n    this.setState(prevState => {\r\n      const newIndex = count > 0 ? (count + prevState.selectedImageIndex - 1) % count : 0;\r\n      return { selectedImageIndex: newIndex, selectedImageLoaded: false };\r\n    });\r\n  }\r\n  next() {\r\n    const count = this.props.images.length;\r\n    if (count < 2) {\r\n      return;\r\n    }\r\n    this.setState(prevState => {\r\n      const newIndex = count > 0 ? (count + prevState.selectedImageIndex + 1) % count : 0;\r\n      return { selectedImageIndex: newIndex, selectedImageLoaded: false };\r\n    });\r\n  }\r\n  render() {\r\n    const { rootClassName, className, images, intl } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const naturalIndex = this.state.selectedImageIndex + 1;\r\n    const imageIndex =\r\n      images.length > 0 ? (\r\n        <span className={css.imageIndex}>\r\n          {naturalIndex}/{images.length}\r\n        </span>\r\n      ) : null;\r\n    const prevButton =\r\n      images.length > 1 ? <button className={css.prev} onClick={this.prev} /> : null;\r\n    const nextButton =\r\n      images.length > 1 ? <button className={css.next} onClick={this.next} /> : null;\r\n\r\n    const imageAltText = intl.formatMessage(\r\n      {\r\n        id: 'ImageCarousel.imageAltText',\r\n      },\r\n      {\r\n        index: naturalIndex,\r\n        count: images.length,\r\n      }\r\n    );\r\n\r\n    const markImageLoaded = index => () => {\r\n      this.setState(prevState => {\r\n        if (prevState.selectedImageIndex === index) {\r\n          // Only mark the image loaded if the current index hasn't\r\n          // changed, i.e. user hasn't already changed to another\r\n          // image index.\r\n          return { selectedImageLoaded: true };\r\n        }\r\n        return {};\r\n      });\r\n    };\r\n\r\n    const currentImageIsLoaded = images.length === 0 || this.state.selectedImageLoaded;\r\n    const loadingIconClasses = classNames(css.loading, {\r\n      [css.loadingVisible]: !currentImageIsLoaded,\r\n    });\r\n    const imageClasses = classNames(css.image, {\r\n      [css.imageLoading]: !currentImageIsLoaded,\r\n    });\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.imageWrapper}>\r\n          <IconSpinner className={loadingIconClasses} />\r\n          <ResponsiveImage\r\n            className={imageClasses}\r\n            alt={imageAltText}\r\n            image={images[this.state.selectedImageIndex]}\r\n            onLoad={markImageLoaded(this.state.selectedImageIndex)}\r\n            onError={markImageLoaded(this.state.selectedImageIndex)}\r\n            variants={['scaled-small', 'scaled-medium', 'scaled-large', 'scaled-xlarge']}\r\n            sizes=\"(max-width: 767px) 100vw, 80vw\"\r\n          />\r\n        </div>\r\n        {imageIndex}\r\n        {prevButton}\r\n        {nextButton}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageCarousel.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n};\r\n\r\nconst { string, arrayOf } = PropTypes;\r\n\r\nImageCarousel.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  images: arrayOf(propTypes.image).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(ImageCarousel);\r\n"]},"metadata":{},"sourceType":"module"}