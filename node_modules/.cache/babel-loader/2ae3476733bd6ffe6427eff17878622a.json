{"ast":null,"code":"/*\r\n * Marketplace specific configuration.\r\n *\r\n * Every filter needs to have following keys:\r\n * - id:     Unique id of the filter.\r\n * - label:  The default label of the filter.\r\n * - type:   String that represents one of the existing filter components:\r\n *           BookingDateRangeFilter, KeywordFilter, PriceFilter,\r\n *           SelectSingleFilter, SelectMultipleFilter.\r\n * - group:  Is this 'primary' or 'secondary' filter?\r\n *           Primary filters are visible on desktop layout by default.\r\n *           Secondary filters are behind \"More filters\" button.\r\n *           Read more from src/containers/SearchPage/README.md\r\n * - queryParamNames: Describes parameters to be used with queries\r\n *                    (e.g. 'price' or 'pub_amenities'). Most of these are\r\n *                    the same between webapp URLs and API query params.\r\n *                    You can't change 'dates', 'price', or 'keywords'\r\n *                    since those filters are fixed to a specific attribute.\r\n * - config: Extra configuration that the filter component needs.\r\n *\r\n * Note 1: Labels could be tied to translation file\r\n *         by importing FormattedMessage:\r\n *         <FormattedMessage id=\"some.translation.key.here\" />\r\n *\r\n * Note 2: If you need to add new custom filter components,\r\n *         you need to take those into use in:\r\n *         src/containers/SearchPage/FilterComponent.js\r\n *\r\n * Note 3: If you just want to create more enum filters\r\n *         (i.e. SelectSingleFilter, SelectMultipleFilter),\r\n *         you can just add more configurations with those filter types\r\n *         and tie them with correct extended data key\r\n *         (i.e. pub_<key> or meta_<key>).\r\n */\nexport const filters = [{\n  id: 'category',\n  label: 'Category',\n  type: 'SelectSingleFilter',\n  group: 'primary',\n  queryParamNames: ['pub_category'],\n  config: {\n    // Schema type is enum for SelectSingleFilter\n    schemaType: 'enum',\n    // \"key\" is the option you see in Flex Console.\n    // \"label\" is set here for the UI only.\n    // Note: label is not added through the translation files\n    // to make filter customizations a bit easier.\n    options: [{\n      key: 'men',\n      label: 'Men'\n    }, {\n      key: 'women',\n      label: 'Women'\n    }, {\n      key: 'kids',\n      label: 'Kids'\n    }]\n  }\n}, {\n  id: 'size',\n  label: 'Size (US)',\n  type: 'SelectMultipleFilter',\n  group: 'primary',\n  queryParamNames: ['pub_size'],\n  config: {\n    // Schema type options: 'enum', 'multi-enum'\n    // Both types can work so that user selects multiple values when filtering search results.\n    // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\n    // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\n    schemaType: 'enum',\n    // \"key\" is the option you see in Flex Console.\n    // \"label\" is set here for the UI only.\n    // Note: label is not added through the translation files\n    // to make filter customizations a bit easier.\n    options: [{\n      key: '4',\n      label: '4'\n    }, {\n      key: '5',\n      label: '5'\n    }, {\n      key: '6',\n      label: '6'\n    }, {\n      key: '7',\n      label: '7'\n    }, {\n      key: '8',\n      label: '8'\n    }, {\n      key: '9',\n      label: '9'\n    }, {\n      key: '10',\n      label: '10'\n    }, {\n      key: '11',\n      label: '11'\n    }, {\n      key: '12',\n      label: '12'\n    }]\n  }\n}, {\n  id: 'brand',\n  label: 'Brand',\n  type: 'SelectMultipleFilter',\n  group: 'primary',\n  queryParamNames: ['pub_brand'],\n  config: {\n    // Schema type options: 'enum', 'multi-enum'\n    // Both types can work so that user selects multiple values when filtering search results.\n    // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\n    // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\n    schemaType: 'enum',\n    // \"key\" is the option you see in Flex Console.\n    // \"label\" is set here for the UI only.\n    // Note: label is not added through the translation files\n    // to make filter customizations a bit easier.\n    options: [{\n      key: 'adidas',\n      label: 'Adidas'\n    }, {\n      key: 'air_jordan',\n      label: 'Air Jordan'\n    }, {\n      key: 'converse',\n      label: 'Converse'\n    }, {\n      key: 'new_balance',\n      label: 'New Balance'\n    }, {\n      key: 'nike',\n      label: 'Nike'\n    }, {\n      key: 'puma',\n      label: 'Puma'\n    }, {\n      key: 'ultraboost',\n      label: 'Ultraboost'\n    }, {\n      key: 'vans',\n      label: 'Vans'\n    }, {\n      key: 'yeezy',\n      label: 'Yeezy'\n    }, {\n      key: 'other',\n      label: 'Other'\n    }]\n  }\n}, {\n  id: 'price',\n  label: 'Price',\n  type: 'PriceFilter',\n  group: 'primary',\n  // Note: PriceFilter is fixed filter,\n  // you can't change \"queryParamNames: ['price'],\"\n  queryParamNames: ['price'],\n  // Price filter configuration\n  // Note: unlike most prices this is not handled in subunits\n  config: {\n    min: 0,\n    max: 1000,\n    step: 5\n  }\n}, {\n  id: 'keyword',\n  label: 'Keyword',\n  type: 'KeywordFilter',\n  group: 'primary',\n  // Note: KeywordFilter is fixed filter,\n  // you can't change \"queryParamNames: ['keywords'],\"\n  queryParamNames: ['keywords'],\n  // NOTE: If you are ordering search results by distance\n  // the keyword search can't be used at the same time.\n  // You can turn on/off ordering by distance from config.js file.\n  config: {}\n} // Here is an example of multi-enum search filter.\n//\n// {\n//   id: 'amenities',\n//   label: 'Amenities',\n//   type: 'SelectMultipleFilter',\n//   group: 'secondary',\n//   queryParamNames: ['pub_amenities'],\n//   config: {\n//     // Schema type options: 'enum', 'multi-enum'\n//     // Both types can work so that user selects multiple values when filtering search results.\n//     // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\n//     // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\n//     schemaType: 'multi-enum',\n//     // Optional modes: 'has_all', 'has_any'\n//     // Note: this is relevant only for schema type 'multi-enum'\n//     // https://www.sharetribe.com/api-reference/marketplace.html#extended-data-filtering\n//     searchMode: 'has_all',\n//     // \"key\" is the option you see in Flex Console.\n//     // \"label\" is set here for this web app's UI only.\n//     // Note: label is not added through the translation files\n//     // to make filter customizations a bit easier.\n//     options: [\n//       { key: 'towels', label: 'Towels' },\n//       { key: 'bathroom', label: 'Bathroom' },\n//       { key: 'swimming_pool', label: 'Swimming pool' },\n//       { key: 'barbeque', label: 'Barbeque' },\n//     ],\n//   },\n// },\n];\nexport const sortConfig = {\n  // Enable/disable the sorting control in the SearchPage\n  active: true,\n  // Note: queryParamName 'sort' is fixed,\n  // you can't change it since Flex API expects it to be named as 'sort'\n  queryParamName: 'sort',\n  // Internal key for the relevance option, see notes below.\n  relevanceKey: 'relevance',\n  // Relevance key is used with keywords filter.\n  // Keywords filter also sorts results according to relevance.\n  relevanceFilter: 'keywords',\n  // Keyword filter is sorting the results by relevance.\n  // If keyword filter is active, one might want to disable other sorting options\n  // by adding 'keyword' to this list.\n  conflictingFilters: [],\n  options: [{\n    key: 'createdAt',\n    label: 'Newest'\n  }, {\n    key: '-createdAt',\n    label: 'Oldest'\n  }, {\n    key: '-price',\n    label: 'Lowest price'\n  }, {\n    key: 'price',\n    label: 'Highest price'\n  }, // The relevance is only used for keyword search, but the\n  // parameter isn't sent to the Marketplace API. The key is purely\n  // for handling the internal state of the sorting dropdown.\n  {\n    key: 'relevance',\n    label: 'Relevance',\n    longLabel: 'Relevance (Keyword search)'\n  }]\n};\nexport const listing = {\n  // These should be listing details from public data with schema type: enum\n  // SectionDetailsMaybe component shows these on listing page.\n  enumFieldDetails: ['size', 'brand', 'category']\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/config/marketplace-custom-config.js"],"names":["filters","id","label","type","group","queryParamNames","config","schemaType","options","key","min","max","step","sortConfig","active","queryParamName","relevanceKey","relevanceFilter","conflictingFilters","longLabel","listing","enumFieldDetails"],"mappings":"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","sourcesContent":["/*\r\n * Marketplace specific configuration.\r\n *\r\n * Every filter needs to have following keys:\r\n * - id:     Unique id of the filter.\r\n * - label:  The default label of the filter.\r\n * - type:   String that represents one of the existing filter components:\r\n *           BookingDateRangeFilter, KeywordFilter, PriceFilter,\r\n *           SelectSingleFilter, SelectMultipleFilter.\r\n * - group:  Is this 'primary' or 'secondary' filter?\r\n *           Primary filters are visible on desktop layout by default.\r\n *           Secondary filters are behind \"More filters\" button.\r\n *           Read more from src/containers/SearchPage/README.md\r\n * - queryParamNames: Describes parameters to be used with queries\r\n *                    (e.g. 'price' or 'pub_amenities'). Most of these are\r\n *                    the same between webapp URLs and API query params.\r\n *                    You can't change 'dates', 'price', or 'keywords'\r\n *                    since those filters are fixed to a specific attribute.\r\n * - config: Extra configuration that the filter component needs.\r\n *\r\n * Note 1: Labels could be tied to translation file\r\n *         by importing FormattedMessage:\r\n *         <FormattedMessage id=\"some.translation.key.here\" />\r\n *\r\n * Note 2: If you need to add new custom filter components,\r\n *         you need to take those into use in:\r\n *         src/containers/SearchPage/FilterComponent.js\r\n *\r\n * Note 3: If you just want to create more enum filters\r\n *         (i.e. SelectSingleFilter, SelectMultipleFilter),\r\n *         you can just add more configurations with those filter types\r\n *         and tie them with correct extended data key\r\n *         (i.e. pub_<key> or meta_<key>).\r\n */\r\n\r\nexport const filters = [\r\n  {\r\n    id: 'category',\r\n    label: 'Category',\r\n    type: 'SelectSingleFilter',\r\n    group: 'primary',\r\n    queryParamNames: ['pub_category'],\r\n    config: {\r\n      // Schema type is enum for SelectSingleFilter\r\n      schemaType: 'enum',\r\n\r\n      // \"key\" is the option you see in Flex Console.\r\n      // \"label\" is set here for the UI only.\r\n      // Note: label is not added through the translation files\r\n      // to make filter customizations a bit easier.\r\n      options: [\r\n        { key: 'men', label: 'Men' },\r\n        { key: 'women', label: 'Women' },\r\n        { key: 'kids', label: 'Kids' },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'size',\r\n    label: 'Size (US)',\r\n    type: 'SelectMultipleFilter',\r\n    group: 'primary',\r\n    queryParamNames: ['pub_size'],\r\n    config: {\r\n      // Schema type options: 'enum', 'multi-enum'\r\n      // Both types can work so that user selects multiple values when filtering search results.\r\n      // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\r\n      // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\r\n      schemaType: 'enum',\r\n\r\n      // \"key\" is the option you see in Flex Console.\r\n      // \"label\" is set here for the UI only.\r\n      // Note: label is not added through the translation files\r\n      // to make filter customizations a bit easier.\r\n      options: [\r\n        { key: '4', label: '4' },\r\n        { key: '5', label: '5' },\r\n        { key: '6', label: '6' },\r\n        { key: '7', label: '7' },\r\n        { key: '8', label: '8' },\r\n        { key: '9', label: '9' },\r\n        { key: '10', label: '10' },\r\n        { key: '11', label: '11' },\r\n        { key: '12', label: '12' },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'brand',\r\n    label: 'Brand',\r\n    type: 'SelectMultipleFilter',\r\n    group: 'primary',\r\n    queryParamNames: ['pub_brand'],\r\n    config: {\r\n      // Schema type options: 'enum', 'multi-enum'\r\n      // Both types can work so that user selects multiple values when filtering search results.\r\n      // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\r\n      // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\r\n      schemaType: 'enum',\r\n\r\n      // \"key\" is the option you see in Flex Console.\r\n      // \"label\" is set here for the UI only.\r\n      // Note: label is not added through the translation files\r\n      // to make filter customizations a bit easier.\r\n      options: [\r\n        { key: 'adidas', label: 'Adidas' },\r\n        { key: 'air_jordan', label: 'Air Jordan' },\r\n        { key: 'converse', label: 'Converse' },\r\n        { key: 'new_balance', label: 'New Balance' },\r\n        { key: 'nike', label: 'Nike' },\r\n        { key: 'puma', label: 'Puma' },\r\n        { key: 'ultraboost', label: 'Ultraboost' },\r\n        { key: 'vans', label: 'Vans' },\r\n        { key: 'yeezy', label: 'Yeezy' },\r\n        { key: 'other', label: 'Other' },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'price',\r\n    label: 'Price',\r\n    type: 'PriceFilter',\r\n    group: 'primary',\r\n    // Note: PriceFilter is fixed filter,\r\n    // you can't change \"queryParamNames: ['price'],\"\r\n    queryParamNames: ['price'],\r\n    // Price filter configuration\r\n    // Note: unlike most prices this is not handled in subunits\r\n    config: {\r\n      min: 0,\r\n      max: 1000,\r\n      step: 5,\r\n    },\r\n  },\r\n  {\r\n    id: 'keyword',\r\n    label: 'Keyword',\r\n    type: 'KeywordFilter',\r\n    group: 'primary',\r\n    // Note: KeywordFilter is fixed filter,\r\n    // you can't change \"queryParamNames: ['keywords'],\"\r\n    queryParamNames: ['keywords'],\r\n    // NOTE: If you are ordering search results by distance\r\n    // the keyword search can't be used at the same time.\r\n    // You can turn on/off ordering by distance from config.js file.\r\n    config: {},\r\n  },\r\n\r\n  // Here is an example of multi-enum search filter.\r\n  //\r\n  // {\r\n  //   id: 'amenities',\r\n  //   label: 'Amenities',\r\n  //   type: 'SelectMultipleFilter',\r\n  //   group: 'secondary',\r\n  //   queryParamNames: ['pub_amenities'],\r\n  //   config: {\r\n  //     // Schema type options: 'enum', 'multi-enum'\r\n  //     // Both types can work so that user selects multiple values when filtering search results.\r\n  //     // With \"enum\" the functionality will be OR-semantics (Nike OR Adidas OR Salomon)\r\n  //     // With \"multi-enum\" it's possible to use both AND and OR semantics with searchMode config.\r\n  //     schemaType: 'multi-enum',\r\n\r\n  //     // Optional modes: 'has_all', 'has_any'\r\n  //     // Note: this is relevant only for schema type 'multi-enum'\r\n  //     // https://www.sharetribe.com/api-reference/marketplace.html#extended-data-filtering\r\n  //     searchMode: 'has_all',\r\n\r\n  //     // \"key\" is the option you see in Flex Console.\r\n  //     // \"label\" is set here for this web app's UI only.\r\n  //     // Note: label is not added through the translation files\r\n  //     // to make filter customizations a bit easier.\r\n  //     options: [\r\n  //       { key: 'towels', label: 'Towels' },\r\n  //       { key: 'bathroom', label: 'Bathroom' },\r\n  //       { key: 'swimming_pool', label: 'Swimming pool' },\r\n  //       { key: 'barbeque', label: 'Barbeque' },\r\n  //     ],\r\n  //   },\r\n  // },\r\n];\r\n\r\nexport const sortConfig = {\r\n  // Enable/disable the sorting control in the SearchPage\r\n  active: true,\r\n\r\n  // Note: queryParamName 'sort' is fixed,\r\n  // you can't change it since Flex API expects it to be named as 'sort'\r\n  queryParamName: 'sort',\r\n\r\n  // Internal key for the relevance option, see notes below.\r\n  relevanceKey: 'relevance',\r\n\r\n  // Relevance key is used with keywords filter.\r\n  // Keywords filter also sorts results according to relevance.\r\n  relevanceFilter: 'keywords',\r\n\r\n  // Keyword filter is sorting the results by relevance.\r\n  // If keyword filter is active, one might want to disable other sorting options\r\n  // by adding 'keyword' to this list.\r\n  conflictingFilters: [],\r\n\r\n  options: [\r\n    { key: 'createdAt', label: 'Newest' },\r\n    { key: '-createdAt', label: 'Oldest' },\r\n    { key: '-price', label: 'Lowest price' },\r\n    { key: 'price', label: 'Highest price' },\r\n\r\n    // The relevance is only used for keyword search, but the\r\n    // parameter isn't sent to the Marketplace API. The key is purely\r\n    // for handling the internal state of the sorting dropdown.\r\n    { key: 'relevance', label: 'Relevance', longLabel: 'Relevance (Keyword search)' },\r\n  ],\r\n};\r\n\r\nexport const listing = {\r\n  // These should be listing details from public data with schema type: enum\r\n  // SectionDetailsMaybe component shows these on listing page.\r\n  enumFieldDetails: ['size', 'brand', 'category'],\r\n};\r\n"]},"metadata":{},"sourceType":"module"}