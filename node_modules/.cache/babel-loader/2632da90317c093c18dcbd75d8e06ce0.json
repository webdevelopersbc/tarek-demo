{"ast":null,"code":"/**\r\n * Error logging\r\n *\r\n * Can be used to log errors to console or and eternal\r\n * error logging system, like Sentry for example.\r\n *\r\n */\nimport * as Sentry from '@sentry/browser';\nimport config from '../config';\nimport { responseApiErrorInfo } from './errors';\n/**\r\n * Set up error handling. If a Sentry DSN is\r\n * provided a Sentry client will be installed.\r\n */\n\nexport const setup = () => {\n  if (config.sentryDsn) {\n    // Configures the Sentry client. Adds a handler for\n    // any uncaught exception.\n    Sentry.init({\n      dsn: config.sentryDsn,\n      environment: config.env\n    });\n  }\n};\n/**\r\n * Set user ID for the logger so that it\r\n * can be attached to Sentry issues.\r\n *\r\n * @param {String} userId ID of current user\r\n */\n\nexport const setUserId = userId => {\n  Sentry.configureScope(scope => {\n    scope.setUser({\n      id: userId\n    });\n  });\n};\n/**\r\n * Clears the user ID.\r\n */\n\nexport const clearUserId = () => {\n  Sentry.configureScope(scope => {\n    scope.setUser(null);\n  });\n};\n\nconst printAPIErrorsAsConsoleTable = apiErrors => {\n  if (apiErrors != null && apiErrors.length > 0 && typeof console.table === 'function') {\n    console.log('Errors returned by Marketplace API call:');\n    console.table(apiErrors.map(err => ({\n      status: err.status,\n      code: err.code,\n      ...err.meta\n    })));\n  }\n};\n/**\r\n * Logs an execption. If Sentry is configured\r\n * sends the error information there. Otherwise\r\n * prints the error to the console.\r\n *\r\n * @param {Error} e Error that occurred\r\n * @param {String} code Error code\r\n * @param {Object} data Additional data to be sent to Sentry\r\n */\n\n\nexport const error = (e, code, data) => {\n  const apiErrors = responseApiErrorInfo(e);\n\n  if (config.sentryDsn) {\n    const extra = { ...data,\n      apiErrorData: apiErrors\n    };\n    Sentry.withScope(scope => {\n      scope.setTag('code', code);\n      Object.keys(extra).forEach(key => {\n        scope.setExtra(key, extra[key]);\n      });\n      Sentry.captureException(e);\n    });\n    printAPIErrorsAsConsoleTable(apiErrors);\n  } else {\n    console.error(e);\n    console.error('Error code:', code, 'data:', data);\n    printAPIErrorsAsConsoleTable(apiErrors);\n  }\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/log.js"],"names":["Sentry","config","responseApiErrorInfo","setup","sentryDsn","init","dsn","environment","env","setUserId","userId","configureScope","scope","setUser","id","clearUserId","printAPIErrorsAsConsoleTable","apiErrors","length","console","table","log","map","err","status","code","meta","error","e","data","extra","apiErrorData","withScope","setTag","Object","keys","forEach","key","setExtra","captureException"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,oBAAT,QAAqC,UAArC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAG,MAAM;AACzB,MAAIF,MAAM,CAACG,SAAX,EAAsB;AACpB;AACA;AACAJ,IAAAA,MAAM,CAACK,IAAP,CAAY;AACVC,MAAAA,GAAG,EAAEL,MAAM,CAACG,SADF;AAEVG,MAAAA,WAAW,EAAEN,MAAM,CAACO;AAFV,KAAZ;AAID;AACF,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI;AACjCV,EAAAA,MAAM,CAACW,cAAP,CAAsBC,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACC,OAAN,CAAc;AAAEC,MAAAA,EAAE,EAAEJ;AAAN,KAAd;AACD,GAFD;AAGD,CAJM;AAMP;AACA;AACA;;AAEA,OAAO,MAAMK,WAAW,GAAG,MAAM;AAC/Bf,EAAAA,MAAM,CAACW,cAAP,CAAsBC,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACC,OAAN,CAAc,IAAd;AACD,GAFD;AAGD,CAJM;;AAMP,MAAMG,4BAA4B,GAAGC,SAAS,IAAI;AAChD,MAAIA,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAACC,MAAV,GAAmB,CAAxC,IAA6C,OAAOC,OAAO,CAACC,KAAf,KAAyB,UAA1E,EAAsF;AACpFD,IAAAA,OAAO,CAACE,GAAR,CAAY,0CAAZ;AACAF,IAAAA,OAAO,CAACC,KAAR,CAAcH,SAAS,CAACK,GAAV,CAAcC,GAAG,KAAK;AAAEC,MAAAA,MAAM,EAAED,GAAG,CAACC,MAAd;AAAsBC,MAAAA,IAAI,EAAEF,GAAG,CAACE,IAAhC;AAAsC,SAAGF,GAAG,CAACG;AAA7C,KAAL,CAAjB,CAAd;AACD;AACF,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,CAAD,EAAIH,IAAJ,EAAUI,IAAV,KAAmB;AACtC,QAAMZ,SAAS,GAAGf,oBAAoB,CAAC0B,CAAD,CAAtC;;AACA,MAAI3B,MAAM,CAACG,SAAX,EAAsB;AACpB,UAAM0B,KAAK,GAAG,EAAE,GAAGD,IAAL;AAAWE,MAAAA,YAAY,EAAEd;AAAzB,KAAd;AAEAjB,IAAAA,MAAM,CAACgC,SAAP,CAAiBpB,KAAK,IAAI;AACxBA,MAAAA,KAAK,CAACqB,MAAN,CAAa,MAAb,EAAqBR,IAArB;AACAS,MAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA2BC,GAAG,IAAI;AAChCzB,QAAAA,KAAK,CAAC0B,QAAN,CAAeD,GAAf,EAAoBP,KAAK,CAACO,GAAD,CAAzB;AACD,OAFD;AAGArC,MAAAA,MAAM,CAACuC,gBAAP,CAAwBX,CAAxB;AACD,KAND;AAQAZ,IAAAA,4BAA4B,CAACC,SAAD,CAA5B;AACD,GAZD,MAYO;AACLE,IAAAA,OAAO,CAACQ,KAAR,CAAcC,CAAd;AACAT,IAAAA,OAAO,CAACQ,KAAR,CAAc,aAAd,EAA6BF,IAA7B,EAAmC,OAAnC,EAA4CI,IAA5C;AACAb,IAAAA,4BAA4B,CAACC,SAAD,CAA5B;AACD;AACF,CAnBM","sourcesContent":["/**\r\n * Error logging\r\n *\r\n * Can be used to log errors to console or and eternal\r\n * error logging system, like Sentry for example.\r\n *\r\n */\r\n\r\nimport * as Sentry from '@sentry/browser';\r\nimport config from '../config';\r\nimport { responseApiErrorInfo } from './errors';\r\n\r\n/**\r\n * Set up error handling. If a Sentry DSN is\r\n * provided a Sentry client will be installed.\r\n */\r\nexport const setup = () => {\r\n  if (config.sentryDsn) {\r\n    // Configures the Sentry client. Adds a handler for\r\n    // any uncaught exception.\r\n    Sentry.init({\r\n      dsn: config.sentryDsn,\r\n      environment: config.env,\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Set user ID for the logger so that it\r\n * can be attached to Sentry issues.\r\n *\r\n * @param {String} userId ID of current user\r\n */\r\nexport const setUserId = userId => {\r\n  Sentry.configureScope(scope => {\r\n    scope.setUser({ id: userId });\r\n  });\r\n};\r\n\r\n/**\r\n * Clears the user ID.\r\n */\r\n\r\nexport const clearUserId = () => {\r\n  Sentry.configureScope(scope => {\r\n    scope.setUser(null);\r\n  });\r\n};\r\n\r\nconst printAPIErrorsAsConsoleTable = apiErrors => {\r\n  if (apiErrors != null && apiErrors.length > 0 && typeof console.table === 'function') {\r\n    console.log('Errors returned by Marketplace API call:');\r\n    console.table(apiErrors.map(err => ({ status: err.status, code: err.code, ...err.meta })));\r\n  }\r\n};\r\n\r\n/**\r\n * Logs an execption. If Sentry is configured\r\n * sends the error information there. Otherwise\r\n * prints the error to the console.\r\n *\r\n * @param {Error} e Error that occurred\r\n * @param {String} code Error code\r\n * @param {Object} data Additional data to be sent to Sentry\r\n */\r\nexport const error = (e, code, data) => {\r\n  const apiErrors = responseApiErrorInfo(e);\r\n  if (config.sentryDsn) {\r\n    const extra = { ...data, apiErrorData: apiErrors };\r\n\r\n    Sentry.withScope(scope => {\r\n      scope.setTag('code', code);\r\n      Object.keys(extra).forEach(key => {\r\n        scope.setExtra(key, extra[key]);\r\n      });\r\n      Sentry.captureException(e);\r\n    });\r\n\r\n    printAPIErrorsAsConsoleTable(apiErrors);\r\n  } else {\r\n    console.error(e);\r\n    console.error('Error code:', code, 'data:', data);\r\n    printAPIErrorsAsConsoleTable(apiErrors);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}