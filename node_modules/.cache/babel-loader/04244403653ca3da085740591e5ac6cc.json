{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Topbar\\\\TopbarSearchForm\\\\TopbarSearchForm.js\";\nimport React, { Component } from 'react';\nimport { bool, func, object, string } from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\nimport { isMainSearchTypeKeywords } from '../../../util/search';\nimport { Form, LocationAutocompleteInput } from '../../../components';\nimport IconSearchDesktop from './IconSearchDesktop';\nimport css from './TopbarSearchForm.module.css';\n\nconst identity = v => v;\n\nconst KeywordSearchField = props => {\n  const {\n    keywordSearchWrapperClasses,\n    iconClass,\n    intl,\n    isMobile,\n    inputRef\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: keywordSearchWrapperClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: css.searchSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: iconClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconSearchDesktop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Field, {\n    name: \"keywords\",\n    render: ({\n      input,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"input\", Object.assign({\n        className: isMobile ? css.mobileInput : css.desktopInput\n      }, input, {\n        id: \"keyword-search\",\n        ref: inputRef,\n        type: \"text\",\n        placeholder: intl.formatMessage({\n          id: 'TopbarSearchForm.placeholder'\n        }),\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = KeywordSearchField;\n\nconst LocationSearchField = props => {\n  const {\n    desktopInputRootClass,\n    intl,\n    isMobile,\n    inputRef,\n    onLocationChange\n  } = props;\n  return /*#__PURE__*/React.createElement(Field, {\n    name: \"location\",\n    format: identity,\n    render: ({\n      input,\n      meta\n    }) => {\n      const {\n        onChange,\n        ...restInput\n      } = input; // Merge the standard onChange function with custom behaviur. A better solution would\n      // be to use the FormSpy component from Final Form and pass this.onChange to the\n      // onChange prop but that breaks due to insufficient subscription handling.\n      // See: https://github.com/final-form/react-final-form/issues/159\n\n      const searchOnChange = value => {\n        onChange(value);\n        onLocationChange(value);\n      };\n\n      return /*#__PURE__*/React.createElement(LocationAutocompleteInput, {\n        className: isMobile ? css.mobileInputRoot : desktopInputRootClass,\n        iconClassName: isMobile ? css.mobileIcon : css.desktopIcon,\n        inputClassName: isMobile ? css.mobileInput : css.desktopInput,\n        predictionsClassName: isMobile ? css.mobilePredictions : css.desktopPredictions,\n        predictionsAttributionClassName: isMobile ? css.mobilePredictionsAttribution : null,\n        placeholder: intl.formatMessage({\n          id: 'TopbarSearchForm.placeholder'\n        }),\n        closeOnBlur: !isMobile,\n        inputRef: inputRef,\n        input: { ...restInput,\n          onChange: searchOnChange\n        },\n        meta: meta,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\n\n_c2 = LocationSearchField;\n\nclass TopbarSearchFormComponent extends Component {\n  constructor(props) {\n    super(props); // onChange is used for location search\n\n    this.onChange = this.onChange.bind(this); // onSubmit is used for keywords search\n\n    this.onSubmit = this.onSubmit.bind(this); // Callback ref\n\n    this.searchInput = null;\n\n    this.setSearchInputRef = element => {\n      this.setSearchInput = element;\n    };\n  }\n\n  onChange(location) {\n    const {\n      appConfig,\n      onSubmit\n    } = this.props;\n\n    if (!isMainSearchTypeKeywords(appConfig) && location.selectedPlace) {\n      var _this$searchInput;\n\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      onSubmit({\n        location\n      }); // blur search input to hide software keyboard\n\n      (_this$searchInput = this.searchInput) === null || _this$searchInput === void 0 ? void 0 : _this$searchInput.blur();\n    }\n  }\n\n  onSubmit(values) {\n    const {\n      appConfig,\n      onSubmit\n    } = this.props;\n\n    if (isMainSearchTypeKeywords(appConfig)) {\n      var _this$searchInput2;\n\n      onSubmit({\n        keywords: values.keywords\n      }); // blur search input to hide software keyboard\n\n      (_this$searchInput2 = this.searchInput) === null || _this$searchInput2 === void 0 ? void 0 : _this$searchInput2.blur();\n    }\n  }\n\n  render() {\n    const {\n      onSubmit,\n      appConfig,\n      ...restOfProps\n    } = this.props;\n    const isKeywordsSearch = isMainSearchTypeKeywords(appConfig);\n    const submit = isKeywordsSearch ? this.onSubmit : onSubmit;\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, restOfProps, {\n      onSubmit: submit,\n      render: formRenderProps => {\n        const {\n          rootClassName,\n          className,\n          desktopInputRoot,\n          intl,\n          isMobile,\n          handleSubmit\n        } = formRenderProps;\n        const classes = classNames(rootClassName, className);\n        const desktopInputRootClass = desktopInputRoot || css.desktopInputRoot; // Location search: allow form submit only when the place has changed\n\n        const preventFormSubmit = e => e.preventDefault();\n\n        const submitFormFn = isKeywordsSearch ? handleSubmit : preventFormSubmit;\n        const keywordSearchWrapperClasses = classNames(css.keywordSearchWrapper, isMobile ? css.mobileInputRoot : desktopInputRootClass);\n        return /*#__PURE__*/React.createElement(Form, {\n          className: classes,\n          onSubmit: submitFormFn,\n          enforcePagePreloadFor: \"SearchPage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }\n        }, isKeywordsSearch ? /*#__PURE__*/React.createElement(KeywordSearchField, {\n          keywordSearchWrapperClasses: keywordSearchWrapperClasses,\n          iconClass: classNames(isMobile ? css.mobileIcon : css.desktopIcon || css.icon),\n          intl: intl,\n          isMobile: isMobile,\n          inputRef: this.setSearchInputRef,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }\n        }) : /*#__PURE__*/React.createElement(LocationSearchField, {\n          desktopInputRootClass: desktopInputRootClass,\n          intl: intl,\n          isMobile: isMobile,\n          inputRef: this.setSearchInputRef,\n          onLocationChange: this.onChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nTopbarSearchFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  desktopInputRoot: null,\n  isMobile: false,\n  appConfig: config\n};\nTopbarSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  desktopInputRoot: string,\n  onSubmit: func.isRequired,\n  isMobile: bool,\n  appConfig: object,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst TopbarSearchForm = injectIntl(TopbarSearchFormComponent);\n_c3 = TopbarSearchForm;\nexport default TopbarSearchForm;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"KeywordSearchField\");\n$RefreshReg$(_c2, \"LocationSearchField\");\n$RefreshReg$(_c3, \"TopbarSearchForm\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Topbar/TopbarSearchForm/TopbarSearchForm.js"],"names":["React","Component","bool","func","object","string","Form","FinalForm","Field","classNames","config","intlShape","injectIntl","isMainSearchTypeKeywords","LocationAutocompleteInput","IconSearchDesktop","css","identity","v","KeywordSearchField","props","keywordSearchWrapperClasses","iconClass","intl","isMobile","inputRef","searchSubmit","input","meta","mobileInput","desktopInput","formatMessage","id","LocationSearchField","desktopInputRootClass","onLocationChange","onChange","restInput","searchOnChange","value","mobileInputRoot","mobileIcon","desktopIcon","mobilePredictions","desktopPredictions","mobilePredictionsAttribution","TopbarSearchFormComponent","constructor","bind","onSubmit","searchInput","setSearchInputRef","element","setSearchInput","location","appConfig","selectedPlace","blur","values","keywords","render","restOfProps","isKeywordsSearch","submit","formRenderProps","rootClassName","className","desktopInputRoot","handleSubmit","classes","preventFormSubmit","e","preventDefault","submitFormFn","keywordSearchWrapper","icon","defaultProps","propTypes","isRequired","TopbarSearchForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { bool, func, object, string } from 'prop-types';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { isMainSearchTypeKeywords } from '../../../util/search';\r\n\r\nimport { Form, LocationAutocompleteInput } from '../../../components';\r\n\r\nimport IconSearchDesktop from './IconSearchDesktop';\r\nimport css from './TopbarSearchForm.module.css';\r\n\r\nconst identity = v => v;\r\n\r\nconst KeywordSearchField = props => {\r\n  const { keywordSearchWrapperClasses, iconClass, intl, isMobile, inputRef } = props;\r\n  return (\r\n    <div className={keywordSearchWrapperClasses}>\r\n      <button className={css.searchSubmit}>\r\n        <div className={iconClass}>\r\n          <IconSearchDesktop />\r\n        </div>\r\n      </button>\r\n      <Field\r\n        name=\"keywords\"\r\n        render={({ input, meta }) => {\r\n          return (\r\n            <input\r\n              className={isMobile ? css.mobileInput : css.desktopInput}\r\n              {...input}\r\n              id=\"keyword-search\"\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              placeholder={intl.formatMessage({\r\n                id: 'TopbarSearchForm.placeholder',\r\n              })}\r\n              autoComplete=\"off\"\r\n            />\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LocationSearchField = props => {\r\n  const { desktopInputRootClass, intl, isMobile, inputRef, onLocationChange } = props;\r\n  return (\r\n    <Field\r\n      name=\"location\"\r\n      format={identity}\r\n      render={({ input, meta }) => {\r\n        const { onChange, ...restInput } = input;\r\n\r\n        // Merge the standard onChange function with custom behaviur. A better solution would\r\n        // be to use the FormSpy component from Final Form and pass this.onChange to the\r\n        // onChange prop but that breaks due to insufficient subscription handling.\r\n        // See: https://github.com/final-form/react-final-form/issues/159\r\n        const searchOnChange = value => {\r\n          onChange(value);\r\n          onLocationChange(value);\r\n        };\r\n\r\n        return (\r\n          <LocationAutocompleteInput\r\n            className={isMobile ? css.mobileInputRoot : desktopInputRootClass}\r\n            iconClassName={isMobile ? css.mobileIcon : css.desktopIcon}\r\n            inputClassName={isMobile ? css.mobileInput : css.desktopInput}\r\n            predictionsClassName={isMobile ? css.mobilePredictions : css.desktopPredictions}\r\n            predictionsAttributionClassName={isMobile ? css.mobilePredictionsAttribution : null}\r\n            placeholder={intl.formatMessage({ id: 'TopbarSearchForm.placeholder' })}\r\n            closeOnBlur={!isMobile}\r\n            inputRef={inputRef}\r\n            input={{ ...restInput, onChange: searchOnChange }}\r\n            meta={meta}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nclass TopbarSearchFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // onChange is used for location search\r\n    this.onChange = this.onChange.bind(this);\r\n    // onSubmit is used for keywords search\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    // Callback ref\r\n    this.searchInput = null;\r\n    this.setSearchInputRef = element => {\r\n      this.setSearchInput = element;\r\n    };\r\n  }\r\n\r\n  onChange(location) {\r\n    const { appConfig, onSubmit } = this.props;\r\n    if (!isMainSearchTypeKeywords(appConfig) && location.selectedPlace) {\r\n      // Note that we use `onSubmit` instead of the conventional\r\n      // `handleSubmit` prop for submitting. We want to autosubmit\r\n      // when a place is selected, and don't require any extra\r\n      // validations for the form.\r\n      onSubmit({ location });\r\n      // blur search input to hide software keyboard\r\n      this.searchInput?.blur();\r\n    }\r\n  }\r\n\r\n  onSubmit(values) {\r\n    const { appConfig, onSubmit } = this.props;\r\n    if (isMainSearchTypeKeywords(appConfig)) {\r\n      onSubmit({ keywords: values.keywords });\r\n      // blur search input to hide software keyboard\r\n      this.searchInput?.blur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onSubmit, appConfig, ...restOfProps } = this.props;\r\n    const isKeywordsSearch = isMainSearchTypeKeywords(appConfig);\r\n    const submit = isKeywordsSearch ? this.onSubmit : onSubmit;\r\n    return (\r\n      <FinalForm\r\n        {...restOfProps}\r\n        onSubmit={submit}\r\n        render={formRenderProps => {\r\n          const {\r\n            rootClassName,\r\n            className,\r\n            desktopInputRoot,\r\n            intl,\r\n            isMobile,\r\n            handleSubmit,\r\n          } = formRenderProps;\r\n          const classes = classNames(rootClassName, className);\r\n          const desktopInputRootClass = desktopInputRoot || css.desktopInputRoot;\r\n\r\n          // Location search: allow form submit only when the place has changed\r\n          const preventFormSubmit = e => e.preventDefault();\r\n          const submitFormFn = isKeywordsSearch ? handleSubmit : preventFormSubmit;\r\n\r\n          const keywordSearchWrapperClasses = classNames(\r\n            css.keywordSearchWrapper,\r\n            isMobile ? css.mobileInputRoot : desktopInputRootClass\r\n          );\r\n\r\n          return (\r\n            <Form className={classes} onSubmit={submitFormFn} enforcePagePreloadFor=\"SearchPage\">\r\n              {isKeywordsSearch ? (\r\n                <KeywordSearchField\r\n                  keywordSearchWrapperClasses={keywordSearchWrapperClasses}\r\n                  iconClass={classNames(isMobile ? css.mobileIcon : css.desktopIcon || css.icon)}\r\n                  intl={intl}\r\n                  isMobile={isMobile}\r\n                  inputRef={this.setSearchInputRef}\r\n                />\r\n              ) : (\r\n                <LocationSearchField\r\n                  desktopInputRootClass={desktopInputRootClass}\r\n                  intl={intl}\r\n                  isMobile={isMobile}\r\n                  inputRef={this.setSearchInputRef}\r\n                  onLocationChange={this.onChange}\r\n                />\r\n              )}\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nTopbarSearchFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  desktopInputRoot: null,\r\n  isMobile: false,\r\n  appConfig: config,\r\n};\r\n\r\nTopbarSearchFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  desktopInputRoot: string,\r\n  onSubmit: func.isRequired,\r\n  isMobile: bool,\r\n  appConfig: object,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst TopbarSearchForm = injectIntl(TopbarSearchFormComponent);\r\n\r\nexport default TopbarSearchForm;\r\n"]},"metadata":{},"sourceType":"module"}