{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldCheckboxGroup\\\\FieldCheckboxGroup.example.js\";\nimport React from 'react';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { Button } from '../../components';\nimport FieldCheckboxGroup from './FieldCheckboxGroup';\nimport { requiredFieldArrayCheckbox } from '../../util/validators';\nconst formName = 'Styleguide.FieldCheckboxGroup';\nconst formNameRequired = 'Styleguide.FieldCheckboxGroupRequired';\nconst label = /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 15\n  }\n}, \"Amenities\");\nconst commonProps = {\n  label: label,\n  options: [{\n    key: 'towels',\n    label: 'Towels'\n  }, {\n    key: 'bathroom',\n    label: 'Bathroom'\n  }, {\n    key: 'swimming_pool',\n    label: 'Swimming pool'\n  }, {\n    key: 'own_drinks',\n    label: 'Own drinks allowed'\n  }, {\n    key: 'jacuzzi',\n    label: 'Jacuzzi'\n  }, {\n    key: 'audiovisual_entertainment',\n    label: 'Audiovisual entertainment'\n  }, {\n    key: 'barbeque',\n    label: 'Barbeque'\n  }, {\n    key: 'own_food_allowed',\n    label: 'Own food allowed'\n  }],\n  twoColumns: true\n};\nconst optionalProps = {\n  name: 'amenities-optional',\n  id: 'amenities-optional',\n  ...commonProps\n};\nconst requiredProps = {\n  name: 'amenities-required',\n  id: `${formNameRequired}.amenities-required`,\n  ...commonProps,\n  validate: requiredFieldArrayCheckbox('this is required')\n};\nconst tosProps = {\n  name: 'terms-of-service',\n  id: `${formNameRequired}.tos-accepted`,\n  options: [{\n    key: 'tos',\n    label: 'Terms of Service'\n  }],\n  validate: requiredFieldArrayCheckbox('You need to accept Terms of Service')\n};\n\nconst formComponent = country => props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  mutators: { ...arrayMutators\n  },\n  render: fieldRenderProps => {\n    const {\n      handleSubmit,\n      invalid,\n      submitting,\n      componentProps,\n      onChange\n    } = fieldRenderProps;\n    const submitDisabled = invalid || submitting;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        handleSubmit(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormSpy, {\n      onChange: onChange,\n      subscription: {\n        values: true,\n        dirty: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldCheckboxGroup, Object.assign({}, componentProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginTop: 24\n      },\n      type: \"submit\",\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Submit\"));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }\n}));\n\nexport const Optional = {\n  component: formComponent(formName),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    initialValues: {\n      [optionalProps.name]: ['jacuzzi', 'towels']\n    },\n    componentProps: optionalProps\n  },\n  group: 'inputs'\n};\nexport const Required = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: requiredProps\n  },\n  group: 'inputs'\n};\nexport const ToSAccepted = {\n  component: formComponent(formNameRequired),\n  props: {\n    onChange: formState => {\n      if (formState.dirty) {\n        console.log('form values changed to:', formState.values);\n      }\n    },\n    onSubmit: values => {\n      console.log('Submit values: ', values);\n    },\n    componentProps: tosProps\n  },\n  group: 'inputs'\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldCheckboxGroup/FieldCheckboxGroup.example.js"],"names":["React","Form","FinalForm","FormSpy","arrayMutators","Button","FieldCheckboxGroup","requiredFieldArrayCheckbox","formName","formNameRequired","label","commonProps","options","key","twoColumns","optionalProps","name","id","requiredProps","validate","tosProps","formComponent","country","props","fieldRenderProps","handleSubmit","invalid","submitting","componentProps","onChange","submitDisabled","e","preventDefault","values","dirty","marginTop","Optional","component","formState","console","log","onSubmit","initialValues","group","Required","ToSAccepted"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\nimport arrayMutators from 'final-form-arrays';\r\nimport { Button } from '../../components';\r\nimport FieldCheckboxGroup from './FieldCheckboxGroup';\r\nimport { requiredFieldArrayCheckbox } from '../../util/validators';\r\n\r\nconst formName = 'Styleguide.FieldCheckboxGroup';\r\nconst formNameRequired = 'Styleguide.FieldCheckboxGroupRequired';\r\n\r\nconst label = <h3>Amenities</h3>;\r\n\r\nconst commonProps = {\r\n  label: label,\r\n  options: [\r\n    {\r\n      key: 'towels',\r\n      label: 'Towels',\r\n    },\r\n    {\r\n      key: 'bathroom',\r\n      label: 'Bathroom',\r\n    },\r\n    {\r\n      key: 'swimming_pool',\r\n      label: 'Swimming pool',\r\n    },\r\n    {\r\n      key: 'own_drinks',\r\n      label: 'Own drinks allowed',\r\n    },\r\n    {\r\n      key: 'jacuzzi',\r\n      label: 'Jacuzzi',\r\n    },\r\n    {\r\n      key: 'audiovisual_entertainment',\r\n      label: 'Audiovisual entertainment',\r\n    },\r\n    {\r\n      key: 'barbeque',\r\n      label: 'Barbeque',\r\n    },\r\n    {\r\n      key: 'own_food_allowed',\r\n      label: 'Own food allowed',\r\n    },\r\n  ],\r\n  twoColumns: true,\r\n};\r\n\r\nconst optionalProps = {\r\n  name: 'amenities-optional',\r\n  id: 'amenities-optional',\r\n  ...commonProps,\r\n};\r\n\r\nconst requiredProps = {\r\n  name: 'amenities-required',\r\n  id: `${formNameRequired}.amenities-required`,\r\n  ...commonProps,\r\n  validate: requiredFieldArrayCheckbox('this is required'),\r\n};\r\nconst tosProps = {\r\n  name: 'terms-of-service',\r\n  id: `${formNameRequired}.tos-accepted`,\r\n  options: [\r\n    {\r\n      key: 'tos',\r\n      label: 'Terms of Service',\r\n    },\r\n  ],\r\n  validate: requiredFieldArrayCheckbox('You need to accept Terms of Service'),\r\n};\r\n\r\nconst formComponent = country => props => (\r\n  <FinalForm\r\n    {...props}\r\n    mutators={{ ...arrayMutators }}\r\n    render={fieldRenderProps => {\r\n      const { handleSubmit, invalid, submitting, componentProps, onChange } = fieldRenderProps;\r\n\r\n      const submitDisabled = invalid || submitting;\r\n\r\n      return (\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            handleSubmit(e);\r\n          }}\r\n        >\r\n          <FormSpy onChange={onChange} subscription={{ values: true, dirty: true }} />\r\n          <FieldCheckboxGroup {...componentProps} />\r\n\r\n          <Button style={{ marginTop: 24 }} type=\"submit\" disabled={submitDisabled}>\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nexport const Optional = {\r\n  component: formComponent(formName),\r\n  props: {\r\n    onChange: formState => {\r\n      if (formState.dirty) {\r\n        console.log('form values changed to:', formState.values);\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('Submit values: ', values);\r\n    },\r\n    initialValues: { [optionalProps.name]: ['jacuzzi', 'towels'] },\r\n    componentProps: optionalProps,\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const Required = {\r\n  component: formComponent(formNameRequired),\r\n  props: {\r\n    onChange: formState => {\r\n      if (formState.dirty) {\r\n        console.log('form values changed to:', formState.values);\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('Submit values: ', values);\r\n    },\r\n    componentProps: requiredProps,\r\n  },\r\n  group: 'inputs',\r\n};\r\n\r\nexport const ToSAccepted = {\r\n  component: formComponent(formNameRequired),\r\n  props: {\r\n    onChange: formState => {\r\n      if (formState.dirty) {\r\n        console.log('form values changed to:', formState.values);\r\n      }\r\n    },\r\n    onSubmit: values => {\r\n      console.log('Submit values: ', values);\r\n    },\r\n    componentProps: tosProps,\r\n  },\r\n  group: 'inputs',\r\n};\r\n"]},"metadata":{},"sourceType":"module"}