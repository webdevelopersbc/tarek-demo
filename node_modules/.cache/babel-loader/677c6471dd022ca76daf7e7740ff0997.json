{"ast":null,"code":"import merge from 'lodash/merge';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { fetchCurrentUser, currentUserShowSuccess } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const SAVE_CONTACT_DETAILS_REQUEST = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_REQUEST';\nexport const SAVE_CONTACT_DETAILS_SUCCESS = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_SUCCESS';\nexport const SAVE_EMAIL_ERROR = 'app/ContactDetailsPage/SAVE_EMAIL_ERROR';\nexport const SAVE_PHONE_NUMBER_ERROR = 'app/ContactDetailsPage/SAVE_PHONE_NUMBER_ERROR';\nexport const SAVE_CONTACT_DETAILS_CLEAR = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_CLEAR';\nexport const RESET_PASSWORD_REQUEST = 'app/ContactDetailsPage/RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'app/ContactDetailsPage/RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_ERROR = 'app/ContactDetailsPage/RESET_PASSWORD_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  saveContactDetailsInProgress: false,\n  contactDetailsChanged: false,\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SAVE_CONTACT_DETAILS_REQUEST:\n      return { ...state,\n        saveContactDetailsInProgress: true,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false\n      };\n\n    case SAVE_CONTACT_DETAILS_SUCCESS:\n      return { ...state,\n        saveContactDetailsInProgress: false,\n        contactDetailsChanged: true\n      };\n\n    case SAVE_EMAIL_ERROR:\n      return { ...state,\n        saveContactDetailsInProgress: false,\n        saveEmailError: payload\n      };\n\n    case SAVE_PHONE_NUMBER_ERROR:\n      return { ...state,\n        saveContactDetailsInProgress: false,\n        savePhoneNumberError: payload\n      };\n\n    case SAVE_CONTACT_DETAILS_CLEAR:\n      return { ...state,\n        saveContactDetailsInProgress: false,\n        saveEmailError: null,\n        savePhoneNumberError: null,\n        contactDetailsChanged: false\n      };\n\n    case RESET_PASSWORD_REQUEST:\n      return { ...state,\n        resetPasswordInProgress: true,\n        resetPasswordError: null\n      };\n\n    case RESET_PASSWORD_SUCCESS:\n      return { ...state,\n        resetPasswordInProgress: false\n      };\n\n    case RESET_PASSWORD_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        resetPasswordInProgress: false,\n        resetPasswordError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const saveContactDetailsRequest = () => ({\n  type: SAVE_CONTACT_DETAILS_REQUEST\n});\nexport const saveContactDetailsSuccess = () => ({\n  type: SAVE_CONTACT_DETAILS_SUCCESS\n});\nexport const saveEmailError = error => ({\n  type: SAVE_EMAIL_ERROR,\n  payload: error,\n  error: true\n});\nexport const savePhoneNumberError = error => ({\n  type: SAVE_PHONE_NUMBER_ERROR,\n  payload: error,\n  error: true\n});\nexport const saveContactDetailsClear = () => ({\n  type: SAVE_CONTACT_DETAILS_CLEAR\n});\nexport const resetPasswordRequest = () => ({\n  type: RESET_PASSWORD_REQUEST\n});\nexport const resetPasswordSuccess = () => ({\n  type: RESET_PASSWORD_SUCCESS\n});\nexport const resetPasswordError = e => ({\n  type: RESET_PASSWORD_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\n/**\r\n * Make a phone number update request to the API and return the current user.\r\n */\n\nconst requestSavePhoneNumber = params => (dispatch, getState, sdk) => {\n  const phoneNumber = params.phoneNumber;\n  return sdk.currentUser.updateProfile({\n    protectedData: {\n      phoneNumber\n    }\n  }, {\n    expand: true,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\n    }\n\n    const currentUser = entities[0];\n    return currentUser;\n  }).catch(e => {\n    dispatch(savePhoneNumberError(storableError(e))); // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n    // action will not be fired\n\n    throw e;\n  });\n};\n/**\r\n * Make a email update request to the API and return the current user.\r\n */\n\n\nconst requestSaveEmail = params => (dispatch, getState, sdk) => {\n  const {\n    email,\n    currentPassword\n  } = params;\n  return sdk.currentUser.changeEmail({\n    email,\n    currentPassword\n  }, {\n    expand: true,\n    include: ['profileImage'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x']\n  }).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.changeEmail response');\n    }\n\n    const currentUser = entities[0];\n    return currentUser;\n  }).catch(e => {\n    dispatch(saveEmailError(storableError(e))); // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\n    // action will not be fired\n\n    throw e;\n  });\n};\n/**\r\n * Save email and update the current user.\r\n */\n\n\nconst saveEmail = params => (dispatch, getState, sdk) => {\n  return dispatch(requestSaveEmail(params)).then(user => {\n    dispatch(currentUserShowSuccess(user));\n    dispatch(saveContactDetailsSuccess());\n  }) // error action dispatched in requestSaveEmail\n  .catch(e => null);\n};\n/**\r\n * Save phone number and update the current user.\r\n */\n\n\nconst savePhoneNumber = params => (dispatch, getState, sdk) => {\n  return dispatch(requestSavePhoneNumber(params)).then(user => {\n    dispatch(currentUserShowSuccess(user));\n    dispatch(saveContactDetailsSuccess());\n  }) // error action dispatched in requestSavePhoneNumber\n  .catch(e => null);\n};\n/**\r\n * Save email and phone number and update the current user.\r\n */\n\n\nconst saveEmailAndPhoneNumber = params => (dispatch, getState, sdk) => {\n  const {\n    email,\n    phoneNumber,\n    currentPassword\n  } = params; // order of promises: 1. email, 2. phone number\n\n  const promises = [dispatch(requestSaveEmail({\n    email,\n    currentPassword\n  })), dispatch(requestSavePhoneNumber({\n    phoneNumber\n  }))];\n  return Promise.all(promises).then(values => {\n    // Array of two user objects is resolved\n    // the first one is from the email update\n    // the second one is from the phone number update\n    const saveEmailUser = values[0];\n    const savePhoneNumberUser = values[1]; // merge the protected data from the user object returned\n    // by the phone update operation\n\n    const protectedData = savePhoneNumberUser.attributes.profile.protectedData;\n    const phoneNumberMergeSource = {\n      attributes: {\n        profile: {\n          protectedData\n        }\n      }\n    };\n    const currentUser = merge(saveEmailUser, phoneNumberMergeSource);\n    dispatch(currentUserShowSuccess(currentUser));\n    dispatch(saveContactDetailsSuccess());\n  }).catch(e => null);\n};\n/**\r\n * Update contact details, actions depend on which data has changed\r\n */\n\n\nexport const saveContactDetails = params => (dispatch, getState, sdk) => {\n  dispatch(saveContactDetailsRequest());\n  const {\n    email,\n    currentEmail,\n    phoneNumber,\n    currentPhoneNumber,\n    currentPassword\n  } = params;\n  const emailChanged = email !== currentEmail;\n  const phoneNumberChanged = phoneNumber !== currentPhoneNumber;\n\n  if (emailChanged && phoneNumberChanged) {\n    return dispatch(saveEmailAndPhoneNumber({\n      email,\n      currentPassword,\n      phoneNumber\n    }));\n  } else if (emailChanged) {\n    return dispatch(saveEmail({\n      email,\n      currentPassword\n    }));\n  } else if (phoneNumberChanged) {\n    return dispatch(savePhoneNumber({\n      phoneNumber\n    }));\n  }\n};\nexport const resetPassword = email => (dispatch, getState, sdk) => {\n  dispatch(resetPasswordRequest());\n  return sdk.passwordReset.request({\n    email\n  }).then(() => dispatch(resetPasswordSuccess())).catch(e => dispatch(resetPasswordError(storableError(e))));\n};\nexport const loadData = () => {\n  // Since verify email happens in separate tab, current user's data might be updated\n  return fetchCurrentUser();\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/ContactDetailsPage/ContactDetailsPage.duck.js"],"names":["merge","denormalisedResponseEntities","storableError","fetchCurrentUser","currentUserShowSuccess","SAVE_CONTACT_DETAILS_REQUEST","SAVE_CONTACT_DETAILS_SUCCESS","SAVE_EMAIL_ERROR","SAVE_PHONE_NUMBER_ERROR","SAVE_CONTACT_DETAILS_CLEAR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","initialState","saveEmailError","savePhoneNumberError","saveContactDetailsInProgress","contactDetailsChanged","resetPasswordInProgress","resetPasswordError","reducer","state","action","type","payload","console","error","saveContactDetailsRequest","saveContactDetailsSuccess","saveContactDetailsClear","resetPasswordRequest","resetPasswordSuccess","e","requestSavePhoneNumber","params","dispatch","getState","sdk","phoneNumber","currentUser","updateProfile","protectedData","expand","include","then","response","entities","length","Error","catch","requestSaveEmail","email","currentPassword","changeEmail","saveEmail","user","savePhoneNumber","saveEmailAndPhoneNumber","promises","Promise","all","values","saveEmailUser","savePhoneNumberUser","attributes","profile","phoneNumberMergeSource","saveContactDetails","currentEmail","currentPhoneNumber","emailChanged","phoneNumberChanged","resetPassword","passwordReset","request","loadData"],"mappings":"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","sourcesContent":["import merge from 'lodash/merge';\r\nimport { denormalisedResponseEntities } from '../../util/data';\r\nimport { storableError } from '../../util/errors';\r\nimport { fetchCurrentUser, currentUserShowSuccess } from '../../ducks/user.duck';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const SAVE_CONTACT_DETAILS_REQUEST = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_REQUEST';\r\nexport const SAVE_CONTACT_DETAILS_SUCCESS = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_SUCCESS';\r\nexport const SAVE_EMAIL_ERROR = 'app/ContactDetailsPage/SAVE_EMAIL_ERROR';\r\nexport const SAVE_PHONE_NUMBER_ERROR = 'app/ContactDetailsPage/SAVE_PHONE_NUMBER_ERROR';\r\n\r\nexport const SAVE_CONTACT_DETAILS_CLEAR = 'app/ContactDetailsPage/SAVE_CONTACT_DETAILS_CLEAR';\r\n\r\nexport const RESET_PASSWORD_REQUEST = 'app/ContactDetailsPage/RESET_PASSWORD_REQUEST';\r\nexport const RESET_PASSWORD_SUCCESS = 'app/ContactDetailsPage/RESET_PASSWORD_SUCCESS';\r\nexport const RESET_PASSWORD_ERROR = 'app/ContactDetailsPage/RESET_PASSWORD_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  saveEmailError: null,\r\n  savePhoneNumberError: null,\r\n  saveContactDetailsInProgress: false,\r\n  contactDetailsChanged: false,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SAVE_CONTACT_DETAILS_REQUEST:\r\n      return {\r\n        ...state,\r\n        saveContactDetailsInProgress: true,\r\n        saveEmailError: null,\r\n        savePhoneNumberError: null,\r\n        contactDetailsChanged: false,\r\n      };\r\n    case SAVE_CONTACT_DETAILS_SUCCESS:\r\n      return { ...state, saveContactDetailsInProgress: false, contactDetailsChanged: true };\r\n    case SAVE_EMAIL_ERROR:\r\n      return { ...state, saveContactDetailsInProgress: false, saveEmailError: payload };\r\n    case SAVE_PHONE_NUMBER_ERROR:\r\n      return { ...state, saveContactDetailsInProgress: false, savePhoneNumberError: payload };\r\n\r\n    case SAVE_CONTACT_DETAILS_CLEAR:\r\n      return {\r\n        ...state,\r\n        saveContactDetailsInProgress: false,\r\n        saveEmailError: null,\r\n        savePhoneNumberError: null,\r\n        contactDetailsChanged: false,\r\n      };\r\n\r\n    case RESET_PASSWORD_REQUEST:\r\n      return { ...state, resetPasswordInProgress: true, resetPasswordError: null };\r\n    case RESET_PASSWORD_SUCCESS:\r\n      return { ...state, resetPasswordInProgress: false };\r\n    case RESET_PASSWORD_ERROR:\r\n      console.error(payload); // eslint-disable-line no-console\r\n      return { ...state, resetPasswordInProgress: false, resetPasswordError: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const saveContactDetailsRequest = () => ({ type: SAVE_CONTACT_DETAILS_REQUEST });\r\nexport const saveContactDetailsSuccess = () => ({ type: SAVE_CONTACT_DETAILS_SUCCESS });\r\nexport const saveEmailError = error => ({\r\n  type: SAVE_EMAIL_ERROR,\r\n  payload: error,\r\n  error: true,\r\n});\r\nexport const savePhoneNumberError = error => ({\r\n  type: SAVE_PHONE_NUMBER_ERROR,\r\n  payload: error,\r\n  error: true,\r\n});\r\n\r\nexport const saveContactDetailsClear = () => ({ type: SAVE_CONTACT_DETAILS_CLEAR });\r\n\r\nexport const resetPasswordRequest = () => ({ type: RESET_PASSWORD_REQUEST });\r\n\r\nexport const resetPasswordSuccess = () => ({ type: RESET_PASSWORD_SUCCESS });\r\n\r\nexport const resetPasswordError = e => ({\r\n  type: RESET_PASSWORD_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\n/**\r\n * Make a phone number update request to the API and return the current user.\r\n */\r\nconst requestSavePhoneNumber = params => (dispatch, getState, sdk) => {\r\n  const phoneNumber = params.phoneNumber;\r\n\r\n  return sdk.currentUser\r\n    .updateProfile(\r\n      { protectedData: { phoneNumber } },\r\n      {\r\n        expand: true,\r\n        include: ['profileImage'],\r\n        'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n      }\r\n    )\r\n    .then(response => {\r\n      const entities = denormalisedResponseEntities(response);\r\n      if (entities.length !== 1) {\r\n        throw new Error('Expected a resource in the sdk.currentUser.updateProfile response');\r\n      }\r\n\r\n      const currentUser = entities[0];\r\n      return currentUser;\r\n    })\r\n    .catch(e => {\r\n      dispatch(savePhoneNumberError(storableError(e)));\r\n      // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\r\n      // action will not be fired\r\n      throw e;\r\n    });\r\n};\r\n\r\n/**\r\n * Make a email update request to the API and return the current user.\r\n */\r\nconst requestSaveEmail = params => (dispatch, getState, sdk) => {\r\n  const { email, currentPassword } = params;\r\n\r\n  return sdk.currentUser\r\n    .changeEmail(\r\n      { email, currentPassword },\r\n      {\r\n        expand: true,\r\n        include: ['profileImage'],\r\n        'fields.image': ['variants.square-small', 'variants.square-small2x'],\r\n      }\r\n    )\r\n    .then(response => {\r\n      const entities = denormalisedResponseEntities(response);\r\n      if (entities.length !== 1) {\r\n        throw new Error('Expected a resource in the sdk.currentUser.changeEmail response');\r\n      }\r\n\r\n      const currentUser = entities[0];\r\n      return currentUser;\r\n    })\r\n    .catch(e => {\r\n      dispatch(saveEmailError(storableError(e)));\r\n      // pass the same error so that the SAVE_CONTACT_DETAILS_SUCCESS\r\n      // action will not be fired\r\n      throw e;\r\n    });\r\n};\r\n\r\n/**\r\n * Save email and update the current user.\r\n */\r\nconst saveEmail = params => (dispatch, getState, sdk) => {\r\n  return (\r\n    dispatch(requestSaveEmail(params))\r\n      .then(user => {\r\n        dispatch(currentUserShowSuccess(user));\r\n        dispatch(saveContactDetailsSuccess());\r\n      })\r\n      // error action dispatched in requestSaveEmail\r\n      .catch(e => null)\r\n  );\r\n};\r\n\r\n/**\r\n * Save phone number and update the current user.\r\n */\r\nconst savePhoneNumber = params => (dispatch, getState, sdk) => {\r\n  return (\r\n    dispatch(requestSavePhoneNumber(params))\r\n      .then(user => {\r\n        dispatch(currentUserShowSuccess(user));\r\n        dispatch(saveContactDetailsSuccess());\r\n      })\r\n      // error action dispatched in requestSavePhoneNumber\r\n      .catch(e => null)\r\n  );\r\n};\r\n\r\n/**\r\n * Save email and phone number and update the current user.\r\n */\r\nconst saveEmailAndPhoneNumber = params => (dispatch, getState, sdk) => {\r\n  const { email, phoneNumber, currentPassword } = params;\r\n\r\n  // order of promises: 1. email, 2. phone number\r\n  const promises = [\r\n    dispatch(requestSaveEmail({ email, currentPassword })),\r\n    dispatch(requestSavePhoneNumber({ phoneNumber })),\r\n  ];\r\n\r\n  return Promise.all(promises)\r\n    .then(values => {\r\n      // Array of two user objects is resolved\r\n      // the first one is from the email update\r\n      // the second one is from the phone number update\r\n\r\n      const saveEmailUser = values[0];\r\n      const savePhoneNumberUser = values[1];\r\n\r\n      // merge the protected data from the user object returned\r\n      // by the phone update operation\r\n      const protectedData = savePhoneNumberUser.attributes.profile.protectedData;\r\n      const phoneNumberMergeSource = { attributes: { profile: { protectedData } } };\r\n\r\n      const currentUser = merge(saveEmailUser, phoneNumberMergeSource);\r\n      dispatch(currentUserShowSuccess(currentUser));\r\n      dispatch(saveContactDetailsSuccess());\r\n    })\r\n    .catch(e => null);\r\n};\r\n\r\n/**\r\n * Update contact details, actions depend on which data has changed\r\n */\r\nexport const saveContactDetails = params => (dispatch, getState, sdk) => {\r\n  dispatch(saveContactDetailsRequest());\r\n\r\n  const { email, currentEmail, phoneNumber, currentPhoneNumber, currentPassword } = params;\r\n  const emailChanged = email !== currentEmail;\r\n  const phoneNumberChanged = phoneNumber !== currentPhoneNumber;\r\n\r\n  if (emailChanged && phoneNumberChanged) {\r\n    return dispatch(saveEmailAndPhoneNumber({ email, currentPassword, phoneNumber }));\r\n  } else if (emailChanged) {\r\n    return dispatch(saveEmail({ email, currentPassword }));\r\n  } else if (phoneNumberChanged) {\r\n    return dispatch(savePhoneNumber({ phoneNumber }));\r\n  }\r\n};\r\n\r\nexport const resetPassword = email => (dispatch, getState, sdk) => {\r\n  dispatch(resetPasswordRequest());\r\n  return sdk.passwordReset\r\n    .request({ email })\r\n    .then(() => dispatch(resetPasswordSuccess()))\r\n    .catch(e => dispatch(resetPasswordError(storableError(e))));\r\n};\r\n\r\nexport const loadData = () => {\r\n  // Since verify email happens in separate tab, current user's data might be updated\r\n  return fetchCurrentUser();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}