{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\InboxPage\\\\InboxPage.js\";\nimport React from 'react';\nimport { arrayOf, bool, number, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { txIsCanceled, txIsEnquired, txIsPurchased, txIsDelivered, txIsDisputed, txIsPaymentExpired, txIsPaymentPending, txIsReceived, txIsCompleted, txIsReviewedByCustomer, txIsReviewedByProvider, txIsReviewed } from '../../util/transaction';\nimport { propTypes, DATE_TYPE_DATE } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { formatDateIntoPartials } from '../../util/dates';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Avatar, NamedLink, NotificationBadge, Page, PaginationLinks, TabNav, LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, IconSpinner, UserDisplayName } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport NotFoundPage from '../../containers/NotFoundPage/NotFoundPage';\nimport css from './InboxPage.module.css'; // Translated name of the state of the given transaction\n\nexport const txState = (intl, tx, type) => {\n  const isOrder = type === 'order';\n\n  if (txIsEnquired(tx)) {\n    return {\n      lastTransitionedAtClassName: css.lastTransitionedAtEmphasized,\n      stateClassName: css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateEnquiry'\n      })\n    };\n  } else if (txIsPaymentPending(tx)) {\n    return {\n      stateClassName: isOrder ? css.stateActionNeeded : css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.statePendingPayment'\n      })\n    };\n  } else if (txIsPaymentExpired(tx)) {\n    return {\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.statePaymentExpired'\n      })\n    };\n  } else if (txIsCanceled(tx)) {\n    return {\n      stateClassName: css.stateConcluded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateCanceled'\n      })\n    };\n  } else if (txIsPurchased(tx)) {\n    return {\n      stateClassName: isOrder ? css.stateNoActionNeeded : css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.statePurchased'\n      })\n    };\n  } else if (txIsDelivered(tx)) {\n    return isOrder ? {\n      stateClassName: css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateDeliveredCustomer'\n      })\n    } : {\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateDeliveredProvider'\n      })\n    };\n  } else if (txIsDisputed(tx)) {\n    return {\n      stateClassName: css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateDisputed'\n      })\n    };\n  } else if (txIsReceived(tx) || txIsCompleted(tx)) {\n    return {\n      stateClassName: css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateReceived'\n      })\n    };\n  } else if (txIsReviewedByCustomer(tx)) {\n    const translationKey = isOrder ? 'InboxPage.stateReviewGiven' : 'InboxPage.stateReviewNeeded';\n    return {\n      stateClassName: isOrder ? css.stateNoActionNeeded : css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: translationKey\n      })\n    };\n  } else if (txIsReviewedByProvider(tx)) {\n    const translationKey = isOrder ? 'InboxPage.stateReviewNeeded' : 'InboxPage.stateReviewGiven';\n    return {\n      stateClassName: isOrder ? css.stateActionNeeded : css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: translationKey\n      })\n    };\n  } else if (txIsReviewed(tx)) {\n    return {\n      stateClassName: css.stateConcluded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateReviewed'\n      })\n    };\n  } else {\n    console.warn('This transition is unknown:', tx.attributes.lastTransition);\n    return null;\n  }\n};\nexport const InboxItem = props => {\n  var _tx$attributes, _tx$attributes$lineIt, _listing$attributes;\n\n  const {\n    unitType,\n    type,\n    tx,\n    intl,\n    stateData\n  } = props;\n  const {\n    customer,\n    provider,\n    listing\n  } = tx;\n  const isOrder = type === 'order';\n  const unitPurchase = (_tx$attributes = tx.attributes) === null || _tx$attributes === void 0 ? void 0 : (_tx$attributes$lineIt = _tx$attributes.lineItems) === null || _tx$attributes$lineIt === void 0 ? void 0 : _tx$attributes$lineIt.find(item => item.code === unitType && !item.reversal);\n  const quantity = unitPurchase ? unitPurchase.quantity.toString() : null;\n  const otherUser = isOrder ? provider : customer;\n  const otherUserDisplayName = /*#__PURE__*/React.createElement(UserDisplayName, {\n    user: otherUser,\n    intl: intl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 32\n    }\n  });\n  const isOtherUserBanned = otherUser.attributes.banned;\n  const isSaleNotification = !isOrder && txIsPurchased(tx);\n  const rowNotificationDot = isSaleNotification ? /*#__PURE__*/React.createElement(\"div\", {\n    className: css.notificationDot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 51\n    }\n  }) : null;\n  const lastTransitionedAt = formatDateIntoPartials(tx.attributes.lastTransitionedAt, intl);\n  const linkClasses = classNames(css.itemLink, {\n    [css.bannedUserLink]: isOtherUserBanned\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: css.item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemAvatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    user: otherUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(NamedLink, {\n    className: linkClasses,\n    name: isOrder ? 'OrderDetailsPage' : 'SaleDetailsPage',\n    params: {\n      id: tx.id.uuid\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.rowNotificationDot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, rowNotificationDot), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemUsername,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, otherUserDisplayName), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemOrderInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, listing === null || listing === void 0 ? void 0 : (_listing$attributes = listing.attributes) === null || _listing$attributes === void 0 ? void 0 : _listing$attributes.title), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"InboxPage.quantity\",\n    values: {\n      quantity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(css.stateName, stateData.stateClassName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, stateData.state), /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(css.lastTransitionedAt, stateData.lastTransitionedAtClassName),\n    title: lastTransitionedAt.dateAndTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, lastTransitionedAt.date))));\n};\n_c = InboxItem;\nInboxItem.propTypes = {\n  unitType: propTypes.lineItemUnitType.isRequired,\n  type: oneOf(['order', 'sale']).isRequired,\n  tx: propTypes.transaction.isRequired,\n  intl: intlShape.isRequired\n};\nexport const InboxPageComponent = props => {\n  const {\n    unitType,\n    currentUser,\n    fetchInProgress,\n    fetchOrdersOrSalesError,\n    intl,\n    pagination,\n    params,\n    providerNotificationCount,\n    scrollingDisabled,\n    transactions\n  } = props;\n  const {\n    tab\n  } = params;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const validTab = tab === 'orders' || tab === 'sales';\n\n  if (!validTab) {\n    return /*#__PURE__*/React.createElement(NotFoundPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const isOrders = tab === 'orders';\n  const ordersTitle = intl.formatMessage({\n    id: 'InboxPage.ordersTitle'\n  });\n  const salesTitle = intl.formatMessage({\n    id: 'InboxPage.salesTitle'\n  });\n  const title = isOrders ? ordersTitle : salesTitle;\n\n  const toTxItem = tx => {\n    const type = isOrders ? 'order' : 'sale';\n    const stateData = txState(intl, tx, type); // Render InboxItem only if the latest transition of the transaction is handled in the `txState` function.\n\n    return stateData ? /*#__PURE__*/React.createElement(\"li\", {\n      key: tx.id.uuid,\n      className: css.listItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InboxItem, {\n      unitType: unitType,\n      type: type,\n      tx: tx,\n      intl: intl,\n      stateData: stateData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    })) : null;\n  };\n\n  const error = fetchOrdersOrSalesError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: css.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"InboxPage.fetchFailed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  })) : null;\n  const noResults = !fetchInProgress && transactions.length === 0 && !fetchOrdersOrSalesError ? /*#__PURE__*/React.createElement(\"li\", {\n    key: \"noResults\",\n    className: css.noResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: isOrders ? 'InboxPage.noOrdersFound' : 'InboxPage.noSalesFound',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  })) : null;\n\n  const hasOrderOrSaleTransactions = (tx, isOrdersTab, user) => {\n    return isOrdersTab ? user.id && tx && tx.length > 0 && tx[0].customer.id.uuid === user.id.uuid : user.id && tx && tx.length > 0 && tx[0].provider.id.uuid === user.id.uuid;\n  };\n\n  const hasTransactions = !fetchInProgress && hasOrderOrSaleTransactions(transactions, isOrders, ensuredCurrentUser);\n  const pagingLinks = hasTransactions && pagination && pagination.totalPages > 1 ? /*#__PURE__*/React.createElement(PaginationLinks, {\n    className: css.pagination,\n    pageName: \"InboxPage\",\n    pagePathParams: params,\n    pagination: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }) : null;\n  const providerNotificationBadge = providerNotificationCount > 0 ? /*#__PURE__*/React.createElement(NotificationBadge, {\n    count: providerNotificationCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 37\n    }\n  }) : null;\n  const tabs = [{\n    text: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"InboxPage.ordersTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }\n    })),\n    selected: isOrders,\n    linkProps: {\n      name: 'InboxPage',\n      params: {\n        tab: 'orders'\n      }\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"InboxPage.salesTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }), providerNotificationBadge),\n    selected: !isOrders,\n    linkProps: {\n      name: 'InboxPage',\n      params: {\n        tab: 'sales'\n      }\n    }\n  }];\n  const nav = /*#__PURE__*/React.createElement(TabNav, {\n    rootClassName: css.tabs,\n    tabRootClassName: css.tab,\n    tabs: tabs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  });\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSideNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    className: css.topbar,\n    mobileRootClassName: css.mobileTopbar,\n    desktopClassName: css.desktopTopbar,\n    currentPage: \"InboxPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperSideNav, {\n    className: css.navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"InboxPage.title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  })), nav), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }, error, /*#__PURE__*/React.createElement(\"ul\", {\n    className: css.itemList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }\n  }, !fetchInProgress ? transactions.map(toTxItem) : /*#__PURE__*/React.createElement(\"li\", {\n    className: css.listItemsLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(IconSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  })), noResults), pagingLinks), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 11\n    }\n  }))));\n};\n_c2 = InboxPageComponent;\nInboxPageComponent.defaultProps = {\n  unitType: config.lineItemUnitType,\n  currentUser: null,\n  currentUserHasOrders: null,\n  fetchOrdersOrSalesError: null,\n  pagination: null,\n  providerNotificationCount: 0,\n  sendVerificationEmailError: null\n};\nInboxPageComponent.propTypes = {\n  params: shape({\n    tab: string.isRequired\n  }).isRequired,\n  unitType: propTypes.lineItemUnitType,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  fetchOrdersOrSalesError: propTypes.error,\n  pagination: propTypes.pagination,\n  providerNotificationCount: number,\n  scrollingDisabled: bool.isRequired,\n  transactions: arrayOf(propTypes.transaction).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    fetchInProgress,\n    fetchOrdersOrSalesError,\n    pagination,\n    transactionRefs\n  } = state.InboxPage;\n  const {\n    currentUser,\n    currentUserNotificationCount: providerNotificationCount\n  } = state.user;\n  return {\n    currentUser,\n    fetchInProgress,\n    fetchOrdersOrSalesError,\n    pagination,\n    providerNotificationCount,\n    scrollingDisabled: isScrollingDisabled(state),\n    transactions: getMarketplaceEntities(state, transactionRefs)\n  };\n};\n\nconst InboxPage = compose(connect(mapStateToProps), injectIntl)(InboxPageComponent);\nexport default InboxPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InboxItem\");\n$RefreshReg$(_c2, \"InboxPageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/InboxPage/InboxPage.js"],"names":["React","arrayOf","bool","number","oneOf","shape","string","compose","connect","classNames","config","FormattedMessage","injectIntl","intlShape","txIsCanceled","txIsEnquired","txIsPurchased","txIsDelivered","txIsDisputed","txIsPaymentExpired","txIsPaymentPending","txIsReceived","txIsCompleted","txIsReviewedByCustomer","txIsReviewedByProvider","txIsReviewed","propTypes","DATE_TYPE_DATE","ensureCurrentUser","formatDateIntoPartials","getMarketplaceEntities","isScrollingDisabled","Avatar","NamedLink","NotificationBadge","Page","PaginationLinks","TabNav","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","IconSpinner","UserDisplayName","TopbarContainer","NotFoundPage","css","txState","intl","tx","type","isOrder","lastTransitionedAtClassName","lastTransitionedAtEmphasized","stateClassName","stateActionNeeded","state","formatMessage","id","stateNoActionNeeded","stateConcluded","translationKey","console","warn","attributes","lastTransition","InboxItem","props","unitType","stateData","customer","provider","listing","unitPurchase","lineItems","find","item","code","reversal","quantity","toString","otherUser","otherUserDisplayName","isOtherUserBanned","banned","isSaleNotification","rowNotificationDot","notificationDot","lastTransitionedAt","linkClasses","itemLink","bannedUserLink","itemAvatar","uuid","itemInfo","itemUsername","itemOrderInfo","title","itemState","stateName","dateAndTime","date","lineItemUnitType","isRequired","transaction","InboxPageComponent","currentUser","fetchInProgress","fetchOrdersOrSalesError","pagination","params","providerNotificationCount","scrollingDisabled","transactions","tab","ensuredCurrentUser","validTab","isOrders","ordersTitle","salesTitle","toTxItem","listItem","error","noResults","length","hasOrderOrSaleTransactions","isOrdersTab","user","hasTransactions","pagingLinks","totalPages","providerNotificationBadge","tabs","text","selected","linkProps","name","nav","topbar","mobileTopbar","desktopTopbar","navigation","itemList","map","listItemsLoading","defaultProps","currentUserHasOrders","sendVerificationEmailError","mapStateToProps","transactionRefs","InboxPage","currentUserNotificationCount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { arrayOf, bool, number, oneOf, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../config';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport {\r\n  txIsCanceled,\r\n  txIsEnquired,\r\n  txIsPurchased,\r\n  txIsDelivered,\r\n  txIsDisputed,\r\n  txIsPaymentExpired,\r\n  txIsPaymentPending,\r\n  txIsReceived,\r\n  txIsCompleted,\r\n  txIsReviewedByCustomer,\r\n  txIsReviewedByProvider,\r\n  txIsReviewed,\r\n} from '../../util/transaction';\r\nimport { propTypes, DATE_TYPE_DATE } from '../../util/types';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { formatDateIntoPartials } from '../../util/dates';\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\nimport {\r\n  Avatar,\r\n  NamedLink,\r\n  NotificationBadge,\r\n  Page,\r\n  PaginationLinks,\r\n  TabNav,\r\n  LayoutSideNavigation,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperSideNav,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  IconSpinner,\r\n  UserDisplayName,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport NotFoundPage from '../../containers/NotFoundPage/NotFoundPage';\r\n\r\nimport css from './InboxPage.module.css';\r\n\r\n// Translated name of the state of the given transaction\r\nexport const txState = (intl, tx, type) => {\r\n  const isOrder = type === 'order';\r\n\r\n  if (txIsEnquired(tx)) {\r\n    return {\r\n      lastTransitionedAtClassName: css.lastTransitionedAtEmphasized,\r\n      stateClassName: css.stateActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.stateEnquiry',\r\n      }),\r\n    };\r\n  } else if (txIsPaymentPending(tx)) {\r\n    return {\r\n      stateClassName: isOrder ? css.stateActionNeeded : css.stateNoActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.statePendingPayment',\r\n      }),\r\n    };\r\n  } else if (txIsPaymentExpired(tx)) {\r\n    return {\r\n      stateClassName: css.stateNoActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.statePaymentExpired',\r\n      }),\r\n    };\r\n  } else if (txIsCanceled(tx)) {\r\n    return {\r\n      stateClassName: css.stateConcluded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.stateCanceled',\r\n      }),\r\n    };\r\n  } else if (txIsPurchased(tx)) {\r\n    return {\r\n      stateClassName: isOrder ? css.stateNoActionNeeded : css.stateActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.statePurchased',\r\n      }),\r\n    };\r\n  } else if (txIsDelivered(tx)) {\r\n    return isOrder\r\n      ? {\r\n          stateClassName: css.stateActionNeeded,\r\n          state: intl.formatMessage({ id: 'InboxPage.stateDeliveredCustomer' }),\r\n        }\r\n      : {\r\n          stateClassName: css.stateNoActionNeeded,\r\n          state: intl.formatMessage({ id: 'InboxPage.stateDeliveredProvider' }),\r\n        };\r\n  } else if (txIsDisputed(tx)) {\r\n    return {\r\n      stateClassName: css.stateActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.stateDisputed',\r\n      }),\r\n    };\r\n  } else if (txIsReceived(tx) || txIsCompleted(tx)) {\r\n    return {\r\n      stateClassName: css.stateActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.stateReceived',\r\n      }),\r\n    };\r\n  } else if (txIsReviewedByCustomer(tx)) {\r\n    const translationKey = isOrder ? 'InboxPage.stateReviewGiven' : 'InboxPage.stateReviewNeeded';\r\n    return {\r\n      stateClassName: isOrder ? css.stateNoActionNeeded : css.stateActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: translationKey,\r\n      }),\r\n    };\r\n  } else if (txIsReviewedByProvider(tx)) {\r\n    const translationKey = isOrder ? 'InboxPage.stateReviewNeeded' : 'InboxPage.stateReviewGiven';\r\n    return {\r\n      stateClassName: isOrder ? css.stateActionNeeded : css.stateNoActionNeeded,\r\n      state: intl.formatMessage({\r\n        id: translationKey,\r\n      }),\r\n    };\r\n  } else if (txIsReviewed(tx)) {\r\n    return {\r\n      stateClassName: css.stateConcluded,\r\n      state: intl.formatMessage({\r\n        id: 'InboxPage.stateReviewed',\r\n      }),\r\n    };\r\n  } else {\r\n    console.warn('This transition is unknown:', tx.attributes.lastTransition);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const InboxItem = props => {\r\n  const { unitType, type, tx, intl, stateData } = props;\r\n  const { customer, provider, listing } = tx;\r\n  const isOrder = type === 'order';\r\n\r\n  const unitPurchase = tx.attributes?.lineItems?.find(\r\n    item => item.code === unitType && !item.reversal\r\n  );\r\n  const quantity = unitPurchase ? unitPurchase.quantity.toString() : null;\r\n\r\n  const otherUser = isOrder ? provider : customer;\r\n  const otherUserDisplayName = <UserDisplayName user={otherUser} intl={intl} />;\r\n  const isOtherUserBanned = otherUser.attributes.banned;\r\n\r\n  const isSaleNotification = !isOrder && txIsPurchased(tx);\r\n  const rowNotificationDot = isSaleNotification ? <div className={css.notificationDot} /> : null;\r\n  const lastTransitionedAt = formatDateIntoPartials(tx.attributes.lastTransitionedAt, intl);\r\n\r\n  const linkClasses = classNames(css.itemLink, {\r\n    [css.bannedUserLink]: isOtherUserBanned,\r\n  });\r\n\r\n  return (\r\n    <div className={css.item}>\r\n      <div className={css.itemAvatar}>\r\n        <Avatar user={otherUser} />\r\n      </div>\r\n      <NamedLink\r\n        className={linkClasses}\r\n        name={isOrder ? 'OrderDetailsPage' : 'SaleDetailsPage'}\r\n        params={{ id: tx.id.uuid }}\r\n      >\r\n        <div className={css.rowNotificationDot}>{rowNotificationDot}</div>\r\n        <div className={css.itemInfo}>\r\n          <div className={css.itemUsername}>{otherUserDisplayName}</div>\r\n          <div className={css.itemOrderInfo}>\r\n            <span>{listing?.attributes?.title}</span>\r\n            <br />\r\n            <FormattedMessage id=\"InboxPage.quantity\" values={{ quantity }} />\r\n          </div>\r\n        </div>\r\n        <div className={css.itemState}>\r\n          <div className={classNames(css.stateName, stateData.stateClassName)}>\r\n            {stateData.state}\r\n          </div>\r\n          <div\r\n            className={classNames(css.lastTransitionedAt, stateData.lastTransitionedAtClassName)}\r\n            title={lastTransitionedAt.dateAndTime}\r\n          >\r\n            {lastTransitionedAt.date}\r\n          </div>\r\n        </div>\r\n      </NamedLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nInboxItem.propTypes = {\r\n  unitType: propTypes.lineItemUnitType.isRequired,\r\n  type: oneOf(['order', 'sale']).isRequired,\r\n  tx: propTypes.transaction.isRequired,\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport const InboxPageComponent = props => {\r\n  const {\r\n    unitType,\r\n    currentUser,\r\n    fetchInProgress,\r\n    fetchOrdersOrSalesError,\r\n    intl,\r\n    pagination,\r\n    params,\r\n    providerNotificationCount,\r\n    scrollingDisabled,\r\n    transactions,\r\n  } = props;\r\n  const { tab } = params;\r\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n\r\n  const validTab = tab === 'orders' || tab === 'sales';\r\n  if (!validTab) {\r\n    return <NotFoundPage />;\r\n  }\r\n\r\n  const isOrders = tab === 'orders';\r\n\r\n  const ordersTitle = intl.formatMessage({ id: 'InboxPage.ordersTitle' });\r\n  const salesTitle = intl.formatMessage({ id: 'InboxPage.salesTitle' });\r\n  const title = isOrders ? ordersTitle : salesTitle;\r\n\r\n  const toTxItem = tx => {\r\n    const type = isOrders ? 'order' : 'sale';\r\n    const stateData = txState(intl, tx, type);\r\n\r\n    // Render InboxItem only if the latest transition of the transaction is handled in the `txState` function.\r\n    return stateData ? (\r\n      <li key={tx.id.uuid} className={css.listItem}>\r\n        <InboxItem unitType={unitType} type={type} tx={tx} intl={intl} stateData={stateData} />\r\n      </li>\r\n    ) : null;\r\n  };\r\n\r\n  const error = fetchOrdersOrSalesError ? (\r\n    <p className={css.error}>\r\n      <FormattedMessage id=\"InboxPage.fetchFailed\" />\r\n    </p>\r\n  ) : null;\r\n\r\n  const noResults =\r\n    !fetchInProgress && transactions.length === 0 && !fetchOrdersOrSalesError ? (\r\n      <li key=\"noResults\" className={css.noResults}>\r\n        <FormattedMessage id={isOrders ? 'InboxPage.noOrdersFound' : 'InboxPage.noSalesFound'} />\r\n      </li>\r\n    ) : null;\r\n\r\n  const hasOrderOrSaleTransactions = (tx, isOrdersTab, user) => {\r\n    return isOrdersTab\r\n      ? user.id && tx && tx.length > 0 && tx[0].customer.id.uuid === user.id.uuid\r\n      : user.id && tx && tx.length > 0 && tx[0].provider.id.uuid === user.id.uuid;\r\n  };\r\n  const hasTransactions =\r\n    !fetchInProgress && hasOrderOrSaleTransactions(transactions, isOrders, ensuredCurrentUser);\r\n  const pagingLinks =\r\n    hasTransactions && pagination && pagination.totalPages > 1 ? (\r\n      <PaginationLinks\r\n        className={css.pagination}\r\n        pageName=\"InboxPage\"\r\n        pagePathParams={params}\r\n        pagination={pagination}\r\n      />\r\n    ) : null;\r\n\r\n  const providerNotificationBadge =\r\n    providerNotificationCount > 0 ? <NotificationBadge count={providerNotificationCount} /> : null;\r\n  const tabs = [\r\n    {\r\n      text: (\r\n        <span>\r\n          <FormattedMessage id=\"InboxPage.ordersTabTitle\" />\r\n        </span>\r\n      ),\r\n      selected: isOrders,\r\n      linkProps: {\r\n        name: 'InboxPage',\r\n        params: { tab: 'orders' },\r\n      },\r\n    },\r\n    {\r\n      text: (\r\n        <span>\r\n          <FormattedMessage id=\"InboxPage.salesTabTitle\" />\r\n          {providerNotificationBadge}\r\n        </span>\r\n      ),\r\n      selected: !isOrders,\r\n      linkProps: {\r\n        name: 'InboxPage',\r\n        params: { tab: 'sales' },\r\n      },\r\n    },\r\n  ];\r\n  const nav = <TabNav rootClassName={css.tabs} tabRootClassName={css.tab} tabs={tabs} />;\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation>\r\n        <LayoutWrapperTopbar>\r\n          <TopbarContainer\r\n            className={css.topbar}\r\n            mobileRootClassName={css.mobileTopbar}\r\n            desktopClassName={css.desktopTopbar}\r\n            currentPage=\"InboxPage\"\r\n          />\r\n        </LayoutWrapperTopbar>\r\n        <LayoutWrapperSideNav className={css.navigation}>\r\n          <h1 className={css.title}>\r\n            <FormattedMessage id=\"InboxPage.title\" />\r\n          </h1>\r\n          {nav}\r\n        </LayoutWrapperSideNav>\r\n        <LayoutWrapperMain>\r\n          {error}\r\n          <ul className={css.itemList}>\r\n            {!fetchInProgress ? (\r\n              transactions.map(toTxItem)\r\n            ) : (\r\n              <li className={css.listItemsLoading}>\r\n                <IconSpinner />\r\n              </li>\r\n            )}\r\n            {noResults}\r\n          </ul>\r\n          {pagingLinks}\r\n        </LayoutWrapperMain>\r\n        <LayoutWrapperFooter>\r\n          <Footer />\r\n        </LayoutWrapperFooter>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nInboxPageComponent.defaultProps = {\r\n  unitType: config.lineItemUnitType,\r\n  currentUser: null,\r\n  currentUserHasOrders: null,\r\n  fetchOrdersOrSalesError: null,\r\n  pagination: null,\r\n  providerNotificationCount: 0,\r\n  sendVerificationEmailError: null,\r\n};\r\n\r\nInboxPageComponent.propTypes = {\r\n  params: shape({\r\n    tab: string.isRequired,\r\n  }).isRequired,\r\n\r\n  unitType: propTypes.lineItemUnitType,\r\n  currentUser: propTypes.currentUser,\r\n  fetchInProgress: bool.isRequired,\r\n  fetchOrdersOrSalesError: propTypes.error,\r\n  pagination: propTypes.pagination,\r\n  providerNotificationCount: number,\r\n  scrollingDisabled: bool.isRequired,\r\n  transactions: arrayOf(propTypes.transaction).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { fetchInProgress, fetchOrdersOrSalesError, pagination, transactionRefs } = state.InboxPage;\r\n  const { currentUser, currentUserNotificationCount: providerNotificationCount } = state.user;\r\n  return {\r\n    currentUser,\r\n    fetchInProgress,\r\n    fetchOrdersOrSalesError,\r\n    pagination,\r\n    providerNotificationCount,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    transactions: getMarketplaceEntities(state, transactionRefs),\r\n  };\r\n};\r\n\r\nconst InboxPage = compose(\r\n  connect(mapStateToProps),\r\n  injectIntl\r\n)(InboxPageComponent);\r\n\r\nexport default InboxPage;\r\n"]},"metadata":{},"sourceType":"module"}