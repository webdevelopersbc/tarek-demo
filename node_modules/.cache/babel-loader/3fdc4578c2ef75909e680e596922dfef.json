{"ast":null,"code":"import config from '../../config'; // Possible inputs Stripe might require for a country\n// Bank account number (used in countries where IBAN is not in use)\n\nexport const ACCOUNT_NUMBER = 'accountNumber'; // Required for Japan\n\nexport const ACCOUNT_OWNER_NAME = 'accountOwnerName'; // Australian equivalent for routing number\n\nexport const BSB = 'bsb'; // Needed for creating full routing number in Canada\n\nexport const INSTITUTION_NUMBER = 'institutionNumber'; // Needed for creating full routing number in Canada\n\nexport const TRANSIT_NUMBER = 'transitNumber'; // Needed for creating full routing number in Hong Kong\n\nexport const CLEARING_CODE = 'clearingCode'; // Needed for creating full routing number in Hong Kong and Singapore\n\nexport const BRANCH_CODE = 'branchCode'; // Required for Japan\n\nexport const BRANCH_NAME = 'branchName'; // Required for Japan\n\nexport const BANK_NAME = 'bankName'; // Needed for creating full routing number in e.g. Singapore\n\nexport const BANK_CODE = 'bankCode'; // Clave Bancaria Estandarizada (standardized banking cipher) used in Mexico\n\nexport const CLABE = 'clabe'; // International bank account number (e.g. EU countries use this)\n\nexport const IBAN = 'iban'; // Routing number to separate bank account in different areas\n\nexport const ROUTING_NUMBER = 'routingNumber'; // British equivalent for routing number\n\nexport const SORT_CODE = 'sortCode'; // Currently supported bank account inputs\n// the order here matters: account number input is asked after routing number and its equivalents\n\nexport const BANK_ACCOUNT_INPUTS = [BSB, TRANSIT_NUMBER, INSTITUTION_NUMBER, CLEARING_CODE, BANK_NAME, BANK_CODE, BRANCH_NAME, BRANCH_CODE, SORT_CODE, ROUTING_NUMBER, ACCOUNT_OWNER_NAME, ACCOUNT_NUMBER, IBAN, CLABE];\nexport const supportedCountries = config.stripe.supportedCountries.map(c => c.code);\n/**\r\n * Country specific Stripe configurations\r\n *\r\n * @param {String} countryCode - string representing country code (e.g. 'US', 'FI')\r\n *\r\n * @return {Object} configurations\r\n */\n\nexport const stripeCountryConfigs = countryCode => {\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\n\n  if (!country) {\n    throw new Error(`Country code not found in Stripe config ${countryCode}`);\n  }\n\n  return country;\n};\n/**\r\n * Return all the inputs that are required in given country\r\n *\r\n * @param {String} countryCode - string representing country code (e.g. 'US', 'FI')\r\n *\r\n * @return {Array<String>} array containing different input 'types'\r\n * (e.g. ['routingNumber', 'accountNumber'])\r\n */\n\nexport const requiredInputs = countryCode => {\n  const bankAccountInputs = stripeCountryConfigs(countryCode).accountConfig;\n  return BANK_ACCOUNT_INPUTS.filter(inputType => bankAccountInputs[inputType]);\n};\n/**\r\n * Translate input type to human readable string\r\n *\r\n * @param {String} inputType - string representing one of the required bank account input\r\n * @param {Object} intl - translation library to format messages\r\n *\r\n * @return {String} formatted message\r\n */\n\nexport const inputTypeToString = (inputType, intl) => {\n  if (BANK_ACCOUNT_INPUTS.includes(inputType)) {\n    return intl.formatMessage({\n      id: `StripeBankAccountTokenInputField.${inputType}.inline`\n    });\n  } else {\n    throw new Error(`Unknown inputType (${inputType}) given to validator`);\n  }\n};\n/**\r\n * Translate Stripe error\r\n *\r\n * @param {String} country - string representing country code (e.g. 'US', 'FI')\r\n * @param {Object} intl - translation library to format errors\r\n * @param {Object} stripeError - actual Stripe error, which functions as default message,\r\n * if no translation can be found\r\n *\r\n * @return {String} formatted Stripe error\r\n */\n\nexport const translateStripeError = (country, intl, stripeError) => {\n  console.error('Stripe error:', stripeError); // eslint-disable-line no-console\n\n  const inputs = requiredInputs(country);\n  const ibanRequired = inputs[IBAN];\n\n  if (ibanRequired) {\n    return intl.formatMessage({\n      id: 'StripeBankAccountTokenInputField.genericStripeErrorIban',\n      defaultMessage: stripeError.message\n    }, {\n      country\n    });\n  } else {\n    const inputsAsStrings = inputs.map(inputType => inputTypeToString(inputType, intl));\n    const andTranslated = intl.formatMessage({\n      id: 'StripeBankAccountTokenInputField.andBeforeLastItemInAList'\n    }); // Print required inputs (to be included to error message)\n    // e.g. \"bank code, branch code and account number\"\n\n    const inputsInString = inputsAsStrings.length > 1 ? inputsAsStrings.join(', ').replace(/,([^,]*)$/, `${andTranslated} $1`) : inputsAsStrings[0];\n    return intl.formatMessage({\n      id: 'StripeBankAccountTokenInputField.genericStripeError',\n      defaultMessage: stripeError.message\n    }, {\n      country,\n      inputs: inputsInString\n    });\n  }\n};\n/**\r\n * Map inputs to correct Stripe keys\r\n *\r\n * @param {String} inputType - input type (e.g. 'routingNumber', 'IBAN')\r\n * @param {String} value - input value\r\n *\r\n * @return {Object} key - value in Object literal.\r\n */\n\nexport const mapInputsToStripeAccountKeys = (country, values) => {\n  // Stripe documentation speaks about actual bank account terms of different countries\n  // (like BSB, sort code, routing number), but all of those get mapped to one of\n  // the two different request keys: routing_number or account_number\n  // See: https://stripe.com/docs/payouts vs https://stripe.com/docs/connect/testing\n  // We use those country specific terms since we want to show correct labels and errors for users,\n  // so this mapping is needed before sending data to Stripe.\n  // Stripe fails if there are spaces within the number, this is\n  // why we have to clean value up first.\n  switch (country) {\n    case 'AT':\n    case 'BE':\n    case 'BG':\n    case 'CY':\n    case 'CZ':\n    case 'DK':\n    case 'EE':\n    case 'FI':\n    case 'FR':\n    case 'DE':\n    case 'GR':\n    case 'IE':\n    case 'IT':\n    case 'LV':\n    case 'LT':\n    case 'LU':\n    case 'MT':\n    case 'NL':\n    case 'PL':\n    case 'PT':\n    case 'RO':\n    case 'SK':\n    case 'SI':\n    case 'ES':\n    case 'SE':\n    case 'CH':\n    case 'NO':\n      return {\n        account_number: cleanedString(values[IBAN])\n      };\n\n    case 'NZ':\n      // NZ account number is typically presented in the format xx-xxxx-xxxxxxx-xxx\n      // '-' separators must be removed before sending value to Stripe API\n      return {\n        account_number: cleanedString(values[ACCOUNT_NUMBER]).replace(/-/g, '')\n      };\n\n    case 'AU':\n      return {\n        routing_number: cleanedString(values[BSB]),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'CA':\n      return {\n        routing_number: cleanedString(values[TRANSIT_NUMBER]).concat(cleanedString(values[INSTITUTION_NUMBER])),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'GB':\n      return {\n        routing_number: cleanedString(values[SORT_CODE]),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'US':\n      return {\n        routing_number: cleanedString(values[ROUTING_NUMBER]),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'SG':\n      return {\n        routing_number: cleanedString(values[BANK_CODE]).concat('-', cleanedString(values[BRANCH_CODE])),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'HK':\n      return {\n        routing_number: cleanedString(values[CLEARING_CODE]).concat('-', cleanedString(values[BRANCH_CODE])),\n        account_number: cleanedString(values[ACCOUNT_NUMBER])\n      };\n\n    case 'JP':\n      return {\n        bank_name: values[BANK_NAME],\n        branch_name: values[BRANCH_NAME],\n        routing_number: cleanedString(values[BANK_CODE]).concat(values[BRANCH_CODE]),\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\n        account_holder_name: values[ACCOUNT_OWNER_NAME]\n      };\n\n    case 'MX':\n      return {\n        account_number: cleanedString(values[CLABE])\n      };\n\n    default:\n      throw new Error(`Not supported country (${country}) given to validator`);\n  }\n};\n/**\r\n * Translate messages related to different input types.\r\n *\r\n * Check translations for StripeBankAccountTokenInputField\r\n * from [rootFolder]/src/translations/en.json\r\n *\r\n * @param {Object} intl - translation library to format errors\r\n * @param {String} inputType - input type (e.g. 'routingNumber', 'IBAN')\r\n * @param {String} messageType - one of the different messages related to inputType\r\n * (e.g. 'inline', 'invalid', 'label', 'placeholder', 'required')\r\n *\r\n * @return {Object} key - value in Object literal.\r\n */\n\nexport const formatFieldMessage = (intl, inputType, messageType) => {\n  if (!BANK_ACCOUNT_INPUTS.includes(inputType)) {\n    throw new Error(`inputType (${inputType}) must be one of ${BANK_ACCOUNT_INPUTS}`);\n  }\n\n  return intl.formatMessage({\n    id: `StripeBankAccountTokenInputField.${inputType}.${messageType}`\n  });\n};\n/**\r\n * Remove all whitespace from the given string.\r\n *\r\n * @param {String} str - target string\r\n *\r\n * @return {String} cleaned string\r\n */\n\nexport const cleanedString = str => {\n  return str ? str.replace(/\\s/g, '') : '';\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/StripeBankAccountTokenInputField/StripeBankAccountTokenInputField.util.js"],"names":["config","ACCOUNT_NUMBER","ACCOUNT_OWNER_NAME","BSB","INSTITUTION_NUMBER","TRANSIT_NUMBER","CLEARING_CODE","BRANCH_CODE","BRANCH_NAME","BANK_NAME","BANK_CODE","CLABE","IBAN","ROUTING_NUMBER","SORT_CODE","BANK_ACCOUNT_INPUTS","supportedCountries","stripe","map","c","code","stripeCountryConfigs","countryCode","country","find","Error","requiredInputs","bankAccountInputs","accountConfig","filter","inputType","inputTypeToString","intl","includes","formatMessage","id","translateStripeError","stripeError","console","error","inputs","ibanRequired","defaultMessage","message","inputsAsStrings","andTranslated","inputsInString","length","join","replace","mapInputsToStripeAccountKeys","values","account_number","cleanedString","routing_number","concat","bank_name","branch_name","account_holder_name","formatFieldMessage","messageType","str"],"mappings":"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","sourcesContent":["import config from '../../config';\r\n\r\n// Possible inputs Stripe might require for a country\r\n\r\n// Bank account number (used in countries where IBAN is not in use)\r\nexport const ACCOUNT_NUMBER = 'accountNumber';\r\n// Required for Japan\r\nexport const ACCOUNT_OWNER_NAME = 'accountOwnerName';\r\n// Australian equivalent for routing number\r\nexport const BSB = 'bsb';\r\n// Needed for creating full routing number in Canada\r\nexport const INSTITUTION_NUMBER = 'institutionNumber';\r\n// Needed for creating full routing number in Canada\r\nexport const TRANSIT_NUMBER = 'transitNumber';\r\n// Needed for creating full routing number in Hong Kong\r\nexport const CLEARING_CODE = 'clearingCode';\r\n// Needed for creating full routing number in Hong Kong and Singapore\r\nexport const BRANCH_CODE = 'branchCode';\r\n// Required for Japan\r\nexport const BRANCH_NAME = 'branchName';\r\n// Required for Japan\r\nexport const BANK_NAME = 'bankName';\r\n// Needed for creating full routing number in e.g. Singapore\r\nexport const BANK_CODE = 'bankCode';\r\n// Clave Bancaria Estandarizada (standardized banking cipher) used in Mexico\r\nexport const CLABE = 'clabe';\r\n// International bank account number (e.g. EU countries use this)\r\nexport const IBAN = 'iban';\r\n// Routing number to separate bank account in different areas\r\nexport const ROUTING_NUMBER = 'routingNumber';\r\n// British equivalent for routing number\r\nexport const SORT_CODE = 'sortCode';\r\n\r\n// Currently supported bank account inputs\r\n// the order here matters: account number input is asked after routing number and its equivalents\r\nexport const BANK_ACCOUNT_INPUTS = [\r\n  BSB,\r\n  TRANSIT_NUMBER,\r\n  INSTITUTION_NUMBER,\r\n  CLEARING_CODE,\r\n  BANK_NAME,\r\n  BANK_CODE,\r\n  BRANCH_NAME,\r\n  BRANCH_CODE,\r\n  SORT_CODE,\r\n  ROUTING_NUMBER,\r\n  ACCOUNT_OWNER_NAME,\r\n  ACCOUNT_NUMBER,\r\n  IBAN,\r\n  CLABE,\r\n];\r\n\r\nexport const supportedCountries = config.stripe.supportedCountries.map(c => c.code);\r\n\r\n/**\r\n * Country specific Stripe configurations\r\n *\r\n * @param {String} countryCode - string representing country code (e.g. 'US', 'FI')\r\n *\r\n * @return {Object} configurations\r\n */\r\nexport const stripeCountryConfigs = countryCode => {\r\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\r\n\r\n  if (!country) {\r\n    throw new Error(`Country code not found in Stripe config ${countryCode}`);\r\n  }\r\n  return country;\r\n};\r\n\r\n/**\r\n * Return all the inputs that are required in given country\r\n *\r\n * @param {String} countryCode - string representing country code (e.g. 'US', 'FI')\r\n *\r\n * @return {Array<String>} array containing different input 'types'\r\n * (e.g. ['routingNumber', 'accountNumber'])\r\n */\r\nexport const requiredInputs = countryCode => {\r\n  const bankAccountInputs = stripeCountryConfigs(countryCode).accountConfig;\r\n  return BANK_ACCOUNT_INPUTS.filter(inputType => bankAccountInputs[inputType]);\r\n};\r\n\r\n/**\r\n * Translate input type to human readable string\r\n *\r\n * @param {String} inputType - string representing one of the required bank account input\r\n * @param {Object} intl - translation library to format messages\r\n *\r\n * @return {String} formatted message\r\n */\r\nexport const inputTypeToString = (inputType, intl) => {\r\n  if (BANK_ACCOUNT_INPUTS.includes(inputType)) {\r\n    return intl.formatMessage({ id: `StripeBankAccountTokenInputField.${inputType}.inline` });\r\n  } else {\r\n    throw new Error(`Unknown inputType (${inputType}) given to validator`);\r\n  }\r\n};\r\n\r\n/**\r\n * Translate Stripe error\r\n *\r\n * @param {String} country - string representing country code (e.g. 'US', 'FI')\r\n * @param {Object} intl - translation library to format errors\r\n * @param {Object} stripeError - actual Stripe error, which functions as default message,\r\n * if no translation can be found\r\n *\r\n * @return {String} formatted Stripe error\r\n */\r\nexport const translateStripeError = (country, intl, stripeError) => {\r\n  console.error('Stripe error:', stripeError); // eslint-disable-line no-console\r\n  const inputs = requiredInputs(country);\r\n  const ibanRequired = inputs[IBAN];\r\n  if (ibanRequired) {\r\n    return intl.formatMessage(\r\n      {\r\n        id: 'StripeBankAccountTokenInputField.genericStripeErrorIban',\r\n        defaultMessage: stripeError.message,\r\n      },\r\n      { country }\r\n    );\r\n  } else {\r\n    const inputsAsStrings = inputs.map(inputType => inputTypeToString(inputType, intl));\r\n\r\n    const andTranslated = intl.formatMessage({\r\n      id: 'StripeBankAccountTokenInputField.andBeforeLastItemInAList',\r\n    });\r\n    // Print required inputs (to be included to error message)\r\n    // e.g. \"bank code, branch code and account number\"\r\n    const inputsInString =\r\n      inputsAsStrings.length > 1\r\n        ? inputsAsStrings.join(', ').replace(/,([^,]*)$/, `${andTranslated} $1`)\r\n        : inputsAsStrings[0];\r\n\r\n    return intl.formatMessage(\r\n      {\r\n        id: 'StripeBankAccountTokenInputField.genericStripeError',\r\n        defaultMessage: stripeError.message,\r\n      },\r\n      { country, inputs: inputsInString }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Map inputs to correct Stripe keys\r\n *\r\n * @param {String} inputType - input type (e.g. 'routingNumber', 'IBAN')\r\n * @param {String} value - input value\r\n *\r\n * @return {Object} key - value in Object literal.\r\n */\r\nexport const mapInputsToStripeAccountKeys = (country, values) => {\r\n  // Stripe documentation speaks about actual bank account terms of different countries\r\n  // (like BSB, sort code, routing number), but all of those get mapped to one of\r\n  // the two different request keys: routing_number or account_number\r\n  // See: https://stripe.com/docs/payouts vs https://stripe.com/docs/connect/testing\r\n\r\n  // We use those country specific terms since we want to show correct labels and errors for users,\r\n  // so this mapping is needed before sending data to Stripe.\r\n\r\n  // Stripe fails if there are spaces within the number, this is\r\n  // why we have to clean value up first.\r\n\r\n  switch (country) {\r\n    case 'AT':\r\n    case 'BE':\r\n    case 'BG':\r\n    case 'CY':\r\n    case 'CZ':\r\n    case 'DK':\r\n    case 'EE':\r\n    case 'FI':\r\n    case 'FR':\r\n    case 'DE':\r\n    case 'GR':\r\n    case 'IE':\r\n    case 'IT':\r\n    case 'LV':\r\n    case 'LT':\r\n    case 'LU':\r\n    case 'MT':\r\n    case 'NL':\r\n    case 'PL':\r\n    case 'PT':\r\n    case 'RO':\r\n    case 'SK':\r\n    case 'SI':\r\n    case 'ES':\r\n    case 'SE':\r\n    case 'CH':\r\n    case 'NO':\r\n      return { account_number: cleanedString(values[IBAN]) };\r\n    case 'NZ':\r\n      // NZ account number is typically presented in the format xx-xxxx-xxxxxxx-xxx\r\n      // '-' separators must be removed before sending value to Stripe API\r\n      return { account_number: cleanedString(values[ACCOUNT_NUMBER]).replace(/-/g, '') };\r\n    case 'AU':\r\n      return {\r\n        routing_number: cleanedString(values[BSB]),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n    case 'CA':\r\n      return {\r\n        routing_number: cleanedString(values[TRANSIT_NUMBER]).concat(\r\n          cleanedString(values[INSTITUTION_NUMBER])\r\n        ),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n    case 'GB':\r\n      return {\r\n        routing_number: cleanedString(values[SORT_CODE]),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n    case 'US':\r\n      return {\r\n        routing_number: cleanedString(values[ROUTING_NUMBER]),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n    case 'SG':\r\n      return {\r\n        routing_number: cleanedString(values[BANK_CODE]).concat(\r\n          '-',\r\n          cleanedString(values[BRANCH_CODE])\r\n        ),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n    case 'HK':\r\n      return {\r\n        routing_number: cleanedString(values[CLEARING_CODE]).concat(\r\n          '-',\r\n          cleanedString(values[BRANCH_CODE])\r\n        ),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n      };\r\n\r\n    case 'JP':\r\n      return {\r\n        bank_name: values[BANK_NAME],\r\n        branch_name: values[BRANCH_NAME],\r\n        routing_number: cleanedString(values[BANK_CODE]).concat(values[BRANCH_CODE]),\r\n        account_number: cleanedString(values[ACCOUNT_NUMBER]),\r\n        account_holder_name: values[ACCOUNT_OWNER_NAME],\r\n      };\r\n\r\n    case 'MX':\r\n      return {\r\n        account_number: cleanedString(values[CLABE]),\r\n      };\r\n    default:\r\n      throw new Error(`Not supported country (${country}) given to validator`);\r\n  }\r\n};\r\n\r\n/**\r\n * Translate messages related to different input types.\r\n *\r\n * Check translations for StripeBankAccountTokenInputField\r\n * from [rootFolder]/src/translations/en.json\r\n *\r\n * @param {Object} intl - translation library to format errors\r\n * @param {String} inputType - input type (e.g. 'routingNumber', 'IBAN')\r\n * @param {String} messageType - one of the different messages related to inputType\r\n * (e.g. 'inline', 'invalid', 'label', 'placeholder', 'required')\r\n *\r\n * @return {Object} key - value in Object literal.\r\n */\r\nexport const formatFieldMessage = (intl, inputType, messageType) => {\r\n  if (!BANK_ACCOUNT_INPUTS.includes(inputType)) {\r\n    throw new Error(`inputType (${inputType}) must be one of ${BANK_ACCOUNT_INPUTS}`);\r\n  }\r\n\r\n  return intl.formatMessage({\r\n    id: `StripeBankAccountTokenInputField.${inputType}.${messageType}`,\r\n  });\r\n};\r\n\r\n/**\r\n * Remove all whitespace from the given string.\r\n *\r\n * @param {String} str - target string\r\n *\r\n * @return {String} cleaned string\r\n */\r\nexport const cleanedString = str => {\r\n  return str ? str.replace(/\\s/g, '') : '';\r\n};\r\n"]},"metadata":{},"sourceType":"module"}