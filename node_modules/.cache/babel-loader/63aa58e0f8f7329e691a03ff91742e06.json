{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\AuthenticationPage\\\\SignupForm\\\\SignupForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport * as validators from '../../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './SignupForm.module.css';\nconst KEY_CODE_ENTER = 13;\n\nconst SignupFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      rootClassName,\n      className,\n      formId,\n      handleSubmit,\n      inProgress,\n      invalid,\n      intl,\n      onOpenTermsOfService\n    } = fieldRenderProps; // email\n\n    const emailLabel = intl.formatMessage({\n      id: 'SignupForm.emailLabel'\n    });\n    const emailPlaceholder = intl.formatMessage({\n      id: 'SignupForm.emailPlaceholder'\n    });\n    const emailRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.emailRequired'\n    });\n    const emailRequired = validators.required(emailRequiredMessage);\n    const emailInvalidMessage = intl.formatMessage({\n      id: 'SignupForm.emailInvalid'\n    });\n    const emailValid = validators.emailFormatValid(emailInvalidMessage); // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'SignupForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'SignupForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.passwordRequired'\n    });\n    const passwordMinLengthMessage = intl.formatMessage({\n      id: 'SignupForm.passwordTooShort'\n    }, {\n      minLength: validators.PASSWORD_MIN_LENGTH\n    });\n    const passwordMaxLengthMessage = intl.formatMessage({\n      id: 'SignupForm.passwordTooLong'\n    }, {\n      maxLength: validators.PASSWORD_MAX_LENGTH\n    });\n    const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n    const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH);\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const passwordValidators = validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength); // firstName\n\n    const firstNameLabel = intl.formatMessage({\n      id: 'SignupForm.firstNameLabel'\n    });\n    const firstNamePlaceholder = intl.formatMessage({\n      id: 'SignupForm.firstNamePlaceholder'\n    });\n    const firstNameRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.firstNameRequired'\n    });\n    const firstNameRequired = validators.required(firstNameRequiredMessage); // lastName\n\n    const lastNameLabel = intl.formatMessage({\n      id: 'SignupForm.lastNameLabel'\n    });\n    const lastNamePlaceholder = intl.formatMessage({\n      id: 'SignupForm.lastNamePlaceholder'\n    });\n    const lastNameRequiredMessage = intl.formatMessage({\n      id: 'SignupForm.lastNameRequired'\n    });\n    const lastNameRequired = validators.required(lastNameRequiredMessage);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n\n    const handleTermsKeyUp = e => {\n      // Allow click action with keyboard like with normal links\n      if (e.keyCode === KEY_CODE_ENTER) {\n        onOpenTermsOfService();\n      }\n    };\n\n    const termsLink = /*#__PURE__*/React.createElement(\"span\", {\n      className: css.termsLink,\n      onClick: onOpenTermsOfService,\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyUp: handleTermsKeyUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SignupForm.termsAndConditionsLinkText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      type: \"email\",\n      id: formId ? `${formId}.email` : 'email',\n      name: \"email\",\n      autoComplete: \"email\",\n      label: emailLabel,\n      placeholder: emailPlaceholder,\n      validate: validators.composeValidators(emailRequired, emailValid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.firstNameRoot,\n      type: \"text\",\n      id: formId ? `${formId}.fname` : 'fname',\n      name: \"fname\",\n      autoComplete: \"given-name\",\n      label: firstNameLabel,\n      placeholder: firstNamePlaceholder,\n      validate: firstNameRequired,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.lastNameRoot,\n      type: \"text\",\n      id: formId ? `${formId}.lname` : 'lname',\n      name: \"lname\",\n      autoComplete: \"family-name\",\n      label: lastNameLabel,\n      placeholder: lastNamePlaceholder,\n      validate: lastNameRequired,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? `${formId}.password` : 'password',\n      name: \"password\",\n      autoComplete: \"new-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: passwordValidators,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: css.bottomWrapperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.termsText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SignupForm.termsAndConditionsAcceptText\",\n      values: {\n        termsLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SignupForm.signUp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }))));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }\n}));\n\n_c = SignupFormComponent;\nSignupFormComponent.defaultProps = {\n  inProgress: false\n};\nconst {\n  bool,\n  func\n} = PropTypes;\nSignupFormComponent.propTypes = {\n  inProgress: bool,\n  onOpenTermsOfService: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst SignupForm = compose(injectIntl)(SignupFormComponent);\nSignupForm.displayName = 'SignupForm';\nexport default SignupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/AuthenticationPage/SignupForm/SignupForm.js"],"names":["React","PropTypes","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","validators","PrimaryButton","FieldTextInput","css","KEY_CODE_ENTER","SignupFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","invalid","intl","onOpenTermsOfService","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordMinLength","passwordMaxLength","passwordRequired","requiredStringNoTrim","passwordValidators","composeValidators","firstNameLabel","firstNamePlaceholder","firstNameRequiredMessage","firstNameRequired","lastNameLabel","lastNamePlaceholder","lastNameRequiredMessage","lastNameRequired","classes","root","submitInProgress","submitDisabled","handleTermsKeyUp","e","keyCode","termsLink","name","firstNameRoot","lastNameRoot","password","bottomWrapper","bottomWrapperText","termsText","defaultProps","bool","func","propTypes","isRequired","SignupForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './SignupForm.module.css';\r\n\r\nconst KEY_CODE_ENTER = 13;\r\n\r\nconst SignupFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        rootClassName,\r\n        className,\r\n        formId,\r\n        handleSubmit,\r\n        inProgress,\r\n        invalid,\r\n        intl,\r\n        onOpenTermsOfService,\r\n      } = fieldRenderProps;\r\n\r\n      // email\r\n      const emailLabel = intl.formatMessage({\r\n        id: 'SignupForm.emailLabel',\r\n      });\r\n      const emailPlaceholder = intl.formatMessage({\r\n        id: 'SignupForm.emailPlaceholder',\r\n      });\r\n      const emailRequiredMessage = intl.formatMessage({\r\n        id: 'SignupForm.emailRequired',\r\n      });\r\n      const emailRequired = validators.required(emailRequiredMessage);\r\n      const emailInvalidMessage = intl.formatMessage({\r\n        id: 'SignupForm.emailInvalid',\r\n      });\r\n      const emailValid = validators.emailFormatValid(emailInvalidMessage);\r\n\r\n      // password\r\n      const passwordLabel = intl.formatMessage({\r\n        id: 'SignupForm.passwordLabel',\r\n      });\r\n      const passwordPlaceholder = intl.formatMessage({\r\n        id: 'SignupForm.passwordPlaceholder',\r\n      });\r\n      const passwordRequiredMessage = intl.formatMessage({\r\n        id: 'SignupForm.passwordRequired',\r\n      });\r\n      const passwordMinLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'SignupForm.passwordTooShort',\r\n        },\r\n        {\r\n          minLength: validators.PASSWORD_MIN_LENGTH,\r\n        }\r\n      );\r\n      const passwordMaxLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'SignupForm.passwordTooLong',\r\n        },\r\n        {\r\n          maxLength: validators.PASSWORD_MAX_LENGTH,\r\n        }\r\n      );\r\n      const passwordMinLength = validators.minLength(\r\n        passwordMinLengthMessage,\r\n        validators.PASSWORD_MIN_LENGTH\r\n      );\r\n      const passwordMaxLength = validators.maxLength(\r\n        passwordMaxLengthMessage,\r\n        validators.PASSWORD_MAX_LENGTH\r\n      );\r\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n      const passwordValidators = validators.composeValidators(\r\n        passwordRequired,\r\n        passwordMinLength,\r\n        passwordMaxLength\r\n      );\r\n\r\n      // firstName\r\n      const firstNameLabel = intl.formatMessage({\r\n        id: 'SignupForm.firstNameLabel',\r\n      });\r\n      const firstNamePlaceholder = intl.formatMessage({\r\n        id: 'SignupForm.firstNamePlaceholder',\r\n      });\r\n      const firstNameRequiredMessage = intl.formatMessage({\r\n        id: 'SignupForm.firstNameRequired',\r\n      });\r\n      const firstNameRequired = validators.required(firstNameRequiredMessage);\r\n\r\n      // lastName\r\n      const lastNameLabel = intl.formatMessage({\r\n        id: 'SignupForm.lastNameLabel',\r\n      });\r\n      const lastNamePlaceholder = intl.formatMessage({\r\n        id: 'SignupForm.lastNamePlaceholder',\r\n      });\r\n      const lastNameRequiredMessage = intl.formatMessage({\r\n        id: 'SignupForm.lastNameRequired',\r\n      });\r\n      const lastNameRequired = validators.required(lastNameRequiredMessage);\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = invalid || submitInProgress;\r\n\r\n      const handleTermsKeyUp = e => {\r\n        // Allow click action with keyboard like with normal links\r\n        if (e.keyCode === KEY_CODE_ENTER) {\r\n          onOpenTermsOfService();\r\n        }\r\n      };\r\n      const termsLink = (\r\n        <span\r\n          className={css.termsLink}\r\n          onClick={onOpenTermsOfService}\r\n          role=\"button\"\r\n          tabIndex=\"0\"\r\n          onKeyUp={handleTermsKeyUp}\r\n        >\r\n          <FormattedMessage id=\"SignupForm.termsAndConditionsLinkText\" />\r\n        </span>\r\n      );\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <div>\r\n            <FieldTextInput\r\n              type=\"email\"\r\n              id={formId ? `${formId}.email` : 'email'}\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              label={emailLabel}\r\n              placeholder={emailPlaceholder}\r\n              validate={validators.composeValidators(emailRequired, emailValid)}\r\n            />\r\n            <div className={css.name}>\r\n              <FieldTextInput\r\n                className={css.firstNameRoot}\r\n                type=\"text\"\r\n                id={formId ? `${formId}.fname` : 'fname'}\r\n                name=\"fname\"\r\n                autoComplete=\"given-name\"\r\n                label={firstNameLabel}\r\n                placeholder={firstNamePlaceholder}\r\n                validate={firstNameRequired}\r\n              />\r\n              <FieldTextInput\r\n                className={css.lastNameRoot}\r\n                type=\"text\"\r\n                id={formId ? `${formId}.lname` : 'lname'}\r\n                name=\"lname\"\r\n                autoComplete=\"family-name\"\r\n                label={lastNameLabel}\r\n                placeholder={lastNamePlaceholder}\r\n                validate={lastNameRequired}\r\n              />\r\n            </div>\r\n            <FieldTextInput\r\n              className={css.password}\r\n              type=\"password\"\r\n              id={formId ? `${formId}.password` : 'password'}\r\n              name=\"password\"\r\n              autoComplete=\"new-password\"\r\n              label={passwordLabel}\r\n              placeholder={passwordPlaceholder}\r\n              validate={passwordValidators}\r\n            />\r\n          </div>\r\n\r\n          <div className={css.bottomWrapper}>\r\n            <p className={css.bottomWrapperText}>\r\n              <span className={css.termsText}>\r\n                <FormattedMessage\r\n                  id=\"SignupForm.termsAndConditionsAcceptText\"\r\n                  values={{ termsLink }}\r\n                />\r\n              </span>\r\n            </p>\r\n            <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n              <FormattedMessage id=\"SignupForm.signUp\" />\r\n            </PrimaryButton>\r\n          </div>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nSignupFormComponent.defaultProps = { inProgress: false };\r\n\r\nconst { bool, func } = PropTypes;\r\n\r\nSignupFormComponent.propTypes = {\r\n  inProgress: bool,\r\n\r\n  onOpenTermsOfService: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst SignupForm = compose(injectIntl)(SignupFormComponent);\r\nSignupForm.displayName = 'SignupForm';\r\n\r\nexport default SignupForm;\r\n"]},"metadata":{},"sourceType":"module"}