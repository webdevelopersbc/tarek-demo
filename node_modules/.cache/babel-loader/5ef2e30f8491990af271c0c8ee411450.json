{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\AuthenticationPage\\\\LoginForm\\\\LoginForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport * as validators from '../../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../../components';\nimport css from './LoginForm.module.css';\n\nconst LoginFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: fieldRenderProps => {\n    const {\n      rootClassName,\n      className,\n      formId,\n      handleSubmit,\n      inProgress,\n      intl,\n      invalid\n    } = fieldRenderProps; // email\n\n    const emailLabel = intl.formatMessage({\n      id: 'LoginForm.emailLabel'\n    });\n    const emailPlaceholder = intl.formatMessage({\n      id: 'LoginForm.emailPlaceholder'\n    });\n    const emailRequiredMessage = intl.formatMessage({\n      id: 'LoginForm.emailRequired'\n    });\n    const emailRequired = validators.required(emailRequiredMessage);\n    const emailInvalidMessage = intl.formatMessage({\n      id: 'LoginForm.emailInvalid'\n    });\n    const emailValid = validators.emailFormatValid(emailInvalidMessage); // password\n\n    const passwordLabel = intl.formatMessage({\n      id: 'LoginForm.passwordLabel'\n    });\n    const passwordPlaceholder = intl.formatMessage({\n      id: 'LoginForm.passwordPlaceholder'\n    });\n    const passwordRequiredMessage = intl.formatMessage({\n      id: 'LoginForm.passwordRequired'\n    });\n    const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n    const passwordRecoveryLink = /*#__PURE__*/React.createElement(NamedLink, {\n      name: \"PasswordRecoveryPage\",\n      className: css.recoveryLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LoginForm.forgotPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      type: \"email\",\n      id: formId ? `${formId}.email` : 'email',\n      name: \"email\",\n      autoComplete: \"email\",\n      label: emailLabel,\n      placeholder: emailPlaceholder,\n      validate: validators.composeValidators(emailRequired, emailValid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.password,\n      type: \"password\",\n      id: formId ? `${formId}.password` : 'password',\n      name: \"password\",\n      autoComplete: \"current-password\",\n      label: passwordLabel,\n      placeholder: passwordPlaceholder,\n      validate: passwordRequired,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: css.bottomWrapperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.recoveryLinkInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LoginForm.forgotPasswordInfo\",\n      values: {\n        passwordRecoveryLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LoginForm.logIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }))));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }\n}));\n\n_c = LoginFormComponent;\nLoginFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  form: null,\n  inProgress: false\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nLoginFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  form: string,\n  inProgress: bool,\n  intl: intlShape.isRequired\n};\nconst LoginForm = compose(injectIntl)(LoginFormComponent);\nLoginForm.displayName = 'LoginForm';\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/AuthenticationPage/LoginForm/LoginForm.js"],"names":["React","PropTypes","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","validators","PrimaryButton","FieldTextInput","NamedLink","css","LoginFormComponent","props","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","intl","invalid","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","requiredStringNoTrim","classes","root","submitInProgress","submitDisabled","passwordRecoveryLink","recoveryLink","composeValidators","password","bottomWrapper","bottomWrapperText","recoveryLinkInfo","defaultProps","form","string","bool","propTypes","isRequired","LoginForm","displayName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,IAAI,IAAIC,SAAjB,QAAkC,kBAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,yBAAxD;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AACA,SAASN,IAAT,EAAeO,aAAf,EAA8BC,cAA9B,EAA8CC,SAA9C,QAA+D,qBAA/D;AAEA,OAAOC,GAAP,MAAgB,wBAAhB;;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,iBAC9B,oBAAC,SAAD,oBACMA,KADN;AAEE,EAAA,MAAM,EAAEC,gBAAgB,IAAI;AAC1B,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,IANI;AAOJC,MAAAA;AAPI,QAQFP,gBARJ,CAD0B,CAW1B;;AACA,UAAMQ,UAAU,GAAGF,IAAI,CAACG,aAAL,CAAmB;AACpCC,MAAAA,EAAE,EAAE;AADgC,KAAnB,CAAnB;AAGA,UAAMC,gBAAgB,GAAGL,IAAI,CAACG,aAAL,CAAmB;AAC1CC,MAAAA,EAAE,EAAE;AADsC,KAAnB,CAAzB;AAGA,UAAME,oBAAoB,GAAGN,IAAI,CAACG,aAAL,CAAmB;AAC9CC,MAAAA,EAAE,EAAE;AAD0C,KAAnB,CAA7B;AAGA,UAAMG,aAAa,GAAGpB,UAAU,CAACqB,QAAX,CAAoBF,oBAApB,CAAtB;AACA,UAAMG,mBAAmB,GAAGT,IAAI,CAACG,aAAL,CAAmB;AAC7CC,MAAAA,EAAE,EAAE;AADyC,KAAnB,CAA5B;AAGA,UAAMM,UAAU,GAAGvB,UAAU,CAACwB,gBAAX,CAA4BF,mBAA5B,CAAnB,CAzB0B,CA2B1B;;AACA,UAAMG,aAAa,GAAGZ,IAAI,CAACG,aAAL,CAAmB;AACvCC,MAAAA,EAAE,EAAE;AADmC,KAAnB,CAAtB;AAGA,UAAMS,mBAAmB,GAAGb,IAAI,CAACG,aAAL,CAAmB;AAC7CC,MAAAA,EAAE,EAAE;AADyC,KAAnB,CAA5B;AAGA,UAAMU,uBAAuB,GAAGd,IAAI,CAACG,aAAL,CAAmB;AACjDC,MAAAA,EAAE,EAAE;AAD6C,KAAnB,CAAhC;AAGA,UAAMW,gBAAgB,GAAG5B,UAAU,CAAC6B,oBAAX,CAAgCF,uBAAhC,CAAzB;AAEA,UAAMG,OAAO,GAAGlC,UAAU,CAACY,aAAa,IAAIJ,GAAG,CAAC2B,IAAtB,EAA4BtB,SAA5B,CAA1B;AACA,UAAMuB,gBAAgB,GAAGpB,UAAzB;AACA,UAAMqB,cAAc,GAAGnB,OAAO,IAAIkB,gBAAlC;AAEA,UAAME,oBAAoB,gBACxB,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,sBAAhB;AAAuC,MAAA,SAAS,EAAE9B,GAAG,CAAC+B,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,0BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAMA,wBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEL,OAAjB;AAA0B,MAAA,QAAQ,EAAEnB,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,EAAE,EAAED,MAAM,GAAI,GAAEA,MAAO,QAAb,GAAuB,OAFnC;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,YAAY,EAAC,OAJf;AAKE,MAAA,KAAK,EAAEK,UALT;AAME,MAAA,WAAW,EAAEG,gBANf;AAOE,MAAA,QAAQ,EAAElB,UAAU,CAACoC,iBAAX,CAA6BhB,aAA7B,EAA4CG,UAA5C,CAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE,oBAAC,cAAD;AACE,MAAA,SAAS,EAAEnB,GAAG,CAACiC,QADjB;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,EAAE,EAAE3B,MAAM,GAAI,GAAEA,MAAO,WAAb,GAA0B,UAHtC;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,YAAY,EAAC,kBALf;AAME,MAAA,KAAK,EAAEe,aANT;AAOE,MAAA,WAAW,EAAEC,mBAPf;AAQE,MAAA,QAAQ,EAAEE,gBARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF,eAsBE;AAAK,MAAA,SAAS,EAAExB,GAAG,CAACkC,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAElC,GAAG,CAACmC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAEnC,GAAG,CAACoC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AACE,MAAA,EAAE,EAAC,8BADL;AAEE,MAAA,MAAM,EAAE;AAAEN,QAAAA;AAAF,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,eASE,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAC,QAApB;AAA6B,MAAA,UAAU,EAAEF,gBAAzC;AAA2D,MAAA,QAAQ,EAAEC,cAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,CAtBF,CADF;AAsCD,GAzFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;KAAM5B,kB;AA8FNA,kBAAkB,CAACoC,YAAnB,GAAkC;AAChCjC,EAAAA,aAAa,EAAE,IADiB;AAEhCC,EAAAA,SAAS,EAAE,IAFqB;AAGhCiC,EAAAA,IAAI,EAAE,IAH0B;AAIhC9B,EAAAA,UAAU,EAAE;AAJoB,CAAlC;AAOA,MAAM;AAAE+B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAmBpD,SAAzB;AAEAa,kBAAkB,CAACwC,SAAnB,GAA+B;AAC7BrC,EAAAA,aAAa,EAAEmC,MADc;AAE7BlC,EAAAA,SAAS,EAAEkC,MAFkB;AAG7BD,EAAAA,IAAI,EAAEC,MAHuB;AAI7B/B,EAAAA,UAAU,EAAEgC,IAJiB;AAK7B/B,EAAAA,IAAI,EAAEd,SAAS,CAAC+C;AALa,CAA/B;AAQA,MAAMC,SAAS,GAAGtD,OAAO,CAACK,UAAD,CAAP,CAAoBO,kBAApB,CAAlB;AACA0C,SAAS,CAACC,WAAV,GAAwB,WAAxB;AAEA,eAAeD,SAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../../components';\r\n\r\nimport css from './LoginForm.module.css';\r\n\r\nconst LoginFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        rootClassName,\r\n        className,\r\n        formId,\r\n        handleSubmit,\r\n        inProgress,\r\n        intl,\r\n        invalid,\r\n      } = fieldRenderProps;\r\n\r\n      // email\r\n      const emailLabel = intl.formatMessage({\r\n        id: 'LoginForm.emailLabel',\r\n      });\r\n      const emailPlaceholder = intl.formatMessage({\r\n        id: 'LoginForm.emailPlaceholder',\r\n      });\r\n      const emailRequiredMessage = intl.formatMessage({\r\n        id: 'LoginForm.emailRequired',\r\n      });\r\n      const emailRequired = validators.required(emailRequiredMessage);\r\n      const emailInvalidMessage = intl.formatMessage({\r\n        id: 'LoginForm.emailInvalid',\r\n      });\r\n      const emailValid = validators.emailFormatValid(emailInvalidMessage);\r\n\r\n      // password\r\n      const passwordLabel = intl.formatMessage({\r\n        id: 'LoginForm.passwordLabel',\r\n      });\r\n      const passwordPlaceholder = intl.formatMessage({\r\n        id: 'LoginForm.passwordPlaceholder',\r\n      });\r\n      const passwordRequiredMessage = intl.formatMessage({\r\n        id: 'LoginForm.passwordRequired',\r\n      });\r\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = invalid || submitInProgress;\r\n\r\n      const passwordRecoveryLink = (\r\n        <NamedLink name=\"PasswordRecoveryPage\" className={css.recoveryLink}>\r\n          <FormattedMessage id=\"LoginForm.forgotPassword\" />\r\n        </NamedLink>\r\n      );\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <div>\r\n            <FieldTextInput\r\n              type=\"email\"\r\n              id={formId ? `${formId}.email` : 'email'}\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              label={emailLabel}\r\n              placeholder={emailPlaceholder}\r\n              validate={validators.composeValidators(emailRequired, emailValid)}\r\n            />\r\n            <FieldTextInput\r\n              className={css.password}\r\n              type=\"password\"\r\n              id={formId ? `${formId}.password` : 'password'}\r\n              name=\"password\"\r\n              autoComplete=\"current-password\"\r\n              label={passwordLabel}\r\n              placeholder={passwordPlaceholder}\r\n              validate={passwordRequired}\r\n            />\r\n          </div>\r\n          <div className={css.bottomWrapper}>\r\n            <p className={css.bottomWrapperText}>\r\n              <span className={css.recoveryLinkInfo}>\r\n                <FormattedMessage\r\n                  id=\"LoginForm.forgotPasswordInfo\"\r\n                  values={{ passwordRecoveryLink }}\r\n                />\r\n              </span>\r\n            </p>\r\n            <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n              <FormattedMessage id=\"LoginForm.logIn\" />\r\n            </PrimaryButton>\r\n          </div>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nLoginFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  form: null,\r\n  inProgress: false,\r\n};\r\n\r\nconst { string, bool } = PropTypes;\r\n\r\nLoginFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  form: string,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst LoginForm = compose(injectIntl)(LoginFormComponent);\r\nLoginForm.displayName = 'LoginForm';\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}