{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingPricingPanel\\\\EditListingPricingForm.js\";\nimport React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport config from '../../../../config';\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\nimport { propTypes } from '../../../../util/types';\nimport { isOldTotalMismatchStockError } from '../../../../util/errors';\nimport * as validators from '../../../../util/validators';\nimport { formatMoney } from '../../../../util/currency';\nimport { types as sdkTypes } from '../../../../util/sdkLoader'; // Import shared components\n\nimport { Button, Form, FieldCurrencyInput, FieldTextInput } from '../../../../components'; // Import modules from this directory\n\nimport css from './EditListingPricingForm.module.css';\nconst {\n  Money\n} = sdkTypes;\nexport const EditListingPricingFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: formRenderProps => {\n    const {\n      autoFocus,\n      className,\n      disabled,\n      ready,\n      handleSubmit,\n      intl,\n      invalid,\n      pristine,\n      saveActionMsg,\n      updated,\n      updateInProgress,\n      fetchErrors\n    } = formRenderProps;\n    const priceRequired = validators.required(intl.formatMessage({\n      id: 'EditListingPricingForm.priceRequired'\n    }));\n    const minPrice = new Money(config.listingMinimumPriceSubUnits, config.currency);\n    const minPriceRequired = validators.moneySubUnitAmountAtLeast(intl.formatMessage({\n      id: 'EditListingPricingForm.priceTooLow'\n    }, {\n      minPrice: formatMoney(intl, minPrice)\n    }), config.listingMinimumPriceSubUnits);\n    const priceValidators = config.listingMinimumPriceSubUnits ? validators.composeValidators(priceRequired, minPriceRequired) : priceRequired;\n    const stockValidator = validators.numberAtLeast(intl.formatMessage({\n      id: 'EditListingPricingForm.stockIsRequired'\n    }), 0);\n    const classes = classNames(css.root, className);\n    const submitReady = updated && pristine || ready;\n    const submitInProgress = updateInProgress;\n    const submitDisabled = invalid || disabled || submitInProgress;\n    const {\n      updateListingError,\n      showListingsError,\n      setStockError\n    } = fetchErrors || {};\n    const stockErrorMessage = isOldTotalMismatchStockError(setStockError) ? intl.formatMessage({\n      id: 'EditListingPricingForm.oldStockTotalWasOutOfSync'\n    }) : intl.formatMessage({\n      id: 'EditListingPricingForm.stockUpdateFailed'\n    });\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: handleSubmit,\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, updateListingError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingPricingForm.updateFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    })) : null, showListingsError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingPricingForm.showListingFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    })) : null, /*#__PURE__*/React.createElement(FieldCurrencyInput, {\n      id: \"price\",\n      name: \"price\",\n      className: css.input,\n      autoFocus: autoFocus,\n      label: intl.formatMessage({\n        id: 'EditListingPricingForm.pricePerProduct'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'EditListingPricingForm.priceInputPlaceholder'\n      }),\n      currencyConfig: config.currencyConfig,\n      validate: priceValidators,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.input,\n      id: \"stock\",\n      name: \"stock\",\n      label: intl.formatMessage({\n        id: 'EditListingPricingForm.stockLabel'\n      }),\n      placeholder: intl.formatMessage({\n        id: 'EditListingPricingForm.stockPlaceholder'\n      }),\n      type: \"number\",\n      min: 0,\n      validate: stockValidator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }), setStockError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 28\n      }\n    }, stockErrorMessage) : null, /*#__PURE__*/React.createElement(Button, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      ready: submitReady,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, saveActionMsg));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }\n}));\n_c = EditListingPricingFormComponent;\nEditListingPricingFormComponent.defaultProps = {\n  fetchErrors: null\n};\nEditListingPricingFormComponent.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  fetchErrors: shape({\n    showListingsError: propTypes.error,\n    updateListingError: propTypes.error\n  })\n};\nexport default compose(injectIntl)(EditListingPricingFormComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditListingPricingFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingPricingPanel/EditListingPricingForm.js"],"names":["React","bool","func","shape","string","compose","Form","FinalForm","classNames","config","intlShape","injectIntl","FormattedMessage","propTypes","isOldTotalMismatchStockError","validators","formatMoney","types","sdkTypes","Button","FieldCurrencyInput","FieldTextInput","css","Money","EditListingPricingFormComponent","props","formRenderProps","autoFocus","className","disabled","ready","handleSubmit","intl","invalid","pristine","saveActionMsg","updated","updateInProgress","fetchErrors","priceRequired","required","formatMessage","id","minPrice","listingMinimumPriceSubUnits","currency","minPriceRequired","moneySubUnitAmountAtLeast","priceValidators","composeValidators","stockValidator","numberAtLeast","classes","root","submitReady","submitInProgress","submitDisabled","updateListingError","showListingsError","setStockError","stockErrorMessage","error","input","currencyConfig","submitButton","defaultProps","isRequired","onSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { bool, func, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport config from '../../../../config';\r\nimport { intlShape, injectIntl, FormattedMessage } from '../../../../util/reactIntl';\r\nimport { propTypes } from '../../../../util/types';\r\nimport { isOldTotalMismatchStockError } from '../../../../util/errors';\r\nimport * as validators from '../../../../util/validators';\r\nimport { formatMoney } from '../../../../util/currency';\r\nimport { types as sdkTypes } from '../../../../util/sdkLoader';\r\n\r\n// Import shared components\r\nimport { Button, Form, FieldCurrencyInput, FieldTextInput } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport css from './EditListingPricingForm.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\n\r\nexport const EditListingPricingFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={formRenderProps => {\r\n      const {\r\n        autoFocus,\r\n        className,\r\n        disabled,\r\n        ready,\r\n        handleSubmit,\r\n        intl,\r\n        invalid,\r\n        pristine,\r\n        saveActionMsg,\r\n        updated,\r\n        updateInProgress,\r\n        fetchErrors,\r\n      } = formRenderProps;\r\n\r\n      const priceRequired = validators.required(\r\n        intl.formatMessage({\r\n          id: 'EditListingPricingForm.priceRequired',\r\n        })\r\n      );\r\n      const minPrice = new Money(config.listingMinimumPriceSubUnits, config.currency);\r\n      const minPriceRequired = validators.moneySubUnitAmountAtLeast(\r\n        intl.formatMessage(\r\n          {\r\n            id: 'EditListingPricingForm.priceTooLow',\r\n          },\r\n          {\r\n            minPrice: formatMoney(intl, minPrice),\r\n          }\r\n        ),\r\n        config.listingMinimumPriceSubUnits\r\n      );\r\n      const priceValidators = config.listingMinimumPriceSubUnits\r\n        ? validators.composeValidators(priceRequired, minPriceRequired)\r\n        : priceRequired;\r\n\r\n      const stockValidator = validators.numberAtLeast(\r\n        intl.formatMessage({ id: 'EditListingPricingForm.stockIsRequired' }),\r\n        0\r\n      );\r\n\r\n      const classes = classNames(css.root, className);\r\n      const submitReady = (updated && pristine) || ready;\r\n      const submitInProgress = updateInProgress;\r\n      const submitDisabled = invalid || disabled || submitInProgress;\r\n      const { updateListingError, showListingsError, setStockError } = fetchErrors || {};\r\n\r\n      const stockErrorMessage = isOldTotalMismatchStockError(setStockError)\r\n        ? intl.formatMessage({ id: 'EditListingPricingForm.oldStockTotalWasOutOfSync' })\r\n        : intl.formatMessage({ id: 'EditListingPricingForm.stockUpdateFailed' });\r\n\r\n      return (\r\n        <Form onSubmit={handleSubmit} className={classes}>\r\n          {updateListingError ? (\r\n            <p className={css.error}>\r\n              <FormattedMessage id=\"EditListingPricingForm.updateFailed\" />\r\n            </p>\r\n          ) : null}\r\n          {showListingsError ? (\r\n            <p className={css.error}>\r\n              <FormattedMessage id=\"EditListingPricingForm.showListingFailed\" />\r\n            </p>\r\n          ) : null}\r\n          <FieldCurrencyInput\r\n            id=\"price\"\r\n            name=\"price\"\r\n            className={css.input}\r\n            autoFocus={autoFocus}\r\n            label={intl.formatMessage({ id: 'EditListingPricingForm.pricePerProduct' })}\r\n            placeholder={intl.formatMessage({ id: 'EditListingPricingForm.priceInputPlaceholder' })}\r\n            currencyConfig={config.currencyConfig}\r\n            validate={priceValidators}\r\n          />\r\n\r\n          <FieldTextInput\r\n            className={css.input}\r\n            id=\"stock\"\r\n            name=\"stock\"\r\n            label={intl.formatMessage({ id: 'EditListingPricingForm.stockLabel' })}\r\n            placeholder={intl.formatMessage({ id: 'EditListingPricingForm.stockPlaceholder' })}\r\n            type=\"number\"\r\n            min={0}\r\n            validate={stockValidator}\r\n          />\r\n          {setStockError ? <p className={css.error}>{stockErrorMessage}</p> : null}\r\n\r\n          <Button\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n            ready={submitReady}\r\n          >\r\n            {saveActionMsg}\r\n          </Button>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nEditListingPricingFormComponent.defaultProps = { fetchErrors: null };\r\n\r\nEditListingPricingFormComponent.propTypes = {\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func.isRequired,\r\n  saveActionMsg: string.isRequired,\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  updated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  fetchErrors: shape({\r\n    showListingsError: propTypes.error,\r\n    updateListingError: propTypes.error,\r\n  }),\r\n};\r\n\r\nexport default compose(injectIntl)(EditListingPricingFormComponent);\r\n"]},"metadata":{},"sourceType":"module"}