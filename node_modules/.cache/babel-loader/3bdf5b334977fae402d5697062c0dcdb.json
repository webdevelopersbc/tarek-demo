{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\ImageFromFile\\\\ImageFromFile.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { AspectRatioWrapper, Promised } from '../../components';\nimport css from './ImageFromFile.module.css'; // readImage returns a promise which is resolved\n// when FileReader has loaded given file as dataURL\n\nconst readImage = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n\n  reader.onload = e => resolve(e.target.result);\n\n  reader.onerror = e => {\n    // eslint-disable-next-line\n    console.error('Error (', e, `) happened while reading ${file.name}: ${e.target.result}`);\n    reject(new Error(`Error reading ${file.name}: ${e.target.result}`));\n  };\n\n  reader.readAsDataURL(file);\n}); // Create elements out of given thumbnail file\n\n\nclass ImageFromFile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promisedImage: readImage(this.props.file)\n    };\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      aspectRatioClassName,\n      file,\n      id,\n      children\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const {\n      aspectWidth = 1,\n      aspectHeight = 1\n    } = config.listing;\n    return /*#__PURE__*/React.createElement(Promised, {\n      key: id,\n      promise: this.state.promisedImage,\n      renderFulfilled: dataURL => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(AspectRatioWrapper, {\n          width: aspectWidth,\n          height: aspectHeight,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: dataURL,\n          alt: file.name,\n          className: css.rootForImage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }\n        })), children);\n      },\n      renderRejected: () => /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"ImageFromFile.couldNotReadFile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nImageFromFile.defaultProps = {\n  className: null,\n  children: null,\n  rootClassName: null,\n  aspectRatioClassName: null\n};\nconst {\n  any,\n  node,\n  string\n} = PropTypes;\nImageFromFile.propTypes = {\n  className: string,\n  rootClassName: string,\n  aspectRatioClassName: string,\n  file: any.isRequired,\n  id: string.isRequired,\n  children: node\n};\nexport default ImageFromFile;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/ImageFromFile/ImageFromFile.js"],"names":["React","Component","PropTypes","FormattedMessage","classNames","config","AspectRatioWrapper","Promised","css","readImage","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","console","error","name","Error","readAsDataURL","ImageFromFile","constructor","props","state","promisedImage","render","className","rootClassName","aspectRatioClassName","id","children","classes","root","aspectWidth","aspectHeight","listing","dataURL","rootForImage","defaultProps","any","node","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../config';\r\nimport { AspectRatioWrapper, Promised } from '../../components';\r\n\r\nimport css from './ImageFromFile.module.css';\r\n\r\n// readImage returns a promise which is resolved\r\n// when FileReader has loaded given file as dataURL\r\nconst readImage = file =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = e => resolve(e.target.result);\r\n    reader.onerror = e => {\r\n      // eslint-disable-next-line\r\n      console.error('Error (', e, `) happened while reading ${file.name}: ${e.target.result}`);\r\n      reject(new Error(`Error reading ${file.name}: ${e.target.result}`));\r\n    };\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\n// Create elements out of given thumbnail file\r\nclass ImageFromFile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      promisedImage: readImage(this.props.file),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { className, rootClassName, aspectRatioClassName, file, id, children } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const { aspectWidth = 1, aspectHeight = 1 } = config.listing;\r\n\r\n    return (\r\n      <Promised\r\n        key={id}\r\n        promise={this.state.promisedImage}\r\n        renderFulfilled={dataURL => {\r\n          return (\r\n            <div className={classes}>\r\n              <AspectRatioWrapper width={aspectWidth} height={aspectHeight}>\r\n                <img src={dataURL} alt={file.name} className={css.rootForImage} />\r\n              </AspectRatioWrapper>\r\n              {children}\r\n            </div>\r\n          );\r\n        }}\r\n        renderRejected={() => (\r\n          <div className={classes}>\r\n            <FormattedMessage id=\"ImageFromFile.couldNotReadFile\" />\r\n          </div>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nImageFromFile.defaultProps = {\r\n  className: null,\r\n  children: null,\r\n  rootClassName: null,\r\n  aspectRatioClassName: null,\r\n};\r\n\r\nconst { any, node, string } = PropTypes;\r\n\r\nImageFromFile.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  aspectRatioClassName: string,\r\n  file: any.isRequired,\r\n  id: string.isRequired,\r\n  children: node,\r\n};\r\n\r\nexport default ImageFromFile;\r\n"]},"metadata":{},"sourceType":"module"}