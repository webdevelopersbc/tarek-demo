{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\OrderPanel\\\\ProductOrderForm\\\\ProductOrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { bool, func, number, string } from 'prop-types';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport config from '../../../config';\nimport { FormattedMessage, useIntl } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { numberAtLeast, required } from '../../../util/validators';\nimport { Form, FieldSelect, FieldTextInput, InlineTextButton, PrimaryButton } from '../../../components';\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\nimport css from './ProductOrderForm.module.css';\n\nconst renderForm = formRenderProps => {\n  const {\n    // FormRenderProps from final-form\n    handleSubmit,\n    form: formApi,\n    // Custom props passed to the form component\n    intl,\n    formId,\n    currentStock,\n    hasMultipleDeliveryMethods,\n    listingId,\n    isOwnListing,\n    onFetchTransactionLineItems,\n    onContactUser,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n    values\n  } = formRenderProps;\n\n  const handleOnChange = formValues => {\n    const {\n      quantity: quantityRaw,\n      deliveryMethod\n    } = formValues.values;\n    const quantity = Number.parseInt(quantityRaw, 10);\n\n    if (quantity && deliveryMethod && !fetchLineItemsInProgress) {\n      onFetchTransactionLineItems({\n        orderData: {\n          quantity,\n          deliveryMethod\n        },\n        listingId,\n        isOwnListing\n      });\n    }\n  }; // In case quantity and deliveryMethod are missing focus on that select-input.\n  // Otherwise continue with the default handleSubmit function.\n\n\n  const handleFormSubmit = e => {\n    const {\n      quantity,\n      deliveryMethod\n    } = values || {};\n\n    if (!quantity || quantity < 1) {\n      e.preventDefault(); // Blur event will show validator message\n\n      formApi.blur('quantity');\n      formApi.focus('quantity');\n    } else if (!deliveryMethod) {\n      e.preventDefault(); // Blur event will show validator message\n\n      formApi.blur('deliveryMethod');\n      formApi.focus('deliveryMethod');\n    } else {\n      handleSubmit(e);\n    }\n  };\n\n  const breakdownData = {};\n  const showBreakdown = breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\n  const breakdown = showBreakdown ? /*#__PURE__*/React.createElement(\"div\", {\n    className: css.breakdownWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.breakdownTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(EstimatedCustomerBreakdownMaybe, {\n    unitType: config.lineItemUnitType,\n    breakdownData: breakdownData,\n    lineItems: lineItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  })) : null;\n  const showContactUser = typeof onContactUser === 'function';\n\n  const onClickContactUser = e => {\n    e.preventDefault();\n    onContactUser();\n  };\n\n  const contactSellerLink = /*#__PURE__*/React.createElement(InlineTextButton, {\n    onClick: onClickContactUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrintNoStockLinkText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n  const quantityRequiredMsg = intl.formatMessage({\n    id: 'ProductOrderForm.quantityRequired'\n  });\n  const hasStock = currentStock && currentStock > 0;\n  const quantities = hasStock ? [...Array(currentStock).keys()].map(i => i + 1) : [];\n  const hasNoStockLeft = typeof currentStock != null && currentStock === 0;\n  const hasOneItemLeft = typeof currentStock != null && currentStock === 1;\n  const submitInProgress = fetchLineItemsInProgress;\n  const submitDisabled = !hasStock;\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormSpy, {\n    subscription: {\n      values: true\n    },\n    onChange: handleOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), hasNoStockLeft ? null : hasOneItemLeft ? /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${formId}.quantity`,\n    className: css.quantityField,\n    name: \"quantity\",\n    type: \"hidden\",\n    validate: numberAtLeast(quantityRequiredMsg, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(FieldSelect, {\n    id: `${formId}.quantity`,\n    className: css.quantityField,\n    name: \"quantity\",\n    disabled: !hasStock,\n    label: intl.formatMessage({\n      id: 'ProductOrderForm.quantityLabel'\n    }),\n    validate: numberAtLeast(quantityRequiredMsg, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.selectQuantityOption'\n  })), quantities.map(quantity => /*#__PURE__*/React.createElement(\"option\", {\n    key: quantity,\n    value: quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.quantityOption'\n  }, {\n    quantity\n  })))), hasNoStockLeft ? null : hasMultipleDeliveryMethods ? /*#__PURE__*/React.createElement(FieldSelect, {\n    id: `${formId}.deliveryMethod`,\n    className: css.deliveryField,\n    name: \"deliveryMethod\",\n    disabled: !hasStock,\n    label: intl.formatMessage({\n      id: 'ProductOrderForm.deliveryMethodLabel'\n    }),\n    validate: required(intl.formatMessage({\n      id: 'ProductOrderForm.deliveryMethodRequired'\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.selectDeliveryMethodOption'\n  })), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'pickup',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.pickupOption'\n  })), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'shipping',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.shippingOption'\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: css.deliveryField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.deliveryMethodLabel'\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.singleDeliveryMethodSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, values.deliveryMethod === 'shipping' ? intl.formatMessage({\n    id: 'ProductOrderForm.shippingOption'\n  }) : intl.formatMessage({\n    id: 'ProductOrderForm.pickupOption'\n  })), /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${formId}.deliveryMethod`,\n    className: css.deliveryField,\n    name: \"deliveryMethod\",\n    type: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  })), breakdown, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.submitButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryButton, {\n    type: \"submit\",\n    inProgress: submitInProgress,\n    disabled: submitDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, hasStock ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.ctaButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.ctaButtonNoStock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.finePrint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, hasStock ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }) : showContactUser ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrintNoStock\",\n    values: {\n      contactSellerLink\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }) : null));\n};\n\nconst ProductOrderForm = props => {\n  _s();\n\n  const intl = useIntl();\n  const {\n    price,\n    currentStock,\n    pickupEnabled,\n    shippingEnabled\n  } = props; // Should not happen for listings that go through EditListingWizard.\n  // However, this might happen for imported listings.\n\n  if (!pickupEnabled && !shippingEnabled) {\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.noDeliveryMethodSet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  if (!price) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.listingPriceMissing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (price.currency !== config.currency) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.listingCurrencyInvalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const hasOneItemLeft = currentStock && currentStock === 1;\n  const quantityMaybe = hasOneItemLeft ? {\n    quantity: '1'\n  } : {};\n  const singleDeliveryMethodAvailableMaybe = shippingEnabled && !pickupEnabled ? {\n    deliveryMethod: 'shipping'\n  } : !shippingEnabled && pickupEnabled ? {\n    deliveryMethod: 'pickup'\n  } : {};\n  const hasMultipleDeliveryMethods = pickupEnabled && shippingEnabled;\n  const initialValues = { ...quantityMaybe,\n    ...singleDeliveryMethodAvailableMaybe\n  };\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({\n    initialValues: initialValues,\n    hasMultipleDeliveryMethods: hasMultipleDeliveryMethods\n  }, props, {\n    intl: intl,\n    render: renderForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }));\n};\n\n_s(ProductOrderForm, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c = ProductOrderForm;\nProductOrderForm.defaultProps = {\n  rootClassName: null,\n  className: null,\n  price: null,\n  currentStock: null,\n  listingId: null,\n  isOwnListing: false,\n  lineItems: null,\n  fetchLineItemsError: null\n};\nProductOrderForm.propTypes = {\n  rootClassName: string,\n  className: string,\n  // form\n  formId: string.isRequired,\n  onSubmit: func.isRequired,\n  // listing\n  listingId: propTypes.uuid,\n  price: propTypes.money,\n  currentStock: number,\n  isOwnListing: bool,\n  // line items\n  lineItems: propTypes.lineItems,\n  onFetchTransactionLineItems: func.isRequired,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n  // other\n  onContactUser: func\n};\nexport default ProductOrderForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductOrderForm\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/OrderPanel/ProductOrderForm/ProductOrderForm.js"],"names":["React","useRef","bool","func","number","string","Form","FinalForm","FormSpy","config","FormattedMessage","useIntl","propTypes","numberAtLeast","required","FieldSelect","FieldTextInput","InlineTextButton","PrimaryButton","EstimatedCustomerBreakdownMaybe","css","renderForm","formRenderProps","handleSubmit","form","formApi","intl","formId","currentStock","hasMultipleDeliveryMethods","listingId","isOwnListing","onFetchTransactionLineItems","onContactUser","lineItems","fetchLineItemsInProgress","fetchLineItemsError","values","handleOnChange","formValues","quantity","quantityRaw","deliveryMethod","Number","parseInt","orderData","handleFormSubmit","e","preventDefault","blur","focus","breakdownData","showBreakdown","breakdown","breakdownWrapper","lineItemUnitType","showContactUser","onClickContactUser","contactSellerLink","quantityRequiredMsg","formatMessage","id","hasStock","quantities","Array","keys","map","i","hasNoStockLeft","hasOneItemLeft","submitInProgress","submitDisabled","quantityField","deliveryField","singleDeliveryMethodSelected","submitButton","finePrint","ProductOrderForm","props","price","pickupEnabled","shippingEnabled","error","currency","quantityMaybe","singleDeliveryMethodAvailableMaybe","initialValues","defaultProps","rootClassName","className","isRequired","onSubmit","uuid","money"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { bool, func, number, string } from 'prop-types';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\n\r\nimport config from '../../../config';\r\nimport { FormattedMessage, useIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { numberAtLeast, required } from '../../../util/validators';\r\n\r\nimport {\r\n  Form,\r\n  FieldSelect,\r\n  FieldTextInput,\r\n  InlineTextButton,\r\n  PrimaryButton,\r\n} from '../../../components';\r\n\r\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\r\n\r\nimport css from './ProductOrderForm.module.css';\r\n\r\nconst renderForm = formRenderProps => {\r\n  const {\r\n    // FormRenderProps from final-form\r\n    handleSubmit,\r\n    form: formApi,\r\n\r\n    // Custom props passed to the form component\r\n    intl,\r\n    formId,\r\n    currentStock,\r\n    hasMultipleDeliveryMethods,\r\n    listingId,\r\n    isOwnListing,\r\n    onFetchTransactionLineItems,\r\n    onContactUser,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n    values,\r\n  } = formRenderProps;\r\n\r\n  const handleOnChange = formValues => {\r\n    const { quantity: quantityRaw, deliveryMethod } = formValues.values;\r\n    const quantity = Number.parseInt(quantityRaw, 10);\r\n    if (quantity && deliveryMethod && !fetchLineItemsInProgress) {\r\n      onFetchTransactionLineItems({\r\n        orderData: { quantity, deliveryMethod },\r\n        listingId,\r\n        isOwnListing,\r\n      });\r\n    }\r\n  };\r\n\r\n  // In case quantity and deliveryMethod are missing focus on that select-input.\r\n  // Otherwise continue with the default handleSubmit function.\r\n  const handleFormSubmit = e => {\r\n    const { quantity, deliveryMethod } = values || {};\r\n    if (!quantity || quantity < 1) {\r\n      e.preventDefault();\r\n      // Blur event will show validator message\r\n      formApi.blur('quantity');\r\n      formApi.focus('quantity');\r\n    } else if (!deliveryMethod) {\r\n      e.preventDefault();\r\n      // Blur event will show validator message\r\n      formApi.blur('deliveryMethod');\r\n      formApi.focus('deliveryMethod');\r\n    } else {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  const breakdownData = {};\r\n  const showBreakdown =\r\n    breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\r\n  const breakdown = showBreakdown ? (\r\n    <div className={css.breakdownWrapper}>\r\n      <h3>\r\n        <FormattedMessage id=\"ProductOrderForm.breakdownTitle\" />\r\n      </h3>\r\n      <EstimatedCustomerBreakdownMaybe\r\n        unitType={config.lineItemUnitType}\r\n        breakdownData={breakdownData}\r\n        lineItems={lineItems}\r\n      />\r\n    </div>\r\n  ) : null;\r\n\r\n  const showContactUser = typeof onContactUser === 'function';\r\n\r\n  const onClickContactUser = e => {\r\n    e.preventDefault();\r\n    onContactUser();\r\n  };\r\n\r\n  const contactSellerLink = (\r\n    <InlineTextButton onClick={onClickContactUser}>\r\n      <FormattedMessage id=\"ProductOrderForm.finePrintNoStockLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n  const quantityRequiredMsg = intl.formatMessage({ id: 'ProductOrderForm.quantityRequired' });\r\n\r\n  const hasStock = currentStock && currentStock > 0;\r\n  const quantities = hasStock ? [...Array(currentStock).keys()].map(i => i + 1) : [];\r\n  const hasNoStockLeft = typeof currentStock != null && currentStock === 0;\r\n  const hasOneItemLeft = typeof currentStock != null && currentStock === 1;\r\n\r\n  const submitInProgress = fetchLineItemsInProgress;\r\n  const submitDisabled = !hasStock;\r\n\r\n  return (\r\n    <Form onSubmit={handleFormSubmit}>\r\n      <FormSpy subscription={{ values: true }} onChange={handleOnChange} />\r\n      {hasNoStockLeft ? null : hasOneItemLeft ? (\r\n        <FieldTextInput\r\n          id={`${formId}.quantity`}\r\n          className={css.quantityField}\r\n          name=\"quantity\"\r\n          type=\"hidden\"\r\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\r\n        />\r\n      ) : (\r\n        <FieldSelect\r\n          id={`${formId}.quantity`}\r\n          className={css.quantityField}\r\n          name=\"quantity\"\r\n          disabled={!hasStock}\r\n          label={intl.formatMessage({ id: 'ProductOrderForm.quantityLabel' })}\r\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\r\n        >\r\n          <option disabled value=\"\">\r\n            {intl.formatMessage({ id: 'ProductOrderForm.selectQuantityOption' })}\r\n          </option>\r\n          {quantities.map(quantity => (\r\n            <option key={quantity} value={quantity}>\r\n              {intl.formatMessage({ id: 'ProductOrderForm.quantityOption' }, { quantity })}\r\n            </option>\r\n          ))}\r\n        </FieldSelect>\r\n      )}\r\n\r\n      {hasNoStockLeft ? null : hasMultipleDeliveryMethods ? (\r\n        <FieldSelect\r\n          id={`${formId}.deliveryMethod`}\r\n          className={css.deliveryField}\r\n          name=\"deliveryMethod\"\r\n          disabled={!hasStock}\r\n          label={intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}\r\n          validate={required(intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodRequired' }))}\r\n        >\r\n          <option disabled value=\"\">\r\n            {intl.formatMessage({ id: 'ProductOrderForm.selectDeliveryMethodOption' })}\r\n          </option>\r\n          <option value={'pickup'}>\r\n            {intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\r\n          </option>\r\n          <option value={'shipping'}>\r\n            {intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })}\r\n          </option>\r\n        </FieldSelect>\r\n      ) : (\r\n        <div className={css.deliveryField}>\r\n          <label>{intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}</label>\r\n          <p className={css.singleDeliveryMethodSelected}>\r\n            {values.deliveryMethod === 'shipping'\r\n              ? intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })\r\n              : intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\r\n          </p>\r\n          <FieldTextInput\r\n            id={`${formId}.deliveryMethod`}\r\n            className={css.deliveryField}\r\n            name=\"deliveryMethod\"\r\n            type=\"hidden\"\r\n          />\r\n        </div>\r\n      )}\r\n      {breakdown}\r\n      <div className={css.submitButton}>\r\n        <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n          {hasStock ? (\r\n            <FormattedMessage id=\"ProductOrderForm.ctaButton\" />\r\n          ) : (\r\n            <FormattedMessage id=\"ProductOrderForm.ctaButtonNoStock\" />\r\n          )}\r\n        </PrimaryButton>\r\n      </div>\r\n      <p className={css.finePrint}>\r\n        {hasStock ? (\r\n          <FormattedMessage id=\"ProductOrderForm.finePrint\" />\r\n        ) : showContactUser ? (\r\n          <FormattedMessage id=\"ProductOrderForm.finePrintNoStock\" values={{ contactSellerLink }} />\r\n        ) : null}\r\n      </p>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst ProductOrderForm = props => {\r\n  const intl = useIntl();\r\n  const { price, currentStock, pickupEnabled, shippingEnabled } = props;\r\n\r\n  // Should not happen for listings that go through EditListingWizard.\r\n  // However, this might happen for imported listings.\r\n  if (!pickupEnabled && !shippingEnabled) {\r\n    <p className={css.error}>\r\n      <FormattedMessage id=\"ProductOrderForm.noDeliveryMethodSet\" />\r\n    </p>;\r\n  }\r\n\r\n  if (!price) {\r\n    return (\r\n      <p className={css.error}>\r\n        <FormattedMessage id=\"ProductOrderForm.listingPriceMissing\" />\r\n      </p>\r\n    );\r\n  }\r\n  if (price.currency !== config.currency) {\r\n    return (\r\n      <p className={css.error}>\r\n        <FormattedMessage id=\"ProductOrderForm.listingCurrencyInvalid\" />\r\n      </p>\r\n    );\r\n  }\r\n  const hasOneItemLeft = currentStock && currentStock === 1;\r\n  const quantityMaybe = hasOneItemLeft ? { quantity: '1' } : {};\r\n  const singleDeliveryMethodAvailableMaybe =\r\n    shippingEnabled && !pickupEnabled\r\n      ? { deliveryMethod: 'shipping' }\r\n      : !shippingEnabled && pickupEnabled\r\n      ? { deliveryMethod: 'pickup' }\r\n      : {};\r\n  const hasMultipleDeliveryMethods = pickupEnabled && shippingEnabled;\r\n  const initialValues = { ...quantityMaybe, ...singleDeliveryMethodAvailableMaybe };\r\n\r\n  return (\r\n    <FinalForm\r\n      initialValues={initialValues}\r\n      hasMultipleDeliveryMethods={hasMultipleDeliveryMethods}\r\n      {...props}\r\n      intl={intl}\r\n      render={renderForm}\r\n    />\r\n  );\r\n};\r\n\r\nProductOrderForm.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  price: null,\r\n  currentStock: null,\r\n  listingId: null,\r\n  isOwnListing: false,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\nProductOrderForm.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  // form\r\n  formId: string.isRequired,\r\n  onSubmit: func.isRequired,\r\n\r\n  // listing\r\n  listingId: propTypes.uuid,\r\n  price: propTypes.money,\r\n  currentStock: number,\r\n  isOwnListing: bool,\r\n\r\n  // line items\r\n  lineItems: propTypes.lineItems,\r\n  onFetchTransactionLineItems: func.isRequired,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // other\r\n  onContactUser: func,\r\n};\r\n\r\nexport default ProductOrderForm;\r\n"]},"metadata":{},"sourceType":"module"}