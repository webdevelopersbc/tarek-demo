{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PasswordResetPage\\\\PasswordResetPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, NamedLink, IconKeys, IconKeysSuccess, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport PasswordResetForm from './PasswordResetForm/PasswordResetForm';\nimport { resetPassword } from './PasswordResetPage.duck';\nimport css from './PasswordResetPage.module.css';\n\nconst parseUrlParams = location => {\n  const params = parse(location.search);\n  const {\n    t: token,\n    e: email\n  } = params;\n  return {\n    token,\n    email\n  };\n};\n\nexport class PasswordResetPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newPasswordSubmitted: false\n    };\n  }\n\n  render() {\n    const {\n      intl,\n      scrollingDisabled,\n      location,\n      resetPasswordInProgress,\n      resetPasswordError,\n      onSubmitPassword\n    } = this.props;\n    const title = intl.formatMessage({\n      id: 'PasswordResetPage.title'\n    });\n    const {\n      token,\n      email\n    } = parseUrlParams(location);\n    const paramsValid = !!(token && email);\n\n    const handleSubmit = values => {\n      const {\n        password\n      } = values;\n      this.setState({\n        newPasswordSubmitted: false\n      });\n      onSubmitPassword(email, token, password).then(() => {\n        this.setState({\n          newPasswordSubmitted: true\n        });\n      });\n    };\n\n    const recoveryLink = /*#__PURE__*/React.createElement(NamedLink, {\n      name: \"PasswordRecoveryPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.recoveryLinkText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }));\n    const paramsErrorContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.invalidUrlParams\",\n      values: {\n        recoveryLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    })));\n    const resetFormContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IconKeys, {\n      className: css.modalIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.mainHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.helpText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })), resetPasswordError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.resetFailed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    })) : null, /*#__PURE__*/React.createElement(PasswordResetForm, {\n      className: css.form,\n      onSubmit: handleSubmit,\n      inProgress: resetPasswordInProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }));\n    const resetDoneContent = /*#__PURE__*/React.createElement(\"div\", {\n      className: css.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IconKeysSuccess, {\n      className: css.modalIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.passwordChangedHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.passwordChangedHelpText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(NamedLink, {\n      name: \"LoginPage\",\n      className: css.submitButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"PasswordResetPage.loginButtonText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    })));\n    let content;\n\n    if (!paramsValid) {\n      content = paramsErrorContent;\n    } else if (!resetPasswordError && this.state.newPasswordSubmitted) {\n      content = resetDoneContent;\n    } else {\n      content = resetFormContent;\n    }\n\n    return /*#__PURE__*/React.createElement(Page, {\n      title: title,\n      scrollingDisabled: scrollingDisabled,\n      referrer: \"origin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n      className: css.layoutWrapperMain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, content)), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nPasswordResetPageComponent.defaultProps = {\n  resetPasswordError: null\n};\nconst {\n  bool,\n  func,\n  shape,\n  string\n} = PropTypes;\nPasswordResetPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  resetPasswordInProgress: bool.isRequired,\n  resetPasswordError: propTypes.error,\n  onSubmitPassword: func.isRequired,\n  // from withRouter\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    resetPasswordInProgress,\n    resetPasswordError\n  } = state.PasswordResetPage;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    resetPasswordInProgress,\n    resetPasswordError\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst PasswordResetPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(PasswordResetPageComponent);\nexport default PasswordResetPage;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PasswordResetPage/PasswordResetPage.js"],"names":["React","Component","PropTypes","compose","connect","withRouter","FormattedMessage","injectIntl","intlShape","propTypes","parse","isScrollingDisabled","Page","NamedLink","IconKeys","IconKeysSuccess","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","TopbarContainer","PasswordResetForm","resetPassword","css","parseUrlParams","location","params","search","t","token","e","email","PasswordResetPageComponent","constructor","props","state","newPasswordSubmitted","render","intl","scrollingDisabled","resetPasswordInProgress","resetPasswordError","onSubmitPassword","title","formatMessage","id","paramsValid","handleSubmit","values","password","setState","then","recoveryLink","paramsErrorContent","content","resetFormContent","modalIcon","modalTitle","modalMessage","error","form","resetDoneContent","submitButton","layoutWrapperMain","root","defaultProps","bool","func","shape","string","isRequired","mapStateToProps","PasswordResetPage","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { parse } from '../../util/urlHelpers';\r\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  Page,\r\n  NamedLink,\r\n  IconKeys,\r\n  IconKeysSuccess,\r\n  LayoutSingleColumn,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport PasswordResetForm from './PasswordResetForm/PasswordResetForm';\r\n\r\nimport { resetPassword } from './PasswordResetPage.duck';\r\nimport css from './PasswordResetPage.module.css';\r\n\r\nconst parseUrlParams = location => {\r\n  const params = parse(location.search);\r\n  const { t: token, e: email } = params;\r\n  return { token, email };\r\n};\r\n\r\nexport class PasswordResetPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { newPasswordSubmitted: false };\r\n  }\r\n  render() {\r\n    const {\r\n      intl,\r\n      scrollingDisabled,\r\n      location,\r\n      resetPasswordInProgress,\r\n      resetPasswordError,\r\n      onSubmitPassword,\r\n    } = this.props;\r\n\r\n    const title = intl.formatMessage({\r\n      id: 'PasswordResetPage.title',\r\n    });\r\n\r\n    const { token, email } = parseUrlParams(location);\r\n    const paramsValid = !!(token && email);\r\n\r\n    const handleSubmit = values => {\r\n      const { password } = values;\r\n      this.setState({ newPasswordSubmitted: false });\r\n      onSubmitPassword(email, token, password).then(() => {\r\n        this.setState({ newPasswordSubmitted: true });\r\n      });\r\n    };\r\n\r\n    const recoveryLink = (\r\n      <NamedLink name=\"PasswordRecoveryPage\">\r\n        <FormattedMessage id=\"PasswordResetPage.recoveryLinkText\" />\r\n      </NamedLink>\r\n    );\r\n    const paramsErrorContent = (\r\n      <div className={css.content}>\r\n        <p>\r\n          <FormattedMessage id=\"PasswordResetPage.invalidUrlParams\" values={{ recoveryLink }} />\r\n        </p>\r\n      </div>\r\n    );\r\n\r\n    const resetFormContent = (\r\n      <div className={css.content}>\r\n        <IconKeys className={css.modalIcon} />\r\n        <h1 className={css.modalTitle}>\r\n          <FormattedMessage id=\"PasswordResetPage.mainHeading\" />\r\n        </h1>\r\n        <p className={css.modalMessage}>\r\n          <FormattedMessage id=\"PasswordResetPage.helpText\" />\r\n        </p>\r\n        {resetPasswordError ? (\r\n          <p className={css.error}>\r\n            <FormattedMessage id=\"PasswordResetPage.resetFailed\" />\r\n          </p>\r\n        ) : null}\r\n        <PasswordResetForm\r\n          className={css.form}\r\n          onSubmit={handleSubmit}\r\n          inProgress={resetPasswordInProgress}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    const resetDoneContent = (\r\n      <div className={css.content}>\r\n        <IconKeysSuccess className={css.modalIcon} />\r\n        <h1 className={css.modalTitle}>\r\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHeading\" />\r\n        </h1>\r\n        <p className={css.modalMessage}>\r\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHelpText\" />\r\n        </p>\r\n        <NamedLink name=\"LoginPage\" className={css.submitButton}>\r\n          <FormattedMessage id=\"PasswordResetPage.loginButtonText\" />\r\n        </NamedLink>\r\n      </div>\r\n    );\r\n\r\n    let content;\r\n\r\n    if (!paramsValid) {\r\n      content = paramsErrorContent;\r\n    } else if (!resetPasswordError && this.state.newPasswordSubmitted) {\r\n      content = resetDoneContent;\r\n    } else {\r\n      content = resetFormContent;\r\n    }\r\n\r\n    return (\r\n      <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\r\n        <LayoutSingleColumn>\r\n          <LayoutWrapperTopbar>\r\n            <TopbarContainer />\r\n          </LayoutWrapperTopbar>\r\n          <LayoutWrapperMain className={css.layoutWrapperMain}>\r\n            <div className={css.root}>{content}</div>\r\n          </LayoutWrapperMain>\r\n          <LayoutWrapperFooter>\r\n            <Footer />\r\n          </LayoutWrapperFooter>\r\n        </LayoutSingleColumn>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordResetPageComponent.defaultProps = {\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, func, shape, string } = PropTypes;\r\n\r\nPasswordResetPageComponent.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  resetPasswordInProgress: bool.isRequired,\r\n  resetPasswordError: propTypes.error,\r\n  onSubmitPassword: func.isRequired,\r\n\r\n  // from withRouter\r\n  location: shape({\r\n    search: string,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { resetPasswordInProgress, resetPasswordError } = state.PasswordResetPage;\r\n  return {\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst PasswordResetPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordResetPageComponent);\r\n\r\nexport default PasswordResetPage;\r\n"]},"metadata":{},"sourceType":"module"}