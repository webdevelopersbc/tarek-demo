{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\CheckoutPage\\\\StripePaymentForm\\\\StripePaymentForm.js\";\n\n/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\nimport React, { Component } from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { ensurePaymentMethodCard } from '../../../util/data';\nimport { Form, PrimaryButton, FieldCheckbox, FieldTextInput, IconSpinner, SavedCardDetails, StripePaymentAddress } from '../../../components';\nimport ShippingDetails from '../ShippingDetails/ShippingDetails';\nimport css from './StripePaymentForm.module.css';\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\n\nconst stripeErrorTranslation = (intl, stripeError) => {\n  const {\n    message,\n    code,\n    type\n  } = stripeError;\n\n  if (!code || !type) {\n    // Not a proper Stripe error object\n    return intl.formatMessage({\n      id: 'StripePaymentForm.genericError'\n    });\n  }\n\n  const translationId = type === 'validation_error' ? `StripePaymentForm.stripe.validation_error.${code}` : `StripePaymentForm.stripe.${type}`;\n  return intl.formatMessage({\n    id: translationId,\n    defaultMessage: message\n  });\n};\n\nconst stripeElementsOptions = {\n  fonts: [{\n    family: 'poppins',\n    fontSmoothing: 'antialiased',\n    src: 'local(\"poppins\"), local(\"Poppins\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/poppins/Poppins-Medium.ttf\") format(\"truetype\")'\n  }]\n}; // card (being a Stripe Elements component), can have own styling passed to it.\n// However, its internal width-calculation seems to break if font-size is too big\n// compared to component's own width.\n\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\nconst cardStyles = {\n  base: {\n    fontFamily: '\"poppins\", Helvetica, Arial, sans-serif',\n    fontSize: isMobile ? '14px' : '18px',\n    fontSmoothing: 'antialiased',\n    lineHeight: '24px',\n    letterSpacing: '-0.1px',\n    color: '#4A4A4A',\n    '::placeholder': {\n      color: '#B2B2B2'\n    }\n  }\n};\n\nconst OneTimePaymentWithCardElement = props => {\n  const {\n    cardClasses,\n    formId,\n    handleStripeElementRef,\n    hasCardError,\n    error,\n    label,\n    intl\n  } = props;\n  const labelText = label || intl.formatMessage({\n    id: 'StripePaymentForm.saveAfterOnetimePayment'\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: css.paymentLabel,\n    htmlFor: `${formId}-card`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePaymentForm.paymentCardDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: cardClasses,\n    id: `${formId}-card`,\n    ref: handleStripeElementRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), hasCardError ? /*#__PURE__*/React.createElement(\"span\", {\n    className: css.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 23\n    }\n  }, error) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.saveForLaterUse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FieldCheckbox, {\n    className: css.saveForLaterUseCheckbox,\n    textClassName: css.saveForLaterUseLabel,\n    id: \"saveAfterOnetimePayment\",\n    name: \"saveAfterOnetimePayment\",\n    label: labelText,\n    value: \"saveAfterOnetimePayment\",\n    useSuccessColor: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: css.saveForLaterUseLegalInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePaymentForm.saveforLaterUseLegalInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_c = OneTimePaymentWithCardElement;\n\nconst PaymentMethodSelector = props => {\n  const {\n    cardClasses,\n    formId,\n    changePaymentMethod,\n    defaultPaymentMethod,\n    handleStripeElementRef,\n    hasCardError,\n    error,\n    paymentMethod,\n    intl\n  } = props;\n  const last4Digits = defaultPaymentMethod.attributes.card.last4Digits;\n  const labelText = intl.formatMessage({\n    id: 'StripePaymentForm.replaceAfterOnetimePayment'\n  }, {\n    last4Digits\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: css.paymentHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePaymentForm.payWithHeading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SavedCardDetails, {\n    className: css.paymentMethodSelector,\n    card: defaultPaymentMethod.attributes.card,\n    onChange: changePaymentMethod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), paymentMethod === 'replaceCard' ? /*#__PURE__*/React.createElement(OneTimePaymentWithCardElement, {\n    cardClasses: cardClasses,\n    formId: formId,\n    handleStripeElementRef: handleStripeElementRef,\n    hasCardError: hasCardError,\n    error: error,\n    label: labelText,\n    intl: intl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\n_c2 = PaymentMethodSelector;\n\nconst getPaymentMethod = (selectedPaymentMethod, hasDefaultPaymentMethod) => {\n  return selectedPaymentMethod == null && hasDefaultPaymentMethod ? 'defaultCard' : selectedPaymentMethod == null ? 'onetimeCardPayment' : selectedPaymentMethod;\n}; // Should we show onetime payment fields and does StripeElements card need attention\n\n\nconst checkOnetimePaymentFields = (cardValueValid, selectedPaymentMethod, hasDefaultPaymentMethod, hasHandledCardPayment) => {\n  const useDefaultPaymentMethod = selectedPaymentMethod === 'defaultCard' && hasDefaultPaymentMethod; // Billing details are known if we have already handled card payment or existing default payment method is used.\n\n  const billingDetailsKnown = hasHandledCardPayment || useDefaultPaymentMethod; // If onetime payment is used, check that the StripeElements card has valid value.\n\n  const oneTimePaymentMethods = ['onetimeCardPayment', 'replaceCard'];\n  const useOnetimePaymentMethod = oneTimePaymentMethods.includes(selectedPaymentMethod);\n  const onetimePaymentNeedsAttention = !billingDetailsKnown && !(useOnetimePaymentMethod && cardValueValid);\n  return {\n    onetimePaymentNeedsAttention,\n    showOnetimePaymentFields: useOnetimePaymentMethod\n  };\n};\n\nconst initialState = {\n  error: null,\n  cardValueValid: false,\n  // The mode can be 'onetimePayment', 'defaultCard', or 'replaceCard'\n  // Check SavedCardDetails component for more information\n  paymentMethod: null\n};\n/**\r\n * Payment form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle payment. `stripe.confirmCardPayment`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\n\nclass StripePaymentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.updateBillingDetailsToMatchShippingAddress = this.updateBillingDetailsToMatchShippingAddress.bind(this);\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.paymentForm = this.paymentForm.bind(this);\n    this.initializeStripeElement = this.initializeStripeElement.bind(this);\n    this.handleStripeElementRef = this.handleStripeElementRef.bind(this);\n    this.changePaymentMethod = this.changePaymentMethod.bind(this);\n    this.finalFormAPI = null;\n    this.cardContainer = null;\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripePaymentForm');\n    }\n\n    if (config.stripe.publishableKey) {\n      const {\n        onStripeInitialized,\n        hasHandledCardPayment,\n        defaultPaymentMethod,\n        loadingData\n      } = this.props;\n      this.stripe = window.Stripe(config.stripe.publishableKey);\n      onStripeInitialized(this.stripe);\n\n      if (!(hasHandledCardPayment || defaultPaymentMethod || loadingData)) {\n        this.initializeStripeElement();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.card) {\n      this.card.removeEventListener('change', this.handleCardValueChange);\n      this.card.unmount();\n      this.card = null;\n    }\n  }\n\n  initializeStripeElement(element) {\n    const elements = this.stripe.elements(stripeElementsOptions);\n\n    if (!this.card) {\n      this.card = elements.create('card', {\n        style: cardStyles\n      });\n      this.card.mount(element || this.cardContainer);\n      this.card.addEventListener('change', this.handleCardValueChange); // EventListener is the only way to simulate breakpoints with Stripe.\n\n      window.addEventListener('resize', () => {\n        if (this.card) {\n          if (window.innerWidth < 768) {\n            this.card.update({\n              style: {\n                base: {\n                  fontSize: '14px',\n                  lineHeight: '24px'\n                }\n              }\n            });\n          } else {\n            this.card.update({\n              style: {\n                base: {\n                  fontSize: '18px',\n                  lineHeight: '24px'\n                }\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  updateBillingDetailsToMatchShippingAddress(shouldFill) {\n    var _formApi$getState;\n\n    const formApi = this.finalFormAPI;\n    const values = ((_formApi$getState = formApi.getState()) === null || _formApi$getState === void 0 ? void 0 : _formApi$getState.values) || {};\n    formApi.batch(() => {\n      formApi.change('name', shouldFill ? values.recipientName : '');\n      formApi.change('addressLine1', shouldFill ? values.recipientAddressLine1 : '');\n      formApi.change('addressLine2', shouldFill ? values.recipientAddressLine2 : '');\n      formApi.change('postal', shouldFill ? values.recipientPostal : '');\n      formApi.change('city', shouldFill ? values.recipientCity : '');\n      formApi.change('state', shouldFill ? values.recipientState : '');\n      formApi.change('country', shouldFill ? values.recipientCountry : '');\n    });\n  }\n\n  changePaymentMethod(changedTo) {\n    if (this.card && changedTo === 'defaultCard') {\n      this.card.removeEventListener('change', this.handleCardValueChange);\n      this.card.unmount();\n      this.card = null;\n      this.setState({\n        cardValueValid: false\n      });\n    }\n\n    this.setState({\n      paymentMethod: changedTo\n    });\n\n    if (changedTo === 'defaultCard' && this.finalFormAPI) {\n      this.finalFormAPI.change('sameAddressCheckbox', undefined);\n    } else if (changedTo === 'replaceCard' && this.finalFormAPI) {\n      this.finalFormAPI.change('sameAddressCheckbox', ['sameAddress']);\n      this.updateBillingDetailsToMatchShippingAddress(true);\n    }\n  }\n\n  handleStripeElementRef(el) {\n    this.cardContainer = el;\n\n    if (this.stripe && el) {\n      this.initializeStripeElement(el);\n    }\n  }\n\n  handleCardValueChange(event) {\n    const {\n      intl\n    } = this.props;\n    const {\n      error,\n      complete\n    } = event;\n    const postalCode = event.value.postalCode;\n\n    if (this.finalFormAPI) {\n      this.finalFormAPI.change('postal', postalCode);\n    }\n\n    this.setState(prevState => {\n      return {\n        error: error ? stripeErrorTranslation(intl, error) : null,\n        cardValueValid: complete\n      };\n    });\n  }\n\n  handleSubmit(values) {\n    const {\n      onSubmit,\n      inProgress,\n      formId,\n      hasHandledCardPayment,\n      defaultPaymentMethod\n    } = this.props;\n    const {\n      initialMessage\n    } = values;\n    const {\n      cardValueValid,\n      paymentMethod\n    } = this.state;\n    const hasDefaultPaymentMethod = defaultPaymentMethod === null || defaultPaymentMethod === void 0 ? void 0 : defaultPaymentMethod.id;\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\n    const {\n      onetimePaymentNeedsAttention\n    } = checkOnetimePaymentFields(cardValueValid, selectedPaymentMethod, hasDefaultPaymentMethod, hasHandledCardPayment);\n\n    if (inProgress || onetimePaymentNeedsAttention) {\n      // Already submitting or card value incomplete/invalid\n      return;\n    }\n\n    const params = {\n      message: initialMessage ? initialMessage.trim() : null,\n      card: this.card,\n      formId,\n      formValues: values,\n      paymentMethod: getPaymentMethod(paymentMethod, ensurePaymentMethodCard(defaultPaymentMethod).id)\n    };\n    onSubmit(params);\n  }\n\n  paymentForm(formRenderProps) {\n    const {\n      className,\n      rootClassName,\n      inProgress: submitInProgress,\n      loadingData,\n      formId,\n      paymentInfo,\n      authorDisplayName,\n      showInitialMessageInput,\n      intl,\n      initiateOrderError,\n      confirmCardPaymentError,\n      confirmPaymentError,\n      invalid,\n      handleSubmit,\n      form,\n      hasHandledCardPayment,\n      defaultPaymentMethod,\n      pickupLocation,\n      askShippingDetails,\n      totalPrice,\n      values\n    } = formRenderProps;\n    this.finalFormAPI = form;\n    const ensuredDefaultPaymentMethod = ensurePaymentMethodCard(defaultPaymentMethod);\n    const billingDetailsNeeded = !(hasHandledCardPayment || confirmPaymentError);\n    const {\n      cardValueValid,\n      paymentMethod\n    } = this.state;\n    const hasDefaultPaymentMethod = ensuredDefaultPaymentMethod.id;\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\n    const {\n      onetimePaymentNeedsAttention,\n      showOnetimePaymentFields\n    } = checkOnetimePaymentFields(cardValueValid, selectedPaymentMethod, hasDefaultPaymentMethod, hasHandledCardPayment);\n    const submitDisabled = invalid || onetimePaymentNeedsAttention || submitInProgress;\n    const hasCardError = this.state.error && !submitInProgress;\n    const hasPaymentErrors = confirmCardPaymentError || confirmPaymentError;\n    const classes = classNames(rootClassName || css.root, className);\n    const cardClasses = classNames(css.card, {\n      [css.cardSuccess]: this.state.cardValueValid,\n      [css.cardError]: hasCardError\n    }); // Note: totalPrice might not be available initially\n    // when speculateTransaction call is in progress.\n\n    const totalPriceMaybe = totalPrice || ''; // TODO: confirmCardPayment can create all kinds of errors.\n    // Currently, we provide translation support for one:\n    // https://stripe.com/docs/error-codes\n\n    const piAuthenticationFailure = 'payment_intent_authentication_failure';\n    const paymentErrorMessage = confirmCardPaymentError && confirmCardPaymentError.code === piAuthenticationFailure ? intl.formatMessage({\n      id: 'StripePaymentForm.confirmCardPaymentError'\n    }) : confirmCardPaymentError ? confirmCardPaymentError.message : confirmPaymentError ? intl.formatMessage({\n      id: 'StripePaymentForm.confirmPaymentError'\n    }) : intl.formatMessage({\n      id: 'StripePaymentForm.genericError'\n    });\n    const billingDetailsNameLabel = intl.formatMessage({\n      id: 'StripePaymentForm.billingDetailsNameLabel'\n    });\n    const billingDetailsNamePlaceholder = intl.formatMessage({\n      id: 'StripePaymentForm.billingDetailsNamePlaceholder'\n    });\n    const messagePlaceholder = intl.formatMessage({\n      id: 'StripePaymentForm.messagePlaceholder'\n    }, {\n      name: authorDisplayName\n    });\n    const messageOptionalText = intl.formatMessage({\n      id: 'StripePaymentForm.messageOptionalText'\n    });\n    const initialMessageLabel = intl.formatMessage({\n      id: 'StripePaymentForm.messageLabel'\n    }, {\n      messageOptionalText: messageOptionalText\n    });\n    const pickupDetails = (pickupLocation === null || pickupLocation === void 0 ? void 0 : pickupLocation.building) ? `${pickupLocation.building}, ${pickupLocation.address}` : (pickupLocation === null || pickupLocation === void 0 ? void 0 : pickupLocation.address) ? pickupLocation.address : intl.formatMessage({\n      id: 'StripePaymentForm.pickupLocationUnknown'\n    });\n    const shippingOrPickupDetails = askShippingDetails ? /*#__PURE__*/React.createElement(ShippingDetails, {\n      intl: intl,\n      form: form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: css.pickupWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: css.pickupHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.pickupDetailsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.pickupDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }\n    }, pickupDetails)); // Asking billing address is recommended in PaymentIntent flow.\n    // In CheckoutPage, we send name and email as billing details, but address only if it exists.\n\n    const billingAddress = /*#__PURE__*/React.createElement(StripePaymentAddress, {\n      intl: intl,\n      form: form,\n      fieldId: formId,\n      card: this.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 7\n      }\n    });\n    const hasStripeKey = config.stripe.publishableKey;\n\n    const handleSameAddressCheckbox = event => {\n      const checked = event.target.checked;\n      this.updateBillingDetailsToMatchShippingAddress(checked);\n    };\n\n    return hasStripeKey ? /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      enforcePagePreloadFor: \"OrderDetailsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 7\n      }\n    }, shippingOrPickupDetails, billingDetailsNeeded && !loadingData ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }\n    }, hasDefaultPaymentMethod ? /*#__PURE__*/React.createElement(PaymentMethodSelector, {\n      cardClasses: cardClasses,\n      formId: formId,\n      defaultPaymentMethod: ensuredDefaultPaymentMethod,\n      changePaymentMethod: this.changePaymentMethod,\n      handleStripeElementRef: this.handleStripeElementRef,\n      hasCardError: hasCardError,\n      error: this.state.error,\n      paymentMethod: selectedPaymentMethod,\n      intl: intl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: css.paymentHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.paymentHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(OneTimePaymentWithCardElement, {\n      cardClasses: cardClasses,\n      formId: formId,\n      handleStripeElementRef: this.handleStripeElementRef,\n      hasCardError: hasCardError,\n      error: this.state.error,\n      intl: intl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }\n    })), showOnetimePaymentFields ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.billingDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: css.billingHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.billingDetails\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 19\n      }\n    })), askShippingDetails ? /*#__PURE__*/React.createElement(FieldCheckbox, {\n      className: css.sameAddressCheckbox,\n      textClassName: css.sameAddressLabel,\n      id: \"sameAddressCheckbox\",\n      name: \"sameAddressCheckbox\",\n      label: intl.formatMessage({\n        id: 'StripePaymentForm.sameBillingAndShippingAddress'\n      }),\n      value: \"sameAddress\",\n      useSuccessColor: true,\n      onChange: handleSameAddressCheckbox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 19\n      }\n    }) : null, /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.field,\n      type: \"text\",\n      id: \"name\",\n      name: \"name\",\n      autoComplete: \"cc-name\",\n      label: billingDetailsNameLabel,\n      placeholder: billingDetailsNamePlaceholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 17\n      }\n    }), billingAddress) : null) : loadingData ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.spinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 13\n      }\n    })) : null, initiateOrderError ? /*#__PURE__*/React.createElement(\"span\", {\n      className: css.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }\n    }, initiateOrderError.message) : null, showInitialMessageInput ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: css.messageHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.messageHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FieldTextInput, {\n      type: \"textarea\",\n      id: `${formId}-message`,\n      name: \"initialMessage\",\n      label: initialMessageLabel,\n      placeholder: messagePlaceholder,\n      className: css.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 13\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.submitContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }\n    }, hasPaymentErrors ? /*#__PURE__*/React.createElement(\"span\", {\n      className: css.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 13\n      }\n    }, paymentErrorMessage) : null, paymentInfo ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.paymentInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 26\n      }\n    }, paymentInfo) : null, /*#__PURE__*/React.createElement(PrimaryButton, {\n      className: css.submitButton,\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 11\n      }\n    }, billingDetailsNeeded ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.submitPaymentInfo\",\n      values: {\n        totalPrice: totalPriceMaybe\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.submitConfirmPaymentInfo\",\n      values: {\n        totalPrice: totalPriceMaybe\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 15\n      }\n    })))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: css.missingStripeKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePaymentForm.missingStripeKey\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      onSubmit,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({\n      onSubmit: this.handleSubmit\n    }, rest, {\n      render: this.paymentForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nStripePaymentForm.defaultProps = {\n  className: null,\n  rootClassName: null,\n  inProgress: false,\n  loadingData: false,\n  showInitialMessageInput: true,\n  hasHandledCardPayment: false,\n  defaultPaymentMethod: null,\n  initiateOrderError: null,\n  confirmCardPaymentError: null,\n  confirmPaymentError: null,\n  paymentInfo: null,\n  askShippingDetails: false,\n  pickupLocation: null,\n  totalPrice: null\n};\nStripePaymentForm.propTypes = {\n  className: string,\n  rootClassName: string,\n  inProgress: bool,\n  loadingData: bool,\n  initiateOrderError: object,\n  confirmCardPaymentError: object,\n  confirmPaymentError: object,\n  formId: string.isRequired,\n  intl: intlShape.isRequired,\n  onSubmit: func.isRequired,\n  paymentInfo: string,\n  authorDisplayName: string.isRequired,\n  showInitialMessageInput: bool,\n  hasHandledCardPayment: bool,\n  defaultPaymentMethod: propTypes.defaultPaymentMethod,\n  askShippingDetails: bool,\n  pickupLocation: shape({\n    address: string.isRequired,\n    building: string\n  }),\n  totalPrice: string\n};\nexport default _c3 = injectIntl(StripePaymentForm);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"OneTimePaymentWithCardElement\");\n$RefreshReg$(_c2, \"PaymentMethodSelector\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/CheckoutPage/StripePaymentForm/StripePaymentForm.js"],"names":["React","Component","bool","func","object","shape","string","Form","FinalForm","classNames","config","FormattedMessage","injectIntl","intlShape","propTypes","ensurePaymentMethodCard","PrimaryButton","FieldCheckbox","FieldTextInput","IconSpinner","SavedCardDetails","StripePaymentAddress","ShippingDetails","css","stripeErrorTranslation","intl","stripeError","message","code","type","formatMessage","id","translationId","defaultMessage","stripeElementsOptions","fonts","family","fontSmoothing","src","isMobile","window","innerWidth","cardStyles","base","fontFamily","fontSize","lineHeight","letterSpacing","color","OneTimePaymentWithCardElement","props","cardClasses","formId","handleStripeElementRef","hasCardError","error","label","labelText","paymentLabel","saveForLaterUse","saveForLaterUseCheckbox","saveForLaterUseLabel","saveForLaterUseLegalInfo","PaymentMethodSelector","changePaymentMethod","defaultPaymentMethod","paymentMethod","last4Digits","attributes","card","paymentHeading","paymentMethodSelector","getPaymentMethod","selectedPaymentMethod","hasDefaultPaymentMethod","checkOnetimePaymentFields","cardValueValid","hasHandledCardPayment","useDefaultPaymentMethod","billingDetailsKnown","oneTimePaymentMethods","useOnetimePaymentMethod","includes","onetimePaymentNeedsAttention","showOnetimePaymentFields","initialState","StripePaymentForm","constructor","state","updateBillingDetailsToMatchShippingAddress","bind","handleCardValueChange","handleSubmit","paymentForm","initializeStripeElement","finalFormAPI","cardContainer","componentDidMount","Stripe","Error","stripe","publishableKey","onStripeInitialized","loadingData","componentWillUnmount","removeEventListener","unmount","element","elements","create","style","mount","addEventListener","update","shouldFill","formApi","values","getState","batch","change","recipientName","recipientAddressLine1","recipientAddressLine2","recipientPostal","recipientCity","recipientState","recipientCountry","changedTo","setState","undefined","el","event","complete","postalCode","value","prevState","onSubmit","inProgress","initialMessage","params","trim","formValues","formRenderProps","className","rootClassName","submitInProgress","paymentInfo","authorDisplayName","showInitialMessageInput","initiateOrderError","confirmCardPaymentError","confirmPaymentError","invalid","form","pickupLocation","askShippingDetails","totalPrice","ensuredDefaultPaymentMethod","billingDetailsNeeded","submitDisabled","hasPaymentErrors","classes","root","cardSuccess","cardError","totalPriceMaybe","piAuthenticationFailure","paymentErrorMessage","billingDetailsNameLabel","billingDetailsNamePlaceholder","messagePlaceholder","name","messageOptionalText","initialMessageLabel","pickupDetails","building","address","shippingOrPickupDetails","pickupWrapper","pickupHeading","billingAddress","hasStripeKey","handleSameAddressCheckbox","checked","target","billingDetails","billingHeading","sameAddressCheckbox","sameAddressLabel","field","spinner","errorMessage","messageHeading","submitContainer","submitButton","missingStripeKey","render","rest","defaultProps","isRequired"],"mappings":"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","sourcesContent":["/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\r\nimport React, { Component } from 'react';\r\nimport { bool, func, object, shape, string } from 'prop-types';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { ensurePaymentMethodCard } from '../../../util/data';\r\n\r\nimport {\r\n  Form,\r\n  PrimaryButton,\r\n  FieldCheckbox,\r\n  FieldTextInput,\r\n  IconSpinner,\r\n  SavedCardDetails,\r\n  StripePaymentAddress,\r\n} from '../../../components';\r\n\r\nimport ShippingDetails from '../ShippingDetails/ShippingDetails';\r\n\r\nimport css from './StripePaymentForm.module.css';\r\n\r\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\r\nconst stripeErrorTranslation = (intl, stripeError) => {\r\n  const { message, code, type } = stripeError;\r\n\r\n  if (!code || !type) {\r\n    // Not a proper Stripe error object\r\n    return intl.formatMessage({ id: 'StripePaymentForm.genericError' });\r\n  }\r\n\r\n  const translationId =\r\n    type === 'validation_error'\r\n      ? `StripePaymentForm.stripe.validation_error.${code}`\r\n      : `StripePaymentForm.stripe.${type}`;\r\n\r\n  return intl.formatMessage({\r\n    id: translationId,\r\n    defaultMessage: message,\r\n  });\r\n};\r\n\r\nconst stripeElementsOptions = {\r\n  fonts: [\r\n    {\r\n      family: 'poppins',\r\n      fontSmoothing: 'antialiased',\r\n      src:\r\n        'local(\"poppins\"), local(\"Poppins\"), url(\"https://assets-sharetribecom.sharetribe.com/webfonts/poppins/Poppins-Medium.ttf\") format(\"truetype\")',\r\n    },\r\n  ],\r\n};\r\n\r\n// card (being a Stripe Elements component), can have own styling passed to it.\r\n// However, its internal width-calculation seems to break if font-size is too big\r\n// compared to component's own width.\r\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\r\nconst cardStyles = {\r\n  base: {\r\n    fontFamily: '\"poppins\", Helvetica, Arial, sans-serif',\r\n    fontSize: isMobile ? '14px' : '18px',\r\n    fontSmoothing: 'antialiased',\r\n    lineHeight: '24px',\r\n    letterSpacing: '-0.1px',\r\n    color: '#4A4A4A',\r\n    '::placeholder': {\r\n      color: '#B2B2B2',\r\n    },\r\n  },\r\n};\r\n\r\nconst OneTimePaymentWithCardElement = props => {\r\n  const { cardClasses, formId, handleStripeElementRef, hasCardError, error, label, intl } = props;\r\n  const labelText =\r\n    label || intl.formatMessage({ id: 'StripePaymentForm.saveAfterOnetimePayment' });\r\n  return (\r\n    <React.Fragment>\r\n      <label className={css.paymentLabel} htmlFor={`${formId}-card`}>\r\n        <FormattedMessage id=\"StripePaymentForm.paymentCardDetails\" />\r\n      </label>\r\n      <div className={cardClasses} id={`${formId}-card`} ref={handleStripeElementRef} />\r\n      {hasCardError ? <span className={css.error}>{error}</span> : null}\r\n      <div className={css.saveForLaterUse}>\r\n        <FieldCheckbox\r\n          className={css.saveForLaterUseCheckbox}\r\n          textClassName={css.saveForLaterUseLabel}\r\n          id=\"saveAfterOnetimePayment\"\r\n          name=\"saveAfterOnetimePayment\"\r\n          label={labelText}\r\n          value=\"saveAfterOnetimePayment\"\r\n          useSuccessColor\r\n        />\r\n        <span className={css.saveForLaterUseLegalInfo}>\r\n          <FormattedMessage id=\"StripePaymentForm.saveforLaterUseLegalInfo\" />\r\n        </span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst PaymentMethodSelector = props => {\r\n  const {\r\n    cardClasses,\r\n    formId,\r\n    changePaymentMethod,\r\n    defaultPaymentMethod,\r\n    handleStripeElementRef,\r\n    hasCardError,\r\n    error,\r\n    paymentMethod,\r\n    intl,\r\n  } = props;\r\n  const last4Digits = defaultPaymentMethod.attributes.card.last4Digits;\r\n  const labelText = intl.formatMessage(\r\n    { id: 'StripePaymentForm.replaceAfterOnetimePayment' },\r\n    { last4Digits }\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h3 className={css.paymentHeading}>\r\n        <FormattedMessage id=\"StripePaymentForm.payWithHeading\" />\r\n      </h3>\r\n      <SavedCardDetails\r\n        className={css.paymentMethodSelector}\r\n        card={defaultPaymentMethod.attributes.card}\r\n        onChange={changePaymentMethod}\r\n      />\r\n      {paymentMethod === 'replaceCard' ? (\r\n        <OneTimePaymentWithCardElement\r\n          cardClasses={cardClasses}\r\n          formId={formId}\r\n          handleStripeElementRef={handleStripeElementRef}\r\n          hasCardError={hasCardError}\r\n          error={error}\r\n          label={labelText}\r\n          intl={intl}\r\n        />\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst getPaymentMethod = (selectedPaymentMethod, hasDefaultPaymentMethod) => {\r\n  return selectedPaymentMethod == null && hasDefaultPaymentMethod\r\n    ? 'defaultCard'\r\n    : selectedPaymentMethod == null\r\n    ? 'onetimeCardPayment'\r\n    : selectedPaymentMethod;\r\n};\r\n\r\n// Should we show onetime payment fields and does StripeElements card need attention\r\nconst checkOnetimePaymentFields = (\r\n  cardValueValid,\r\n  selectedPaymentMethod,\r\n  hasDefaultPaymentMethod,\r\n  hasHandledCardPayment\r\n) => {\r\n  const useDefaultPaymentMethod =\r\n    selectedPaymentMethod === 'defaultCard' && hasDefaultPaymentMethod;\r\n  // Billing details are known if we have already handled card payment or existing default payment method is used.\r\n  const billingDetailsKnown = hasHandledCardPayment || useDefaultPaymentMethod;\r\n\r\n  // If onetime payment is used, check that the StripeElements card has valid value.\r\n  const oneTimePaymentMethods = ['onetimeCardPayment', 'replaceCard'];\r\n  const useOnetimePaymentMethod = oneTimePaymentMethods.includes(selectedPaymentMethod);\r\n  const onetimePaymentNeedsAttention =\r\n    !billingDetailsKnown && !(useOnetimePaymentMethod && cardValueValid);\r\n\r\n  return {\r\n    onetimePaymentNeedsAttention,\r\n    showOnetimePaymentFields: useOnetimePaymentMethod,\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  error: null,\r\n  cardValueValid: false,\r\n  // The mode can be 'onetimePayment', 'defaultCard', or 'replaceCard'\r\n  // Check SavedCardDetails component for more information\r\n  paymentMethod: null,\r\n};\r\n\r\n/**\r\n * Payment form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle payment. `stripe.confirmCardPayment`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\r\nclass StripePaymentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.updateBillingDetailsToMatchShippingAddress = this.updateBillingDetailsToMatchShippingAddress.bind(\r\n      this\r\n    );\r\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.paymentForm = this.paymentForm.bind(this);\r\n    this.initializeStripeElement = this.initializeStripeElement.bind(this);\r\n    this.handleStripeElementRef = this.handleStripeElementRef.bind(this);\r\n    this.changePaymentMethod = this.changePaymentMethod.bind(this);\r\n    this.finalFormAPI = null;\r\n    this.cardContainer = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.Stripe) {\r\n      throw new Error('Stripe must be loaded for StripePaymentForm');\r\n    }\r\n\r\n    if (config.stripe.publishableKey) {\r\n      const {\r\n        onStripeInitialized,\r\n        hasHandledCardPayment,\r\n        defaultPaymentMethod,\r\n        loadingData,\r\n      } = this.props;\r\n      this.stripe = window.Stripe(config.stripe.publishableKey);\r\n      onStripeInitialized(this.stripe);\r\n\r\n      if (!(hasHandledCardPayment || defaultPaymentMethod || loadingData)) {\r\n        this.initializeStripeElement();\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.card) {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n      this.card = null;\r\n    }\r\n  }\r\n\r\n  initializeStripeElement(element) {\r\n    const elements = this.stripe.elements(stripeElementsOptions);\r\n\r\n    if (!this.card) {\r\n      this.card = elements.create('card', { style: cardStyles });\r\n      this.card.mount(element || this.cardContainer);\r\n      this.card.addEventListener('change', this.handleCardValueChange);\r\n      // EventListener is the only way to simulate breakpoints with Stripe.\r\n      window.addEventListener('resize', () => {\r\n        if (this.card) {\r\n          if (window.innerWidth < 768) {\r\n            this.card.update({ style: { base: { fontSize: '14px', lineHeight: '24px' } } });\r\n          } else {\r\n            this.card.update({ style: { base: { fontSize: '18px', lineHeight: '24px' } } });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  updateBillingDetailsToMatchShippingAddress(shouldFill) {\r\n    const formApi = this.finalFormAPI;\r\n    const values = formApi.getState()?.values || {};\r\n    formApi.batch(() => {\r\n      formApi.change('name', shouldFill ? values.recipientName : '');\r\n      formApi.change('addressLine1', shouldFill ? values.recipientAddressLine1 : '');\r\n      formApi.change('addressLine2', shouldFill ? values.recipientAddressLine2 : '');\r\n      formApi.change('postal', shouldFill ? values.recipientPostal : '');\r\n      formApi.change('city', shouldFill ? values.recipientCity : '');\r\n      formApi.change('state', shouldFill ? values.recipientState : '');\r\n      formApi.change('country', shouldFill ? values.recipientCountry : '');\r\n    });\r\n  }\r\n\r\n  changePaymentMethod(changedTo) {\r\n    if (this.card && changedTo === 'defaultCard') {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n      this.card = null;\r\n      this.setState({ cardValueValid: false });\r\n    }\r\n    this.setState({ paymentMethod: changedTo });\r\n    if (changedTo === 'defaultCard' && this.finalFormAPI) {\r\n      this.finalFormAPI.change('sameAddressCheckbox', undefined);\r\n    } else if (changedTo === 'replaceCard' && this.finalFormAPI) {\r\n      this.finalFormAPI.change('sameAddressCheckbox', ['sameAddress']);\r\n      this.updateBillingDetailsToMatchShippingAddress(true);\r\n    }\r\n  }\r\n\r\n  handleStripeElementRef(el) {\r\n    this.cardContainer = el;\r\n    if (this.stripe && el) {\r\n      this.initializeStripeElement(el);\r\n    }\r\n  }\r\n\r\n  handleCardValueChange(event) {\r\n    const { intl } = this.props;\r\n    const { error, complete } = event;\r\n\r\n    const postalCode = event.value.postalCode;\r\n    if (this.finalFormAPI) {\r\n      this.finalFormAPI.change('postal', postalCode);\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        error: error ? stripeErrorTranslation(intl, error) : null,\r\n        cardValueValid: complete,\r\n      };\r\n    });\r\n  }\r\n  handleSubmit(values) {\r\n    const {\r\n      onSubmit,\r\n      inProgress,\r\n      formId,\r\n      hasHandledCardPayment,\r\n      defaultPaymentMethod,\r\n    } = this.props;\r\n    const { initialMessage } = values;\r\n    const { cardValueValid, paymentMethod } = this.state;\r\n    const hasDefaultPaymentMethod = defaultPaymentMethod?.id;\r\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\r\n    const { onetimePaymentNeedsAttention } = checkOnetimePaymentFields(\r\n      cardValueValid,\r\n      selectedPaymentMethod,\r\n      hasDefaultPaymentMethod,\r\n      hasHandledCardPayment\r\n    );\r\n\r\n    if (inProgress || onetimePaymentNeedsAttention) {\r\n      // Already submitting or card value incomplete/invalid\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      message: initialMessage ? initialMessage.trim() : null,\r\n      card: this.card,\r\n      formId,\r\n      formValues: values,\r\n      paymentMethod: getPaymentMethod(\r\n        paymentMethod,\r\n        ensurePaymentMethodCard(defaultPaymentMethod).id\r\n      ),\r\n    };\r\n    onSubmit(params);\r\n  }\r\n\r\n  paymentForm(formRenderProps) {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      inProgress: submitInProgress,\r\n      loadingData,\r\n      formId,\r\n      paymentInfo,\r\n      authorDisplayName,\r\n      showInitialMessageInput,\r\n      intl,\r\n      initiateOrderError,\r\n      confirmCardPaymentError,\r\n      confirmPaymentError,\r\n      invalid,\r\n      handleSubmit,\r\n      form,\r\n      hasHandledCardPayment,\r\n      defaultPaymentMethod,\r\n      pickupLocation,\r\n      askShippingDetails,\r\n      totalPrice,\r\n      values,\r\n    } = formRenderProps;\r\n\r\n    this.finalFormAPI = form;\r\n\r\n    const ensuredDefaultPaymentMethod = ensurePaymentMethodCard(defaultPaymentMethod);\r\n    const billingDetailsNeeded = !(hasHandledCardPayment || confirmPaymentError);\r\n\r\n    const { cardValueValid, paymentMethod } = this.state;\r\n    const hasDefaultPaymentMethod = ensuredDefaultPaymentMethod.id;\r\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\r\n    const { onetimePaymentNeedsAttention, showOnetimePaymentFields } = checkOnetimePaymentFields(\r\n      cardValueValid,\r\n      selectedPaymentMethod,\r\n      hasDefaultPaymentMethod,\r\n      hasHandledCardPayment\r\n    );\r\n\r\n    const submitDisabled = invalid || onetimePaymentNeedsAttention || submitInProgress;\r\n    const hasCardError = this.state.error && !submitInProgress;\r\n    const hasPaymentErrors = confirmCardPaymentError || confirmPaymentError;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const cardClasses = classNames(css.card, {\r\n      [css.cardSuccess]: this.state.cardValueValid,\r\n      [css.cardError]: hasCardError,\r\n    });\r\n\r\n    // Note: totalPrice might not be available initially\r\n    // when speculateTransaction call is in progress.\r\n    const totalPriceMaybe = totalPrice || '';\r\n\r\n    // TODO: confirmCardPayment can create all kinds of errors.\r\n    // Currently, we provide translation support for one:\r\n    // https://stripe.com/docs/error-codes\r\n    const piAuthenticationFailure = 'payment_intent_authentication_failure';\r\n    const paymentErrorMessage =\r\n      confirmCardPaymentError && confirmCardPaymentError.code === piAuthenticationFailure\r\n        ? intl.formatMessage({ id: 'StripePaymentForm.confirmCardPaymentError' })\r\n        : confirmCardPaymentError\r\n        ? confirmCardPaymentError.message\r\n        : confirmPaymentError\r\n        ? intl.formatMessage({ id: 'StripePaymentForm.confirmPaymentError' })\r\n        : intl.formatMessage({ id: 'StripePaymentForm.genericError' });\r\n\r\n    const billingDetailsNameLabel = intl.formatMessage({\r\n      id: 'StripePaymentForm.billingDetailsNameLabel',\r\n    });\r\n\r\n    const billingDetailsNamePlaceholder = intl.formatMessage({\r\n      id: 'StripePaymentForm.billingDetailsNamePlaceholder',\r\n    });\r\n\r\n    const messagePlaceholder = intl.formatMessage(\r\n      { id: 'StripePaymentForm.messagePlaceholder' },\r\n      { name: authorDisplayName }\r\n    );\r\n\r\n    const messageOptionalText = intl.formatMessage({\r\n      id: 'StripePaymentForm.messageOptionalText',\r\n    });\r\n\r\n    const initialMessageLabel = intl.formatMessage(\r\n      { id: 'StripePaymentForm.messageLabel' },\r\n      { messageOptionalText: messageOptionalText }\r\n    );\r\n\r\n    const pickupDetails = pickupLocation?.building\r\n      ? `${pickupLocation.building}, ${pickupLocation.address}`\r\n      : pickupLocation?.address\r\n      ? pickupLocation.address\r\n      : intl.formatMessage({ id: 'StripePaymentForm.pickupLocationUnknown' });\r\n\r\n    const shippingOrPickupDetails = askShippingDetails ? (\r\n      <ShippingDetails intl={intl} form={form} />\r\n    ) : (\r\n      <div className={css.pickupWrapper}>\r\n        <h3 className={css.pickupHeading}>\r\n          <FormattedMessage id=\"StripePaymentForm.pickupDetailsTitle\" />\r\n        </h3>\r\n        <p className={css.pickupDetails}>{pickupDetails}</p>\r\n      </div>\r\n    );\r\n\r\n    // Asking billing address is recommended in PaymentIntent flow.\r\n    // In CheckoutPage, we send name and email as billing details, but address only if it exists.\r\n    const billingAddress = (\r\n      <StripePaymentAddress intl={intl} form={form} fieldId={formId} card={this.card} />\r\n    );\r\n\r\n    const hasStripeKey = config.stripe.publishableKey;\r\n\r\n    const handleSameAddressCheckbox = event => {\r\n      const checked = event.target.checked;\r\n      this.updateBillingDetailsToMatchShippingAddress(checked);\r\n    };\r\n\r\n    return hasStripeKey ? (\r\n      <Form className={classes} onSubmit={handleSubmit} enforcePagePreloadFor=\"OrderDetailsPage\">\r\n        {shippingOrPickupDetails}\r\n        {billingDetailsNeeded && !loadingData ? (\r\n          <React.Fragment>\r\n            {hasDefaultPaymentMethod ? (\r\n              <PaymentMethodSelector\r\n                cardClasses={cardClasses}\r\n                formId={formId}\r\n                defaultPaymentMethod={ensuredDefaultPaymentMethod}\r\n                changePaymentMethod={this.changePaymentMethod}\r\n                handleStripeElementRef={this.handleStripeElementRef}\r\n                hasCardError={hasCardError}\r\n                error={this.state.error}\r\n                paymentMethod={selectedPaymentMethod}\r\n                intl={intl}\r\n              />\r\n            ) : (\r\n              <React.Fragment>\r\n                <h3 className={css.paymentHeading}>\r\n                  <FormattedMessage id=\"StripePaymentForm.paymentHeading\" />\r\n                </h3>\r\n                <OneTimePaymentWithCardElement\r\n                  cardClasses={cardClasses}\r\n                  formId={formId}\r\n                  handleStripeElementRef={this.handleStripeElementRef}\r\n                  hasCardError={hasCardError}\r\n                  error={this.state.error}\r\n                  intl={intl}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {showOnetimePaymentFields ? (\r\n              <div className={css.billingDetails}>\r\n                <h3 className={css.billingHeading}>\r\n                  <FormattedMessage id=\"StripePaymentForm.billingDetails\" />\r\n                </h3>\r\n\r\n                {askShippingDetails ? (\r\n                  <FieldCheckbox\r\n                    className={css.sameAddressCheckbox}\r\n                    textClassName={css.sameAddressLabel}\r\n                    id=\"sameAddressCheckbox\"\r\n                    name=\"sameAddressCheckbox\"\r\n                    label={intl.formatMessage({\r\n                      id: 'StripePaymentForm.sameBillingAndShippingAddress',\r\n                    })}\r\n                    value=\"sameAddress\"\r\n                    useSuccessColor\r\n                    onChange={handleSameAddressCheckbox}\r\n                  />\r\n                ) : null}\r\n\r\n                <FieldTextInput\r\n                  className={css.field}\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  autoComplete=\"cc-name\"\r\n                  label={billingDetailsNameLabel}\r\n                  placeholder={billingDetailsNamePlaceholder}\r\n                />\r\n\r\n                {billingAddress}\r\n              </div>\r\n            ) : null}\r\n          </React.Fragment>\r\n        ) : loadingData ? (\r\n          <p className={css.spinner}>\r\n            <IconSpinner />\r\n          </p>\r\n        ) : null}\r\n\r\n        {initiateOrderError ? (\r\n          <span className={css.errorMessage}>{initiateOrderError.message}</span>\r\n        ) : null}\r\n        {showInitialMessageInput ? (\r\n          <div>\r\n            <h3 className={css.messageHeading}>\r\n              <FormattedMessage id=\"StripePaymentForm.messageHeading\" />\r\n            </h3>\r\n\r\n            <FieldTextInput\r\n              type=\"textarea\"\r\n              id={`${formId}-message`}\r\n              name=\"initialMessage\"\r\n              label={initialMessageLabel}\r\n              placeholder={messagePlaceholder}\r\n              className={css.message}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <div className={css.submitContainer}>\r\n          {hasPaymentErrors ? (\r\n            <span className={css.errorMessage}>{paymentErrorMessage}</span>\r\n          ) : null}\r\n          {paymentInfo ? <p className={css.paymentInfo}>{paymentInfo}</p> : null}\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n          >\r\n            {billingDetailsNeeded ? (\r\n              <FormattedMessage\r\n                id=\"StripePaymentForm.submitPaymentInfo\"\r\n                values={{ totalPrice: totalPriceMaybe }}\r\n              />\r\n            ) : (\r\n              <FormattedMessage\r\n                id=\"StripePaymentForm.submitConfirmPaymentInfo\"\r\n                values={{ totalPrice: totalPriceMaybe }}\r\n              />\r\n            )}\r\n          </PrimaryButton>\r\n        </div>\r\n      </Form>\r\n    ) : (\r\n      <div className={css.missingStripeKey}>\r\n        <FormattedMessage id=\"StripePaymentForm.missingStripeKey\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { onSubmit, ...rest } = this.props;\r\n    return <FinalForm onSubmit={this.handleSubmit} {...rest} render={this.paymentForm} />;\r\n  }\r\n}\r\n\r\nStripePaymentForm.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  inProgress: false,\r\n  loadingData: false,\r\n  showInitialMessageInput: true,\r\n  hasHandledCardPayment: false,\r\n  defaultPaymentMethod: null,\r\n  initiateOrderError: null,\r\n  confirmCardPaymentError: null,\r\n  confirmPaymentError: null,\r\n  paymentInfo: null,\r\n  askShippingDetails: false,\r\n  pickupLocation: null,\r\n  totalPrice: null,\r\n};\r\n\r\nStripePaymentForm.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  inProgress: bool,\r\n  loadingData: bool,\r\n  initiateOrderError: object,\r\n  confirmCardPaymentError: object,\r\n  confirmPaymentError: object,\r\n  formId: string.isRequired,\r\n  intl: intlShape.isRequired,\r\n  onSubmit: func.isRequired,\r\n  paymentInfo: string,\r\n  authorDisplayName: string.isRequired,\r\n  showInitialMessageInput: bool,\r\n  hasHandledCardPayment: bool,\r\n  defaultPaymentMethod: propTypes.defaultPaymentMethod,\r\n  askShippingDetails: bool,\r\n  pickupLocation: shape({\r\n    address: string.isRequired,\r\n    building: string,\r\n  }),\r\n  totalPrice: string,\r\n};\r\n\r\nexport default injectIntl(StripePaymentForm);\r\n"]},"metadata":{},"sourceType":"module"}