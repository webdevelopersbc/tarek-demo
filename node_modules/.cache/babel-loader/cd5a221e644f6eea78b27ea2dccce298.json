{"ast":null,"code":"import { fetchCurrentUser } from '../../ducks/user.duck';\nimport { setInitialValues as setInitialValuesForPaymentMethods } from '../../ducks/paymentMethods.duck';\nimport { storableError } from '../../util/errors';\nimport * as log from '../../util/log'; // ================ Action types ================ //\n\nexport const SETUP_INTENT_REQUEST = 'app/PaymentMethodsPage/SETUP_INTENT_REQUEST';\nexport const SETUP_INTENT_SUCCESS = 'app/PaymentMethodsPage/SETUP_INTENT_SUCCESS';\nexport const SETUP_INTENT_ERROR = 'app/PaymentMethodsPage/SETUP_INTENT_ERROR';\nexport const STRIPE_CUSTOMER_REQUEST = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_REQUEST';\nexport const STRIPE_CUSTOMER_SUCCESS = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_SUCCESS';\nexport const STRIPE_CUSTOMER_ERROR = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  setupIntentInProgress: false,\n  setupIntentError: null,\n  setupIntent: null,\n  stripeCustomerFetched: false\n};\nexport default function payoutMethodsPageReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SETUP_INTENT_REQUEST:\n      return { ...state,\n        setupIntentInProgress: true,\n        setupIntentError: null\n      };\n\n    case SETUP_INTENT_SUCCESS:\n      return { ...state,\n        setupIntentInProgress: false,\n        setupIntentError: null,\n        setupIntent: payload\n      };\n\n    case SETUP_INTENT_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        setupIntentInProgress: false,\n        setupIntentError: null\n      };\n\n    case STRIPE_CUSTOMER_REQUEST:\n      return { ...state,\n        stripeCustomerFetched: false\n      };\n\n    case STRIPE_CUSTOMER_SUCCESS:\n      return { ...state,\n        stripeCustomerFetched: true\n      };\n\n    case STRIPE_CUSTOMER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        stripeCustomerFetchError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const setupIntentRequest = () => ({\n  type: SETUP_INTENT_REQUEST\n});\nexport const setupIntentSuccess = () => ({\n  type: SETUP_INTENT_SUCCESS\n});\nexport const setupIntentError = e => ({\n  type: SETUP_INTENT_ERROR,\n  error: true,\n  payload: e\n});\nexport const stripeCustomerRequest = () => ({\n  type: STRIPE_CUSTOMER_REQUEST\n});\nexport const stripeCustomerSuccess = () => ({\n  type: STRIPE_CUSTOMER_SUCCESS\n});\nexport const stripeCustomerError = e => ({\n  type: STRIPE_CUSTOMER_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const createStripeSetupIntent = () => (dispatch, getState, sdk) => {\n  dispatch(setupIntentRequest());\n  return sdk.stripeSetupIntents.create().then(response => {\n    const setupIntent = response.data.data;\n    dispatch(setupIntentSuccess(setupIntent));\n    return setupIntent;\n  }).catch(e => {\n    const error = storableError(e);\n    log.error(error, 'create-setup-intent-failed');\n    dispatch(setupIntentError(error));\n    return {\n      createStripeSetupIntentSuccess: false\n    };\n  });\n};\nexport const stripeCustomer = () => (dispatch, getState, sdk) => {\n  dispatch(stripeCustomerRequest());\n  return dispatch(fetchCurrentUser({\n    include: ['stripeCustomer.defaultPaymentMethod']\n  })).then(response => {\n    dispatch(stripeCustomerSuccess());\n  }).catch(e => {\n    const error = storableError(e);\n    log.error(error, 'fetch-stripe-customer-failed');\n    dispatch(stripeCustomerError(error));\n  });\n};\nexport const loadData = () => (dispatch, getState, sdk) => {\n  dispatch(setInitialValuesForPaymentMethods());\n  return dispatch(stripeCustomer());\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PaymentMethodsPage/PaymentMethodsPage.duck.js"],"names":["fetchCurrentUser","setInitialValues","setInitialValuesForPaymentMethods","storableError","log","SETUP_INTENT_REQUEST","SETUP_INTENT_SUCCESS","SETUP_INTENT_ERROR","STRIPE_CUSTOMER_REQUEST","STRIPE_CUSTOMER_SUCCESS","STRIPE_CUSTOMER_ERROR","initialState","setupIntentInProgress","setupIntentError","setupIntent","stripeCustomerFetched","payoutMethodsPageReducer","state","action","type","payload","console","error","stripeCustomerFetchError","setupIntentRequest","setupIntentSuccess","e","stripeCustomerRequest","stripeCustomerSuccess","stripeCustomerError","createStripeSetupIntent","dispatch","getState","sdk","stripeSetupIntents","create","then","response","data","catch","createStripeSetupIntentSuccess","stripeCustomer","include","loadData"],"mappings":"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","sourcesContent":["import { fetchCurrentUser } from '../../ducks/user.duck';\r\nimport { setInitialValues as setInitialValuesForPaymentMethods } from '../../ducks/paymentMethods.duck';\r\nimport { storableError } from '../../util/errors';\r\nimport * as log from '../../util/log';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const SETUP_INTENT_REQUEST = 'app/PaymentMethodsPage/SETUP_INTENT_REQUEST';\r\nexport const SETUP_INTENT_SUCCESS = 'app/PaymentMethodsPage/SETUP_INTENT_SUCCESS';\r\nexport const SETUP_INTENT_ERROR = 'app/PaymentMethodsPage/SETUP_INTENT_ERROR';\r\n\r\nexport const STRIPE_CUSTOMER_REQUEST = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_REQUEST';\r\nexport const STRIPE_CUSTOMER_SUCCESS = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_SUCCESS';\r\nexport const STRIPE_CUSTOMER_ERROR = 'app/PaymentMethodsPage/STRIPE_CUSTOMER_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  setupIntentInProgress: false,\r\n  setupIntentError: null,\r\n  setupIntent: null,\r\n  stripeCustomerFetched: false,\r\n};\r\n\r\nexport default function payoutMethodsPageReducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SETUP_INTENT_REQUEST:\r\n      return { ...state, setupIntentInProgress: true, setupIntentError: null };\r\n    case SETUP_INTENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        setupIntentInProgress: false,\r\n        setupIntentError: null,\r\n        setupIntent: payload,\r\n      };\r\n    case SETUP_INTENT_ERROR:\r\n      console.error(payload); // eslint-disable-line no-console\r\n      return { ...state, setupIntentInProgress: false, setupIntentError: null };\r\n    case STRIPE_CUSTOMER_REQUEST:\r\n      return { ...state, stripeCustomerFetched: false };\r\n    case STRIPE_CUSTOMER_SUCCESS:\r\n      return { ...state, stripeCustomerFetched: true };\r\n    case STRIPE_CUSTOMER_ERROR:\r\n      console.error(payload); // eslint-disable-line no-console\r\n      return { ...state, stripeCustomerFetchError: payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const setupIntentRequest = () => ({ type: SETUP_INTENT_REQUEST });\r\nexport const setupIntentSuccess = () => ({ type: SETUP_INTENT_SUCCESS });\r\nexport const setupIntentError = e => ({\r\n  type: SETUP_INTENT_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nexport const stripeCustomerRequest = () => ({ type: STRIPE_CUSTOMER_REQUEST });\r\nexport const stripeCustomerSuccess = () => ({ type: STRIPE_CUSTOMER_SUCCESS });\r\nexport const stripeCustomerError = e => ({\r\n  type: STRIPE_CUSTOMER_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n// ================ Thunks ================ //\r\n\r\nexport const createStripeSetupIntent = () => (dispatch, getState, sdk) => {\r\n  dispatch(setupIntentRequest());\r\n  return sdk.stripeSetupIntents\r\n    .create()\r\n    .then(response => {\r\n      const setupIntent = response.data.data;\r\n      dispatch(setupIntentSuccess(setupIntent));\r\n      return setupIntent;\r\n    })\r\n    .catch(e => {\r\n      const error = storableError(e);\r\n      log.error(error, 'create-setup-intent-failed');\r\n      dispatch(setupIntentError(error));\r\n      return { createStripeSetupIntentSuccess: false };\r\n    });\r\n};\r\n\r\nexport const stripeCustomer = () => (dispatch, getState, sdk) => {\r\n  dispatch(stripeCustomerRequest());\r\n\r\n  return dispatch(fetchCurrentUser({ include: ['stripeCustomer.defaultPaymentMethod'] }))\r\n    .then(response => {\r\n      dispatch(stripeCustomerSuccess());\r\n    })\r\n    .catch(e => {\r\n      const error = storableError(e);\r\n      log.error(error, 'fetch-stripe-customer-failed');\r\n      dispatch(stripeCustomerError(error));\r\n    });\r\n};\r\n\r\nexport const loadData = () => (dispatch, getState, sdk) => {\r\n  dispatch(setInitialValuesForPaymentMethods());\r\n\r\n  return dispatch(stripeCustomer());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}