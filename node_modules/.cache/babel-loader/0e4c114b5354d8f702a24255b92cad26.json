{"ast":null,"code":"/**\r\n * SelectMultipleFilter needs to parse values from format\r\n * \"has_all:a,b,c,d\" or \"a,b,c,d\"\r\n */\nexport const parseSelectFilterOptions = uriComponentValue => {\n  const startsWithHasAll = uriComponentValue && uriComponentValue.indexOf('has_all:') === 0;\n  const startsWithHasAny = uriComponentValue && uriComponentValue.indexOf('has_any:') === 0;\n\n  if (startsWithHasAll) {\n    return uriComponentValue.substring(8).split(',');\n  } else if (startsWithHasAny) {\n    return uriComponentValue.substring(8).split(',');\n  } else {\n    return uriComponentValue.split(',');\n  }\n};\n/**\r\n * Check if any of the filters (defined by filterIds) have currently active query parameter in URL.\r\n */\n\nexport const isAnyFilterActive = (filterIds, urlQueryParams, filterConfigs) => {\n  const getQueryParamKeysOfGivenFilters = (keys, config) => {\n    const isFilterIncluded = filterIds.includes(config.id);\n    const addedQueryParamNamesMaybe = isFilterIncluded ? config.queryParamNames : [];\n    return [...keys, ...addedQueryParamNamesMaybe];\n  };\n\n  const queryParamKeysOfGivenFilters = filterConfigs.reduce(getQueryParamKeysOfGivenFilters, []);\n  const paramEntries = Object.entries(urlQueryParams);\n  const activeKey = paramEntries.find(entry => {\n    const [key, value] = entry;\n    return queryParamKeysOfGivenFilters.includes(key) && value != null;\n  });\n  return !!activeKey;\n};\n/**\r\n * Check if the filter is currently active.\r\n */\n\nexport const findOptionsForSelectFilter = (filterId, filters) => {\n  const filter = filters.find(f => f.id === filterId);\n  return filter && filter.config && filter.config.options ? filter.config.options : [];\n};\n/**\r\n * Return filter config\r\n */\n\nexport const findConfigForSelectFilter = (filterId, filters) => {\n  const filter = filters.find(f => f.id === filterId);\n  return filter && filter.config ? filter.config : null;\n};\n/**\r\n * Check if the main search type is 'keywords'\r\n */\n\nexport const isMainSearchTypeKeywords = config => config.mainSearchType === 'keywords';\n/**\r\n * Check if the origin parameter is currently active.\r\n */\n\nexport const isOriginInUse = config => config.mainSearchType === 'location' && config.sortSearchByDistance;\n/**\r\n * Check if the stock management is currently active.\r\n */\n\nexport const isStockInUse = config => config.listingManagementType === 'stock';","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/search.js"],"names":["parseSelectFilterOptions","uriComponentValue","startsWithHasAll","indexOf","startsWithHasAny","substring","split","isAnyFilterActive","filterIds","urlQueryParams","filterConfigs","getQueryParamKeysOfGivenFilters","keys","config","isFilterIncluded","includes","id","addedQueryParamNamesMaybe","queryParamNames","queryParamKeysOfGivenFilters","reduce","paramEntries","Object","entries","activeKey","find","entry","key","value","findOptionsForSelectFilter","filterId","filters","filter","f","options","findConfigForSelectFilter","isMainSearchTypeKeywords","mainSearchType","isOriginInUse","sortSearchByDistance","isStockInUse","listingManagementType"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,wBAAwB,GAAGC,iBAAiB,IAAI;AAC3D,QAAMC,gBAAgB,GAAGD,iBAAiB,IAAIA,iBAAiB,CAACE,OAAlB,CAA0B,UAA1B,MAA0C,CAAxF;AACA,QAAMC,gBAAgB,GAAGH,iBAAiB,IAAIA,iBAAiB,CAACE,OAAlB,CAA0B,UAA1B,MAA0C,CAAxF;;AAEA,MAAID,gBAAJ,EAAsB;AACpB,WAAOD,iBAAiB,CAACI,SAAlB,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,GAArC,CAAP;AACD,GAFD,MAEO,IAAIF,gBAAJ,EAAsB;AAC3B,WAAOH,iBAAiB,CAACI,SAAlB,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,GAArC,CAAP;AACD,GAFM,MAEA;AACL,WAAOL,iBAAiB,CAACK,KAAlB,CAAwB,GAAxB,CAAP;AACD;AACF,CAXM;AAaP;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,SAAD,EAAYC,cAAZ,EAA4BC,aAA5B,KAA8C;AAC7E,QAAMC,+BAA+B,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxD,UAAMC,gBAAgB,GAAGN,SAAS,CAACO,QAAV,CAAmBF,MAAM,CAACG,EAA1B,CAAzB;AACA,UAAMC,yBAAyB,GAAGH,gBAAgB,GAAGD,MAAM,CAACK,eAAV,GAA4B,EAA9E;AACA,WAAO,CAAC,GAAGN,IAAJ,EAAU,GAAGK,yBAAb,CAAP;AACD,GAJD;;AAKA,QAAME,4BAA4B,GAAGT,aAAa,CAACU,MAAd,CAAqBT,+BAArB,EAAsD,EAAtD,CAArC;AAEA,QAAMU,YAAY,GAAGC,MAAM,CAACC,OAAP,CAAed,cAAf,CAArB;AACA,QAAMe,SAAS,GAAGH,YAAY,CAACI,IAAb,CAAkBC,KAAK,IAAI;AAC3C,UAAM,CAACC,GAAD,EAAMC,KAAN,IAAeF,KAArB;AACA,WAAOP,4BAA4B,CAACJ,QAA7B,CAAsCY,GAAtC,KAA8CC,KAAK,IAAI,IAA9D;AACD,GAHiB,CAAlB;AAIA,SAAO,CAAC,CAACJ,SAAT;AACD,CAdM;AAgBP;AACA;AACA;;AACA,OAAO,MAAMK,0BAA0B,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC/D,QAAMC,MAAM,GAAGD,OAAO,CAACN,IAAR,CAAaQ,CAAC,IAAIA,CAAC,CAACjB,EAAF,KAASc,QAA3B,CAAf;AACA,SAAOE,MAAM,IAAIA,MAAM,CAACnB,MAAjB,IAA2BmB,MAAM,CAACnB,MAAP,CAAcqB,OAAzC,GAAmDF,MAAM,CAACnB,MAAP,CAAcqB,OAAjE,GAA2E,EAAlF;AACD,CAHM;AAKP;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,CAACL,QAAD,EAAWC,OAAX,KAAuB;AAC9D,QAAMC,MAAM,GAAGD,OAAO,CAACN,IAAR,CAAaQ,CAAC,IAAIA,CAAC,CAACjB,EAAF,KAASc,QAA3B,CAAf;AACA,SAAOE,MAAM,IAAIA,MAAM,CAACnB,MAAjB,GAA0BmB,MAAM,CAACnB,MAAjC,GAA0C,IAAjD;AACD,CAHM;AAKP;AACA;AACA;;AACA,OAAO,MAAMuB,wBAAwB,GAAGvB,MAAM,IAAIA,MAAM,CAACwB,cAAP,KAA0B,UAArE;AAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGzB,MAAM,IACjCA,MAAM,CAACwB,cAAP,KAA0B,UAA1B,IAAwCxB,MAAM,CAAC0B,oBAD1C;AAGP;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG3B,MAAM,IAAIA,MAAM,CAAC4B,qBAAP,KAAiC,OAAhE","sourcesContent":["/**\r\n * SelectMultipleFilter needs to parse values from format\r\n * \"has_all:a,b,c,d\" or \"a,b,c,d\"\r\n */\r\nexport const parseSelectFilterOptions = uriComponentValue => {\r\n  const startsWithHasAll = uriComponentValue && uriComponentValue.indexOf('has_all:') === 0;\r\n  const startsWithHasAny = uriComponentValue && uriComponentValue.indexOf('has_any:') === 0;\r\n\r\n  if (startsWithHasAll) {\r\n    return uriComponentValue.substring(8).split(',');\r\n  } else if (startsWithHasAny) {\r\n    return uriComponentValue.substring(8).split(',');\r\n  } else {\r\n    return uriComponentValue.split(',');\r\n  }\r\n};\r\n\r\n/**\r\n * Check if any of the filters (defined by filterIds) have currently active query parameter in URL.\r\n */\r\nexport const isAnyFilterActive = (filterIds, urlQueryParams, filterConfigs) => {\r\n  const getQueryParamKeysOfGivenFilters = (keys, config) => {\r\n    const isFilterIncluded = filterIds.includes(config.id);\r\n    const addedQueryParamNamesMaybe = isFilterIncluded ? config.queryParamNames : [];\r\n    return [...keys, ...addedQueryParamNamesMaybe];\r\n  };\r\n  const queryParamKeysOfGivenFilters = filterConfigs.reduce(getQueryParamKeysOfGivenFilters, []);\r\n\r\n  const paramEntries = Object.entries(urlQueryParams);\r\n  const activeKey = paramEntries.find(entry => {\r\n    const [key, value] = entry;\r\n    return queryParamKeysOfGivenFilters.includes(key) && value != null;\r\n  });\r\n  return !!activeKey;\r\n};\r\n\r\n/**\r\n * Check if the filter is currently active.\r\n */\r\nexport const findOptionsForSelectFilter = (filterId, filters) => {\r\n  const filter = filters.find(f => f.id === filterId);\r\n  return filter && filter.config && filter.config.options ? filter.config.options : [];\r\n};\r\n\r\n/**\r\n * Return filter config\r\n */\r\nexport const findConfigForSelectFilter = (filterId, filters) => {\r\n  const filter = filters.find(f => f.id === filterId);\r\n  return filter && filter.config ? filter.config : null;\r\n};\r\n\r\n/**\r\n * Check if the main search type is 'keywords'\r\n */\r\nexport const isMainSearchTypeKeywords = config => config.mainSearchType === 'keywords';\r\n\r\n/**\r\n * Check if the origin parameter is currently active.\r\n */\r\nexport const isOriginInUse = config =>\r\n  config.mainSearchType === 'location' && config.sortSearchByDistance;\r\n\r\n/**\r\n * Check if the stock management is currently active.\r\n */\r\nexport const isStockInUse = config => config.listingManagementType === 'stock';\r\n"]},"metadata":{},"sourceType":"module"}