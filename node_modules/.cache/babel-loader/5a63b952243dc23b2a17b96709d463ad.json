{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\LayoutWrapperAccountSettingsSideNav\\\\LayoutWrapperAccountSettingsSideNav.js\";\n\n/**\r\n * This is a wrapper component for different Layouts.\r\n * Navigational 'aside' content should be added to this wrapper.\r\n */\nimport React from 'react';\nimport { node, number, string, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { withViewport } from '../../util/contextHelpers';\nimport { LayoutWrapperSideNav } from '../../components';\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\n\nconst scrollToTab = currentTab => {\n  const el = document.querySelector(`#${currentTab}Tab`);\n\n  if (el) {\n    el.scrollIntoView({\n      block: 'end',\n      inline: 'end',\n      behavior: 'smooth'\n    });\n  }\n};\n\nconst LayoutWrapperAccountSettingsSideNavComponent = props => {\n  const {\n    currentTab,\n    viewport\n  } = props;\n  let hasScrolledToTab = false;\n  const {\n    width\n  } = viewport;\n  const hasViewport = width > 0;\n  const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n  const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n  const hasFontsLoaded = hasViewport && document.documentElement.classList.contains('fontsLoaded'); // Check if scrollToTab call is needed (tab is not visible on mobile)\n\n  if (hasVerticalTabLayout) {\n    hasScrolledToTab = true;\n  } else if (hasHorizontalTabLayout && !hasScrolledToTab && hasFontsLoaded) {\n    scrollToTab(currentTab);\n    hasScrolledToTab = true;\n  }\n\n  const tabs = [{\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.contactDetailsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'ContactDetailsPage',\n    id: 'ContactDetailsPageTab',\n    linkProps: {\n      name: 'ContactDetailsPage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.passwordTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'PasswordChangePage',\n    id: 'PasswordChangePageTab',\n    linkProps: {\n      name: 'PasswordChangePage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.paymentsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'StripePayoutPage',\n    id: 'StripePayoutPageTab',\n    linkProps: {\n      name: 'StripePayoutPage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.paymentMethodsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'PaymentMethodsPage',\n    id: 'PaymentMethodsPageTab',\n    linkProps: {\n      name: 'PaymentMethodsPage'\n    }\n  }];\n  return /*#__PURE__*/React.createElement(LayoutWrapperSideNav, {\n    tabs: tabs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }\n  });\n};\n\n_c = LayoutWrapperAccountSettingsSideNavComponent;\nLayoutWrapperAccountSettingsSideNavComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  children: null,\n  currentTab: null\n};\nLayoutWrapperAccountSettingsSideNavComponent.propTypes = {\n  children: node,\n  className: string,\n  rootClassName: string,\n  currentTab: string,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired\n};\nconst LayoutWrapperAccountSettingsSideNav = compose(withViewport)(LayoutWrapperAccountSettingsSideNavComponent);\nexport default LayoutWrapperAccountSettingsSideNav;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutWrapperAccountSettingsSideNavComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/LayoutWrapperAccountSettingsSideNav/LayoutWrapperAccountSettingsSideNav.js"],"names":["React","node","number","string","shape","compose","FormattedMessage","withViewport","LayoutWrapperSideNav","MAX_HORIZONTAL_NAV_SCREEN_WIDTH","scrollToTab","currentTab","el","document","querySelector","scrollIntoView","block","inline","behavior","LayoutWrapperAccountSettingsSideNavComponent","props","viewport","hasScrolledToTab","width","hasViewport","hasHorizontalTabLayout","hasVerticalTabLayout","hasFontsLoaded","documentElement","classList","contains","tabs","text","selected","id","linkProps","name","defaultProps","className","rootClassName","children","propTypes","isRequired","height","LayoutWrapperAccountSettingsSideNav"],"mappings":"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","sourcesContent":["/**\r\n * This is a wrapper component for different Layouts.\r\n * Navigational 'aside' content should be added to this wrapper.\r\n */\r\nimport React from 'react';\r\nimport { node, number, string, shape } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport { withViewport } from '../../util/contextHelpers';\r\nimport { LayoutWrapperSideNav } from '../../components';\r\n\r\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\r\n\r\nconst scrollToTab = currentTab => {\r\n  const el = document.querySelector(`#${currentTab}Tab`);\r\n\r\n  if (el) {\r\n    el.scrollIntoView({\r\n      block: 'end',\r\n      inline: 'end',\r\n      behavior: 'smooth',\r\n    });\r\n  }\r\n};\r\n\r\nconst LayoutWrapperAccountSettingsSideNavComponent = props => {\r\n  const { currentTab, viewport } = props;\r\n\r\n  let hasScrolledToTab = false;\r\n\r\n  const { width } = viewport;\r\n  const hasViewport = width > 0;\r\n  const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n  const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n  const hasFontsLoaded = hasViewport && document.documentElement.classList.contains('fontsLoaded');\r\n\r\n  // Check if scrollToTab call is needed (tab is not visible on mobile)\r\n  if (hasVerticalTabLayout) {\r\n    hasScrolledToTab = true;\r\n  } else if (hasHorizontalTabLayout && !hasScrolledToTab && hasFontsLoaded) {\r\n    scrollToTab(currentTab);\r\n    hasScrolledToTab = true;\r\n  }\r\n\r\n  const tabs = [\r\n    {\r\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.contactDetailsTabTitle\" />,\r\n      selected: currentTab === 'ContactDetailsPage',\r\n      id: 'ContactDetailsPageTab',\r\n      linkProps: {\r\n        name: 'ContactDetailsPage',\r\n      },\r\n    },\r\n    {\r\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.passwordTabTitle\" />,\r\n      selected: currentTab === 'PasswordChangePage',\r\n      id: 'PasswordChangePageTab',\r\n      linkProps: {\r\n        name: 'PasswordChangePage',\r\n      },\r\n    },\r\n    {\r\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentsTabTitle\" />,\r\n      selected: currentTab === 'StripePayoutPage',\r\n      id: 'StripePayoutPageTab',\r\n      linkProps: {\r\n        name: 'StripePayoutPage',\r\n      },\r\n    },\r\n    {\r\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentMethodsTabTitle\" />,\r\n      selected: currentTab === 'PaymentMethodsPage',\r\n      id: 'PaymentMethodsPageTab',\r\n      linkProps: {\r\n        name: 'PaymentMethodsPage',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return <LayoutWrapperSideNav tabs={tabs} />;\r\n};\r\n\r\nLayoutWrapperAccountSettingsSideNavComponent.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  children: null,\r\n  currentTab: null,\r\n};\r\n\r\nLayoutWrapperAccountSettingsSideNavComponent.propTypes = {\r\n  children: node,\r\n  className: string,\r\n  rootClassName: string,\r\n  currentTab: string,\r\n\r\n  // from withViewport\r\n  viewport: shape({\r\n    width: number.isRequired,\r\n    height: number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst LayoutWrapperAccountSettingsSideNav = compose(withViewport)(\r\n  LayoutWrapperAccountSettingsSideNavComponent\r\n);\r\n\r\nexport default LayoutWrapperAccountSettingsSideNav;\r\n"]},"metadata":{},"sourceType":"module"}