{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PasswordChangePage\\\\PasswordChangeForm\\\\PasswordChangeForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport * as validators from '../../../util/validators';\nimport { ensureCurrentUser } from '../../../util/data';\nimport { isChangePasswordWrongPassword } from '../../../util/errors';\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './PasswordChangeForm.module.css';\nconst RESET_TIMEOUT = 800;\n\nclass PasswordChangeFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showResetPasswordMessage: false\n    };\n    this.resetTimeoutId = null;\n    this.submittedValues = {};\n    this.handleResetPassword = this.handleResetPassword.bind(this);\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.resetTimeoutId);\n  }\n\n  handleResetPassword() {\n    this.setState({\n      showResetPasswordMessage: true\n    });\n    const email = this.props.currentUser.attributes.email;\n    this.props.onResetPassword(email);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const {\n          rootClassName,\n          className,\n          formId,\n          changePasswordError,\n          currentUser,\n          handleSubmit,\n          inProgress,\n          resetPasswordInProgress,\n          intl,\n          invalid,\n          pristine,\n          ready,\n          form,\n          values\n        } = fieldRenderProps;\n        const user = ensureCurrentUser(currentUser);\n\n        if (!user.id) {\n          return null;\n        } // New password\n\n\n        const newPasswordLabel = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordLabel'\n        });\n        const newPasswordPlaceholder = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordPlaceholder'\n        });\n        const newPasswordRequiredMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.newPasswordRequired'\n        });\n        const newPasswordRequired = validators.requiredStringNoTrim(newPasswordRequiredMessage);\n        const passwordMinLengthMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordTooShort'\n        }, {\n          minLength: validators.PASSWORD_MIN_LENGTH\n        });\n        const passwordMaxLengthMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordTooLong'\n        }, {\n          maxLength: validators.PASSWORD_MAX_LENGTH\n        });\n        const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n        const passwordMaxLength = validators.maxLength(passwordMaxLengthMessage, validators.PASSWORD_MAX_LENGTH); // password\n\n        const passwordLabel = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordLabel'\n        });\n        const passwordPlaceholder = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordPlaceholder'\n        });\n        const passwordRequiredMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordRequired'\n        });\n        const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n        const passwordFailedMessage = intl.formatMessage({\n          id: 'PasswordChangeForm.passwordFailed'\n        });\n        const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n        const passwordErrorText = isChangePasswordWrongPassword(changePasswordError) ? passwordFailedMessage : null;\n        const confirmClasses = classNames(css.confirmChangesSection, {\n          [css.confirmChangesSectionVisible]: !pristine\n        });\n        const genericFailure = changePasswordError && !passwordErrorText ? /*#__PURE__*/React.createElement(\"span\", {\n          className: css.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.genericFailure\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }\n        })) : null;\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const classes = classNames(rootClassName || css.root, className);\n        const submitDisabled = invalid || pristineSinceLastSubmit || inProgress;\n        const sendPasswordLink = /*#__PURE__*/React.createElement(\"span\", {\n          className: css.helperLink,\n          onClick: this.handleResetPassword,\n          role: \"button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.resetPasswordLinkText\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }\n        }));\n        const resendPasswordLink = /*#__PURE__*/React.createElement(\"span\", {\n          className: css.helperLink,\n          onClick: this.handleResetPassword,\n          role: \"button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.resendPasswordLinkText\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }\n        }));\n        const resetPasswordLink = this.state.showResetPasswordMessage || resetPasswordInProgress ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.resetPasswordLinkSent\",\n          values: {\n            email: /*#__PURE__*/React.createElement(\"span\", {\n              className: css.emailStyle,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 28\n              }\n            }, currentUser.attributes.email)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }\n        }), ' ', resendPasswordLink) : sendPasswordLink;\n        return /*#__PURE__*/React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e).then(() => {\n              this.resetTimeoutId = window.setTimeout(form.reset, RESET_TIMEOUT);\n            }).catch(() => {// Error is handled in duck file already.\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: css.newPasswordSection,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FieldTextInput, {\n          type: \"password\",\n          id: formId ? `${formId}.newPassword` : 'newPassword',\n          name: \"newPassword\",\n          autoComplete: \"new-password\",\n          label: newPasswordLabel,\n          placeholder: newPasswordPlaceholder,\n          validate: validators.composeValidators(newPasswordRequired, passwordMinLength, passwordMaxLength),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: confirmClasses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          className: css.confirmChangesTitle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.confirmChangesTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 19\n          }\n        })), /*#__PURE__*/React.createElement(\"p\", {\n          className: css.confirmChangesInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.confirmChangesInfo\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.resetPasswordInfo\",\n          values: {\n            resetPasswordLink\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }\n        })), /*#__PURE__*/React.createElement(FieldTextInput, {\n          className: css.password,\n          type: \"password\",\n          id: \"currentPassword\",\n          name: \"currentPassword\",\n          autoComplete: \"current-password\",\n          label: passwordLabel,\n          placeholder: passwordPlaceholder,\n          validate: validators.composeValidators(passwordRequired, passwordMinLength, passwordMaxLength),\n          customErrorText: passwordTouched ? null : passwordErrorText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: css.bottomWrapper,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }\n        }, genericFailure, /*#__PURE__*/React.createElement(PrimaryButton, {\n          type: \"submit\",\n          inProgress: inProgress,\n          ready: ready,\n          disabled: submitDisabled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"PasswordChangeForm.saveChanges\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nPasswordChangeFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  changePasswordError: null,\n  inProgress: false,\n  formId: null,\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nconst {\n  bool,\n  string\n} = PropTypes;\nPasswordChangeFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  changePasswordError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  ready: bool.isRequired,\n  formId: string,\n  resetPasswordInProgress: bool,\n  resetPasswordError: propTypes.error\n};\nconst PasswordChangeForm = compose(injectIntl)(PasswordChangeFormComponent);\nPasswordChangeForm.displayName = 'PasswordChangeForm';\nexport default PasswordChangeForm;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PasswordChangePage/PasswordChangeForm/PasswordChangeForm.js"],"names":["React","Component","PropTypes","compose","Form","FinalForm","isEqual","classNames","FormattedMessage","injectIntl","intlShape","propTypes","validators","ensureCurrentUser","isChangePasswordWrongPassword","PrimaryButton","FieldTextInput","css","RESET_TIMEOUT","PasswordChangeFormComponent","constructor","props","state","showResetPasswordMessage","resetTimeoutId","submittedValues","handleResetPassword","bind","componentWillUnmount","window","clearTimeout","setState","email","currentUser","attributes","onResetPassword","render","fieldRenderProps","rootClassName","className","formId","changePasswordError","handleSubmit","inProgress","resetPasswordInProgress","intl","invalid","pristine","ready","form","values","user","id","newPasswordLabel","formatMessage","newPasswordPlaceholder","newPasswordRequiredMessage","newPasswordRequired","requiredStringNoTrim","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMaxLengthMessage","maxLength","PASSWORD_MAX_LENGTH","passwordMinLength","passwordMaxLength","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","confirmClasses","confirmChangesSection","confirmChangesSectionVisible","genericFailure","error","submittedOnce","Object","keys","length","pristineSinceLastSubmit","classes","root","submitDisabled","sendPasswordLink","helperLink","resendPasswordLink","resetPasswordLink","emailStyle","e","then","setTimeout","reset","catch","newPasswordSection","composeValidators","confirmChangesTitle","confirmChangesInfo","password","bottomWrapper","defaultProps","resetPasswordError","bool","string","isRequired","PasswordChangeForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport * as validators from '../../../util/validators';\r\nimport { ensureCurrentUser } from '../../../util/data';\r\nimport { isChangePasswordWrongPassword } from '../../../util/errors';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './PasswordChangeForm.module.css';\r\n\r\nconst RESET_TIMEOUT = 800;\r\n\r\nclass PasswordChangeFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showResetPasswordMessage: false };\r\n    this.resetTimeoutId = null;\r\n    this.submittedValues = {};\r\n    this.handleResetPassword = this.handleResetPassword.bind(this);\r\n  }\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.resetTimeoutId);\r\n  }\r\n\r\n  handleResetPassword() {\r\n    this.setState({ showResetPasswordMessage: true });\r\n    const email = this.props.currentUser.attributes.email;\r\n\r\n    this.props.onResetPassword(email);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FinalForm\r\n        {...this.props}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            rootClassName,\r\n            className,\r\n            formId,\r\n            changePasswordError,\r\n            currentUser,\r\n            handleSubmit,\r\n            inProgress,\r\n            resetPasswordInProgress,\r\n            intl,\r\n            invalid,\r\n            pristine,\r\n            ready,\r\n            form,\r\n            values,\r\n          } = fieldRenderProps;\r\n\r\n          const user = ensureCurrentUser(currentUser);\r\n\r\n          if (!user.id) {\r\n            return null;\r\n          }\r\n\r\n          // New password\r\n          const newPasswordLabel = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordLabel',\r\n          });\r\n          const newPasswordPlaceholder = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordPlaceholder',\r\n          });\r\n          const newPasswordRequiredMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordRequired',\r\n          });\r\n          const newPasswordRequired = validators.requiredStringNoTrim(newPasswordRequiredMessage);\r\n\r\n          const passwordMinLengthMessage = intl.formatMessage(\r\n            {\r\n              id: 'PasswordChangeForm.passwordTooShort',\r\n            },\r\n            {\r\n              minLength: validators.PASSWORD_MIN_LENGTH,\r\n            }\r\n          );\r\n          const passwordMaxLengthMessage = intl.formatMessage(\r\n            {\r\n              id: 'PasswordChangeForm.passwordTooLong',\r\n            },\r\n            {\r\n              maxLength: validators.PASSWORD_MAX_LENGTH,\r\n            }\r\n          );\r\n\r\n          const passwordMinLength = validators.minLength(\r\n            passwordMinLengthMessage,\r\n            validators.PASSWORD_MIN_LENGTH\r\n          );\r\n          const passwordMaxLength = validators.maxLength(\r\n            passwordMaxLengthMessage,\r\n            validators.PASSWORD_MAX_LENGTH\r\n          );\r\n\r\n          // password\r\n          const passwordLabel = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordLabel',\r\n          });\r\n          const passwordPlaceholder = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordPlaceholder',\r\n          });\r\n          const passwordRequiredMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordRequired',\r\n          });\r\n\r\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n\r\n          const passwordFailedMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordFailed',\r\n          });\r\n          const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\r\n          const passwordErrorText = isChangePasswordWrongPassword(changePasswordError)\r\n            ? passwordFailedMessage\r\n            : null;\r\n\r\n          const confirmClasses = classNames(css.confirmChangesSection, {\r\n            [css.confirmChangesSectionVisible]: !pristine,\r\n          });\r\n\r\n          const genericFailure =\r\n            changePasswordError && !passwordErrorText ? (\r\n              <span className={css.error}>\r\n                <FormattedMessage id=\"PasswordChangeForm.genericFailure\" />\r\n              </span>\r\n            ) : null;\r\n\r\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\r\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\r\n          const classes = classNames(rootClassName || css.root, className);\r\n          const submitDisabled = invalid || pristineSinceLastSubmit || inProgress;\r\n\r\n          const sendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"PasswordChangeForm.resetPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"PasswordChangeForm.resendPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resetPasswordLink =\r\n            this.state.showResetPasswordMessage || resetPasswordInProgress ? (\r\n              <>\r\n                <FormattedMessage\r\n                  id=\"PasswordChangeForm.resetPasswordLinkSent\"\r\n                  values={{\r\n                    email: <span className={css.emailStyle}>{currentUser.attributes.email}</span>,\r\n                  }}\r\n                />{' '}\r\n                {resendPasswordLink}\r\n              </>\r\n            ) : (\r\n              sendPasswordLink\r\n            );\r\n\r\n          return (\r\n            <Form\r\n              className={classes}\r\n              onSubmit={e => {\r\n                this.submittedValues = values;\r\n                handleSubmit(e)\r\n                  .then(() => {\r\n                    this.resetTimeoutId = window.setTimeout(form.reset, RESET_TIMEOUT);\r\n                  })\r\n                  .catch(() => {\r\n                    // Error is handled in duck file already.\r\n                  });\r\n              }}\r\n            >\r\n              <div className={css.newPasswordSection}>\r\n                <FieldTextInput\r\n                  type=\"password\"\r\n                  id={formId ? `${formId}.newPassword` : 'newPassword'}\r\n                  name=\"newPassword\"\r\n                  autoComplete=\"new-password\"\r\n                  label={newPasswordLabel}\r\n                  placeholder={newPasswordPlaceholder}\r\n                  validate={validators.composeValidators(\r\n                    newPasswordRequired,\r\n                    passwordMinLength,\r\n                    passwordMaxLength\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className={confirmClasses}>\r\n                <h3 className={css.confirmChangesTitle}>\r\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesTitle\" />\r\n                </h3>\r\n                <p className={css.confirmChangesInfo}>\r\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesInfo\" />\r\n                  <br />\r\n                  <FormattedMessage\r\n                    id=\"PasswordChangeForm.resetPasswordInfo\"\r\n                    values={{ resetPasswordLink }}\r\n                  />\r\n                </p>\r\n\r\n                <FieldTextInput\r\n                  className={css.password}\r\n                  type=\"password\"\r\n                  id=\"currentPassword\"\r\n                  name=\"currentPassword\"\r\n                  autoComplete=\"current-password\"\r\n                  label={passwordLabel}\r\n                  placeholder={passwordPlaceholder}\r\n                  validate={validators.composeValidators(\r\n                    passwordRequired,\r\n                    passwordMinLength,\r\n                    passwordMaxLength\r\n                  )}\r\n                  customErrorText={passwordTouched ? null : passwordErrorText}\r\n                />\r\n              </div>\r\n              <div className={css.bottomWrapper}>\r\n                {genericFailure}\r\n                <PrimaryButton\r\n                  type=\"submit\"\r\n                  inProgress={inProgress}\r\n                  ready={ready}\r\n                  disabled={submitDisabled}\r\n                >\r\n                  <FormattedMessage id=\"PasswordChangeForm.saveChanges\" />\r\n                </PrimaryButton>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nPasswordChangeFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  changePasswordError: null,\r\n  inProgress: false,\r\n  formId: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, string } = PropTypes;\r\n\r\nPasswordChangeFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  changePasswordError: propTypes.error,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n  ready: bool.isRequired,\r\n  formId: string,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n};\r\n\r\nconst PasswordChangeForm = compose(injectIntl)(PasswordChangeFormComponent);\r\nPasswordChangeForm.displayName = 'PasswordChangeForm';\r\n\r\nexport default PasswordChangeForm;\r\n"]},"metadata":{},"sourceType":"module"}