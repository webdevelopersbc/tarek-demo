{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\AuthenticationPage\\\\ConfirmSignupForm\\\\ConfirmSignupForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport * as validators from '../../../util/validators';\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './ConfirmSignupForm.module.css';\nconst KEY_CODE_ENTER = 13;\n\nconst ConfirmSignupFormComponent = props => /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n  render: formRenderProps => {\n    const {\n      rootClassName,\n      className,\n      formId,\n      handleSubmit,\n      inProgress,\n      invalid,\n      intl,\n      onOpenTermsOfService,\n      authInfo,\n      idp\n    } = formRenderProps; // email\n\n    const emailLabel = intl.formatMessage({\n      id: 'ConfirmSignupForm.emailLabel'\n    });\n    const emailPlaceholder = intl.formatMessage({\n      id: 'ConfirmSignupForm.emailPlaceholder'\n    });\n    const emailRequiredMessage = intl.formatMessage({\n      id: 'ConfirmSignupForm.emailRequired'\n    });\n    const emailRequired = validators.required(emailRequiredMessage);\n    const emailInvalidMessage = intl.formatMessage({\n      id: 'ConfirmSignupForm.emailInvalid'\n    });\n    const emailValid = validators.emailFormatValid(emailInvalidMessage); // firstName\n\n    const firstNameLabel = intl.formatMessage({\n      id: 'ConfirmSignupForm.firstNameLabel'\n    });\n    const firstNamePlaceholder = intl.formatMessage({\n      id: 'ConfirmSignupForm.firstNamePlaceholder'\n    });\n    const firstNameRequiredMessage = intl.formatMessage({\n      id: 'ConfirmSignupForm.firstNameRequired'\n    });\n    const firstNameRequired = validators.required(firstNameRequiredMessage); // lastName\n\n    const lastNameLabel = intl.formatMessage({\n      id: 'ConfirmSignupForm.lastNameLabel'\n    });\n    const lastNamePlaceholder = intl.formatMessage({\n      id: 'ConfirmSignupForm.lastNamePlaceholder'\n    });\n    const lastNameRequiredMessage = intl.formatMessage({\n      id: 'ConfirmSignupForm.lastNameRequired'\n    });\n    const lastNameRequired = validators.required(lastNameRequiredMessage);\n    const classes = classNames(rootClassName || css.root, className);\n    const submitInProgress = inProgress;\n    const submitDisabled = invalid || submitInProgress;\n\n    const handleTermsKeyUp = e => {\n      // Allow click action with keyboard like with normal links\n      if (e.keyCode === KEY_CODE_ENTER) {\n        onOpenTermsOfService();\n      }\n    };\n\n    const termsLink = /*#__PURE__*/React.createElement(\"span\", {\n      className: css.termsLink,\n      onClick: onOpenTermsOfService,\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyUp: handleTermsKeyUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ConfirmSignupForm.termsAndConditionsLinkText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    })); // If authInfo is not available we should not show the ConfirmForm\n\n    if (!authInfo) {\n      return;\n    } // Initial values from idp provider\n\n\n    const {\n      email,\n      firstName,\n      lastName\n    } = authInfo;\n    return /*#__PURE__*/React.createElement(Form, {\n      className: classes,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      type: \"email\",\n      id: formId ? `${formId}.email` : 'email',\n      name: \"email\",\n      autoComplete: \"email\",\n      label: emailLabel,\n      placeholder: emailPlaceholder,\n      initialValue: email,\n      validate: validators.composeValidators(emailRequired, emailValid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.firstNameRoot,\n      type: \"text\",\n      id: formId ? `${formId}.firstName` : 'firstName',\n      name: \"firstName\",\n      autoComplete: \"given-name\",\n      label: firstNameLabel,\n      placeholder: firstNamePlaceholder,\n      initialValue: firstName,\n      validate: firstNameRequired,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FieldTextInput, {\n      className: css.lastNameRoot,\n      type: \"text\",\n      id: formId ? `${formId}.lastName` : 'lastName',\n      name: \"lastName\",\n      autoComplete: \"family-name\",\n      label: lastNameLabel,\n      placeholder: lastNamePlaceholder,\n      initialValue: lastName,\n      validate: lastNameRequired,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.bottomWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: css.bottomWrapperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.termsText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ConfirmSignupForm.termsAndConditionsAcceptText\",\n      values: {\n        termsLink\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(PrimaryButton, {\n      type: \"submit\",\n      inProgress: submitInProgress,\n      disabled: submitDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ConfirmSignupForm.signUp\",\n      values: {\n        idp: idp\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }))));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }\n}));\n\n_c = ConfirmSignupFormComponent;\nConfirmSignupFormComponent.defaultProps = {\n  inProgress: false\n};\nconst {\n  bool,\n  func\n} = PropTypes;\nConfirmSignupFormComponent.propTypes = {\n  inProgress: bool,\n  onOpenTermsOfService: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst ConfirmSignupForm = compose(injectIntl)(ConfirmSignupFormComponent);\nConfirmSignupForm.displayName = 'ConfirmSignupForm';\nexport default ConfirmSignupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmSignupFormComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/AuthenticationPage/ConfirmSignupForm/ConfirmSignupForm.js"],"names":["React","PropTypes","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","validators","PrimaryButton","FieldTextInput","css","KEY_CODE_ENTER","ConfirmSignupFormComponent","props","formRenderProps","rootClassName","className","formId","handleSubmit","inProgress","invalid","intl","onOpenTermsOfService","authInfo","idp","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","firstNameLabel","firstNamePlaceholder","firstNameRequiredMessage","firstNameRequired","lastNameLabel","lastNamePlaceholder","lastNameRequiredMessage","lastNameRequired","classes","root","submitInProgress","submitDisabled","handleTermsKeyUp","e","keyCode","termsLink","email","firstName","lastName","composeValidators","name","firstNameRoot","lastNameRoot","bottomWrapper","bottomWrapperText","termsText","defaultProps","bool","func","propTypes","isRequired","ConfirmSignupForm","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './ConfirmSignupForm.module.css';\r\n\r\nconst KEY_CODE_ENTER = 13;\r\n\r\nconst ConfirmSignupFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={formRenderProps => {\r\n      const {\r\n        rootClassName,\r\n        className,\r\n        formId,\r\n        handleSubmit,\r\n        inProgress,\r\n        invalid,\r\n        intl,\r\n        onOpenTermsOfService,\r\n        authInfo,\r\n        idp,\r\n      } = formRenderProps;\r\n\r\n      // email\r\n      const emailLabel = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.emailLabel',\r\n      });\r\n      const emailPlaceholder = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.emailPlaceholder',\r\n      });\r\n      const emailRequiredMessage = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.emailRequired',\r\n      });\r\n      const emailRequired = validators.required(emailRequiredMessage);\r\n      const emailInvalidMessage = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.emailInvalid',\r\n      });\r\n      const emailValid = validators.emailFormatValid(emailInvalidMessage);\r\n\r\n      // firstName\r\n      const firstNameLabel = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.firstNameLabel',\r\n      });\r\n      const firstNamePlaceholder = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.firstNamePlaceholder',\r\n      });\r\n      const firstNameRequiredMessage = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.firstNameRequired',\r\n      });\r\n      const firstNameRequired = validators.required(firstNameRequiredMessage);\r\n\r\n      // lastName\r\n      const lastNameLabel = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.lastNameLabel',\r\n      });\r\n      const lastNamePlaceholder = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.lastNamePlaceholder',\r\n      });\r\n      const lastNameRequiredMessage = intl.formatMessage({\r\n        id: 'ConfirmSignupForm.lastNameRequired',\r\n      });\r\n      const lastNameRequired = validators.required(lastNameRequiredMessage);\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = invalid || submitInProgress;\r\n\r\n      const handleTermsKeyUp = e => {\r\n        // Allow click action with keyboard like with normal links\r\n        if (e.keyCode === KEY_CODE_ENTER) {\r\n          onOpenTermsOfService();\r\n        }\r\n      };\r\n      const termsLink = (\r\n        <span\r\n          className={css.termsLink}\r\n          onClick={onOpenTermsOfService}\r\n          role=\"button\"\r\n          tabIndex=\"0\"\r\n          onKeyUp={handleTermsKeyUp}\r\n        >\r\n          <FormattedMessage id=\"ConfirmSignupForm.termsAndConditionsLinkText\" />\r\n        </span>\r\n      );\r\n\r\n      // If authInfo is not available we should not show the ConfirmForm\r\n      if (!authInfo) {\r\n        return;\r\n      }\r\n\r\n      // Initial values from idp provider\r\n      const { email, firstName, lastName } = authInfo;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <div>\r\n            <FieldTextInput\r\n              type=\"email\"\r\n              id={formId ? `${formId}.email` : 'email'}\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              label={emailLabel}\r\n              placeholder={emailPlaceholder}\r\n              initialValue={email}\r\n              validate={validators.composeValidators(emailRequired, emailValid)}\r\n            />\r\n            <div className={css.name}>\r\n              <FieldTextInput\r\n                className={css.firstNameRoot}\r\n                type=\"text\"\r\n                id={formId ? `${formId}.firstName` : 'firstName'}\r\n                name=\"firstName\"\r\n                autoComplete=\"given-name\"\r\n                label={firstNameLabel}\r\n                placeholder={firstNamePlaceholder}\r\n                initialValue={firstName}\r\n                validate={firstNameRequired}\r\n              />\r\n              <FieldTextInput\r\n                className={css.lastNameRoot}\r\n                type=\"text\"\r\n                id={formId ? `${formId}.lastName` : 'lastName'}\r\n                name=\"lastName\"\r\n                autoComplete=\"family-name\"\r\n                label={lastNameLabel}\r\n                placeholder={lastNamePlaceholder}\r\n                initialValue={lastName}\r\n                validate={lastNameRequired}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className={css.bottomWrapper}>\r\n            <p className={css.bottomWrapperText}>\r\n              <span className={css.termsText}>\r\n                <FormattedMessage\r\n                  id=\"ConfirmSignupForm.termsAndConditionsAcceptText\"\r\n                  values={{ termsLink }}\r\n                />\r\n              </span>\r\n            </p>\r\n            <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n              <FormattedMessage id=\"ConfirmSignupForm.signUp\" values={{ idp: idp }} />\r\n            </PrimaryButton>\r\n          </div>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nConfirmSignupFormComponent.defaultProps = { inProgress: false };\r\n\r\nconst { bool, func } = PropTypes;\r\n\r\nConfirmSignupFormComponent.propTypes = {\r\n  inProgress: bool,\r\n\r\n  onOpenTermsOfService: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst ConfirmSignupForm = compose(injectIntl)(ConfirmSignupFormComponent);\r\nConfirmSignupForm.displayName = 'ConfirmSignupForm';\r\n\r\nexport default ConfirmSignupForm;\r\n"]},"metadata":{},"sourceType":"module"}