{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\StripePaymentAddress\\\\StripePaymentAddress.js\";\nimport React from 'react';\nimport { intlShape } from '../../util/reactIntl';\nimport { bool, object, string } from 'prop-types';\nimport config from '../../config';\nimport * as validators from '../../util/validators';\nimport getCountryCodes from '../../translations/countryCodes';\nimport { FieldTextInput, FieldSelect } from '../../components';\nimport css from './StripePaymentAddress.module.css';\n\nconst StripePaymentAddress = props => {\n  const {\n    className,\n    intl,\n    disabled,\n    form,\n    fieldId,\n    card\n  } = props;\n  const optionalText = intl.formatMessage({\n    id: 'StripePaymentAddress.optionalText'\n  });\n  const addressLine1Label = intl.formatMessage({\n    id: 'StripePaymentAddress.addressLine1Label'\n  });\n  const addressLine1Placeholder = intl.formatMessage({\n    id: 'StripePaymentAddress.addressLine1Placeholder'\n  });\n  const addressLine1Required = validators.required(intl.formatMessage({\n    id: 'StripePaymentAddress.addressLine1Required'\n  }));\n  const addressLine2Label = intl.formatMessage({\n    id: 'StripePaymentAddress.addressLine2Label'\n  }, {\n    optionalText: optionalText\n  });\n  const addressLine2Placeholder = intl.formatMessage({\n    id: 'StripePaymentAddress.addressLine2Placeholder'\n  });\n  const postalCodeLabel = intl.formatMessage({\n    id: 'StripePaymentAddress.postalCodeLabel'\n  });\n  const postalCodePlaceholder = intl.formatMessage({\n    id: 'StripePaymentAddress.postalCodePlaceholder'\n  });\n  const postalCodeRequired = validators.required(intl.formatMessage({\n    id: 'StripePaymentAddress.postalCodeRequired'\n  }));\n  const cityLabel = intl.formatMessage({\n    id: 'StripePaymentAddress.cityLabel'\n  });\n  const cityPlaceholder = intl.formatMessage({\n    id: 'StripePaymentAddress.cityPlaceholder'\n  });\n  const cityRequired = validators.required(intl.formatMessage({\n    id: 'StripePaymentAddress.cityRequired'\n  }));\n  const stateLabel = intl.formatMessage({\n    id: 'StripePaymentAddress.stateLabel'\n  }, {\n    optionalText: optionalText\n  });\n  const statePlaceholder = intl.formatMessage({\n    id: 'StripePaymentAddress.statePlaceholder'\n  });\n  const countryLabel = intl.formatMessage({\n    id: 'StripePaymentAddress.countryLabel'\n  });\n  const countryPlaceholder = intl.formatMessage({\n    id: 'StripePaymentAddress.countryPlaceholder'\n  });\n  const countryRequired = validators.required(intl.formatMessage({\n    id: 'StripePaymentAddress.countryRequired'\n  }));\n\n  const handleOnChange = event => {\n    const value = event.target.value;\n    form.change('postal', value);\n    card.update({\n      value: {\n        postalCode: value\n      }\n    });\n  }; // Use tha language set in config.locale to get the correct translations of the country names\n\n\n  const countryCodes = getCountryCodes(config.locale);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className ? className : css.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.formRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${fieldId}.addressLine1`,\n    name: \"addressLine1\",\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"billing address-line1\",\n    label: addressLine1Label,\n    placeholder: addressLine1Placeholder,\n    validate: addressLine1Required,\n    onUnmount: () => form.change('addressLine1', undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${fieldId}.addressLine2`,\n    name: \"addressLine2\",\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"billing address-line2\",\n    label: addressLine2Label,\n    placeholder: addressLine2Placeholder,\n    onUnmount: () => form.change('addressLine2', undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.formRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${fieldId}.postalCode`,\n    name: \"postal\",\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"billing postal-code\",\n    label: postalCodeLabel,\n    placeholder: postalCodePlaceholder,\n    validate: postalCodeRequired,\n    onUnmount: () => form.change('postal', undefined),\n    onChange: event => handleOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${fieldId}.city`,\n    name: \"city\",\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"billing address-level2\",\n    label: cityLabel,\n    placeholder: cityPlaceholder,\n    validate: cityRequired,\n    onUnmount: () => form.change('city', undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.formRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${fieldId}.state`,\n    name: \"state\",\n    disabled: disabled,\n    className: css.field,\n    type: \"text\",\n    autoComplete: \"billing address-level1\",\n    label: stateLabel,\n    placeholder: statePlaceholder,\n    onUnmount: () => form.change('state', undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FieldSelect, {\n    id: `${fieldId}.country`,\n    name: \"country\",\n    disabled: disabled,\n    className: css.field,\n    label: countryLabel,\n    validate: countryRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, countryPlaceholder), countryCodes.map(country => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: country.code,\n      value: country.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, country.name);\n  }))));\n};\n\n_c = StripePaymentAddress;\nStripePaymentAddress.defaultProps = {\n  country: null,\n  disabled: false,\n  fieldId: null\n};\nStripePaymentAddress.propTypes = {\n  country: string,\n  disabled: bool,\n  form: object.isRequired,\n  fieldId: string,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default StripePaymentAddress;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripePaymentAddress\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/StripePaymentAddress/StripePaymentAddress.js"],"names":["React","intlShape","bool","object","string","config","validators","getCountryCodes","FieldTextInput","FieldSelect","css","StripePaymentAddress","props","className","intl","disabled","form","fieldId","card","optionalText","formatMessage","id","addressLine1Label","addressLine1Placeholder","addressLine1Required","required","addressLine2Label","addressLine2Placeholder","postalCodeLabel","postalCodePlaceholder","postalCodeRequired","cityLabel","cityPlaceholder","cityRequired","stateLabel","statePlaceholder","countryLabel","countryPlaceholder","countryRequired","handleOnChange","event","value","target","change","update","postalCode","countryCodes","locale","root","formRow","field","undefined","map","country","code","name","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { intlShape } from '../../util/reactIntl';\r\nimport { bool, object, string } from 'prop-types';\r\nimport config from '../../config';\r\nimport * as validators from '../../util/validators';\r\nimport getCountryCodes from '../../translations/countryCodes';\r\nimport { FieldTextInput, FieldSelect } from '../../components';\r\n\r\nimport css from './StripePaymentAddress.module.css';\r\n\r\nconst StripePaymentAddress = props => {\r\n  const { className, intl, disabled, form, fieldId, card } = props;\r\n\r\n  const optionalText = intl.formatMessage({\r\n    id: 'StripePaymentAddress.optionalText',\r\n  });\r\n\r\n  const addressLine1Label = intl.formatMessage({\r\n    id: 'StripePaymentAddress.addressLine1Label',\r\n  });\r\n  const addressLine1Placeholder = intl.formatMessage({\r\n    id: 'StripePaymentAddress.addressLine1Placeholder',\r\n  });\r\n  const addressLine1Required = validators.required(\r\n    intl.formatMessage({\r\n      id: 'StripePaymentAddress.addressLine1Required',\r\n    })\r\n  );\r\n\r\n  const addressLine2Label = intl.formatMessage(\r\n    { id: 'StripePaymentAddress.addressLine2Label' },\r\n    { optionalText: optionalText }\r\n  );\r\n\r\n  const addressLine2Placeholder = intl.formatMessage({\r\n    id: 'StripePaymentAddress.addressLine2Placeholder',\r\n  });\r\n\r\n  const postalCodeLabel = intl.formatMessage({ id: 'StripePaymentAddress.postalCodeLabel' });\r\n  const postalCodePlaceholder = intl.formatMessage({\r\n    id: 'StripePaymentAddress.postalCodePlaceholder',\r\n  });\r\n  const postalCodeRequired = validators.required(\r\n    intl.formatMessage({\r\n      id: 'StripePaymentAddress.postalCodeRequired',\r\n    })\r\n  );\r\n\r\n  const cityLabel = intl.formatMessage({ id: 'StripePaymentAddress.cityLabel' });\r\n  const cityPlaceholder = intl.formatMessage({ id: 'StripePaymentAddress.cityPlaceholder' });\r\n  const cityRequired = validators.required(\r\n    intl.formatMessage({\r\n      id: 'StripePaymentAddress.cityRequired',\r\n    })\r\n  );\r\n\r\n  const stateLabel = intl.formatMessage(\r\n    { id: 'StripePaymentAddress.stateLabel' },\r\n    { optionalText: optionalText }\r\n  );\r\n  const statePlaceholder = intl.formatMessage({ id: 'StripePaymentAddress.statePlaceholder' });\r\n\r\n  const countryLabel = intl.formatMessage({ id: 'StripePaymentAddress.countryLabel' });\r\n  const countryPlaceholder = intl.formatMessage({ id: 'StripePaymentAddress.countryPlaceholder' });\r\n  const countryRequired = validators.required(\r\n    intl.formatMessage({\r\n      id: 'StripePaymentAddress.countryRequired',\r\n    })\r\n  );\r\n\r\n  const handleOnChange = event => {\r\n    const value = event.target.value;\r\n    form.change('postal', value);\r\n    card.update({ value: { postalCode: value } });\r\n  };\r\n\r\n  // Use tha language set in config.locale to get the correct translations of the country names\r\n  const countryCodes = getCountryCodes(config.locale);\r\n\r\n  return (\r\n    <div className={className ? className : css.root}>\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.addressLine1`}\r\n          name=\"addressLine1\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"billing address-line1\"\r\n          label={addressLine1Label}\r\n          placeholder={addressLine1Placeholder}\r\n          validate={addressLine1Required}\r\n          onUnmount={() => form.change('addressLine1', undefined)}\r\n        />\r\n\r\n        <FieldTextInput\r\n          id={`${fieldId}.addressLine2`}\r\n          name=\"addressLine2\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"billing address-line2\"\r\n          label={addressLine2Label}\r\n          placeholder={addressLine2Placeholder}\r\n          onUnmount={() => form.change('addressLine2', undefined)}\r\n        />\r\n      </div>\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.postalCode`}\r\n          name=\"postal\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"billing postal-code\"\r\n          label={postalCodeLabel}\r\n          placeholder={postalCodePlaceholder}\r\n          validate={postalCodeRequired}\r\n          onUnmount={() => form.change('postal', undefined)}\r\n          onChange={event => handleOnChange(event)}\r\n        />\r\n\r\n        <FieldTextInput\r\n          id={`${fieldId}.city`}\r\n          name=\"city\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"billing address-level2\"\r\n          label={cityLabel}\r\n          placeholder={cityPlaceholder}\r\n          validate={cityRequired}\r\n          onUnmount={() => form.change('city', undefined)}\r\n        />\r\n      </div>\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.state`}\r\n          name=\"state\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"billing address-level1\"\r\n          label={stateLabel}\r\n          placeholder={statePlaceholder}\r\n          onUnmount={() => form.change('state', undefined)}\r\n        />\r\n\r\n        <FieldSelect\r\n          id={`${fieldId}.country`}\r\n          name=\"country\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          label={countryLabel}\r\n          validate={countryRequired}\r\n        >\r\n          <option disabled value=\"\">\r\n            {countryPlaceholder}\r\n          </option>\r\n          {countryCodes.map(country => {\r\n            return (\r\n              <option key={country.code} value={country.code}>\r\n                {country.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </FieldSelect>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStripePaymentAddress.defaultProps = {\r\n  country: null,\r\n  disabled: false,\r\n  fieldId: null,\r\n};\r\n\r\nStripePaymentAddress.propTypes = {\r\n  country: string,\r\n  disabled: bool,\r\n  form: object.isRequired,\r\n  fieldId: string,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default StripePaymentAddress;\r\n"]},"metadata":{},"sourceType":"module"}