{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Map\\\\DynamicGoogleMap.js\";\nimport React, { Component } from 'react';\nimport { number, object, shape, string } from 'prop-types';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\n/**\r\n * DynamicGoogleMap uses Google Maps API.\r\n */\n\nclass DynamicGoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.map = null;\n    this.mapContainer = null;\n    this.initializeMap = this.initializeMap.bind(this);\n  }\n\n  componentDidMount(prevProps) {\n    if (!this.map && this.mapContainer) {\n      this.initializeMap();\n    }\n  }\n\n  initializeMap() {\n    const {\n      offsetHeight,\n      offsetWidth\n    } = this.mapContainer;\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\n\n    if (hasDimensions) {\n      const {\n        center,\n        zoom,\n        address,\n        mapsConfig\n      } = this.props;\n      const {\n        enabled,\n        url,\n        anchorX,\n        anchorY,\n        width,\n        height\n      } = mapsConfig.customMarker;\n      const maps = window.google.maps;\n      const controlPosition = window.google.maps.ControlPosition.LEFT_TOP;\n      const mapConfig = {\n        center,\n        zoom,\n        // Disable all controls except zoom\n        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\n        // Disable map type (ie. Satellite etc.)\n        mapTypeControl: false,\n        // Disable zooming by scrolling\n        scrollwheel: false,\n        // Fullscreen control toggle\n        fullscreenControl: false,\n        // Street View control\n        streetViewControl: false,\n        // Zoom control position\n        zoomControlOptions: {\n          position: controlPosition\n        }\n      };\n      this.map = new maps.Map(this.mapContainer, mapConfig);\n\n      if (mapsConfig.fuzzy.enabled) {\n        const GoogleLatLng = window.google.maps.LatLng; // Origin as object literal (LatLngLiteral)\n\n        const origin = {\n          lat: center.lat,\n          lng: center.lng\n        };\n        const radius = mapsConfig.fuzzy.offset;\n        const path = circlePolyline(origin, radius).map(c => new GoogleLatLng(c[0], c[1]));\n        const circleProps = {\n          options: {\n            fillColor: mapsConfig.fuzzy.circleColor,\n            fillOpacity: 0.2,\n            strokeColor: mapsConfig.fuzzy.circleColor,\n            strokeOpacity: 0.5,\n            strokeWeight: 1,\n            clickable: false\n          },\n          path,\n          map: this.map\n        }; // Add a circle. We use Polygon because the default Circle class is not round enough.\n\n        const Polygon = window.google.maps.Polygon;\n        new Polygon(circleProps);\n      } else {\n        const markerIcon = enabled ? {\n          icon: {\n            url,\n            // The origin for this image is (0, 0).\n            origin: new window.google.maps.Point(0, 0),\n            size: new window.google.maps.Size(width, height),\n            anchor: new window.google.maps.Point(anchorX, anchorY)\n          }\n        } : {};\n        new window.google.maps.Marker({\n          position: center,\n          map: this.map,\n          title: address,\n          ...markerIcon\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      containerClassName,\n      mapClassName\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: containerClassName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: mapClassName,\n      ref: el => this.mapContainer = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nDynamicGoogleMap.defaultProps = {\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps\n};\nDynamicGoogleMap.propTypes = {\n  address: string,\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object\n};\nexport default DynamicGoogleMap;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Map/DynamicGoogleMap.js"],"names":["React","Component","number","object","shape","string","circlePolyline","config","DynamicGoogleMap","constructor","props","map","mapContainer","initializeMap","bind","componentDidMount","prevProps","offsetHeight","offsetWidth","hasDimensions","center","zoom","address","mapsConfig","enabled","url","anchorX","anchorY","width","height","customMarker","maps","window","google","controlPosition","ControlPosition","LEFT_TOP","mapConfig","mapTypeControl","scrollwheel","fullscreenControl","streetViewControl","zoomControlOptions","position","Map","fuzzy","GoogleLatLng","LatLng","origin","lat","lng","radius","offset","path","c","circleProps","options","fillColor","circleColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","clickable","Polygon","markerIcon","icon","Point","size","Size","anchor","Marker","title","render","containerClassName","mapClassName","el","defaultProps","defaultZoomLevel","propTypes","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,MAAhC,QAA8C,YAA9C;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA;AACA;AACA;;AACA,MAAMC,gBAAN,SAA+BP,SAA/B,CAAyC;AACvCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,GAAL,GAAW,IAAX;AACA,SAAKC,YAAL,GAAoB,IAApB;AAEA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC3B,QAAI,CAAC,KAAKL,GAAN,IAAa,KAAKC,YAAtB,EAAoC;AAClC,WAAKC,aAAL;AACD;AACF;;AAEDA,EAAAA,aAAa,GAAG;AACd,UAAM;AAAEI,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAgC,KAAKN,YAA3C;AACA,UAAMO,aAAa,GAAGF,YAAY,GAAG,CAAf,IAAoBC,WAAW,GAAG,CAAxD;;AAEA,QAAIC,aAAJ,EAAmB;AACjB,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA;AAAzB,UAAwC,KAAKb,KAAnD;AACA,YAAM;AAAEc,QAAAA,OAAF;AAAWC,QAAAA,GAAX;AAAgBC,QAAAA,OAAhB;AAAyBC,QAAAA,OAAzB;AAAkCC,QAAAA,KAAlC;AAAyCC,QAAAA;AAAzC,UAAoDN,UAAU,CAACO,YAArE;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcF,IAA3B;AACA,YAAMG,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBI,eAAnB,CAAmCC,QAA3D;AAEA,YAAMC,SAAS,GAAG;AAChBjB,QAAAA,MADgB;AAEhBC,QAAAA,IAFgB;AAGhB;AACA;AAEA;AACAiB,QAAAA,cAAc,EAAE,KAPA;AAQhB;AACAC,QAAAA,WAAW,EAAE,KATG;AAUhB;AACAC,QAAAA,iBAAiB,EAAE,KAXH;AAYhB;AACAC,QAAAA,iBAAiB,EAAE,KAbH;AAchB;AACAC,QAAAA,kBAAkB,EAAE;AAClBC,UAAAA,QAAQ,EAAET;AADQ;AAfJ,OAAlB;AAoBA,WAAKvB,GAAL,GAAW,IAAIoB,IAAI,CAACa,GAAT,CAAa,KAAKhC,YAAlB,EAAgCyB,SAAhC,CAAX;;AAEA,UAAId,UAAU,CAACsB,KAAX,CAAiBrB,OAArB,EAA8B;AAC5B,cAAMsB,YAAY,GAAGd,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBgB,MAAxC,CAD4B,CAE5B;;AACA,cAAMC,MAAM,GAAG;AAAEC,UAAAA,GAAG,EAAE7B,MAAM,CAAC6B,GAAd;AAAmBC,UAAAA,GAAG,EAAE9B,MAAM,CAAC8B;AAA/B,SAAf;AACA,cAAMC,MAAM,GAAG5B,UAAU,CAACsB,KAAX,CAAiBO,MAAhC;AACA,cAAMC,IAAI,GAAG/C,cAAc,CAAC0C,MAAD,EAASG,MAAT,CAAd,CAA+BxC,GAA/B,CAAmC2C,CAAC,IAAI,IAAIR,YAAJ,CAAiBQ,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB,CAAxC,CAAb;AAEA,cAAMC,WAAW,GAAG;AAClBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,SAAS,EAAElC,UAAU,CAACsB,KAAX,CAAiBa,WADrB;AAEPC,YAAAA,WAAW,EAAE,GAFN;AAGPC,YAAAA,WAAW,EAAErC,UAAU,CAACsB,KAAX,CAAiBa,WAHvB;AAIPG,YAAAA,aAAa,EAAE,GAJR;AAKPC,YAAAA,YAAY,EAAE,CALP;AAMPC,YAAAA,SAAS,EAAE;AANJ,WADS;AASlBV,UAAAA,IATkB;AAUlB1C,UAAAA,GAAG,EAAE,KAAKA;AAVQ,SAApB,CAP4B,CAoB5B;;AACA,cAAMqD,OAAO,GAAGhC,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBiC,OAAnC;AACA,YAAIA,OAAJ,CAAYT,WAAZ;AACD,OAvBD,MAuBO;AACL,cAAMU,UAAU,GAAGzC,OAAO,GACtB;AACE0C,UAAAA,IAAI,EAAE;AACJzC,YAAAA,GADI;AAGJ;AACAuB,YAAAA,MAAM,EAAE,IAAIhB,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBoC,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAJJ;AAKJC,YAAAA,IAAI,EAAE,IAAIpC,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBsC,IAAvB,CAA4BzC,KAA5B,EAAmCC,MAAnC,CALF;AAMJyC,YAAAA,MAAM,EAAE,IAAItC,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBoC,KAAvB,CAA6BzC,OAA7B,EAAsCC,OAAtC;AANJ;AADR,SADsB,GAWtB,EAXJ;AAaA,YAAIK,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAmBwC,MAAvB,CAA8B;AAC5B5B,UAAAA,QAAQ,EAAEvB,MADkB;AAE5BT,UAAAA,GAAG,EAAE,KAAKA,GAFkB;AAG5B6D,UAAAA,KAAK,EAAElD,OAHqB;AAI5B,aAAG2C;AAJyB,SAA9B;AAMD;AACF;AACF;;AAEDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAAuC,KAAKjE,KAAlD;AACA,wBACE;AAAK,MAAA,SAAS,EAAEgE,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEC,YAAhB;AAA8B,MAAA,GAAG,EAAEC,EAAE,IAAK,KAAKhE,YAAL,GAAoBgE,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AArGsC;;AAwGzCpE,gBAAgB,CAACqE,YAAjB,GAAgC;AAC9BvD,EAAAA,OAAO,EAAE,EADqB;AAE9BF,EAAAA,MAAM,EAAE,IAFsB;AAG9BC,EAAAA,IAAI,EAAEd,MAAM,CAACwB,IAAP,CAAYc,KAAZ,CAAkBrB,OAAlB,GAA4BjB,MAAM,CAACwB,IAAP,CAAYc,KAAZ,CAAkBiC,gBAA9C,GAAiE,EAHzC;AAI9BvD,EAAAA,UAAU,EAAEhB,MAAM,CAACwB;AAJW,CAAhC;AAOAvB,gBAAgB,CAACuE,SAAjB,GAA6B;AAC3BzD,EAAAA,OAAO,EAAEjB,MADkB;AAE3Be,EAAAA,MAAM,EAAEhB,KAAK,CAAC;AACZ6C,IAAAA,GAAG,EAAE/C,MAAM,CAAC8E,UADA;AAEZ9B,IAAAA,GAAG,EAAEhD,MAAM,CAAC8E;AAFA,GAAD,CAAL,CAGLA,UALwB;AAM3B3D,EAAAA,IAAI,EAAEnB,MANqB;AAO3BqB,EAAAA,UAAU,EAAEpB;AAPe,CAA7B;AAUA,eAAeK,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { number, object, shape, string } from 'prop-types';\r\nimport { circlePolyline } from '../../util/maps';\r\nimport config from '../../config';\r\n\r\n/**\r\n * DynamicGoogleMap uses Google Maps API.\r\n */\r\nclass DynamicGoogleMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = null;\r\n    this.mapContainer = null;\r\n\r\n    this.initializeMap = this.initializeMap.bind(this);\r\n  }\r\n\r\n  componentDidMount(prevProps) {\r\n    if (!this.map && this.mapContainer) {\r\n      this.initializeMap();\r\n    }\r\n  }\r\n\r\n  initializeMap() {\r\n    const { offsetHeight, offsetWidth } = this.mapContainer;\r\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\r\n\r\n    if (hasDimensions) {\r\n      const { center, zoom, address, mapsConfig } = this.props;\r\n      const { enabled, url, anchorX, anchorY, width, height } = mapsConfig.customMarker;\r\n      const maps = window.google.maps;\r\n      const controlPosition = window.google.maps.ControlPosition.LEFT_TOP;\r\n\r\n      const mapConfig = {\r\n        center,\r\n        zoom,\r\n        // Disable all controls except zoom\r\n        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\r\n\r\n        // Disable map type (ie. Satellite etc.)\r\n        mapTypeControl: false,\r\n        // Disable zooming by scrolling\r\n        scrollwheel: false,\r\n        // Fullscreen control toggle\r\n        fullscreenControl: false,\r\n        // Street View control\r\n        streetViewControl: false,\r\n        // Zoom control position\r\n        zoomControlOptions: {\r\n          position: controlPosition,\r\n        },\r\n      };\r\n\r\n      this.map = new maps.Map(this.mapContainer, mapConfig);\r\n\r\n      if (mapsConfig.fuzzy.enabled) {\r\n        const GoogleLatLng = window.google.maps.LatLng;\r\n        // Origin as object literal (LatLngLiteral)\r\n        const origin = { lat: center.lat, lng: center.lng };\r\n        const radius = mapsConfig.fuzzy.offset;\r\n        const path = circlePolyline(origin, radius).map(c => new GoogleLatLng(c[0], c[1]));\r\n\r\n        const circleProps = {\r\n          options: {\r\n            fillColor: mapsConfig.fuzzy.circleColor,\r\n            fillOpacity: 0.2,\r\n            strokeColor: mapsConfig.fuzzy.circleColor,\r\n            strokeOpacity: 0.5,\r\n            strokeWeight: 1,\r\n            clickable: false,\r\n          },\r\n          path,\r\n          map: this.map,\r\n        };\r\n\r\n        // Add a circle. We use Polygon because the default Circle class is not round enough.\r\n        const Polygon = window.google.maps.Polygon;\r\n        new Polygon(circleProps);\r\n      } else {\r\n        const markerIcon = enabled\r\n          ? {\r\n              icon: {\r\n                url,\r\n\r\n                // The origin for this image is (0, 0).\r\n                origin: new window.google.maps.Point(0, 0),\r\n                size: new window.google.maps.Size(width, height),\r\n                anchor: new window.google.maps.Point(anchorX, anchorY),\r\n              },\r\n            }\r\n          : {};\r\n\r\n        new window.google.maps.Marker({\r\n          position: center,\r\n          map: this.map,\r\n          title: address,\r\n          ...markerIcon,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { containerClassName, mapClassName } = this.props;\r\n    return (\r\n      <div className={containerClassName}>\r\n        <div className={mapClassName} ref={el => (this.mapContainer = el)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDynamicGoogleMap.defaultProps = {\r\n  address: '',\r\n  center: null,\r\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\r\n  mapsConfig: config.maps,\r\n};\r\n\r\nDynamicGoogleMap.propTypes = {\r\n  address: string,\r\n  center: shape({\r\n    lat: number.isRequired,\r\n    lng: number.isRequired,\r\n  }).isRequired,\r\n  zoom: number,\r\n  mapsConfig: object,\r\n};\r\n\r\nexport default DynamicGoogleMap;\r\n"]},"metadata":{},"sourceType":"module"}