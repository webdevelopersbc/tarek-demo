{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\PaymentMethodsPage\\\\PaymentMethodsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { bool, func, object } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { ensureCurrentUser, ensureStripeCustomer, ensurePaymentMethodCard } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { savePaymentMethod, deletePaymentMethod } from '../../ducks/paymentMethods.duck';\nimport { handleCardSetup } from '../../ducks/stripe.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { SavedCardDetails, LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperAccountSettingsSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, Page, UserNav } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport PaymentMethodsForm from './PaymentMethodsForm/PaymentMethodsForm';\nimport { createStripeSetupIntent, stripeCustomer } from './PaymentMethodsPage.duck.js';\nimport css from './PaymentMethodsPage.module.css';\n\nconst PaymentMethodsPageComponent = props => {\n  _s();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [cardState, setCardState] = useState(null);\n  const {\n    currentUser,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError,\n    handleCardSetupError,\n    deletePaymentMethodInProgress,\n    onCreateSetupIntent,\n    onHandleCardSetup,\n    onSavePaymentMethod,\n    onDeletePaymentMethod,\n    fetchStripeCustomer,\n    scrollingDisabled,\n    onManageDisableScrolling,\n    intl,\n    stripeCustomerFetched\n  } = props;\n\n  const getClientSecret = setupIntent => {\n    return setupIntent && setupIntent.attributes ? setupIntent.attributes.clientSecret : null;\n  };\n\n  const getPaymentParams = (currentUser, formValues) => {\n    const {\n      name,\n      addressLine1,\n      addressLine2,\n      postal,\n      state,\n      city,\n      country\n    } = formValues;\n    const addressMaybe = addressLine1 && postal ? {\n      address: {\n        city: city,\n        country: country,\n        line1: addressLine1,\n        line2: addressLine2,\n        postal_code: postal,\n        state: state\n      }\n    } : {};\n    const billingDetails = {\n      name,\n      email: ensureCurrentUser(currentUser).attributes.email,\n      ...addressMaybe\n    };\n    const paymentParams = {\n      payment_method_data: {\n        billing_details: billingDetails\n      }\n    };\n    return paymentParams;\n  };\n\n  const handleSubmit = params => {\n    setIsSubmitting(true);\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\n    const stripeCustomer = ensuredCurrentUser.stripeCustomer;\n    const {\n      stripe,\n      card,\n      formValues\n    } = params;\n    onCreateSetupIntent().then(setupIntent => {\n      const stripeParams = {\n        stripe,\n        card,\n        setupIntentClientSecret: getClientSecret(setupIntent),\n        paymentParams: getPaymentParams(currentUser, formValues)\n      };\n      return onHandleCardSetup(stripeParams);\n    }).then(result => {\n      const newPaymentMethod = result.setupIntent.payment_method; // Note: stripe.handleCardSetup might return an error inside successful call (200), but those are rejected in thunk functions.\n\n      return onSavePaymentMethod(stripeCustomer, newPaymentMethod);\n    }).then(() => {\n      // Update currentUser entity and its sub entities: stripeCustomer and defaultPaymentMethod\n      fetchStripeCustomer();\n      setIsSubmitting(false);\n      setCardState('default');\n    }).catch(error => {\n      console.error(error);\n      setIsSubmitting(false);\n    });\n  };\n\n  const handleRemovePaymentMethod = () => {\n    onDeletePaymentMethod().then(() => {\n      fetchStripeCustomer();\n    });\n  };\n\n  const title = intl.formatMessage({\n    id: 'PaymentMethodsPage.title'\n  });\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const hasDefaultPaymentMethod = currentUser && ensureStripeCustomer(currentUser.stripeCustomer).attributes.stripeCustomerId && ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).id; // Get first and last name of the current user and use it in the StripePaymentForm to autofill the name field\n\n  const userName = currentUserLoaded ? `${ensuredCurrentUser.attributes.profile.firstName} ${ensuredCurrentUser.attributes.profile.lastName}` : null;\n  const initalValuesForStripePayment = {\n    name: userName\n  };\n  const card = hasDefaultPaymentMethod ? ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).attributes.card : null;\n  const showForm = cardState === 'replaceCard' || !hasDefaultPaymentMethod;\n  const showCardDetails = !!hasDefaultPaymentMethod;\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSideNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    currentPage: \"PaymentMethodsPage\",\n    desktopClassName: css.desktopTopbar,\n    mobileClassName: css.mobileTopbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(UserNav, {\n    selectedPageName: \"PaymentMethodsPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperAccountSettingsSideNav, {\n    currentTab: \"PaymentMethodsPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"PaymentMethodsPage.heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  })), !stripeCustomerFetched ? null : /*#__PURE__*/React.createElement(React.Fragment, null, showCardDetails ? /*#__PURE__*/React.createElement(SavedCardDetails, {\n    card: card,\n    onManageDisableScrolling: onManageDisableScrolling,\n    onChange: setCardState,\n    onDeleteCard: handleRemovePaymentMethod,\n    deletePaymentMethodInProgress: deletePaymentMethodInProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }) : null, showForm ? /*#__PURE__*/React.createElement(PaymentMethodsForm, {\n    className: css.paymentForm,\n    formId: \"PaymentMethodsForm\",\n    initialValues: initalValuesForStripePayment,\n    onSubmit: handleSubmit,\n    handleRemovePaymentMethod: handleRemovePaymentMethod,\n    hasDefaultPaymentMethod: hasDefaultPaymentMethod,\n    addPaymentMethodError: addPaymentMethodError,\n    deletePaymentMethodError: deletePaymentMethodError,\n    createStripeCustomerError: createStripeCustomerError,\n    handleCardSetupError: handleCardSetupError,\n    inProgress: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }\n  }) : null))), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(PaymentMethodsPageComponent, \"H9kWWQhPbZxQYeNYUbUcHX1myJ8=\");\n\n_c = PaymentMethodsPageComponent;\nPaymentMethodsPageComponent.defaultProps = {\n  currentUser: null,\n  addPaymentMethodError: null,\n  deletePaymentMethodError: null,\n  createStripeCustomerError: null,\n  handleCardSetupError: null\n};\nPaymentMethodsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  addPaymentMethodError: object,\n  deletePaymentMethodError: object,\n  createStripeCustomerError: object,\n  handleCardSetupError: object,\n  onCreateSetupIntent: func.isRequired,\n  onHandleCardSetup: func.isRequired,\n  onSavePaymentMethod: func.isRequired,\n  onDeletePaymentMethod: func.isRequired,\n  fetchStripeCustomer: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentUser\n  } = state.user;\n  const {\n    deletePaymentMethodInProgress,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError\n  } = state.paymentMethods;\n  const {\n    stripeCustomerFetched\n  } = state.PaymentMethodsPage;\n  const {\n    handleCardSetupError\n  } = state.stripe;\n  return {\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state),\n    deletePaymentMethodInProgress,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError,\n    handleCardSetupError,\n    stripeCustomerFetched\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  fetchStripeCustomer: () => dispatch(stripeCustomer()),\n  onHandleCardSetup: params => dispatch(handleCardSetup(params)),\n  onCreateSetupIntent: params => dispatch(createStripeSetupIntent(params)),\n  onSavePaymentMethod: (stripeCustomer, newPaymentMethod) => dispatch(savePaymentMethod(stripeCustomer, newPaymentMethod)),\n  onDeletePaymentMethod: params => dispatch(deletePaymentMethod(params))\n});\n\nconst PaymentMethodsPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(PaymentMethodsPageComponent);\nexport default PaymentMethodsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentMethodsPageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/PaymentMethodsPage/PaymentMethodsPage.js"],"names":["React","useState","bool","func","object","compose","connect","FormattedMessage","injectIntl","intlShape","ensureCurrentUser","ensureStripeCustomer","ensurePaymentMethodCard","propTypes","savePaymentMethod","deletePaymentMethod","handleCardSetup","manageDisableScrolling","isScrollingDisabled","SavedCardDetails","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperAccountSettingsSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","Page","UserNav","TopbarContainer","PaymentMethodsForm","createStripeSetupIntent","stripeCustomer","css","PaymentMethodsPageComponent","props","isSubmitting","setIsSubmitting","cardState","setCardState","currentUser","addPaymentMethodError","deletePaymentMethodError","createStripeCustomerError","handleCardSetupError","deletePaymentMethodInProgress","onCreateSetupIntent","onHandleCardSetup","onSavePaymentMethod","onDeletePaymentMethod","fetchStripeCustomer","scrollingDisabled","onManageDisableScrolling","intl","stripeCustomerFetched","getClientSecret","setupIntent","attributes","clientSecret","getPaymentParams","formValues","name","addressLine1","addressLine2","postal","state","city","country","addressMaybe","address","line1","line2","postal_code","billingDetails","email","paymentParams","payment_method_data","billing_details","handleSubmit","params","ensuredCurrentUser","stripe","card","then","stripeParams","setupIntentClientSecret","result","newPaymentMethod","payment_method","catch","error","console","handleRemovePaymentMethod","title","formatMessage","id","currentUserLoaded","hasDefaultPaymentMethod","stripeCustomerId","defaultPaymentMethod","userName","profile","firstName","lastName","initalValuesForStripePayment","showForm","showCardDetails","desktopTopbar","mobileTopbar","content","paymentForm","defaultProps","isRequired","mapStateToProps","user","paymentMethods","PaymentMethodsPage","mapDispatchToProps","dispatch","componentId","disableScrolling"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { bool, func, object } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { ensureCurrentUser, ensureStripeCustomer, ensurePaymentMethodCard } from '../../util/data';\r\nimport { propTypes } from '../../util/types';\r\nimport { savePaymentMethod, deletePaymentMethod } from '../../ducks/paymentMethods.duck';\r\nimport { handleCardSetup } from '../../ducks/stripe.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport {\r\n  SavedCardDetails,\r\n  LayoutSideNavigation,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperAccountSettingsSideNav,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  Page,\r\n  UserNav,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport PaymentMethodsForm from './PaymentMethodsForm/PaymentMethodsForm';\r\n\r\nimport { createStripeSetupIntent, stripeCustomer } from './PaymentMethodsPage.duck.js';\r\n\r\nimport css from './PaymentMethodsPage.module.css';\r\n\r\nconst PaymentMethodsPageComponent = props => {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [cardState, setCardState] = useState(null);\r\n\r\n  const {\r\n    currentUser,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n    handleCardSetupError,\r\n    deletePaymentMethodInProgress,\r\n    onCreateSetupIntent,\r\n    onHandleCardSetup,\r\n    onSavePaymentMethod,\r\n    onDeletePaymentMethod,\r\n    fetchStripeCustomer,\r\n    scrollingDisabled,\r\n    onManageDisableScrolling,\r\n    intl,\r\n    stripeCustomerFetched,\r\n  } = props;\r\n\r\n  const getClientSecret = setupIntent => {\r\n    return setupIntent && setupIntent.attributes ? setupIntent.attributes.clientSecret : null;\r\n  };\r\n  const getPaymentParams = (currentUser, formValues) => {\r\n    const { name, addressLine1, addressLine2, postal, state, city, country } = formValues;\r\n    const addressMaybe =\r\n      addressLine1 && postal\r\n        ? {\r\n            address: {\r\n              city: city,\r\n              country: country,\r\n              line1: addressLine1,\r\n              line2: addressLine2,\r\n              postal_code: postal,\r\n              state: state,\r\n            },\r\n          }\r\n        : {};\r\n    const billingDetails = {\r\n      name,\r\n      email: ensureCurrentUser(currentUser).attributes.email,\r\n      ...addressMaybe,\r\n    };\r\n\r\n    const paymentParams = {\r\n      payment_method_data: {\r\n        billing_details: billingDetails,\r\n      },\r\n    };\r\n\r\n    return paymentParams;\r\n  };\r\n\r\n  const handleSubmit = params => {\r\n    setIsSubmitting(true);\r\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n    const stripeCustomer = ensuredCurrentUser.stripeCustomer;\r\n    const { stripe, card, formValues } = params;\r\n\r\n    onCreateSetupIntent()\r\n      .then(setupIntent => {\r\n        const stripeParams = {\r\n          stripe,\r\n          card,\r\n          setupIntentClientSecret: getClientSecret(setupIntent),\r\n          paymentParams: getPaymentParams(currentUser, formValues),\r\n        };\r\n\r\n        return onHandleCardSetup(stripeParams);\r\n      })\r\n      .then(result => {\r\n        const newPaymentMethod = result.setupIntent.payment_method;\r\n        // Note: stripe.handleCardSetup might return an error inside successful call (200), but those are rejected in thunk functions.\r\n\r\n        return onSavePaymentMethod(stripeCustomer, newPaymentMethod);\r\n      })\r\n      .then(() => {\r\n        // Update currentUser entity and its sub entities: stripeCustomer and defaultPaymentMethod\r\n        fetchStripeCustomer();\r\n        setIsSubmitting(false);\r\n        setCardState('default');\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        setIsSubmitting(false);\r\n      });\r\n  };\r\n\r\n  const handleRemovePaymentMethod = () => {\r\n    onDeletePaymentMethod().then(() => {\r\n      fetchStripeCustomer();\r\n    });\r\n  };\r\n\r\n  const title = intl.formatMessage({ id: 'PaymentMethodsPage.title' });\r\n\r\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n  const currentUserLoaded = !!ensuredCurrentUser.id;\r\n\r\n  const hasDefaultPaymentMethod =\r\n    currentUser &&\r\n    ensureStripeCustomer(currentUser.stripeCustomer).attributes.stripeCustomerId &&\r\n    ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).id;\r\n\r\n  // Get first and last name of the current user and use it in the StripePaymentForm to autofill the name field\r\n  const userName = currentUserLoaded\r\n    ? `${ensuredCurrentUser.attributes.profile.firstName} ${ensuredCurrentUser.attributes.profile.lastName}`\r\n    : null;\r\n\r\n  const initalValuesForStripePayment = { name: userName };\r\n\r\n  const card = hasDefaultPaymentMethod\r\n    ? ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).attributes.card\r\n    : null;\r\n\r\n  const showForm = cardState === 'replaceCard' || !hasDefaultPaymentMethod;\r\n  const showCardDetails = !!hasDefaultPaymentMethod;\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation>\r\n        <LayoutWrapperTopbar>\r\n          <TopbarContainer\r\n            currentPage=\"PaymentMethodsPage\"\r\n            desktopClassName={css.desktopTopbar}\r\n            mobileClassName={css.mobileTopbar}\r\n          />\r\n          <UserNav selectedPageName=\"PaymentMethodsPage\" />\r\n        </LayoutWrapperTopbar>\r\n        <LayoutWrapperAccountSettingsSideNav currentTab=\"PaymentMethodsPage\" />\r\n        <LayoutWrapperMain>\r\n          <div className={css.content}>\r\n            <h1 className={css.title}>\r\n              <FormattedMessage id=\"PaymentMethodsPage.heading\" />\r\n            </h1>\r\n            {!stripeCustomerFetched ? null : (\r\n              <>\r\n                {showCardDetails ? (\r\n                  <SavedCardDetails\r\n                    card={card}\r\n                    onManageDisableScrolling={onManageDisableScrolling}\r\n                    onChange={setCardState}\r\n                    onDeleteCard={handleRemovePaymentMethod}\r\n                    deletePaymentMethodInProgress={deletePaymentMethodInProgress}\r\n                  />\r\n                ) : null}\r\n                {showForm ? (\r\n                  <PaymentMethodsForm\r\n                    className={css.paymentForm}\r\n                    formId=\"PaymentMethodsForm\"\r\n                    initialValues={initalValuesForStripePayment}\r\n                    onSubmit={handleSubmit}\r\n                    handleRemovePaymentMethod={handleRemovePaymentMethod}\r\n                    hasDefaultPaymentMethod={hasDefaultPaymentMethod}\r\n                    addPaymentMethodError={addPaymentMethodError}\r\n                    deletePaymentMethodError={deletePaymentMethodError}\r\n                    createStripeCustomerError={createStripeCustomerError}\r\n                    handleCardSetupError={handleCardSetupError}\r\n                    inProgress={isSubmitting}\r\n                  />\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </div>\r\n        </LayoutWrapperMain>\r\n        <LayoutWrapperFooter>\r\n          <Footer />\r\n        </LayoutWrapperFooter>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPaymentMethodsPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  addPaymentMethodError: null,\r\n  deletePaymentMethodError: null,\r\n  createStripeCustomerError: null,\r\n  handleCardSetupError: null,\r\n};\r\n\r\nPaymentMethodsPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  scrollingDisabled: bool.isRequired,\r\n  addPaymentMethodError: object,\r\n  deletePaymentMethodError: object,\r\n  createStripeCustomerError: object,\r\n  handleCardSetupError: object,\r\n  onCreateSetupIntent: func.isRequired,\r\n  onHandleCardSetup: func.isRequired,\r\n  onSavePaymentMethod: func.isRequired,\r\n  onDeletePaymentMethod: func.isRequired,\r\n  fetchStripeCustomer: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { currentUser } = state.user;\r\n\r\n  const {\r\n    deletePaymentMethodInProgress,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n  } = state.paymentMethods;\r\n\r\n  const { stripeCustomerFetched } = state.PaymentMethodsPage;\r\n\r\n  const { handleCardSetupError } = state.stripe;\r\n  return {\r\n    currentUser,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    deletePaymentMethodInProgress,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n    handleCardSetupError,\r\n    stripeCustomerFetched,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n  fetchStripeCustomer: () => dispatch(stripeCustomer()),\r\n  onHandleCardSetup: params => dispatch(handleCardSetup(params)),\r\n  onCreateSetupIntent: params => dispatch(createStripeSetupIntent(params)),\r\n  onSavePaymentMethod: (stripeCustomer, newPaymentMethod) =>\r\n    dispatch(savePaymentMethod(stripeCustomer, newPaymentMethod)),\r\n  onDeletePaymentMethod: params => dispatch(deletePaymentMethod(params)),\r\n});\r\n\r\nconst PaymentMethodsPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PaymentMethodsPageComponent);\r\n\r\nexport default PaymentMethodsPage;\r\n"]},"metadata":{},"sourceType":"module"}