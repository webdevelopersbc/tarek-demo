{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SearchMap\\\\SearchMapWithGoogleMaps.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport invariant from 'invariant';\nimport { arrayOf, func, number, oneOfType, shape, string } from 'prop-types';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { types as sdkTypes } from '../../../util/sdkLoader';\nimport { parse } from '../../../util/urlHelpers';\nimport { propTypes } from '../../../util/types';\nimport { ensureListing } from '../../../util/data';\nimport { sdkBoundsToFixedCoordinates, hasSameSDKBounds } from '../../../util/maps';\nimport { getOffsetOverride, getLayoutStyles } from '../../../util/googleMaps';\nimport SearchMapPriceLabel from '../SearchMapPriceLabel/SearchMapPriceLabel';\nimport SearchMapInfoCard from '../SearchMapInfoCard/SearchMapInfoCard';\nimport SearchMapGroupLabel from '../SearchMapGroupLabel/SearchMapGroupLabel';\nimport { groupedByCoordinates, reducedToArray } from './SearchMap.helpers';\nimport css from './SearchMapWithGoogleMaps.module.css';\nexport const LABEL_HANDLE = 'SearchMapLabel';\nexport const INFO_CARD_HANDLE = 'SearchMapInfoCard';\nconst BOUNDS_FIXED_PRECISION = 8; // Panes on Google Maps specify the stacking order for different layers on the map.\n// https://developers.google.com/maps/documentation/javascript/customoverlays#intitialize\n//\n// Google Maps uses 5 different panes:\n// 'mapPane', 'overlayLayer', 'markerLayer', 'overlayMouseTarget', 'floatPane'\n// We only need the last 2:\n// - 'overlayMouseTarget': for the SearchMapPriceLabelWithOverlay & SearchMapGroupLabelWithOverlay.\n// - 'floatPane': to render InfoCardComponent on top of price and group labels.\n\nconst OVERLAY_MOUSE_TARGET = 'overlayMouseTarget'; // Stacking order: 4\n\nconst FLOAT_PANE = 'floatPane'; // Stacking order: 5\n\nconst {\n  LatLng: SDKLatLng,\n  LatLngBounds: SDKLatLngBounds\n} = sdkTypes;\n/**\r\n * Fit part of map (descriped with bounds) to visible map-viewport\r\n *\r\n * @param {Object} map - map that needs to be centered with given bounds\r\n * @param {SDK.LatLngBounds} bounds - the area that needs to be visible when map loads.\r\n */\n\nexport const fitMapToBounds = (map, bounds, options) => {\n  const {\n    padding\n  } = options;\n  const {\n    ne,\n    sw\n  } = bounds || {}; // map bounds as string literal for google.maps\n\n  const mapBounds = bounds ? {\n    north: ne.lat,\n    east: ne.lng,\n    south: sw.lat,\n    west: sw.lng\n  } : null; // If bounds are given, use it (defaults to center & zoom).\n\n  if (map && mapBounds) {\n    if (padding == null) {\n      map.fitBounds(mapBounds);\n    } else {\n      map.fitBounds(mapBounds, padding);\n    }\n  }\n};\n/**\r\n * Convert Google formatted LatLng object to Sharetribe SDK's LatLng coordinate format\r\n *\r\n * @param {LatLng} googleLatLng - Google Maps LatLng\r\n *\r\n * @return {SDKLatLng} - Converted latLng coordinate\r\n */\n\nexport const googleLatLngToSDKLatLng = googleLatLng => {\n  if (!googleLatLng) {\n    return null;\n  }\n\n  return new SDKLatLng(googleLatLng.lat(), googleLatLng.lng());\n};\n/**\r\n * Convert Google formatted bounds object to Sharetribe SDK's bounds format\r\n *\r\n * @param {LatLngBounds} googleBounds - Google Maps LatLngBounds\r\n *\r\n * @return {SDKLatLngBounds} - Converted bounds\r\n */\n\nexport const googleBoundsToSDKBounds = googleBounds => {\n  if (!googleBounds) {\n    return null;\n  }\n\n  const ne = googleBounds.getNorthEast();\n  const sw = googleBounds.getSouthWest();\n  return new SDKLatLngBounds(new SDKLatLng(ne.lat(), ne.lng()), new SDKLatLng(sw.lat(), sw.lng()));\n};\nexport const getMapBounds = map => googleBoundsToSDKBounds(map.getBounds());\nexport const getMapCenter = map => googleLatLngToSDKLatLng(map.getCenter());\n/**\r\n * Check if map library is loaded\r\n */\n\nexport const isMapsLibLoaded = () => typeof window !== 'undefined' && window.google && window.google.maps;\n/**\r\n * To render HTML on top of Google Maps, we need use OverlayView.\r\n * Note: we don't extend the OverlayView directly, because then\r\n * the class should be defined inside initializeMap function.\r\n */\n\nclass CustomOverlayView extends Component {\n  constructor(props, context) {\n    super(props, context);\n    const overlayView = new window.google.maps.OverlayView();\n    overlayView.onAdd = this.onAdd.bind(this);\n    overlayView.draw = this.draw.bind(this);\n    overlayView.onRemove = this.onRemove.bind(this);\n    this.onPositionElement = this.onPositionElement.bind(this); // You must call setMap() with a valid Map object to trigger the call to\n    // the onAdd() method and setMap(null) in order to trigger the onRemove() method.\n\n    overlayView.setMap(props.map);\n    this.state = {\n      overlayView\n    };\n  }\n\n  onRemove() {\n    this.containerElement.parentNode.removeChild(this.containerElement); //Remove `unmountComponentAtNode` for react version 16\n    //I decided to keep the code here incase React decides not to give out warning when `unmountComponentAtNode` in newer version\n\n    if (!React.version.match(/^16/)) {\n      ReactDOM.unmountComponentAtNode(this.containerElement);\n    }\n\n    this.containerElement = null;\n  }\n\n  onAdd() {\n    this.containerElement = document.createElement(`div`);\n    this.containerElement.style.position = `absolute`;\n    const {\n      mapPaneName\n    } = this.props;\n    invariant(!!mapPaneName, `OverlayView requires either props.mapPaneName or props.defaultMapPaneName but got %s`, mapPaneName);\n    const mapPanes = this.state.overlayView.getPanes();\n    mapPanes[mapPaneName].appendChild(this.containerElement);\n    this.onPositionElement();\n    this.forceUpdate();\n  }\n\n  onPositionElement() {\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapCanvasProjection\n    const mapCanvasProjection = this.state.overlayView.getProjection();\n    const offset = {\n      x: 0,\n      y: 0,\n      ...getOffsetOverride(this.containerElement, this.props)\n    };\n    const layoutStyles = getLayoutStyles(mapCanvasProjection, offset, this.props);\n    Object.assign(this.containerElement.style, layoutStyles);\n  }\n\n  draw() {\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes\n    const mapPanes = this.state.overlayView.getPanes(); // Add conditional to ensure panes and container exist before drawing\n\n    if (mapPanes && this.containerElement) {\n      this.onPositionElement();\n    }\n  }\n\n  render() {\n    if (React.version.match(/^16/) && this.containerElement) {\n      return /*#__PURE__*/ReactDOM.createPortal(React.Children.only(this.props.children), this.containerElement);\n    }\n\n    return false;\n  }\n\n}\n/**\r\n * Center label so that caret is pointing to correct pixel.\r\n * (vertical positioning: height + arrow)\r\n */\n\n\nconst getPixelPositionOffset = (width, height) => {\n  return {\n    x: -1 * (width / 2),\n    y: -1 * (height + 3)\n  };\n};\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\n\n\nclass SearchMapPriceLabelWithOverlay extends Component {\n  shouldComponentUpdate(nextProps) {\n    const currentListing = ensureListing(this.props.listing);\n    const nextListing = ensureListing(nextProps.listing);\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\n    const hasSameRefreshToken = this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\n  }\n\n  render() {\n    const {\n      position,\n      map,\n      mapPaneName,\n      isActive,\n      className,\n      listing,\n      onListingClicked,\n      mapComponentRefreshToken\n    } = this.props;\n    return /*#__PURE__*/React.createElement(CustomOverlayView, {\n      position: position,\n      map: map,\n      mapPaneName: mapPaneName,\n      getPixelPositionOffset: getPixelPositionOffset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SearchMapPriceLabel, {\n      isActive: isActive,\n      className: className,\n      listing: listing,\n      onListingClicked: onListingClicked,\n      mapComponentRefreshToken: mapComponentRefreshToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\n\n\nclass SearchMapGroupLabelWithOverlay extends Component {\n  shouldComponentUpdate(nextProps) {\n    const hasSameAmountOfListings = nextProps.listings.length === this.props.listings.length;\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\n    const hasSameRefreshToken = this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\n    return !(hasSameAmountOfListings && hasSameActiveStatus && hasSameRefreshToken);\n  }\n\n  render() {\n    const {\n      position,\n      map,\n      mapPaneName,\n      isActive,\n      className,\n      listings,\n      onListingClicked,\n      mapComponentRefreshToken\n    } = this.props;\n    return /*#__PURE__*/React.createElement(CustomOverlayView, {\n      position: position,\n      map: map,\n      mapPaneName: mapPaneName,\n      getPixelPositionOffset: getPixelPositionOffset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SearchMapGroupLabel, {\n      isActive: isActive,\n      className: className,\n      listings: listings,\n      onListingClicked: onListingClicked,\n      mapComponentRefreshToken: mapComponentRefreshToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n/**\r\n * Render price labels or group \"markers\" based on listings array.\r\n */\n\n\nconst PriceLabelsAndGroups = props => {\n  const {\n    map,\n    listings,\n    activeListingId,\n    infoCardOpen,\n    onListingClicked,\n    mapComponentRefreshToken\n  } = props;\n  const listingArraysInLocations = reducedToArray(groupedByCoordinates(listings));\n  const priceLabels = listingArraysInLocations.reverse().map(listingArr => {\n    const isActive = activeListingId ? !!listingArr.find(l => activeListingId.uuid === l.id.uuid) : false;\n    const classes = classNames(css.labelContainer, LABEL_HANDLE, {\n      [css.activeLabel]: isActive\n    }); // If location contains only one listing, print price label\n\n    if (listingArr.length === 1) {\n      const listing = listingArr[0];\n      const infoCardOpenIds = Array.isArray(infoCardOpen) ? infoCardOpen.map(l => l.id.uuid) : []; // if the listing is open, don't print price label\n\n      if (infoCardOpen != null && infoCardOpenIds.includes(listing.id.uuid)) {\n        return null;\n      } // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\n\n\n      const {\n        geolocation\n      } = listing.attributes;\n      const latLngLiteral = {\n        lat: geolocation.lat,\n        lng: geolocation.lng\n      };\n      return /*#__PURE__*/React.createElement(SearchMapPriceLabelWithOverlay, {\n        key: listing.id.uuid,\n        position: latLngLiteral,\n        map: map,\n        mapPaneName: OVERLAY_MOUSE_TARGET,\n        isActive: isActive,\n        className: classes,\n        listing: listing,\n        onListingClicked: onListingClicked,\n        mapComponentRefreshToken: mapComponentRefreshToken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }\n      });\n    } // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\n\n\n    const firstListing = ensureListing(listingArr[0]);\n    const geolocation = firstListing.attributes.geolocation;\n    const latLngLiteral = {\n      lat: geolocation.lat,\n      lng: geolocation.lng\n    };\n    return /*#__PURE__*/React.createElement(SearchMapGroupLabelWithOverlay, {\n      key: listingArr[0].id.uuid,\n      position: latLngLiteral,\n      map: map,\n      mapPaneName: OVERLAY_MOUSE_TARGET,\n      isActive: isActive,\n      className: classes,\n      listings: listingArr,\n      onListingClicked: onListingClicked,\n      mapComponentRefreshToken: mapComponentRefreshToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 7\n      }\n    });\n  });\n  return priceLabels;\n};\n/**\r\n * Render info-card overlay if the card is open.\r\n */\n\n\n_c = PriceLabelsAndGroups;\n\nconst InfoCardComponent = props => {\n  const {\n    map,\n    infoCardOpen,\n    onListingInfoCardClicked,\n    createURLToListing,\n    mapComponentRefreshToken\n  } = props;\n  const listingsArray = Array.isArray(infoCardOpen) ? infoCardOpen : [infoCardOpen];\n\n  if (!infoCardOpen) {\n    return null;\n  } // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\n\n\n  const firstListing = ensureListing(listingsArray[0]);\n  const geolocation = firstListing.attributes.geolocation;\n  const latLngLiteral = {\n    lat: geolocation.lat,\n    lng: geolocation.lng\n  };\n  return /*#__PURE__*/React.createElement(CustomOverlayView, {\n    key: listingsArray[0].id.uuid,\n    position: latLngLiteral,\n    map: map,\n    mapPaneName: FLOAT_PANE,\n    getPixelPositionOffset: getPixelPositionOffset,\n    styles: {\n      zIndex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchMapInfoCard, {\n    mapComponentRefreshToken: mapComponentRefreshToken,\n    className: INFO_CARD_HANDLE,\n    listings: listingsArray,\n    onListingInfoCardClicked: onListingInfoCardClicked,\n    createURLToListing: createURLToListing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }\n  }));\n};\n/**\r\n * Render GoogleMaps and add price labels, group \"markers\" and infocard using OverlayView.\r\n */\n\n\n_c2 = InfoCardComponent;\n\nclass SearchMapWithGoogleMaps extends Component {\n  constructor(props) {\n    super(props);\n    this.map = null;\n    this.viewportBounds = null;\n    this.idleListener = null;\n    this.state = {\n      mapContainer: null,\n      isMapReady: false\n    };\n    this.initializeMap = this.initializeMap.bind(this);\n    this.onMount = this.onMount.bind(this);\n    this.onIdle = this.onIdle.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.location, this.props.location)) {\n      // If no mapSearch url parameter is given, this is original location search\n      const {\n        mapSearch\n      } = parse(this.props.location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds']\n      });\n\n      if (!mapSearch) {\n        this.viewportBounds = null;\n      }\n    }\n\n    if (this.map) {\n      const currentBounds = getMapBounds(this.map); // Do not call fitMapToBounds if bounds are the same.\n      // Our bounds are viewport bounds, and fitBounds will try to add margins around those bounds\n      // that would result to zoom-loop (bound change -> fitmap -> bounds change -> ...)\n\n      if (!isEqual(this.props.bounds, currentBounds) && !this.viewportBounds) {\n        fitMapToBounds(this.map, this.props.bounds, {\n          padding: 0\n        });\n      }\n\n      if (prevProps.infoCardOpen !== this.props.infoCardOpen) {\n        this.map.setOptions({\n          disableDoubleClickZoom: !!this.props.infoCardOpen\n        });\n      }\n    }\n\n    if (!this.map && this.state.mapContainer) {\n      this.initializeMap();\n      /* Notify parent component that the map is loaded */\n\n      this.props.onMapLoad(this.map);\n    } else if (prevProps.mapComponentRefreshToken !== this.props.mapComponentRefreshToken) {\n      /* Notify parent component that the map is loaded */\n      this.props.onMapLoad(this.map);\n    }\n  }\n\n  componentWillUnmount() {\n    this.idleListener.remove();\n  }\n\n  initializeMap() {\n    const {\n      offsetHeight,\n      offsetWidth\n    } = this.state.mapContainer;\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\n\n    if (hasDimensions) {\n      const {\n        bounds,\n        center,\n        zoom\n      } = this.props;\n      const maps = window.google.maps;\n      const controlPosition = maps.ControlPosition.LEFT_TOP;\n      const zoomOutToShowEarth = {\n        zoom: 1,\n        center: {\n          lat: 0,\n          lng: 0\n        }\n      };\n      const zoomAndCenter = !bounds && !center ? zoomOutToShowEarth : {\n        zoom,\n        center\n      };\n      const mapConfig = {\n        // Disable all controls except zoom\n        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\n        mapTypeControl: false,\n        scrollwheel: false,\n        fullscreenControl: false,\n        clickableIcons: false,\n        streetViewControl: false,\n        zoomControlOptions: {\n          position: controlPosition\n        },\n        // Add default viewport (the whole world)\n        ...zoomAndCenter\n      };\n      this.map = new maps.Map(this.state.mapContainer, mapConfig);\n      this.idleListener = maps.event.addListener(this.map, 'idle', this.onIdle);\n      this.setState({\n        isMapReady: true\n      });\n    }\n  }\n\n  onMount(element) {\n    this.setState({\n      mapContainer: element\n    });\n  }\n\n  onIdle(e) {\n    if (this.map) {\n      // If reusableMapHiddenHandle is given and parent element has that class,\n      // we don't listen moveend events.\n      // This fixes mobile Chrome bug that sends map events to invisible map components.\n      const isHiddenByReusableMap = this.props.reusableMapHiddenHandle && this.state.mapContainer.parentElement.classList.contains(this.props.reusableMapHiddenHandle);\n\n      if (!isHiddenByReusableMap) {\n        const viewportMapBounds = getMapBounds(this.map);\n        const viewportMapCenter = getMapCenter(this.map);\n        const viewportBounds = viewportMapBounds ? sdkBoundsToFixedCoordinates(viewportMapBounds, BOUNDS_FIXED_PRECISION) : null; // ViewportBounds from (previous) rendering differ from viewportBounds currently set to map\n        // I.e. user has changed the map somehow: moved, panned, zoomed, resized\n\n        const viewportBoundsChanged = this.viewportBounds && viewportBounds && !hasSameSDKBounds(this.viewportBounds, viewportBounds);\n        this.props.onMapMoveEnd(viewportBoundsChanged, {\n          viewportBounds,\n          viewportMapCenter\n        });\n        this.viewportBounds = viewportBounds;\n      }\n    }\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      listings,\n      activeListingId,\n      infoCardOpen,\n      onListingClicked,\n      mapComponentRefreshToken,\n      onListingInfoCardClicked,\n      createURLToListing\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: id,\n      ref: this.onMount,\n      className: classNames(className, css.fullArea),\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 7\n      }\n    }, this.map ? /*#__PURE__*/React.createElement(PriceLabelsAndGroups, {\n      map: this.map,\n      listings: listings,\n      activeListingId: activeListingId,\n      infoCardOpen: infoCardOpen,\n      onListingClicked: onListingClicked,\n      mapComponentRefreshToken: mapComponentRefreshToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 11\n      }\n    }) : null, this.map ? /*#__PURE__*/React.createElement(InfoCardComponent, {\n      map: this.map,\n      infoCardOpen: infoCardOpen,\n      onListingInfoCardClicked: onListingInfoCardClicked,\n      createURLToListing: createURLToListing,\n      mapComponentRefreshToken: mapComponentRefreshToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }\n    }) : null);\n  }\n\n}\n\nSearchMapWithGoogleMaps.defaultProps = {\n  id: 'map',\n  center: new sdkTypes.LatLng(0, 0),\n  infoCardOpen: null,\n  listings: [],\n  activeListingId: null,\n  zoom: 11,\n  reusableMapHiddenHandle: null\n};\nSearchMapWithGoogleMaps.propTypes = {\n  id: string,\n  center: propTypes.latlng,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  infoCardOpen: oneOfType([propTypes.listing, arrayOf(propTypes.listing)]),\n  listings: arrayOf(propTypes.listing),\n  activeListingId: propTypes.uuid,\n  onMapMoveEnd: func.isRequired,\n  onMapLoad: func.isRequired,\n  zoom: number,\n  reusableMapHiddenHandle: string\n};\nexport default SearchMapWithGoogleMaps;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceLabelsAndGroups\");\n$RefreshReg$(_c2, \"InfoCardComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SearchMap/SearchMapWithGoogleMaps.js"],"names":["React","Component","ReactDOM","invariant","arrayOf","func","number","oneOfType","shape","string","isEqual","classNames","types","sdkTypes","parse","propTypes","ensureListing","sdkBoundsToFixedCoordinates","hasSameSDKBounds","getOffsetOverride","getLayoutStyles","SearchMapPriceLabel","SearchMapInfoCard","SearchMapGroupLabel","groupedByCoordinates","reducedToArray","css","LABEL_HANDLE","INFO_CARD_HANDLE","BOUNDS_FIXED_PRECISION","OVERLAY_MOUSE_TARGET","FLOAT_PANE","LatLng","SDKLatLng","LatLngBounds","SDKLatLngBounds","fitMapToBounds","map","bounds","options","padding","ne","sw","mapBounds","north","lat","east","lng","south","west","fitBounds","googleLatLngToSDKLatLng","googleLatLng","googleBoundsToSDKBounds","googleBounds","getNorthEast","getSouthWest","getMapBounds","getBounds","getMapCenter","getCenter","isMapsLibLoaded","window","google","maps","CustomOverlayView","constructor","props","context","overlayView","OverlayView","onAdd","bind","draw","onRemove","onPositionElement","setMap","state","containerElement","parentNode","removeChild","version","match","unmountComponentAtNode","document","createElement","style","position","mapPaneName","mapPanes","getPanes","appendChild","forceUpdate","mapCanvasProjection","getProjection","offset","x","y","layoutStyles","Object","assign","render","createPortal","Children","only","children","getPixelPositionOffset","width","height","SearchMapPriceLabelWithOverlay","shouldComponentUpdate","nextProps","currentListing","listing","nextListing","isSameListing","id","uuid","hasSamePrice","attributes","price","hasSameActiveStatus","isActive","hasSameRefreshToken","mapComponentRefreshToken","className","onListingClicked","SearchMapGroupLabelWithOverlay","hasSameAmountOfListings","listings","length","PriceLabelsAndGroups","activeListingId","infoCardOpen","listingArraysInLocations","priceLabels","reverse","listingArr","find","l","classes","labelContainer","activeLabel","infoCardOpenIds","Array","isArray","includes","geolocation","latLngLiteral","firstListing","InfoCardComponent","onListingInfoCardClicked","createURLToListing","listingsArray","zIndex","SearchMapWithGoogleMaps","viewportBounds","idleListener","mapContainer","isMapReady","initializeMap","onMount","onIdle","componentDidUpdate","prevProps","location","mapSearch","search","latlng","latlngBounds","currentBounds","setOptions","disableDoubleClickZoom","onMapLoad","componentWillUnmount","remove","offsetHeight","offsetWidth","hasDimensions","center","zoom","controlPosition","ControlPosition","LEFT_TOP","zoomOutToShowEarth","zoomAndCenter","mapConfig","mapTypeControl","scrollwheel","fullscreenControl","clickableIcons","streetViewControl","zoomControlOptions","Map","event","addListener","setState","element","e","isHiddenByReusableMap","reusableMapHiddenHandle","parentElement","classList","contains","viewportMapBounds","viewportMapCenter","viewportBoundsChanged","onMapMoveEnd","fullArea","onClick","defaultProps","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport invariant from 'invariant';\r\nimport { arrayOf, func, number, oneOfType, shape, string } from 'prop-types';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { types as sdkTypes } from '../../../util/sdkLoader';\r\nimport { parse } from '../../../util/urlHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { ensureListing } from '../../../util/data';\r\nimport { sdkBoundsToFixedCoordinates, hasSameSDKBounds } from '../../../util/maps';\r\nimport { getOffsetOverride, getLayoutStyles } from '../../../util/googleMaps';\r\n\r\nimport SearchMapPriceLabel from '../SearchMapPriceLabel/SearchMapPriceLabel';\r\nimport SearchMapInfoCard from '../SearchMapInfoCard/SearchMapInfoCard';\r\nimport SearchMapGroupLabel from '../SearchMapGroupLabel/SearchMapGroupLabel';\r\nimport { groupedByCoordinates, reducedToArray } from './SearchMap.helpers';\r\nimport css from './SearchMapWithGoogleMaps.module.css';\r\n\r\nexport const LABEL_HANDLE = 'SearchMapLabel';\r\nexport const INFO_CARD_HANDLE = 'SearchMapInfoCard';\r\nconst BOUNDS_FIXED_PRECISION = 8;\r\n\r\n// Panes on Google Maps specify the stacking order for different layers on the map.\r\n// https://developers.google.com/maps/documentation/javascript/customoverlays#intitialize\r\n//\r\n// Google Maps uses 5 different panes:\r\n// 'mapPane', 'overlayLayer', 'markerLayer', 'overlayMouseTarget', 'floatPane'\r\n// We only need the last 2:\r\n// - 'overlayMouseTarget': for the SearchMapPriceLabelWithOverlay & SearchMapGroupLabelWithOverlay.\r\n// - 'floatPane': to render InfoCardComponent on top of price and group labels.\r\nconst OVERLAY_MOUSE_TARGET = 'overlayMouseTarget'; // Stacking order: 4\r\nconst FLOAT_PANE = 'floatPane'; // Stacking order: 5\r\n\r\nconst { LatLng: SDKLatLng, LatLngBounds: SDKLatLngBounds } = sdkTypes;\r\n\r\n/**\r\n * Fit part of map (descriped with bounds) to visible map-viewport\r\n *\r\n * @param {Object} map - map that needs to be centered with given bounds\r\n * @param {SDK.LatLngBounds} bounds - the area that needs to be visible when map loads.\r\n */\r\nexport const fitMapToBounds = (map, bounds, options) => {\r\n  const { padding } = options;\r\n\r\n  const { ne, sw } = bounds || {};\r\n  // map bounds as string literal for google.maps\r\n  const mapBounds = bounds ? { north: ne.lat, east: ne.lng, south: sw.lat, west: sw.lng } : null;\r\n\r\n  // If bounds are given, use it (defaults to center & zoom).\r\n  if (map && mapBounds) {\r\n    if (padding == null) {\r\n      map.fitBounds(mapBounds);\r\n    } else {\r\n      map.fitBounds(mapBounds, padding);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Convert Google formatted LatLng object to Sharetribe SDK's LatLng coordinate format\r\n *\r\n * @param {LatLng} googleLatLng - Google Maps LatLng\r\n *\r\n * @return {SDKLatLng} - Converted latLng coordinate\r\n */\r\nexport const googleLatLngToSDKLatLng = googleLatLng => {\r\n  if (!googleLatLng) {\r\n    return null;\r\n  }\r\n  return new SDKLatLng(googleLatLng.lat(), googleLatLng.lng());\r\n};\r\n\r\n/**\r\n * Convert Google formatted bounds object to Sharetribe SDK's bounds format\r\n *\r\n * @param {LatLngBounds} googleBounds - Google Maps LatLngBounds\r\n *\r\n * @return {SDKLatLngBounds} - Converted bounds\r\n */\r\nexport const googleBoundsToSDKBounds = googleBounds => {\r\n  if (!googleBounds) {\r\n    return null;\r\n  }\r\n  const ne = googleBounds.getNorthEast();\r\n  const sw = googleBounds.getSouthWest();\r\n  return new SDKLatLngBounds(new SDKLatLng(ne.lat(), ne.lng()), new SDKLatLng(sw.lat(), sw.lng()));\r\n};\r\n\r\nexport const getMapBounds = map => googleBoundsToSDKBounds(map.getBounds());\r\nexport const getMapCenter = map => googleLatLngToSDKLatLng(map.getCenter());\r\n\r\n/**\r\n * Check if map library is loaded\r\n */\r\nexport const isMapsLibLoaded = () =>\r\n  typeof window !== 'undefined' && window.google && window.google.maps;\r\n\r\n/**\r\n * To render HTML on top of Google Maps, we need use OverlayView.\r\n * Note: we don't extend the OverlayView directly, because then\r\n * the class should be defined inside initializeMap function.\r\n */\r\nclass CustomOverlayView extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    const overlayView = new window.google.maps.OverlayView();\r\n\r\n    overlayView.onAdd = this.onAdd.bind(this);\r\n    overlayView.draw = this.draw.bind(this);\r\n    overlayView.onRemove = this.onRemove.bind(this);\r\n    this.onPositionElement = this.onPositionElement.bind(this);\r\n\r\n    // You must call setMap() with a valid Map object to trigger the call to\r\n    // the onAdd() method and setMap(null) in order to trigger the onRemove() method.\r\n    overlayView.setMap(props.map);\r\n    this.state = { overlayView };\r\n  }\r\n\r\n  onRemove() {\r\n    this.containerElement.parentNode.removeChild(this.containerElement);\r\n    //Remove `unmountComponentAtNode` for react version 16\r\n    //I decided to keep the code here incase React decides not to give out warning when `unmountComponentAtNode` in newer version\r\n    if (!React.version.match(/^16/)) {\r\n      ReactDOM.unmountComponentAtNode(this.containerElement);\r\n    }\r\n    this.containerElement = null;\r\n  }\r\n\r\n  onAdd() {\r\n    this.containerElement = document.createElement(`div`);\r\n    this.containerElement.style.position = `absolute`;\r\n\r\n    const { mapPaneName } = this.props;\r\n    invariant(\r\n      !!mapPaneName,\r\n      `OverlayView requires either props.mapPaneName or props.defaultMapPaneName but got %s`,\r\n      mapPaneName\r\n    );\r\n\r\n    const mapPanes = this.state.overlayView.getPanes();\r\n    mapPanes[mapPaneName].appendChild(this.containerElement);\r\n    this.onPositionElement();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  onPositionElement() {\r\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapCanvasProjection\r\n    const mapCanvasProjection = this.state.overlayView.getProjection();\r\n\r\n    const offset = {\r\n      x: 0,\r\n      y: 0,\r\n      ...getOffsetOverride(this.containerElement, this.props),\r\n    };\r\n    const layoutStyles = getLayoutStyles(mapCanvasProjection, offset, this.props);\r\n    Object.assign(this.containerElement.style, layoutStyles);\r\n  }\r\n\r\n  draw() {\r\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes\r\n    const mapPanes = this.state.overlayView.getPanes();\r\n    // Add conditional to ensure panes and container exist before drawing\r\n    if (mapPanes && this.containerElement) {\r\n      this.onPositionElement();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (React.version.match(/^16/) && this.containerElement) {\r\n      return ReactDOM.createPortal(React.Children.only(this.props.children), this.containerElement);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Center label so that caret is pointing to correct pixel.\r\n * (vertical positioning: height + arrow)\r\n */\r\nconst getPixelPositionOffset = (width, height) => {\r\n  return { x: -1 * (width / 2), y: -1 * (height + 3) };\r\n};\r\n\r\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\r\nclass SearchMapPriceLabelWithOverlay extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const currentListing = ensureListing(this.props.listing);\r\n    const nextListing = ensureListing(nextProps.listing);\r\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\r\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      map,\r\n      mapPaneName,\r\n      isActive,\r\n      className,\r\n      listing,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n    } = this.props;\r\n\r\n    return (\r\n      <CustomOverlayView\r\n        position={position}\r\n        map={map}\r\n        mapPaneName={mapPaneName}\r\n        getPixelPositionOffset={getPixelPositionOffset}\r\n      >\r\n        <SearchMapPriceLabel\r\n          isActive={isActive}\r\n          className={className}\r\n          listing={listing}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n        />\r\n      </CustomOverlayView>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\r\nclass SearchMapGroupLabelWithOverlay extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const hasSameAmountOfListings = nextProps.listings.length === this.props.listings.length;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(hasSameAmountOfListings && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      map,\r\n      mapPaneName,\r\n      isActive,\r\n      className,\r\n      listings,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n    } = this.props;\r\n    return (\r\n      <CustomOverlayView\r\n        position={position}\r\n        map={map}\r\n        mapPaneName={mapPaneName}\r\n        getPixelPositionOffset={getPixelPositionOffset}\r\n      >\r\n        <SearchMapGroupLabel\r\n          isActive={isActive}\r\n          className={className}\r\n          listings={listings}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n        />\r\n      </CustomOverlayView>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Render price labels or group \"markers\" based on listings array.\r\n */\r\nconst PriceLabelsAndGroups = props => {\r\n  const {\r\n    map,\r\n    listings,\r\n    activeListingId,\r\n    infoCardOpen,\r\n    onListingClicked,\r\n    mapComponentRefreshToken,\r\n  } = props;\r\n  const listingArraysInLocations = reducedToArray(groupedByCoordinates(listings));\r\n  const priceLabels = listingArraysInLocations.reverse().map(listingArr => {\r\n    const isActive = activeListingId\r\n      ? !!listingArr.find(l => activeListingId.uuid === l.id.uuid)\r\n      : false;\r\n    const classes = classNames(css.labelContainer, LABEL_HANDLE, { [css.activeLabel]: isActive });\r\n\r\n    // If location contains only one listing, print price label\r\n    if (listingArr.length === 1) {\r\n      const listing = listingArr[0];\r\n      const infoCardOpenIds = Array.isArray(infoCardOpen) ? infoCardOpen.map(l => l.id.uuid) : [];\r\n\r\n      // if the listing is open, don't print price label\r\n      if (infoCardOpen != null && infoCardOpenIds.includes(listing.id.uuid)) {\r\n        return null;\r\n      }\r\n\r\n      // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n      const { geolocation } = listing.attributes;\r\n      const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n      return (\r\n        <SearchMapPriceLabelWithOverlay\r\n          key={listing.id.uuid}\r\n          position={latLngLiteral}\r\n          map={map}\r\n          mapPaneName={OVERLAY_MOUSE_TARGET}\r\n          isActive={isActive}\r\n          className={classes}\r\n          listing={listing}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n        />\r\n      );\r\n    }\r\n\r\n    // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n    const firstListing = ensureListing(listingArr[0]);\r\n    const geolocation = firstListing.attributes.geolocation;\r\n    const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n    return (\r\n      <SearchMapGroupLabelWithOverlay\r\n        key={listingArr[0].id.uuid}\r\n        position={latLngLiteral}\r\n        map={map}\r\n        mapPaneName={OVERLAY_MOUSE_TARGET}\r\n        isActive={isActive}\r\n        className={classes}\r\n        listings={listingArr}\r\n        onListingClicked={onListingClicked}\r\n        mapComponentRefreshToken={mapComponentRefreshToken}\r\n      />\r\n    );\r\n  });\r\n  return priceLabels;\r\n};\r\n\r\n/**\r\n * Render info-card overlay if the card is open.\r\n */\r\nconst InfoCardComponent = props => {\r\n  const {\r\n    map,\r\n    infoCardOpen,\r\n    onListingInfoCardClicked,\r\n    createURLToListing,\r\n    mapComponentRefreshToken,\r\n  } = props;\r\n  const listingsArray = Array.isArray(infoCardOpen) ? infoCardOpen : [infoCardOpen];\r\n\r\n  if (!infoCardOpen) {\r\n    return null;\r\n  }\r\n  // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n  const firstListing = ensureListing(listingsArray[0]);\r\n  const geolocation = firstListing.attributes.geolocation;\r\n  const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n  return (\r\n    <CustomOverlayView\r\n      key={listingsArray[0].id.uuid}\r\n      position={latLngLiteral}\r\n      map={map}\r\n      mapPaneName={FLOAT_PANE}\r\n      getPixelPositionOffset={getPixelPositionOffset}\r\n      styles={{ zIndex: 1 }}\r\n    >\r\n      <SearchMapInfoCard\r\n        mapComponentRefreshToken={mapComponentRefreshToken}\r\n        className={INFO_CARD_HANDLE}\r\n        listings={listingsArray}\r\n        onListingInfoCardClicked={onListingInfoCardClicked}\r\n        createURLToListing={createURLToListing}\r\n      />\r\n    </CustomOverlayView>\r\n  );\r\n};\r\n\r\n/**\r\n * Render GoogleMaps and add price labels, group \"markers\" and infocard using OverlayView.\r\n */\r\nclass SearchMapWithGoogleMaps extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = null;\r\n    this.viewportBounds = null;\r\n    this.idleListener = null;\r\n    this.state = { mapContainer: null, isMapReady: false };\r\n\r\n    this.initializeMap = this.initializeMap.bind(this);\r\n    this.onMount = this.onMount.bind(this);\r\n    this.onIdle = this.onIdle.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!isEqual(prevProps.location, this.props.location)) {\r\n      // If no mapSearch url parameter is given, this is original location search\r\n      const { mapSearch } = parse(this.props.location.search, {\r\n        latlng: ['origin'],\r\n        latlngBounds: ['bounds'],\r\n      });\r\n      if (!mapSearch) {\r\n        this.viewportBounds = null;\r\n      }\r\n    }\r\n\r\n    if (this.map) {\r\n      const currentBounds = getMapBounds(this.map);\r\n\r\n      // Do not call fitMapToBounds if bounds are the same.\r\n      // Our bounds are viewport bounds, and fitBounds will try to add margins around those bounds\r\n      // that would result to zoom-loop (bound change -> fitmap -> bounds change -> ...)\r\n      if (!isEqual(this.props.bounds, currentBounds) && !this.viewportBounds) {\r\n        fitMapToBounds(this.map, this.props.bounds, { padding: 0 });\r\n      }\r\n\r\n      if (prevProps.infoCardOpen !== this.props.infoCardOpen) {\r\n        this.map.setOptions({ disableDoubleClickZoom: !!this.props.infoCardOpen });\r\n      }\r\n    }\r\n\r\n    if (!this.map && this.state.mapContainer) {\r\n      this.initializeMap();\r\n\r\n      /* Notify parent component that the map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    } else if (prevProps.mapComponentRefreshToken !== this.props.mapComponentRefreshToken) {\r\n      /* Notify parent component that the map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.idleListener.remove();\r\n  }\r\n\r\n  initializeMap() {\r\n    const { offsetHeight, offsetWidth } = this.state.mapContainer;\r\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\r\n\r\n    if (hasDimensions) {\r\n      const { bounds, center, zoom } = this.props;\r\n      const maps = window.google.maps;\r\n      const controlPosition = maps.ControlPosition.LEFT_TOP;\r\n      const zoomOutToShowEarth = { zoom: 1, center: { lat: 0, lng: 0 } };\r\n      const zoomAndCenter = !bounds && !center ? zoomOutToShowEarth : { zoom, center };\r\n\r\n      const mapConfig = {\r\n        // Disable all controls except zoom\r\n        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\r\n        mapTypeControl: false,\r\n        scrollwheel: false,\r\n        fullscreenControl: false,\r\n        clickableIcons: false,\r\n        streetViewControl: false,\r\n\r\n        zoomControlOptions: {\r\n          position: controlPosition,\r\n        },\r\n\r\n        // Add default viewport (the whole world)\r\n        ...zoomAndCenter,\r\n      };\r\n\r\n      this.map = new maps.Map(this.state.mapContainer, mapConfig);\r\n      this.idleListener = maps.event.addListener(this.map, 'idle', this.onIdle);\r\n      this.setState({\r\n        isMapReady: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  onMount(element) {\r\n    this.setState({ mapContainer: element });\r\n  }\r\n\r\n  onIdle(e) {\r\n    if (this.map) {\r\n      // If reusableMapHiddenHandle is given and parent element has that class,\r\n      // we don't listen moveend events.\r\n      // This fixes mobile Chrome bug that sends map events to invisible map components.\r\n      const isHiddenByReusableMap =\r\n        this.props.reusableMapHiddenHandle &&\r\n        this.state.mapContainer.parentElement.classList.contains(\r\n          this.props.reusableMapHiddenHandle\r\n        );\r\n      if (!isHiddenByReusableMap) {\r\n        const viewportMapBounds = getMapBounds(this.map);\r\n        const viewportMapCenter = getMapCenter(this.map);\r\n        const viewportBounds = viewportMapBounds\r\n          ? sdkBoundsToFixedCoordinates(viewportMapBounds, BOUNDS_FIXED_PRECISION)\r\n          : null;\r\n\r\n        // ViewportBounds from (previous) rendering differ from viewportBounds currently set to map\r\n        // I.e. user has changed the map somehow: moved, panned, zoomed, resized\r\n        const viewportBoundsChanged =\r\n          this.viewportBounds &&\r\n          viewportBounds &&\r\n          !hasSameSDKBounds(this.viewportBounds, viewportBounds);\r\n\r\n        this.props.onMapMoveEnd(viewportBoundsChanged, { viewportBounds, viewportMapCenter });\r\n        this.viewportBounds = viewportBounds;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      listings,\r\n      activeListingId,\r\n      infoCardOpen,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n      onListingInfoCardClicked,\r\n      createURLToListing,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        id={id}\r\n        ref={this.onMount}\r\n        className={classNames(className, css.fullArea)}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.map ? (\r\n          <PriceLabelsAndGroups\r\n            map={this.map}\r\n            listings={listings}\r\n            activeListingId={activeListingId}\r\n            infoCardOpen={infoCardOpen}\r\n            onListingClicked={onListingClicked}\r\n            mapComponentRefreshToken={mapComponentRefreshToken}\r\n          />\r\n        ) : null}\r\n        {this.map ? (\r\n          <InfoCardComponent\r\n            map={this.map}\r\n            infoCardOpen={infoCardOpen}\r\n            onListingInfoCardClicked={onListingInfoCardClicked}\r\n            createURLToListing={createURLToListing}\r\n            mapComponentRefreshToken={mapComponentRefreshToken}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapWithGoogleMaps.defaultProps = {\r\n  id: 'map',\r\n  center: new sdkTypes.LatLng(0, 0),\r\n  infoCardOpen: null,\r\n  listings: [],\r\n  activeListingId: null,\r\n  zoom: 11,\r\n  reusableMapHiddenHandle: null,\r\n};\r\n\r\nSearchMapWithGoogleMaps.propTypes = {\r\n  id: string,\r\n  center: propTypes.latlng,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n  infoCardOpen: oneOfType([propTypes.listing, arrayOf(propTypes.listing)]),\r\n  listings: arrayOf(propTypes.listing),\r\n  activeListingId: propTypes.uuid,\r\n\r\n  onMapMoveEnd: func.isRequired,\r\n  onMapLoad: func.isRequired,\r\n  zoom: number,\r\n  reusableMapHiddenHandle: string,\r\n};\r\n\r\nexport default SearchMapWithGoogleMaps;\r\n"]},"metadata":{},"sourceType":"module"}