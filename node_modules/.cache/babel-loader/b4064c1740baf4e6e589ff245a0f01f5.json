{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\PriceFilter\\\\PriceFilterPopup.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, node, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { formatCurrencyMajorUnit } from '../../../util/currency';\nimport { OutsideClickHandler } from '../../../components';\nimport PriceFilterForm from '../PriceFilterForm/PriceFilterForm';\nimport css from './PriceFilterPopup.module.css';\nconst KEY_CODE_ESCAPE = 27;\nconst RADIX = 10;\n\nconst getPriceQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : typeof queryParamNames === 'string' ? queryParamNames : 'price';\n}; // Parse value, which should look like \"0,1000\"\n\n\nconst parse = priceRange => {\n  const [minPrice, maxPrice] = !!priceRange ? priceRange.split(',').map(v => Number.parseInt(v, RADIX)) : []; // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\n\n  return !!priceRange && minPrice != null && maxPrice != null ? {\n    minPrice,\n    maxPrice\n  } : null;\n}; // Format value, which should look like { minPrice, maxPrice }\n\n\nconst format = (range, queryParamName) => {\n  const {\n    minPrice,\n    maxPrice\n  } = range || {}; // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\n\n  const value = minPrice != null && maxPrice != null ? `${minPrice},${maxPrice}` : null;\n  return {\n    [queryParamName]: value\n  };\n};\n\nclass PriceFilterPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.filter = null;\n    this.filterContent = null;\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  handleSubmit(values) {\n    const {\n      onSubmit,\n      queryParamNames\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\n    onSubmit(format(values, priceQueryParamName));\n  }\n\n  handleClear() {\n    const {\n      onSubmit,\n      queryParamNames\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\n    onSubmit(format(null, priceQueryParamName));\n  }\n\n  handleCancel() {\n    const {\n      onSubmit,\n      initialValues\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n    onSubmit(initialValues);\n  }\n\n  handleBlur() {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  handleKeyDown(e) {\n    // Gather all escape presses to close menu\n    if (e.keyCode === KEY_CODE_ESCAPE) {\n      this.toggleOpen(false);\n    }\n  }\n\n  toggleOpen(enforcedState) {\n    if (enforcedState) {\n      this.setState({\n        isOpen: enforcedState\n      });\n    } else {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    }\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      const offset = renderToRight ? {\n        left: contentPlacementOffset\n      } : {\n        right: contentPlacementOffset\n      }; // set a min-width if the content is narrower than the label\n\n      const minWidth = contentWidth < labelWidth ? {\n        minWidth: labelWidth\n      } : null;\n      return { ...offset,\n        ...minWidth\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      label,\n      queryParamNames,\n      initialValues,\n      min,\n      max,\n      step,\n      intl,\n      currencyConfig\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const priceQueryParam = getPriceQueryParamName(queryParamNames);\n    const initialPrice = initialValues && initialValues[priceQueryParam] ? parse(initialValues[priceQueryParam]) : {};\n    const {\n      minPrice,\n      maxPrice\n    } = initialPrice || {};\n\n    const hasValue = value => value != null;\n\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\n    const currentLabel = hasInitialValues ? intl.formatMessage({\n      id: 'PriceFilter.labelSelectedButton'\n    }, {\n      minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\n      maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice)\n    }) : label ? label : intl.formatMessage({\n      id: 'PriceFilter.label'\n    });\n    const labelStyles = hasInitialValues ? css.labelSelected : css.label;\n    const contentStyle = this.positionStyleForContent();\n    return /*#__PURE__*/React.createElement(OutsideClickHandler, {\n      onOutsideClick: this.handleBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      onKeyDown: this.handleKeyDown,\n      ref: node => {\n        this.filter = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: labelStyles,\n      onClick: () => this.toggleOpen(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, currentLabel), /*#__PURE__*/React.createElement(PriceFilterForm, {\n      id: id,\n      initialValues: hasInitialValues ? initialPrice : {\n        minPrice: min,\n        maxPrice: max\n      },\n      onClear: this.handleClear,\n      onCancel: this.handleCancel,\n      onSubmit: this.handleSubmit,\n      intl: intl,\n      contentRef: node => {\n        this.filterContent = node;\n      },\n      style: contentStyle,\n      min: min,\n      max: max,\n      step: step,\n      showAsPopup: true,\n      isOpen: this.state.isOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nPriceFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  contentPlacementOffset: 0,\n  liveEdit: false,\n  step: number,\n  currencyConfig: config.currencyConfig\n};\nPriceFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  queryParamNames: arrayOf(string).isRequired,\n  onSubmit: func.isRequired,\n  initialValues: shape({\n    price: string\n  }),\n  contentPlacementOffset: number,\n  min: number.isRequired,\n  max: number.isRequired,\n  step: number,\n  currencyConfig: propTypes.currencyConfig,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c = injectIntl(PriceFilterPopup);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/PriceFilter/PriceFilterPopup.js"],"names":["React","Component","arrayOf","func","node","number","shape","string","classNames","config","injectIntl","intlShape","propTypes","formatCurrencyMajorUnit","OutsideClickHandler","PriceFilterForm","css","KEY_CODE_ESCAPE","RADIX","getPriceQueryParamName","queryParamNames","Array","isArray","parse","priceRange","minPrice","maxPrice","split","map","v","Number","parseInt","format","range","queryParamName","value","PriceFilterPopup","constructor","props","state","isOpen","filter","filterContent","handleSubmit","bind","handleClear","handleCancel","handleBlur","handleKeyDown","toggleOpen","positionStyleForContent","values","onSubmit","setState","priceQueryParamName","initialValues","e","keyCode","enforcedState","prevState","distanceToRight","window","innerWidth","getBoundingClientRect","right","labelWidth","offsetWidth","contentWidth","contentWidthBiggerThanLabel","renderToRight","contentPlacementOffset","offset","left","minWidth","render","rootClassName","className","id","label","min","max","step","intl","currencyConfig","classes","root","priceQueryParam","initialPrice","hasValue","hasInitialValues","currentLabel","formatMessage","currency","labelStyles","labelSelected","contentStyle","defaultProps","liveEdit","isRequired","price"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, func, node, number, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../../config';\r\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { formatCurrencyMajorUnit } from '../../../util/currency';\r\n\r\nimport { OutsideClickHandler } from '../../../components';\r\n\r\nimport PriceFilterForm from '../PriceFilterForm/PriceFilterForm';\r\nimport css from './PriceFilterPopup.module.css';\r\n\r\nconst KEY_CODE_ESCAPE = 27;\r\nconst RADIX = 10;\r\n\r\nconst getPriceQueryParamName = queryParamNames => {\r\n  return Array.isArray(queryParamNames)\r\n    ? queryParamNames[0]\r\n    : typeof queryParamNames === 'string'\r\n    ? queryParamNames\r\n    : 'price';\r\n};\r\n\r\n// Parse value, which should look like \"0,1000\"\r\nconst parse = priceRange => {\r\n  const [minPrice, maxPrice] = !!priceRange\r\n    ? priceRange.split(',').map(v => Number.parseInt(v, RADIX))\r\n    : [];\r\n  // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\r\n  return !!priceRange && minPrice != null && maxPrice != null ? { minPrice, maxPrice } : null;\r\n};\r\n\r\n// Format value, which should look like { minPrice, maxPrice }\r\nconst format = (range, queryParamName) => {\r\n  const { minPrice, maxPrice } = range || {};\r\n  // Note: we compare to null, because 0 as minPrice is falsy in comparisons.\r\n  const value = minPrice != null && maxPrice != null ? `${minPrice},${maxPrice}` : null;\r\n  return { [queryParamName]: value };\r\n};\r\n\r\nclass PriceFilterPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { isOpen: false };\r\n    this.filter = null;\r\n    this.filterContent = null;\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.toggleOpen = this.toggleOpen.bind(this);\r\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\r\n  }\r\n\r\n  handleSubmit(values) {\r\n    const { onSubmit, queryParamNames } = this.props;\r\n    this.setState({ isOpen: false });\r\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\r\n    onSubmit(format(values, priceQueryParamName));\r\n  }\r\n\r\n  handleClear() {\r\n    const { onSubmit, queryParamNames } = this.props;\r\n    this.setState({ isOpen: false });\r\n    const priceQueryParamName = getPriceQueryParamName(queryParamNames);\r\n    onSubmit(format(null, priceQueryParamName));\r\n  }\r\n\r\n  handleCancel() {\r\n    const { onSubmit, initialValues } = this.props;\r\n    this.setState({ isOpen: false });\r\n    onSubmit(initialValues);\r\n  }\r\n\r\n  handleBlur() {\r\n    this.setState({ isOpen: false });\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    // Gather all escape presses to close menu\r\n    if (e.keyCode === KEY_CODE_ESCAPE) {\r\n      this.toggleOpen(false);\r\n    }\r\n  }\r\n\r\n  toggleOpen(enforcedState) {\r\n    if (enforcedState) {\r\n      this.setState({ isOpen: enforcedState });\r\n    } else {\r\n      this.setState(prevState => ({ isOpen: !prevState.isOpen }));\r\n    }\r\n  }\r\n\r\n  positionStyleForContent() {\r\n    if (this.filter && this.filterContent) {\r\n      // Render the filter content to the right from the menu\r\n      // unless there's no space in which case it is rendered\r\n      // to the left\r\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\r\n      const labelWidth = this.filter.offsetWidth;\r\n      const contentWidth = this.filterContent.offsetWidth;\r\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\r\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\r\n      const contentPlacementOffset = this.props.contentPlacementOffset;\r\n\r\n      const offset = renderToRight\r\n        ? { left: contentPlacementOffset }\r\n        : { right: contentPlacementOffset };\r\n      // set a min-width if the content is narrower than the label\r\n      const minWidth = contentWidth < labelWidth ? { minWidth: labelWidth } : null;\r\n\r\n      return { ...offset, ...minWidth };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      id,\r\n      label,\r\n      queryParamNames,\r\n      initialValues,\r\n      min,\r\n      max,\r\n      step,\r\n      intl,\r\n      currencyConfig,\r\n    } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const priceQueryParam = getPriceQueryParamName(queryParamNames);\r\n    const initialPrice =\r\n      initialValues && initialValues[priceQueryParam] ? parse(initialValues[priceQueryParam]) : {};\r\n    const { minPrice, maxPrice } = initialPrice || {};\r\n\r\n    const hasValue = value => value != null;\r\n    const hasInitialValues = initialValues && hasValue(minPrice) && hasValue(maxPrice);\r\n\r\n    const currentLabel = hasInitialValues\r\n      ? intl.formatMessage(\r\n          { id: 'PriceFilter.labelSelectedButton' },\r\n          {\r\n            minPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, minPrice),\r\n            maxPrice: formatCurrencyMajorUnit(intl, currencyConfig.currency, maxPrice),\r\n          }\r\n        )\r\n      : label\r\n      ? label\r\n      : intl.formatMessage({ id: 'PriceFilter.label' });\r\n\r\n    const labelStyles = hasInitialValues ? css.labelSelected : css.label;\r\n    const contentStyle = this.positionStyleForContent();\r\n\r\n    return (\r\n      <OutsideClickHandler onOutsideClick={this.handleBlur}>\r\n        <div\r\n          className={classes}\r\n          onKeyDown={this.handleKeyDown}\r\n          ref={node => {\r\n            this.filter = node;\r\n          }}\r\n        >\r\n          <button className={labelStyles} onClick={() => this.toggleOpen()}>\r\n            {currentLabel}\r\n          </button>\r\n          <PriceFilterForm\r\n            id={id}\r\n            initialValues={hasInitialValues ? initialPrice : { minPrice: min, maxPrice: max }}\r\n            onClear={this.handleClear}\r\n            onCancel={this.handleCancel}\r\n            onSubmit={this.handleSubmit}\r\n            intl={intl}\r\n            contentRef={node => {\r\n              this.filterContent = node;\r\n            }}\r\n            style={contentStyle}\r\n            min={min}\r\n            max={max}\r\n            step={step}\r\n            showAsPopup\r\n            isOpen={this.state.isOpen}\r\n          />\r\n        </div>\r\n      </OutsideClickHandler>\r\n    );\r\n  }\r\n}\r\n\r\nPriceFilterPopup.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  initialValues: null,\r\n  contentPlacementOffset: 0,\r\n  liveEdit: false,\r\n  step: number,\r\n  currencyConfig: config.currencyConfig,\r\n};\r\n\r\nPriceFilterPopup.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  id: string.isRequired,\r\n  label: node,\r\n  queryParamNames: arrayOf(string).isRequired,\r\n  onSubmit: func.isRequired,\r\n  initialValues: shape({\r\n    price: string,\r\n  }),\r\n  contentPlacementOffset: number,\r\n  min: number.isRequired,\r\n  max: number.isRequired,\r\n  step: number,\r\n  currencyConfig: propTypes.currencyConfig,\r\n\r\n  // form injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(PriceFilterPopup);\r\n"]},"metadata":{},"sourceType":"module"}