{"ast":null,"code":"import { storableError } from '../util/errors';\nimport { fetchCurrentUser } from './user.duck'; // ================ Action types ================ //\n\nexport const VERIFICATION_REQUEST = 'app/EmailVerification/VERIFICATION_REQUEST';\nexport const VERIFICATION_SUCCESS = 'app/EmailVerification/VERIFICATION_SUCCESS';\nexport const VERIFICATION_ERROR = 'app/EmailVerification/VERIFICATION_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  isVerified: false,\n  // verification\n  verificationError: null,\n  verificationInProgress: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case VERIFICATION_REQUEST:\n      return { ...state,\n        verificationInProgress: true,\n        verificationError: null\n      };\n\n    case VERIFICATION_SUCCESS:\n      return { ...state,\n        verificationInProgress: false,\n        isVerified: true\n      };\n\n    case VERIFICATION_ERROR:\n      return { ...state,\n        verificationInProgress: false,\n        verificationError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const verificationInProgress = state => {\n  return state.EmailVerification.verificationInProgress;\n}; // ================ Action creators ================ //\n\nexport const verificationRequest = () => ({\n  type: VERIFICATION_REQUEST\n});\nexport const verificationSuccess = () => ({\n  type: VERIFICATION_SUCCESS\n});\nexport const verificationError = error => ({\n  type: VERIFICATION_ERROR,\n  payload: error,\n  error: true\n}); // ================ Thunks ================ //\n\nexport const verify = verificationToken => (dispatch, getState, sdk) => {\n  if (verificationInProgress(getState())) {\n    return Promise.reject(new Error('Email verification already in progress'));\n  }\n\n  dispatch(verificationRequest()); // Note that the thunk does not reject when the verification fails, it\n  // just dispatches the login error action.\n\n  return sdk.currentUser.verifyEmail({\n    verificationToken\n  }).then(() => dispatch(verificationSuccess())).then(() => dispatch(fetchCurrentUser())).catch(e => dispatch(verificationError(storableError(e))));\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/EmailVerification.duck.js"],"names":["storableError","fetchCurrentUser","VERIFICATION_REQUEST","VERIFICATION_SUCCESS","VERIFICATION_ERROR","initialState","isVerified","verificationError","verificationInProgress","reducer","state","action","type","payload","EmailVerification","verificationRequest","verificationSuccess","error","verify","verificationToken","dispatch","getState","sdk","Promise","reject","Error","currentUser","verifyEmail","then","catch","e"],"mappings":"AAAA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,gBAAT,QAAiC,aAAjC,C,CAEA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,4CAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,4CAA7B;AACP,OAAO,MAAMC,kBAAkB,GAAG,0CAA3B,C,CAEP;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAGnB;AACAC,EAAAA,iBAAiB,EAAE,IAJA;AAKnBC,EAAAA,sBAAsB,EAAE;AALL,CAArB;AAQA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAM,GAAG,EAAhD,EAAoD;AACjE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKV,oBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,sBAAsB,EAAE,IAFnB;AAGLD,QAAAA,iBAAiB,EAAE;AAHd,OAAP;;AAKF,SAAKJ,oBAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYF,QAAAA,sBAAsB,EAAE,KAApC;AAA2CF,QAAAA,UAAU,EAAE;AAAvD,OAAP;;AACF,SAAKF,kBAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYF,QAAAA,sBAAsB,EAAE,KAApC;AAA2CD,QAAAA,iBAAiB,EAAEM;AAA9D,OAAP;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,C,CAED;;AAEA,OAAO,MAAMF,sBAAsB,GAAGE,KAAK,IAAI;AAC7C,SAAOA,KAAK,CAACI,iBAAN,CAAwBN,sBAA/B;AACD,CAFM,C,CAIP;;AAEA,OAAO,MAAMO,mBAAmB,GAAG,OAAO;AAAEH,EAAAA,IAAI,EAAEV;AAAR,CAAP,CAA5B;AACP,OAAO,MAAMc,mBAAmB,GAAG,OAAO;AAAEJ,EAAAA,IAAI,EAAET;AAAR,CAAP,CAA5B;AACP,OAAO,MAAMI,iBAAiB,GAAGU,KAAK,KAAK;AACzCL,EAAAA,IAAI,EAAER,kBADmC;AAEzCS,EAAAA,OAAO,EAAEI,KAFgC;AAGzCA,EAAAA,KAAK,EAAE;AAHkC,CAAL,CAA/B,C,CAMP;;AAEA,OAAO,MAAMC,MAAM,GAAGC,iBAAiB,IAAI,CAACC,QAAD,EAAWC,QAAX,EAAqBC,GAArB,KAA6B;AACtE,MAAId,sBAAsB,CAACa,QAAQ,EAAT,CAA1B,EAAwC;AACtC,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,wCAAV,CAAf,CAAP;AACD;;AACDL,EAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR,CAJsE,CAMtE;AACA;;AACA,SAAOO,GAAG,CAACI,WAAJ,CACJC,WADI,CACQ;AAAER,IAAAA;AAAF,GADR,EAEJS,IAFI,CAEC,MAAMR,QAAQ,CAACJ,mBAAmB,EAApB,CAFf,EAGJY,IAHI,CAGC,MAAMR,QAAQ,CAACnB,gBAAgB,EAAjB,CAHf,EAIJ4B,KAJI,CAIEC,CAAC,IAAIV,QAAQ,CAACb,iBAAiB,CAACP,aAAa,CAAC8B,CAAD,CAAd,CAAlB,CAJf,CAAP;AAKD,CAbM","sourcesContent":["import { storableError } from '../util/errors';\r\nimport { fetchCurrentUser } from './user.duck';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const VERIFICATION_REQUEST = 'app/EmailVerification/VERIFICATION_REQUEST';\r\nexport const VERIFICATION_SUCCESS = 'app/EmailVerification/VERIFICATION_SUCCESS';\r\nexport const VERIFICATION_ERROR = 'app/EmailVerification/VERIFICATION_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  isVerified: false,\r\n\r\n  // verification\r\n  verificationError: null,\r\n  verificationInProgress: false,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case VERIFICATION_REQUEST:\r\n      return {\r\n        ...state,\r\n        verificationInProgress: true,\r\n        verificationError: null,\r\n      };\r\n    case VERIFICATION_SUCCESS:\r\n      return { ...state, verificationInProgress: false, isVerified: true };\r\n    case VERIFICATION_ERROR:\r\n      return { ...state, verificationInProgress: false, verificationError: payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\nexport const verificationInProgress = state => {\r\n  return state.EmailVerification.verificationInProgress;\r\n};\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const verificationRequest = () => ({ type: VERIFICATION_REQUEST });\r\nexport const verificationSuccess = () => ({ type: VERIFICATION_SUCCESS });\r\nexport const verificationError = error => ({\r\n  type: VERIFICATION_ERROR,\r\n  payload: error,\r\n  error: true,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const verify = verificationToken => (dispatch, getState, sdk) => {\r\n  if (verificationInProgress(getState())) {\r\n    return Promise.reject(new Error('Email verification already in progress'));\r\n  }\r\n  dispatch(verificationRequest());\r\n\r\n  // Note that the thunk does not reject when the verification fails, it\r\n  // just dispatches the login error action.\r\n  return sdk.currentUser\r\n    .verifyEmail({ verificationToken })\r\n    .then(() => dispatch(verificationSuccess()))\r\n    .then(() => dispatch(fetchCurrentUser()))\r\n    .catch(e => dispatch(verificationError(storableError(e))));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}