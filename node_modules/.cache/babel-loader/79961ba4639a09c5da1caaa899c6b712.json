{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SearchFiltersMobile\\\\SearchFiltersMobile.js\";\nimport React, { Component } from 'react';\nimport { bool, func, object, node, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { createResourceLocatorString } from '../../../util/routes';\nimport { ModalInMobile, Button } from '../../../components';\nimport css from './SearchFiltersMobile.module.css';\n\nclass SearchFiltersMobileComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFiltersOpenOnMobile: false,\n      initialQueryParams: null\n    };\n    this.openFilters = this.openFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.closeFilters = this.closeFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n  } // Open filters modal, set the initial parameters to current ones\n\n\n  openFilters() {\n    const {\n      onOpenModal,\n      urlQueryParams\n    } = this.props;\n    onOpenModal();\n    this.setState({\n      isFiltersOpenOnMobile: true,\n      initialQueryParams: urlQueryParams\n    });\n  } // Close the filters by clicking cancel, revert to the initial params\n\n\n  cancelFilters() {\n    const {\n      history,\n      onCloseModal\n    } = this.props;\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, this.state.initialQueryParams));\n    onCloseModal();\n    this.setState({\n      isFiltersOpenOnMobile: false,\n      initialQueryParams: null\n    });\n  } // Close the filter modal\n\n\n  closeFilters() {\n    this.props.onCloseModal();\n    this.setState({\n      isFiltersOpenOnMobile: false\n    });\n  } // Reset all filter query parameters\n\n\n  resetAll(e) {\n    this.props.resetAll(e); // blur event target if event is passed\n\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      children,\n      sortByComponent,\n      listingsAreLoaded,\n      resultsCount,\n      searchInProgress,\n      showAsModalMaxWidth,\n      onMapIconClick,\n      onManageDisableScrolling,\n      selectedFiltersCount,\n      noResultsInfo,\n      intl,\n      isMapVariant\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const resultsFound = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchFiltersMobile.foundResults\",\n      values: {\n        count: resultsCount\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    });\n    const noResults = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchFiltersMobile.noResults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    });\n    const loadingResults = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchFiltersMobile.loadingResults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 28\n      }\n    });\n    const filtersHeading = intl.formatMessage({\n      id: 'SearchFiltersMobile.heading'\n    });\n    const modalCloseButtonMessage = intl.formatMessage({\n      id: 'SearchFiltersMobile.cancel'\n    });\n    const showListingsLabel = intl.formatMessage({\n      id: 'SearchFiltersMobile.showListings'\n    }, {\n      count: resultsCount\n    });\n    const filtersButtonClasses = selectedFiltersCount > 0 ? css.filtersButtonSelected : css.filtersButton;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.searchResultSummary,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, listingsAreLoaded && resultsCount > 0 ? resultsFound : null, listingsAreLoaded && resultsCount === 0 ? noResults : null, searchInProgress ? loadingResults : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      rootClassName: filtersButtonClasses,\n      onClick: this.openFilters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchFiltersMobile.filtersButtonLabel\",\n      className: css.mapIconText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    })), sortByComponent, isMapVariant ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.mapIcon,\n      onClick: onMapIconClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchFiltersMobile.openMapView\",\n      className: css.mapIconText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    })) : null), noResultsInfo ? noResultsInfo : null, /*#__PURE__*/React.createElement(ModalInMobile, {\n      id: \"SearchFiltersMobile.filters\",\n      isModalOpenOnMobile: this.state.isFiltersOpenOnMobile,\n      onClose: this.cancelFilters,\n      showAsModalMaxWidth: showAsModalMaxWidth,\n      onManageDisableScrolling: onManageDisableScrolling,\n      containerClassName: css.modalContainer,\n      closeButtonMessage: modalCloseButtonMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.modalHeadingWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.modalHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, filtersHeading), /*#__PURE__*/React.createElement(\"button\", {\n      className: css.resetAllButton,\n      onClick: e => this.resetAll(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SearchFiltersMobile.resetAll',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }))), this.state.isFiltersOpenOnMobile ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.filtersWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, children) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.showListingsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: css.showListingsButton,\n      onClick: this.closeFilters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, showListingsLabel))));\n  }\n\n}\n\nSearchFiltersMobileComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  sortByComponent: null,\n  resultsCount: null,\n  searchInProgress: false,\n  selectedFiltersCount: 0,\n  isMapVariant: true\n};\nSearchFiltersMobileComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  urlQueryParams: object.isRequired,\n  sortByComponent: node,\n  listingsAreLoaded: bool.isRequired,\n  resultsCount: number,\n  searchInProgress: bool,\n  showAsModalMaxWidth: number.isRequired,\n  onMapIconClick: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onOpenModal: func.isRequired,\n  onCloseModal: func.isRequired,\n  resetAll: func.isRequired,\n  selectedFiltersCount: number,\n  isMapVariant: bool,\n  // from injectIntl\n  intl: intlShape.isRequired,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nconst SearchFiltersMobile = injectIntl(_c = withRouter(SearchFiltersMobileComponent));\n_c2 = SearchFiltersMobile;\nexport default SearchFiltersMobile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchFiltersMobile$injectIntl\");\n$RefreshReg$(_c2, \"SearchFiltersMobile\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SearchFiltersMobile/SearchFiltersMobile.js"],"names":["React","Component","bool","func","object","node","number","shape","string","classNames","withRouter","routeConfiguration","FormattedMessage","injectIntl","intlShape","createResourceLocatorString","ModalInMobile","Button","css","SearchFiltersMobileComponent","constructor","props","state","isFiltersOpenOnMobile","initialQueryParams","openFilters","bind","cancelFilters","closeFilters","resetAll","onOpenModal","urlQueryParams","setState","history","onCloseModal","push","e","currentTarget","blur","render","rootClassName","className","children","sortByComponent","listingsAreLoaded","resultsCount","searchInProgress","showAsModalMaxWidth","onMapIconClick","onManageDisableScrolling","selectedFiltersCount","noResultsInfo","intl","isMapVariant","classes","root","resultsFound","count","noResults","loadingResults","filtersHeading","formatMessage","id","modalCloseButtonMessage","showListingsLabel","filtersButtonClasses","filtersButtonSelected","filtersButton","searchResultSummary","buttons","mapIconText","mapIcon","modalContainer","modalHeadingWrapper","modalHeading","resetAllButton","filtersWrapper","showListingsContainer","showListingsButton","defaultProps","propTypes","isRequired","SearchFiltersMobile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { bool, func, object, node, number, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport routeConfiguration from '../../../routing/routeConfiguration';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\n\r\nimport { ModalInMobile, Button } from '../../../components';\r\n\r\nimport css from './SearchFiltersMobile.module.css';\r\n\r\nclass SearchFiltersMobileComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isFiltersOpenOnMobile: false, initialQueryParams: null };\r\n\r\n    this.openFilters = this.openFilters.bind(this);\r\n    this.cancelFilters = this.cancelFilters.bind(this);\r\n    this.closeFilters = this.closeFilters.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n  }\r\n\r\n  // Open filters modal, set the initial parameters to current ones\r\n  openFilters() {\r\n    const { onOpenModal, urlQueryParams } = this.props;\r\n    onOpenModal();\r\n    this.setState({ isFiltersOpenOnMobile: true, initialQueryParams: urlQueryParams });\r\n  }\r\n\r\n  // Close the filters by clicking cancel, revert to the initial params\r\n  cancelFilters() {\r\n    const { history, onCloseModal } = this.props;\r\n\r\n    history.push(\r\n      createResourceLocatorString(\r\n        'SearchPage',\r\n        routeConfiguration(),\r\n        {},\r\n        this.state.initialQueryParams\r\n      )\r\n    );\r\n    onCloseModal();\r\n    this.setState({ isFiltersOpenOnMobile: false, initialQueryParams: null });\r\n  }\r\n\r\n  // Close the filter modal\r\n  closeFilters() {\r\n    this.props.onCloseModal();\r\n    this.setState({ isFiltersOpenOnMobile: false });\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  resetAll(e) {\r\n    this.props.resetAll(e);\r\n\r\n    // blur event target if event is passed\r\n    if (e && e.currentTarget) {\r\n      e.currentTarget.blur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      children,\r\n      sortByComponent,\r\n      listingsAreLoaded,\r\n      resultsCount,\r\n      searchInProgress,\r\n      showAsModalMaxWidth,\r\n      onMapIconClick,\r\n      onManageDisableScrolling,\r\n      selectedFiltersCount,\r\n      noResultsInfo,\r\n      intl,\r\n      isMapVariant,\r\n    } = this.props;\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const resultsFound = (\r\n      <FormattedMessage id=\"SearchFiltersMobile.foundResults\" values={{ count: resultsCount }} />\r\n    );\r\n    const noResults = <FormattedMessage id=\"SearchFiltersMobile.noResults\" />;\r\n    const loadingResults = <FormattedMessage id=\"SearchFiltersMobile.loadingResults\" />;\r\n    const filtersHeading = intl.formatMessage({ id: 'SearchFiltersMobile.heading' });\r\n    const modalCloseButtonMessage = intl.formatMessage({ id: 'SearchFiltersMobile.cancel' });\r\n\r\n    const showListingsLabel = intl.formatMessage(\r\n      { id: 'SearchFiltersMobile.showListings' },\r\n      { count: resultsCount }\r\n    );\r\n\r\n    const filtersButtonClasses =\r\n      selectedFiltersCount > 0 ? css.filtersButtonSelected : css.filtersButton;\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.searchResultSummary}>\r\n          {listingsAreLoaded && resultsCount > 0 ? resultsFound : null}\r\n          {listingsAreLoaded && resultsCount === 0 ? noResults : null}\r\n          {searchInProgress ? loadingResults : null}\r\n        </div>\r\n        <div className={css.buttons}>\r\n          <Button rootClassName={filtersButtonClasses} onClick={this.openFilters}>\r\n            <FormattedMessage\r\n              id=\"SearchFiltersMobile.filtersButtonLabel\"\r\n              className={css.mapIconText}\r\n            />\r\n          </Button>\r\n          {sortByComponent}\r\n          {isMapVariant ? (\r\n            <div className={css.mapIcon} onClick={onMapIconClick}>\r\n              <FormattedMessage id=\"SearchFiltersMobile.openMapView\" className={css.mapIconText} />\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n\r\n        {noResultsInfo ? noResultsInfo : null}\r\n\r\n        <ModalInMobile\r\n          id=\"SearchFiltersMobile.filters\"\r\n          isModalOpenOnMobile={this.state.isFiltersOpenOnMobile}\r\n          onClose={this.cancelFilters}\r\n          showAsModalMaxWidth={showAsModalMaxWidth}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          containerClassName={css.modalContainer}\r\n          closeButtonMessage={modalCloseButtonMessage}\r\n        >\r\n          <div className={css.modalHeadingWrapper}>\r\n            <span className={css.modalHeading}>{filtersHeading}</span>\r\n            <button className={css.resetAllButton} onClick={e => this.resetAll(e)}>\r\n              <FormattedMessage id={'SearchFiltersMobile.resetAll'} />\r\n            </button>\r\n          </div>\r\n          {this.state.isFiltersOpenOnMobile ? (\r\n            <div className={css.filtersWrapper}>{children}</div>\r\n          ) : null}\r\n\r\n          <div className={css.showListingsContainer}>\r\n            <Button className={css.showListingsButton} onClick={this.closeFilters}>\r\n              {showListingsLabel}\r\n            </Button>\r\n          </div>\r\n        </ModalInMobile>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchFiltersMobileComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  sortByComponent: null,\r\n  resultsCount: null,\r\n  searchInProgress: false,\r\n  selectedFiltersCount: 0,\r\n  isMapVariant: true,\r\n};\r\n\r\nSearchFiltersMobileComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  urlQueryParams: object.isRequired,\r\n  sortByComponent: node,\r\n  listingsAreLoaded: bool.isRequired,\r\n  resultsCount: number,\r\n  searchInProgress: bool,\r\n  showAsModalMaxWidth: number.isRequired,\r\n  onMapIconClick: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onOpenModal: func.isRequired,\r\n  onCloseModal: func.isRequired,\r\n  resetAll: func.isRequired,\r\n  selectedFiltersCount: number,\r\n  isMapVariant: bool,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from withRouter\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst SearchFiltersMobile = injectIntl(withRouter(SearchFiltersMobileComponent));\r\n\r\nexport default SearchFiltersMobile;\r\n"]},"metadata":{},"sourceType":"module"}