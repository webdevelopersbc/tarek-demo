{"ast":null,"code":"import \"core-js/modules/esnext.map.delete-all\";\nimport \"core-js/modules/esnext.map.every\";\nimport \"core-js/modules/esnext.map.filter\";\nimport \"core-js/modules/esnext.map.find\";\nimport \"core-js/modules/esnext.map.find-key\";\nimport \"core-js/modules/esnext.map.from\";\nimport \"core-js/modules/esnext.map.group-by\";\nimport \"core-js/modules/esnext.map.includes\";\nimport \"core-js/modules/esnext.map.key-by\";\nimport \"core-js/modules/esnext.map.key-of\";\nimport \"core-js/modules/esnext.map.map-keys\";\nimport \"core-js/modules/esnext.map.map-values\";\nimport \"core-js/modules/esnext.map.merge\";\nimport \"core-js/modules/esnext.map.of\";\nimport \"core-js/modules/esnext.map.reduce\";\nimport \"core-js/modules/esnext.map.some\";\nimport \"core-js/modules/esnext.map.update\";\nimport \"core-js/modules/esnext.set.add-all\";\nimport \"core-js/modules/esnext.set.delete-all\";\nimport \"core-js/modules/esnext.set.difference\";\nimport \"core-js/modules/esnext.set.every\";\nimport \"core-js/modules/esnext.set.filter\";\nimport \"core-js/modules/esnext.set.find\";\nimport \"core-js/modules/esnext.set.from\";\nimport \"core-js/modules/esnext.set.intersection\";\nimport \"core-js/modules/esnext.set.is-disjoint-from\";\nimport \"core-js/modules/esnext.set.is-subset-of\";\nimport \"core-js/modules/esnext.set.is-superset-of\";\nimport \"core-js/modules/esnext.set.join\";\nimport \"core-js/modules/esnext.set.map\";\nimport \"core-js/modules/esnext.set.of\";\nimport \"core-js/modules/esnext.set.reduce\";\nimport \"core-js/modules/esnext.set.some\";\nimport \"core-js/modules/esnext.set.symmetric-difference\";\nimport \"core-js/modules/esnext.set.union\";\nvar _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\index.js\";\n\n/**\r\n * This is the main entrypoint file for the application.\r\n *\r\n * When loaded in the client side, the application is rendered in the\r\n * #root element.\r\n *\r\n * When the bundle created from this file is imported in the server\r\n * side, the exported `renderApp` function can be used for server side\r\n * rendering.\r\n *\r\n * Note that this file is required for the build process.\r\n */\n// React 16 depends on the collection types Map and Set, as well as requestAnimationFrame.\n// https://reactjs.org/docs/javascript-environment-requirements.html\nimport 'raf/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { loadableReady } from '@loadable/component';\nimport { createInstance, types as sdkTypes } from './util/sdkLoader';\nimport { ClientApp, renderApp } from './app';\nimport configureStore from './store';\nimport { matchPathname } from './util/routes';\nimport * as sample from './util/sample';\nimport * as apiUtils from './util/api';\nimport config from './config';\nimport { authInfo } from './ducks/Auth.duck';\nimport { fetchCurrentUser } from './ducks/user.duck';\nimport routeConfiguration from './routing/routeConfiguration';\nimport * as log from './util/log';\nimport { LoggingAnalyticsHandler, GoogleAnalyticsHandler } from './analytics/handlers';\nimport './styles/marketplaceDefaults.css';\n\nconst render = (store, shouldHydrate) => {\n  // If the server already loaded the auth information, render the app\n  // immediately. Otherwise wait for the flag to be loaded and render\n  // when auth information is present.\n  const authInfoLoaded = store.getState().Auth.authInfoLoaded;\n  const info = authInfoLoaded ? Promise.resolve({}) : store.dispatch(authInfo());\n  info.then(() => {\n    store.dispatch(fetchCurrentUser());\n    return loadableReady();\n  }).then(() => {\n    if (shouldHydrate) {\n      ReactDOM.hydrate( /*#__PURE__*/React.createElement(ClientApp, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 26\n        }\n      }), document.getElementById('root'));\n    } else {\n      ReactDOM.render( /*#__PURE__*/React.createElement(ClientApp, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }\n      }), document.getElementById('root'));\n    }\n  }).catch(e => {\n    log.error(e, 'browser-side-render-failed');\n  });\n};\n\nconst setupAnalyticsHandlers = () => {\n  let handlers = []; // Log analytics page views and events in dev mode\n\n  if (config.dev) {\n    handlers.push(new LoggingAnalyticsHandler());\n  } // Add Google Analytics handler if tracker ID is found\n\n\n  if (process.env.REACT_APP_GOOGLE_ANALYTICS_ID) {\n    var _window;\n\n    if ((_window = window) === null || _window === void 0 ? void 0 : _window.ga) {\n      handlers.push(new GoogleAnalyticsHandler(window.ga));\n    } else {\n      // Some adblockers (e.g. Ghostery) might block the Google Analytics integration.\n      console.warn('Google Analytics (window.ga) is not available. It might be that your adblocker is blocking it.');\n    }\n  }\n\n  return handlers;\n}; // If we're in a browser already, render the client application.\n\n\nif (typeof window !== 'undefined') {\n  // set up logger with Sentry DSN client key and environment\n  log.setup();\n  const baseUrl = config.sdk.baseUrl ? {\n    baseUrl: config.sdk.baseUrl\n  } : {}; // eslint-disable-next-line no-underscore-dangle\n\n  const preloadedState = window.__PRELOADED_STATE__ || '{}';\n  const initialState = JSON.parse(preloadedState, sdkTypes.reviver);\n  const sdk = createInstance({\n    transitVerbose: config.sdk.transitVerbose,\n    clientId: config.sdk.clientId,\n    secure: config.usingSSL,\n    typeHandlers: apiUtils.typeHandlers,\n    ...baseUrl\n  });\n  const analyticsHandlers = setupAnalyticsHandlers();\n  const store = configureStore(initialState, sdk, analyticsHandlers);\n\n  require('./util/polyfills');\n\n  render(store, !!window.__PRELOADED_STATE__);\n\n  if (config.dev) {\n    // Expose stuff for the browser REPL\n    window.app = {\n      config,\n      sdk,\n      sdkTypes,\n      store,\n      sample,\n      routeConfiguration: routeConfiguration()\n    };\n  }\n} // Show warning if CSP is not enabled\n\n\nconst CSP = process.env.REACT_APP_CSP;\nconst cspEnabled = CSP === 'block' || CSP === 'report';\n\nif (CSP === 'report' && process.env.REACT_APP_ENV === 'production') {\n  console.warn('Your production environment should use CSP with \"block\" mode. Read more from: https://www.sharetribe.com/docs/ftw-security/how-to-set-up-csp-for-ftw/');\n} else if (!cspEnabled) {\n  console.warn(\"CSP is currently not enabled! You should add an environment variable REACT_APP_CSP with the value 'report' or 'block'. Read more from: https://www.sharetribe.com/docs/ftw-security/how-to-set-up-csp-for-ftw/\");\n} // Export the function for server side rendering.\n\n\nexport default renderApp; // exporting matchPathname and configureStore for server side rendering.\n// matchPathname helps to figure out which route is called and if it has preloading needs\n// configureStore is used for creating initial store state for Redux after preloading\n\nexport { matchPathname, configureStore, routeConfiguration, config };","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/index.js"],"names":["React","ReactDOM","loadableReady","createInstance","types","sdkTypes","ClientApp","renderApp","configureStore","matchPathname","sample","apiUtils","config","authInfo","fetchCurrentUser","routeConfiguration","log","LoggingAnalyticsHandler","GoogleAnalyticsHandler","render","store","shouldHydrate","authInfoLoaded","getState","Auth","info","Promise","resolve","dispatch","then","hydrate","document","getElementById","catch","e","error","setupAnalyticsHandlers","handlers","dev","push","process","env","REACT_APP_GOOGLE_ANALYTICS_ID","window","ga","console","warn","setup","baseUrl","sdk","preloadedState","__PRELOADED_STATE__","initialState","JSON","parse","reviver","transitVerbose","clientId","secure","usingSSL","typeHandlers","analyticsHandlers","require","app","CSP","REACT_APP_CSP","cspEnabled","REACT_APP_ENV"],"mappings":"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","sourcesContent":["/**\r\n * This is the main entrypoint file for the application.\r\n *\r\n * When loaded in the client side, the application is rendered in the\r\n * #root element.\r\n *\r\n * When the bundle created from this file is imported in the server\r\n * side, the exported `renderApp` function can be used for server side\r\n * rendering.\r\n *\r\n * Note that this file is required for the build process.\r\n */\r\n\r\n// React 16 depends on the collection types Map and Set, as well as requestAnimationFrame.\r\n// https://reactjs.org/docs/javascript-environment-requirements.html\r\nimport 'core-js/features/map';\r\nimport 'core-js/features/set';\r\nimport 'raf/polyfill';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { loadableReady } from '@loadable/component';\r\nimport { createInstance, types as sdkTypes } from './util/sdkLoader';\r\nimport { ClientApp, renderApp } from './app';\r\nimport configureStore from './store';\r\nimport { matchPathname } from './util/routes';\r\nimport * as sample from './util/sample';\r\nimport * as apiUtils from './util/api';\r\nimport config from './config';\r\nimport { authInfo } from './ducks/Auth.duck';\r\nimport { fetchCurrentUser } from './ducks/user.duck';\r\nimport routeConfiguration from './routing/routeConfiguration';\r\nimport * as log from './util/log';\r\nimport { LoggingAnalyticsHandler, GoogleAnalyticsHandler } from './analytics/handlers';\r\n\r\nimport './styles/marketplaceDefaults.css';\r\n\r\nconst render = (store, shouldHydrate) => {\r\n  // If the server already loaded the auth information, render the app\r\n  // immediately. Otherwise wait for the flag to be loaded and render\r\n  // when auth information is present.\r\n  const authInfoLoaded = store.getState().Auth.authInfoLoaded;\r\n  const info = authInfoLoaded ? Promise.resolve({}) : store.dispatch(authInfo());\r\n  info\r\n    .then(() => {\r\n      store.dispatch(fetchCurrentUser());\r\n      return loadableReady();\r\n    })\r\n    .then(() => {\r\n      if (shouldHydrate) {\r\n        ReactDOM.hydrate(<ClientApp store={store} />, document.getElementById('root'));\r\n      } else {\r\n        ReactDOM.render(<ClientApp store={store} />, document.getElementById('root'));\r\n      }\r\n    })\r\n    .catch(e => {\r\n      log.error(e, 'browser-side-render-failed');\r\n    });\r\n};\r\n\r\nconst setupAnalyticsHandlers = () => {\r\n  let handlers = [];\r\n\r\n  // Log analytics page views and events in dev mode\r\n  if (config.dev) {\r\n    handlers.push(new LoggingAnalyticsHandler());\r\n  }\r\n\r\n  // Add Google Analytics handler if tracker ID is found\r\n  if (process.env.REACT_APP_GOOGLE_ANALYTICS_ID) {\r\n    if (window?.ga) {\r\n      handlers.push(new GoogleAnalyticsHandler(window.ga));\r\n    } else {\r\n      // Some adblockers (e.g. Ghostery) might block the Google Analytics integration.\r\n      console.warn(\r\n        'Google Analytics (window.ga) is not available. It might be that your adblocker is blocking it.'\r\n      );\r\n    }\r\n  }\r\n\r\n  return handlers;\r\n};\r\n\r\n// If we're in a browser already, render the client application.\r\nif (typeof window !== 'undefined') {\r\n  // set up logger with Sentry DSN client key and environment\r\n  log.setup();\r\n\r\n  const baseUrl = config.sdk.baseUrl ? { baseUrl: config.sdk.baseUrl } : {};\r\n\r\n  // eslint-disable-next-line no-underscore-dangle\r\n  const preloadedState = window.__PRELOADED_STATE__ || '{}';\r\n  const initialState = JSON.parse(preloadedState, sdkTypes.reviver);\r\n  const sdk = createInstance({\r\n    transitVerbose: config.sdk.transitVerbose,\r\n    clientId: config.sdk.clientId,\r\n    secure: config.usingSSL,\r\n    typeHandlers: apiUtils.typeHandlers,\r\n    ...baseUrl,\r\n  });\r\n  const analyticsHandlers = setupAnalyticsHandlers();\r\n  const store = configureStore(initialState, sdk, analyticsHandlers);\r\n\r\n  require('./util/polyfills');\r\n  render(store, !!window.__PRELOADED_STATE__);\r\n\r\n  if (config.dev) {\r\n    // Expose stuff for the browser REPL\r\n    window.app = {\r\n      config,\r\n      sdk,\r\n      sdkTypes,\r\n      store,\r\n      sample,\r\n      routeConfiguration: routeConfiguration(),\r\n    };\r\n  }\r\n}\r\n\r\n// Show warning if CSP is not enabled\r\nconst CSP = process.env.REACT_APP_CSP;\r\nconst cspEnabled = CSP === 'block' || CSP === 'report';\r\n\r\nif (CSP === 'report' && process.env.REACT_APP_ENV === 'production') {\r\n  console.warn(\r\n    'Your production environment should use CSP with \"block\" mode. Read more from: https://www.sharetribe.com/docs/ftw-security/how-to-set-up-csp-for-ftw/'\r\n  );\r\n} else if (!cspEnabled) {\r\n  console.warn(\r\n    \"CSP is currently not enabled! You should add an environment variable REACT_APP_CSP with the value 'report' or 'block'. Read more from: https://www.sharetribe.com/docs/ftw-security/how-to-set-up-csp-for-ftw/\"\r\n  );\r\n}\r\n\r\n// Export the function for server side rendering.\r\nexport default renderApp;\r\n\r\n// exporting matchPathname and configureStore for server side rendering.\r\n// matchPathname helps to figure out which route is called and if it has preloading needs\r\n// configureStore is used for creating initial store state for Redux after preloading\r\nexport { matchPathname, configureStore, routeConfiguration, config };\r\n"]},"metadata":{},"sourceType":"module"}