{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\Modal\\\\Modal.js\";\n\n/**\r\n * Modal creates popup which on mobile layout fills the entire visible page.\r\n *\r\n * Example:\r\n * <Parent>\r\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\r\n *     <FormX />\r\n *   </Modal>\r\n * </Parent>\r\n */\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { Button, IconClose } from '../../components';\nimport css from './Modal.module.css';\nconst KEY_CODE_ESCAPE = 27;\n\nclass Portal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    this.props.portalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    this.props.portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(this.props.children, this.el);\n  }\n\n}\n\nexport class ModalComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.refDiv = /*#__PURE__*/React.createRef();\n    this.state = {\n      portalRoot: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id,\n      isOpen,\n      onManageDisableScrolling\n    } = this.props;\n    onManageDisableScrolling(id, isOpen);\n    document.body.addEventListener('keyup', this.handleBodyKeyUp);\n    this.setState({\n      portalRoot: document.getElementById('portal-root')\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      id,\n      isOpen,\n      onManageDisableScrolling\n    } = prevProps;\n\n    if (this.props.isOpen !== isOpen) {\n      onManageDisableScrolling(id, this.props.isOpen); // Because we are using portal,\n      // we need to set the focus inside Modal manually\n\n      if (this.props.usePortal && this.props.isOpen) {\n        this.refDiv.current.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      id,\n      onManageDisableScrolling\n    } = this.props;\n    document.body.removeEventListener('keyup', this.handleBodyKeyUp);\n    onManageDisableScrolling(id, false);\n  }\n\n  handleBodyKeyUp(event) {\n    const {\n      isOpen\n    } = this.props;\n\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\n      this.handleClose(event);\n    }\n  }\n\n  handleClose(event) {\n    const {\n      id,\n      onClose,\n      onManageDisableScrolling\n    } = this.props;\n    onManageDisableScrolling(id, false);\n    onClose(event);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      scrollLayerClassName,\n      closeButtonMessage,\n      containerClassName,\n      contentClassName,\n      lightCloseButton,\n      intl,\n      isClosedClassName,\n      isOpen,\n      usePortal\n    } = this.props;\n    const closeModalMessage = intl.formatMessage({\n      id: 'Modal.closeModal'\n    });\n    const closeButtonClasses = classNames(css.close, {\n      [css.closeLight]: lightCloseButton\n    });\n    const closeBtn = isOpen ? /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      rootClassName: closeButtonClasses,\n      title: closeModalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.closeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, closeButtonMessage || /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Modal.close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(IconClose, {\n      rootClassName: css.closeIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    })) : null; // Modal uses given styles to wrap child components.\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\n\n    const modalClass = isOpen ? css.isOpen : isClosedClassName;\n    const classes = classNames(modalClass, className);\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\n    const containerClasses = containerClassName || css.container;\n    const portalRoot = this.state.portalRoot; // If you want to use Portal https://reactjs.org/docs/portals.html\n    // you need to use 'userPortal' flag.\n    // ModalInMobile component needs to use the old Modal without the portal\n    // because it's relying that the content is rendered inside\n    // the DOM hierarchy of the parent component unlike Modal inside Portal.\n\n    return !usePortal ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: scrollLayerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: containerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, closeBtn, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(contentClassName || css.content),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, children)))) : portalRoot ? /*#__PURE__*/React.createElement(Portal, {\n      portalRoot: portalRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: scrollLayerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(containerClasses, css.focusedDiv),\n      ref: this.refDiv,\n      tabIndex: \"-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, closeBtn, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(contentClassName || css.content),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, children))))) : null;\n  }\n\n}\nModalComponent.defaultProps = {\n  children: null,\n  className: null,\n  scrollLayerClassName: null,\n  closeButtonMessage: null,\n  containerClassName: null,\n  contentClassName: null,\n  lightCloseButton: false,\n  isClosedClassName: css.isClosed,\n  isOpen: false,\n  onClose: null,\n  usePortal: false\n};\nconst {\n  bool,\n  func,\n  node,\n  string\n} = PropTypes;\nModalComponent.propTypes = {\n  children: node,\n  className: string,\n  scrollLayerClassName: string,\n  closeButtonMessage: node,\n  containerClassName: string,\n  contentClassName: string,\n  lightCloseButton: bool,\n  id: string.isRequired,\n  intl: intlShape.isRequired,\n  isClosedClassName: string,\n  isOpen: bool,\n  onClose: func.isRequired,\n  usePortal: bool,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired\n};\nexport default _c = injectIntl(ModalComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/Modal/Modal.js"],"names":["React","Component","ReactDOM","PropTypes","classNames","FormattedMessage","intlShape","injectIntl","Button","IconClose","css","KEY_CODE_ESCAPE","Portal","constructor","props","el","document","createElement","componentDidMount","portalRoot","appendChild","componentWillUnmount","removeChild","render","createPortal","children","ModalComponent","handleBodyKeyUp","bind","handleClose","refDiv","createRef","state","id","isOpen","onManageDisableScrolling","body","addEventListener","setState","getElementById","componentDidUpdate","prevProps","usePortal","current","focus","removeEventListener","event","keyCode","onClose","className","scrollLayerClassName","closeButtonMessage","containerClassName","contentClassName","lightCloseButton","intl","isClosedClassName","closeModalMessage","formatMessage","closeButtonClasses","close","closeLight","closeBtn","closeText","closeIcon","modalClass","classes","scrollLayerClasses","scrollLayer","containerClasses","container","content","focusedDiv","defaultProps","isClosed","bool","func","node","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\r\n * Modal creates popup which on mobile layout fills the entire visible page.\r\n *\r\n * Example:\r\n * <Parent>\r\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\r\n *     <FormX />\r\n *   </Modal>\r\n * </Parent>\r\n */\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { Button, IconClose } from '../../components';\r\n\r\nimport css from './Modal.module.css';\r\n\r\nconst KEY_CODE_ESCAPE = 27;\r\n\r\nclass Portal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    // The portal element is inserted in the DOM tree after\r\n    // the Modal's children are mounted, meaning that children\r\n    // will be mounted on a detached DOM node. If a child\r\n    // component requires to be attached to the DOM tree\r\n    // immediately when mounted, for example to measure a\r\n    // DOM node, or uses 'autoFocus' in a descendant, add\r\n    // state to Modal and only render the children when Modal\r\n    // is inserted in the DOM tree.\r\n    this.props.portalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.portalRoot.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(this.props.children, this.el);\r\n  }\r\n}\r\n\r\nexport class ModalComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n    this.refDiv = React.createRef();\r\n\r\n    this.state = {\r\n      portalRoot: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id, isOpen, onManageDisableScrolling } = this.props;\r\n    onManageDisableScrolling(id, isOpen);\r\n    document.body.addEventListener('keyup', this.handleBodyKeyUp);\r\n    this.setState({\r\n      portalRoot: document.getElementById('portal-root'),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { id, isOpen, onManageDisableScrolling } = prevProps;\r\n    if (this.props.isOpen !== isOpen) {\r\n      onManageDisableScrolling(id, this.props.isOpen);\r\n\r\n      // Because we are using portal,\r\n      // we need to set the focus inside Modal manually\r\n      if (this.props.usePortal && this.props.isOpen) {\r\n        this.refDiv.current.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { id, onManageDisableScrolling } = this.props;\r\n    document.body.removeEventListener('keyup', this.handleBodyKeyUp);\r\n    onManageDisableScrolling(id, false);\r\n  }\r\n\r\n  handleBodyKeyUp(event) {\r\n    const { isOpen } = this.props;\r\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\r\n      this.handleClose(event);\r\n    }\r\n  }\r\n\r\n  handleClose(event) {\r\n    const { id, onClose, onManageDisableScrolling } = this.props;\r\n    onManageDisableScrolling(id, false);\r\n    onClose(event);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      className,\r\n      scrollLayerClassName,\r\n      closeButtonMessage,\r\n      containerClassName,\r\n      contentClassName,\r\n      lightCloseButton,\r\n      intl,\r\n      isClosedClassName,\r\n      isOpen,\r\n      usePortal,\r\n    } = this.props;\r\n\r\n    const closeModalMessage = intl.formatMessage({ id: 'Modal.closeModal' });\r\n    const closeButtonClasses = classNames(css.close, {\r\n      [css.closeLight]: lightCloseButton,\r\n    });\r\n    const closeBtn = isOpen ? (\r\n      <Button\r\n        onClick={this.handleClose}\r\n        rootClassName={closeButtonClasses}\r\n        title={closeModalMessage}\r\n      >\r\n        <span className={css.closeText}>\r\n          {closeButtonMessage || <FormattedMessage id=\"Modal.close\" />}\r\n        </span>\r\n        <IconClose rootClassName={css.closeIcon} />\r\n      </Button>\r\n    ) : null;\r\n\r\n    // Modal uses given styles to wrap child components.\r\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\r\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\r\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\r\n    const modalClass = isOpen ? css.isOpen : isClosedClassName;\r\n    const classes = classNames(modalClass, className);\r\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\r\n    const containerClasses = containerClassName || css.container;\r\n    const portalRoot = this.state.portalRoot;\r\n\r\n    // If you want to use Portal https://reactjs.org/docs/portals.html\r\n    // you need to use 'userPortal' flag.\r\n    // ModalInMobile component needs to use the old Modal without the portal\r\n    // because it's relying that the content is rendered inside\r\n    // the DOM hierarchy of the parent component unlike Modal inside Portal.\r\n\r\n    return !usePortal ? (\r\n      <div className={classes}>\r\n        <div className={scrollLayerClasses}>\r\n          <div className={containerClasses}>\r\n            {closeBtn}\r\n            <div className={classNames(contentClassName || css.content)}>{children}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : portalRoot ? (\r\n      <Portal portalRoot={portalRoot}>\r\n        <div className={classes}>\r\n          <div className={scrollLayerClasses}>\r\n            <div\r\n              className={classNames(containerClasses, css.focusedDiv)}\r\n              ref={this.refDiv}\r\n              tabIndex=\"-1\"\r\n            >\r\n              {closeBtn}\r\n              <div className={classNames(contentClassName || css.content)}>{children}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Portal>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nModalComponent.defaultProps = {\r\n  children: null,\r\n  className: null,\r\n  scrollLayerClassName: null,\r\n  closeButtonMessage: null,\r\n  containerClassName: null,\r\n  contentClassName: null,\r\n  lightCloseButton: false,\r\n  isClosedClassName: css.isClosed,\r\n  isOpen: false,\r\n  onClose: null,\r\n  usePortal: false,\r\n};\r\n\r\nconst { bool, func, node, string } = PropTypes;\r\n\r\nModalComponent.propTypes = {\r\n  children: node,\r\n  className: string,\r\n  scrollLayerClassName: string,\r\n  closeButtonMessage: node,\r\n  containerClassName: string,\r\n  contentClassName: string,\r\n  lightCloseButton: bool,\r\n  id: string.isRequired,\r\n  intl: intlShape.isRequired,\r\n  isClosedClassName: string,\r\n  isOpen: bool,\r\n  onClose: func.isRequired,\r\n  usePortal: bool,\r\n\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  onManageDisableScrolling: func.isRequired,\r\n};\r\n\r\nexport default injectIntl(ModalComponent);\r\n"]},"metadata":{},"sourceType":"module"}