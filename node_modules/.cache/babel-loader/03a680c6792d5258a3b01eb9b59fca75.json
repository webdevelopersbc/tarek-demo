{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\app.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOMServer from 'react-dom/server'; // react-dates needs to be initialized before using any react-dates component\n// https://github.com/airbnb/react-dates#initialize\n// NOTE: Initializing it here will initialize it also for app.test.js\n\nimport 'react-dates/initialize';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { BrowserRouter, StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport difference from 'lodash/difference';\nimport mapValues from 'lodash/mapValues';\nimport moment from 'moment';\nimport { IntlProvider } from './util/reactIntl';\nimport { IncludeMapLibraryScripts } from './util/includeScripts';\nimport configureStore from './store';\nimport routeConfiguration from './routing/routeConfiguration';\nimport Routes from './routing/Routes';\nimport config from './config'; // Flex template application uses English translations as default.\n\nimport defaultMessages from './translations/en.json'; // If you want to change the language, change the imports to match the wanted locale:\n//   1) Change the language in the config.js file!\n//   2) Import correct locale rules for Moment library\n//   3) Use the `messagesInLocale` import to add the correct translation file.\n//   4) To support older browsers we need add the correct locale for intl-relativetimeformat to `util/polyfills.js`\n// Note that there is also translations in './translations/countryCodes.js' file\n// This file contains ISO 3166-1 alpha-2 country codes, country names and their translations in our default languages\n// This used to collect billing address in StripePaymentAddress on CheckoutPage\n// Step 2:\n// If you are using a non-english locale with moment library,\n// you should also import time specific formatting rules for that locale\n// e.g. for French: import 'moment/locale/fr';\n// Step 3:\n// If you are using a non-english locale, point `messagesInLocale` to correct .json file.\n// Remove \"const messagesInLocale\" and add import for the correct locale:\n// import messagesInLocale from './translations/fr.json';\n\nconst messagesInLocale = {}; // If translation key is missing from `messagesInLocale` (e.g. fr.json),\n// corresponding key will be added to messages from `defaultMessages` (en.json)\n// to prevent missing translation key errors.\n\nconst addMissingTranslations = (sourceLangTranslations, targetLangTranslations) => {\n  const sourceKeys = Object.keys(sourceLangTranslations);\n  const targetKeys = Object.keys(targetLangTranslations);\n  const missingKeys = difference(sourceKeys, targetKeys);\n\n  const addMissingTranslation = (translations, missingKey) => ({ ...translations,\n    [missingKey]: sourceLangTranslations[missingKey]\n  });\n\n  return missingKeys.reduce(addMissingTranslation, targetLangTranslations);\n};\n\nconst isDefaultLanguageInUse = config.locale === 'en';\nconst messages = isDefaultLanguageInUse ? defaultMessages : addMissingTranslations(defaultMessages, messagesInLocale);\nconst isTestEnv = process.env.NODE_ENV === 'test'; // Locale should not affect the tests. We ensure this by providing\n// messages with the key as the value of each message.\n\nconst testMessages = mapValues(messages, (val, key) => key);\nconst localeMessages = isTestEnv ? testMessages : messages;\n\nconst setupLocale = () => {\n  if (isTestEnv) {\n    // Use english as a default locale in tests\n    // This affects app.test.js and app.node.test.js tests\n    config.locale = 'en';\n    return;\n  } // Set the Moment locale globally\n  // See: http://momentjs.com/docs/#/i18n/changing-locale/\n\n\n  moment.locale(config.locale);\n};\n\nexport const ClientApp = props => {\n  const {\n    store\n  } = props;\n  setupLocale();\n  return /*#__PURE__*/React.createElement(IntlProvider, {\n    locale: config.locale,\n    messages: localeMessages,\n    textComponent: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HelmetProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IncludeMapLibraryScripts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    routes: routeConfiguration(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  })))));\n};\n_c = ClientApp;\nconst {\n  any,\n  string\n} = PropTypes;\nClientApp.propTypes = {\n  store: any.isRequired\n};\nexport const ServerApp = props => {\n  const {\n    url,\n    context,\n    helmetContext,\n    store\n  } = props;\n  setupLocale();\n  HelmetProvider.canUseDOM = false;\n  return /*#__PURE__*/React.createElement(IntlProvider, {\n    locale: config.locale,\n    messages: localeMessages,\n    textComponent: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HelmetProvider, {\n    context: helmetContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IncludeMapLibraryScripts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StaticRouter, {\n    location: url,\n    context: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    routes: routeConfiguration(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })))));\n};\n_c2 = ServerApp;\nServerApp.propTypes = {\n  url: string.isRequired,\n  context: any.isRequired,\n  store: any.isRequired\n};\n/**\r\n * Render the given route.\r\n *\r\n * @param {String} url Path to render\r\n * @param {Object} serverContext Server rendering context from react-router\r\n *\r\n * @returns {Object} Object with keys:\r\n *  - {String} body: Rendered application body of the given route\r\n *  - {Object} head: Application head metadata from react-helmet\r\n */\n\nexport const renderApp = (url, serverContext, preloadedState, collectChunks) => {\n  // Don't pass an SDK instance since we're only rendering the\n  // component tree with the preloaded store state and components\n  // shouldn't do any SDK calls in the (server) rendering lifecycle.\n  const store = configureStore(preloadedState);\n  const helmetContext = {}; // When rendering the app on server, we wrap the app with webExtractor.collectChunks\n  // This is needed to figure out correct chunks/scripts to be included to server-rendered page.\n  // https://loadable-components.com/docs/server-side-rendering/#3-setup-chunkextractor-server-side\n\n  const WithChunks = collectChunks( /*#__PURE__*/React.createElement(ServerApp, {\n    url: url,\n    context: serverContext,\n    helmetContext: helmetContext,\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }));\n  const body = ReactDOMServer.renderToString(WithChunks);\n  const {\n    helmet: head\n  } = helmetContext;\n  return {\n    head,\n    body\n  };\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ClientApp\");\n$RefreshReg$(_c2, \"ServerApp\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/app.js"],"names":["React","PropTypes","ReactDOMServer","HelmetProvider","BrowserRouter","StaticRouter","Provider","difference","mapValues","moment","IntlProvider","IncludeMapLibraryScripts","configureStore","routeConfiguration","Routes","config","defaultMessages","messagesInLocale","addMissingTranslations","sourceLangTranslations","targetLangTranslations","sourceKeys","Object","keys","targetKeys","missingKeys","addMissingTranslation","translations","missingKey","reduce","isDefaultLanguageInUse","locale","messages","isTestEnv","process","env","NODE_ENV","testMessages","val","key","localeMessages","setupLocale","ClientApp","props","store","any","string","propTypes","isRequired","ServerApp","url","context","helmetContext","canUseDOM","renderApp","serverContext","preloadedState","collectChunks","WithChunks","body","renderToString","helmet","head"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\n// react-dates needs to be initialized before using any react-dates component\r\n// https://github.com/airbnb/react-dates#initialize\r\n// NOTE: Initializing it here will initialize it also for app.test.js\r\nimport 'react-dates/initialize';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\nimport { BrowserRouter, StaticRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport difference from 'lodash/difference';\r\nimport mapValues from 'lodash/mapValues';\r\nimport moment from 'moment';\r\nimport { IntlProvider } from './util/reactIntl';\r\nimport { IncludeMapLibraryScripts } from './util/includeScripts';\r\nimport configureStore from './store';\r\nimport routeConfiguration from './routing/routeConfiguration';\r\nimport Routes from './routing/Routes';\r\nimport config from './config';\r\n\r\n// Flex template application uses English translations as default.\r\nimport defaultMessages from './translations/en.json';\r\n\r\n// If you want to change the language, change the imports to match the wanted locale:\r\n//   1) Change the language in the config.js file!\r\n//   2) Import correct locale rules for Moment library\r\n//   3) Use the `messagesInLocale` import to add the correct translation file.\r\n//   4) To support older browsers we need add the correct locale for intl-relativetimeformat to `util/polyfills.js`\r\n\r\n// Note that there is also translations in './translations/countryCodes.js' file\r\n// This file contains ISO 3166-1 alpha-2 country codes, country names and their translations in our default languages\r\n// This used to collect billing address in StripePaymentAddress on CheckoutPage\r\n\r\n// Step 2:\r\n// If you are using a non-english locale with moment library,\r\n// you should also import time specific formatting rules for that locale\r\n// e.g. for French: import 'moment/locale/fr';\r\n\r\n// Step 3:\r\n// If you are using a non-english locale, point `messagesInLocale` to correct .json file.\r\n// Remove \"const messagesInLocale\" and add import for the correct locale:\r\n// import messagesInLocale from './translations/fr.json';\r\nconst messagesInLocale = {};\r\n\r\n// If translation key is missing from `messagesInLocale` (e.g. fr.json),\r\n// corresponding key will be added to messages from `defaultMessages` (en.json)\r\n// to prevent missing translation key errors.\r\nconst addMissingTranslations = (sourceLangTranslations, targetLangTranslations) => {\r\n  const sourceKeys = Object.keys(sourceLangTranslations);\r\n  const targetKeys = Object.keys(targetLangTranslations);\r\n  const missingKeys = difference(sourceKeys, targetKeys);\r\n\r\n  const addMissingTranslation = (translations, missingKey) => ({\r\n    ...translations,\r\n    [missingKey]: sourceLangTranslations[missingKey],\r\n  });\r\n\r\n  return missingKeys.reduce(addMissingTranslation, targetLangTranslations);\r\n};\r\n\r\nconst isDefaultLanguageInUse = config.locale === 'en';\r\n\r\nconst messages = isDefaultLanguageInUse\r\n  ? defaultMessages\r\n  : addMissingTranslations(defaultMessages, messagesInLocale);\r\n\r\nconst isTestEnv = process.env.NODE_ENV === 'test';\r\n\r\n// Locale should not affect the tests. We ensure this by providing\r\n// messages with the key as the value of each message.\r\nconst testMessages = mapValues(messages, (val, key) => key);\r\nconst localeMessages = isTestEnv ? testMessages : messages;\r\n\r\nconst setupLocale = () => {\r\n  if (isTestEnv) {\r\n    // Use english as a default locale in tests\r\n    // This affects app.test.js and app.node.test.js tests\r\n    config.locale = 'en';\r\n    return;\r\n  }\r\n\r\n  // Set the Moment locale globally\r\n  // See: http://momentjs.com/docs/#/i18n/changing-locale/\r\n  moment.locale(config.locale);\r\n};\r\n\r\nexport const ClientApp = props => {\r\n  const { store } = props;\r\n  setupLocale();\r\n  return (\r\n    <IntlProvider locale={config.locale} messages={localeMessages} textComponent=\"span\">\r\n      <Provider store={store}>\r\n        <HelmetProvider>\r\n          <IncludeMapLibraryScripts />\r\n          <BrowserRouter>\r\n            <Routes routes={routeConfiguration()} />\r\n          </BrowserRouter>\r\n        </HelmetProvider>\r\n      </Provider>\r\n    </IntlProvider>\r\n  );\r\n};\r\n\r\nconst { any, string } = PropTypes;\r\n\r\nClientApp.propTypes = { store: any.isRequired };\r\n\r\nexport const ServerApp = props => {\r\n  const { url, context, helmetContext, store } = props;\r\n  setupLocale();\r\n  HelmetProvider.canUseDOM = false;\r\n  return (\r\n    <IntlProvider locale={config.locale} messages={localeMessages} textComponent=\"span\">\r\n      <Provider store={store}>\r\n        <HelmetProvider context={helmetContext}>\r\n          <IncludeMapLibraryScripts />\r\n          <StaticRouter location={url} context={context}>\r\n            <Routes routes={routeConfiguration()} />\r\n          </StaticRouter>\r\n        </HelmetProvider>\r\n      </Provider>\r\n    </IntlProvider>\r\n  );\r\n};\r\n\r\nServerApp.propTypes = { url: string.isRequired, context: any.isRequired, store: any.isRequired };\r\n\r\n/**\r\n * Render the given route.\r\n *\r\n * @param {String} url Path to render\r\n * @param {Object} serverContext Server rendering context from react-router\r\n *\r\n * @returns {Object} Object with keys:\r\n *  - {String} body: Rendered application body of the given route\r\n *  - {Object} head: Application head metadata from react-helmet\r\n */\r\nexport const renderApp = (url, serverContext, preloadedState, collectChunks) => {\r\n  // Don't pass an SDK instance since we're only rendering the\r\n  // component tree with the preloaded store state and components\r\n  // shouldn't do any SDK calls in the (server) rendering lifecycle.\r\n  const store = configureStore(preloadedState);\r\n\r\n  const helmetContext = {};\r\n\r\n  // When rendering the app on server, we wrap the app with webExtractor.collectChunks\r\n  // This is needed to figure out correct chunks/scripts to be included to server-rendered page.\r\n  // https://loadable-components.com/docs/server-side-rendering/#3-setup-chunkextractor-server-side\r\n  const WithChunks = collectChunks(\r\n    <ServerApp url={url} context={serverContext} helmetContext={helmetContext} store={store} />\r\n  );\r\n  const body = ReactDOMServer.renderToString(WithChunks);\r\n  const { helmet: head } = helmetContext;\r\n  return { head, body };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}