{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\PaginationLinks\\\\PaginationLinks.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '../../util/reactIntl';\nimport classNames from 'classnames';\nimport range from 'lodash/range';\nimport { IconArrowHead, NamedLink } from '../../components';\nimport { stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport css from './PaginationLinks.module.css';\nconst {\n  string,\n  object\n} = PropTypes;\nlet pgKey = 0;\n\nconst paginationGapKey = () => {\n  pgKey += 1;\n  return pgKey;\n};\n/**\r\n * Returns an array containing page numbers and possible ellipsis '…' characters.\r\n *\r\n * @param {Number} page - current page\r\n * @param {Number} totalPages - total page count\r\n * @return {Array}\r\n */\n\n\nconst getPageNumbersArray = (page, totalPages) => {\n  // Create array of numbers: [1, 2, 3, 4, ..., totalPages]\n  const numbersFrom1ToTotalPages = range(1, totalPages + 1);\n  return numbersFrom1ToTotalPages.filter(v => {\n    // Filter numbers that are next to current page and pick also first and last page\n    // E.g. [1, 4, 5, 6, 9], where current page = 5 and totalPages = 9.\n    return v === 1 || Math.abs(v - page) <= 1 || v === totalPages;\n  }).reduce((newArray, p) => {\n    // Create a new array where gaps between consecutive numbers is filled with ellipsis character\n    // E.g. [1, '…', 4, 5, 6, '…', 9], where current page = 5 and totalPages = 9.\n    const isFirstPageOrNextToCurrentPage = p === 1 || newArray[newArray.length - 1] + 1 === p;\n    return isFirstPageOrNextToCurrentPage ? newArray.concat([p]) : newArray.concat(['\\u2026', p]);\n  }, []);\n};\n/**\r\n * Component that renders \"Previous page\" and \"Next page\" pagination\r\n * links of the given page component with the given pagination\r\n * information.\r\n *\r\n * The links will be disabled when no previous/next page exists.\r\n */\n\n\nexport const PaginationLinksComponent = props => {\n  const {\n    className,\n    rootClassName,\n    intl,\n    pageName,\n    pagePathParams,\n    pageSearchParams,\n    pagination\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const {\n    page,\n    totalPages\n  } = pagination;\n  const prevPage = page > 1 ? page - 1 : null;\n  const nextPage = page < totalPages ? page + 1 : null;\n  const prevSearchParams = { ...pageSearchParams,\n    page: prevPage\n  };\n  const nextSearchParams = { ...pageSearchParams,\n    page: nextPage\n  };\n  /* Arrow links: to previous page */\n\n  const prevLinkEnabled = /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.prev,\n    name: pageName,\n    params: pagePathParams,\n    to: {\n      search: stringify(prevSearchParams)\n    },\n    title: intl.formatMessage({\n      id: 'PaginationLinks.previous'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconArrowHead, {\n    direction: \"left\",\n    size: \"big\",\n    rootClassName: css.arrowIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n  const prevLinkDisabled = /*#__PURE__*/React.createElement(\"div\", {\n    className: css.prev,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconArrowHead, {\n    direction: \"left\",\n    size: \"big\",\n    rootClassName: classNames(css.arrowIcon, css.disabled),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n  /* Arrow links: to next page */\n\n  const nextLinkEnabled = /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.next,\n    name: pageName,\n    params: pagePathParams,\n    to: {\n      search: stringify(nextSearchParams)\n    },\n    title: intl.formatMessage({\n      id: 'PaginationLinks.next'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconArrowHead, {\n    direction: \"right\",\n    size: \"big\",\n    rootClassName: css.arrowIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n  const nextLinkDisabled = /*#__PURE__*/React.createElement(\"div\", {\n    className: css.next,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconArrowHead, {\n    direction: \"right\",\n    size: \"big\",\n    rootClassName: classNames(css.arrowIcon, css.disabled),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n  /* Numbered pagination links */\n\n  const pageNumbersNavLinks = getPageNumbersArray(page, totalPages).map(v => {\n    const isCurrentPage = v === page;\n    const pageClassNames = classNames(css.toPageLink, {\n      [css.currentPage]: isCurrentPage\n    });\n    return typeof v === 'number' ? /*#__PURE__*/React.createElement(NamedLink, {\n      key: v,\n      className: pageClassNames,\n      name: pageName,\n      params: pagePathParams,\n      to: {\n        search: stringify({ ...pageSearchParams,\n          page: v\n        })\n      },\n      title: intl.formatMessage({\n        id: 'PaginationLinks.toPage'\n      }, {\n        page: v\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, v) : /*#__PURE__*/React.createElement(\"span\", {\n      key: `pagination_gap_${paginationGapKey()}`,\n      className: css.paginationGap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, v);\n  }); // Using 'justify-content: space-between' we can deal with very narrow mobile screens.\n  // However, since the length of pageNumberList can vary up to 7,\n  // we need to keep track of how much space is allocated for the list\n  // Maximum length of pageNumbersNavLinks is 7 (e.g. [1, '…', 4, 5, 6, '…', 9])\n\n  const pageNumberListClassNames = classNames(css.pageNumberList, css[`pageNumberList${pageNumbersNavLinks.length}Items`]);\n  return /*#__PURE__*/React.createElement(\"nav\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, prevPage ? prevLinkEnabled : prevLinkDisabled, /*#__PURE__*/React.createElement(\"div\", {\n    className: pageNumberListClassNames,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, pageNumbersNavLinks), nextPage ? nextLinkEnabled : nextLinkDisabled);\n};\n_c = PaginationLinksComponent;\nPaginationLinksComponent.defaultProps = {\n  className: '',\n  rootClassName: '',\n  pagePathParams: {},\n  pageSearchParams: {}\n};\nPaginationLinksComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  intl: intlShape.isRequired,\n  pageName: string.isRequired,\n  pagePathParams: object,\n  pageSearchParams: object,\n  pagination: propTypes.pagination.isRequired\n};\nexport default _c2 = injectIntl(PaginationLinksComponent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PaginationLinksComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/PaginationLinks/PaginationLinks.js"],"names":["React","PropTypes","injectIntl","intlShape","classNames","range","IconArrowHead","NamedLink","stringify","propTypes","css","string","object","pgKey","paginationGapKey","getPageNumbersArray","page","totalPages","numbersFrom1ToTotalPages","filter","v","Math","abs","reduce","newArray","p","isFirstPageOrNextToCurrentPage","length","concat","PaginationLinksComponent","props","className","rootClassName","intl","pageName","pagePathParams","pageSearchParams","pagination","classes","root","prevPage","nextPage","prevSearchParams","nextSearchParams","prevLinkEnabled","prev","search","formatMessage","id","arrowIcon","prevLinkDisabled","disabled","nextLinkEnabled","next","nextLinkDisabled","pageNumbersNavLinks","map","isCurrentPage","pageClassNames","toPageLink","currentPage","paginationGap","pageNumberListClassNames","pageNumberList","defaultProps","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { injectIntl, intlShape } from '../../util/reactIntl';\r\nimport classNames from 'classnames';\r\nimport range from 'lodash/range';\r\nimport { IconArrowHead, NamedLink } from '../../components';\r\nimport { stringify } from '../../util/urlHelpers';\r\nimport { propTypes } from '../../util/types';\r\n\r\nimport css from './PaginationLinks.module.css';\r\n\r\nconst { string, object } = PropTypes;\r\n\r\nlet pgKey = 0;\r\nconst paginationGapKey = () => {\r\n  pgKey += 1;\r\n  return pgKey;\r\n};\r\n\r\n/**\r\n * Returns an array containing page numbers and possible ellipsis '…' characters.\r\n *\r\n * @param {Number} page - current page\r\n * @param {Number} totalPages - total page count\r\n * @return {Array}\r\n */\r\nconst getPageNumbersArray = (page, totalPages) => {\r\n  // Create array of numbers: [1, 2, 3, 4, ..., totalPages]\r\n  const numbersFrom1ToTotalPages = range(1, totalPages + 1);\r\n  return numbersFrom1ToTotalPages\r\n    .filter(v => {\r\n      // Filter numbers that are next to current page and pick also first and last page\r\n      // E.g. [1, 4, 5, 6, 9], where current page = 5 and totalPages = 9.\r\n      return v === 1 || Math.abs(v - page) <= 1 || v === totalPages;\r\n    })\r\n    .reduce((newArray, p) => {\r\n      // Create a new array where gaps between consecutive numbers is filled with ellipsis character\r\n      // E.g. [1, '…', 4, 5, 6, '…', 9], where current page = 5 and totalPages = 9.\r\n      const isFirstPageOrNextToCurrentPage = p === 1 || newArray[newArray.length - 1] + 1 === p;\r\n      return isFirstPageOrNextToCurrentPage ? newArray.concat([p]) : newArray.concat(['\\u2026', p]);\r\n    }, []);\r\n};\r\n\r\n/**\r\n * Component that renders \"Previous page\" and \"Next page\" pagination\r\n * links of the given page component with the given pagination\r\n * information.\r\n *\r\n * The links will be disabled when no previous/next page exists.\r\n */\r\nexport const PaginationLinksComponent = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    intl,\r\n    pageName,\r\n    pagePathParams,\r\n    pageSearchParams,\r\n    pagination,\r\n  } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  const { page, totalPages } = pagination;\r\n  const prevPage = page > 1 ? page - 1 : null;\r\n  const nextPage = page < totalPages ? page + 1 : null;\r\n  const prevSearchParams = { ...pageSearchParams, page: prevPage };\r\n  const nextSearchParams = { ...pageSearchParams, page: nextPage };\r\n\r\n  /* Arrow links: to previous page */\r\n  const prevLinkEnabled = (\r\n    <NamedLink\r\n      className={css.prev}\r\n      name={pageName}\r\n      params={pagePathParams}\r\n      to={{ search: stringify(prevSearchParams) }}\r\n      title={intl.formatMessage({ id: 'PaginationLinks.previous' })}\r\n    >\r\n      <IconArrowHead direction=\"left\" size=\"big\" rootClassName={css.arrowIcon} />\r\n    </NamedLink>\r\n  );\r\n\r\n  const prevLinkDisabled = (\r\n    <div className={css.prev}>\r\n      <IconArrowHead\r\n        direction=\"left\"\r\n        size=\"big\"\r\n        rootClassName={classNames(css.arrowIcon, css.disabled)}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  /* Arrow links: to next page */\r\n  const nextLinkEnabled = (\r\n    <NamedLink\r\n      className={css.next}\r\n      name={pageName}\r\n      params={pagePathParams}\r\n      to={{ search: stringify(nextSearchParams) }}\r\n      title={intl.formatMessage({ id: 'PaginationLinks.next' })}\r\n    >\r\n      <IconArrowHead direction=\"right\" size=\"big\" rootClassName={css.arrowIcon} />\r\n    </NamedLink>\r\n  );\r\n\r\n  const nextLinkDisabled = (\r\n    <div className={css.next}>\r\n      <IconArrowHead\r\n        direction=\"right\"\r\n        size=\"big\"\r\n        rootClassName={classNames(css.arrowIcon, css.disabled)}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  /* Numbered pagination links */\r\n\r\n  const pageNumbersNavLinks = getPageNumbersArray(page, totalPages).map(v => {\r\n    const isCurrentPage = v === page;\r\n    const pageClassNames = classNames(css.toPageLink, { [css.currentPage]: isCurrentPage });\r\n    return typeof v === 'number' ? (\r\n      <NamedLink\r\n        key={v}\r\n        className={pageClassNames}\r\n        name={pageName}\r\n        params={pagePathParams}\r\n        to={{ search: stringify({ ...pageSearchParams, page: v }) }}\r\n        title={intl.formatMessage({ id: 'PaginationLinks.toPage' }, { page: v })}\r\n      >\r\n        {v}\r\n      </NamedLink>\r\n    ) : (\r\n      <span key={`pagination_gap_${paginationGapKey()}`} className={css.paginationGap}>\r\n        {v}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  // Using 'justify-content: space-between' we can deal with very narrow mobile screens.\r\n  // However, since the length of pageNumberList can vary up to 7,\r\n  // we need to keep track of how much space is allocated for the list\r\n  // Maximum length of pageNumbersNavLinks is 7 (e.g. [1, '…', 4, 5, 6, '…', 9])\r\n  const pageNumberListClassNames = classNames(\r\n    css.pageNumberList,\r\n    css[`pageNumberList${pageNumbersNavLinks.length}Items`]\r\n  );\r\n\r\n  return (\r\n    <nav className={classes}>\r\n      {prevPage ? prevLinkEnabled : prevLinkDisabled}\r\n      <div className={pageNumberListClassNames}>{pageNumbersNavLinks}</div>\r\n      {nextPage ? nextLinkEnabled : nextLinkDisabled}\r\n    </nav>\r\n  );\r\n};\r\n\r\nPaginationLinksComponent.defaultProps = {\r\n  className: '',\r\n  rootClassName: '',\r\n  pagePathParams: {},\r\n  pageSearchParams: {},\r\n};\r\n\r\nPaginationLinksComponent.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  intl: intlShape.isRequired,\r\n  pageName: string.isRequired,\r\n  pagePathParams: object,\r\n  pageSearchParams: object,\r\n  pagination: propTypes.pagination.isRequired,\r\n};\r\n\r\nexport default injectIntl(PaginationLinksComponent);\r\n"]},"metadata":{},"sourceType":"module"}