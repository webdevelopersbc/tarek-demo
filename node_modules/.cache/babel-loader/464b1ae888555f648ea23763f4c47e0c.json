{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\RangeSlider\\\\RangeSlider.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, number, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { withDimensions } from '../../util/contextHelpers';\nimport Handle from './Handle';\nimport Track from './Track';\nimport css from './RangeSlider.module.css';\n\nclass RangeSliderComponent extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      min,\n      max,\n      handles\n    } = props;\n    handles.forEach((h, index) => {\n      if (h < min || h > max || index < handles.length - 1 && h > handles[index + 1]) {\n        throw new Error('RangeSlider error: handles need to be given in ascending order and they need to be within min and max values');\n      }\n    });\n    this.state = {\n      activeHandle: 0\n    };\n    this.toPosition = this.toPosition.bind(this);\n    this.toValue = this.toValue.bind(this);\n    this.changeActive = this.changeActive.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  toPosition(value) {\n    const {\n      dimensions,\n      min,\n      max\n    } = this.props;\n    const width = dimensions.width;\n    const valueOffset = value - min;\n    const scale = max - min;\n    return Math.round(valueOffset / scale * width);\n  }\n\n  toValue(position) {\n    const {\n      dimensions,\n      min,\n      max,\n      step\n    } = this.props;\n    const width = dimensions.width;\n    const scale = max - min;\n    const value = Math.round(position / width * scale) + min;\n    return Math.ceil(value / step) * step;\n  }\n\n  changeActive(index) {\n    this.setState({\n      activeHandle: index\n    });\n  }\n\n  onChange(position, handleIndex) {\n    this.props.onChange(Object.assign([...this.props.handles], {\n      [handleIndex]: position\n    }));\n  }\n\n  render() {\n    const {\n      handles,\n      min,\n      max\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Track, {\n      handles: handles,\n      valueToPosition: this.toPosition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, handles.map((h, index) => {\n      const classes = classNames({\n        [css.activeHandle]: this.state.activeHandle === index\n      });\n      return /*#__PURE__*/React.createElement(Handle, {\n        key: index,\n        className: classes,\n        value: h,\n        min: index === 0 ? min : handles[index - 1],\n        max: index === handles.length - 1 ? max : handles[index + 1],\n        valueToPosition: this.toPosition,\n        positionToValue: this.toValue,\n        changeActive: () => this.changeActive(index),\n        onChange: value => this.onChange(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n}\n\nRangeSliderComponent.defaultProps = {\n  min: 0,\n  max: 10000000,\n  step: 1\n};\nRangeSliderComponent.propTypes = {\n  handles: arrayOf(number),\n  min: number,\n  max: number,\n  step: number,\n  dimensions: shape({\n    height: number.isRequired,\n    width: number.isRequired\n  }).isRequired\n};\nconst RangeSliderComponentWithDimensions = withDimensions(RangeSliderComponent);\n_c = RangeSliderComponentWithDimensions;\n\nconst RangeSlider = props => {\n  const {\n    rootClassName,\n    className,\n    ...rest\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RangeSliderComponentWithDimensions, Object.assign({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  })));\n};\n\n_c2 = RangeSlider;\nRangeSlider.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nRangeSlider.propTypes = {\n  rootClassName: string,\n  className: string\n};\nexport default RangeSlider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RangeSliderComponentWithDimensions\");\n$RefreshReg$(_c2, \"RangeSlider\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/RangeSlider/RangeSlider.js"],"names":["React","Component","arrayOf","number","shape","string","classNames","withDimensions","Handle","Track","css","RangeSliderComponent","constructor","props","min","max","handles","forEach","h","index","length","Error","state","activeHandle","toPosition","bind","toValue","changeActive","onChange","value","dimensions","width","valueOffset","scale","Math","round","position","step","ceil","setState","handleIndex","Object","assign","render","map","classes","defaultProps","propTypes","height","isRequired","RangeSliderComponentWithDimensions","RangeSlider","rootClassName","className","rest","root"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, number, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withDimensions } from '../../util/contextHelpers';\r\n\r\nimport Handle from './Handle';\r\nimport Track from './Track';\r\nimport css from './RangeSlider.module.css';\r\n\r\nclass RangeSliderComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { min, max, handles } = props;\r\n    handles.forEach((h, index) => {\r\n      if (h < min || h > max || (index < handles.length - 1 && h > handles[index + 1])) {\r\n        throw new Error(\r\n          'RangeSlider error: handles need to be given in ascending order and they need to be within min and max values'\r\n        );\r\n      }\r\n    });\r\n\r\n    this.state = { activeHandle: 0 };\r\n\r\n    this.toPosition = this.toPosition.bind(this);\r\n    this.toValue = this.toValue.bind(this);\r\n    this.changeActive = this.changeActive.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  toPosition(value) {\r\n    const { dimensions, min, max } = this.props;\r\n    const width = dimensions.width;\r\n    const valueOffset = value - min;\r\n    const scale = max - min;\r\n    return Math.round((valueOffset / scale) * width);\r\n  }\r\n\r\n  toValue(position) {\r\n    const { dimensions, min, max, step } = this.props;\r\n    const width = dimensions.width;\r\n    const scale = max - min;\r\n    const value = Math.round((position / width) * scale) + min;\r\n    return Math.ceil(value / step) * step;\r\n  }\r\n\r\n  changeActive(index) {\r\n    this.setState({ activeHandle: index });\r\n  }\r\n\r\n  onChange(position, handleIndex) {\r\n    this.props.onChange(Object.assign([...this.props.handles], { [handleIndex]: position }));\r\n  }\r\n\r\n  render() {\r\n    const { handles, min, max } = this.props;\r\n\r\n    return (\r\n      <Track handles={handles} valueToPosition={this.toPosition}>\r\n        {handles.map((h, index) => {\r\n          const classes = classNames({ [css.activeHandle]: this.state.activeHandle === index });\r\n          return (\r\n            <Handle\r\n              key={index}\r\n              className={classes}\r\n              value={h}\r\n              min={index === 0 ? min : handles[index - 1]}\r\n              max={index === handles.length - 1 ? max : handles[index + 1]}\r\n              valueToPosition={this.toPosition}\r\n              positionToValue={this.toValue}\r\n              changeActive={() => this.changeActive(index)}\r\n              onChange={value => this.onChange(value, index)}\r\n            />\r\n          );\r\n        })}\r\n      </Track>\r\n    );\r\n  }\r\n}\r\n\r\nRangeSliderComponent.defaultProps = {\r\n  min: 0,\r\n  max: 10000000,\r\n  step: 1,\r\n};\r\n\r\nRangeSliderComponent.propTypes = {\r\n  handles: arrayOf(number),\r\n  min: number,\r\n  max: number,\r\n  step: number,\r\n  dimensions: shape({\r\n    height: number.isRequired,\r\n    width: number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst RangeSliderComponentWithDimensions = withDimensions(RangeSliderComponent);\r\n\r\nconst RangeSlider = props => {\r\n  const { rootClassName, className, ...rest } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  return (\r\n    <div className={classes}>\r\n      <RangeSliderComponentWithDimensions {...rest} />\r\n    </div>\r\n  );\r\n};\r\n\r\nRangeSlider.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n};\r\n\r\nRangeSlider.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n};\r\n\r\nexport default RangeSlider;\r\n"]},"metadata":{},"sourceType":"module"}