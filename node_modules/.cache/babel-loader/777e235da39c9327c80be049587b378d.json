{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\OrderBreakdown\\\\LineItemBookingPeriod.js\";\nimport React from 'react';\nimport { FormattedMessage, FormattedDate } from '../../util/reactIntl';\nimport { LINE_ITEM_NIGHT, DATE_TYPE_DATE, propTypes } from '../../util/types';\nimport { timeOfDayFromTimeZoneToLocal, subtractTime } from '../../util/dates';\nimport css from './OrderBreakdown.module.css';\n\nconst BookingPeriod = props => {\n  const {\n    startDate,\n    endDate,\n    dateType\n  } = props;\n  const timeFormatOptions = dateType === DATE_TYPE_DATE ? {\n    weekday: 'long'\n  } : {\n    weekday: 'short',\n    hour: 'numeric',\n    minute: 'numeric'\n  };\n  const dateFormatOptions = {\n    month: 'short',\n    day: 'numeric'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.bookingPeriod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.bookingPeriodSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.dayLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"OrderBreakdown.bookingStart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.dayInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedDate, Object.assign({\n    value: startDate\n  }, timeFormatOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedDate, Object.assign({\n    value: startDate\n  }, dateFormatOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.bookingPeriodSectionRigth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.dayLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"OrderBreakdown.bookingEnd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.dayInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedDate, Object.assign({\n    value: endDate\n  }, timeFormatOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.itemLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedDate, Object.assign({\n    value: endDate\n  }, dateFormatOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }))))));\n};\n\n_c = BookingPeriod;\n\nconst LineItemBookingPeriod = props => {\n  const {\n    booking,\n    unitType,\n    dateType\n  } = props;\n\n  if (!booking) {\n    return null;\n  } // Attributes: displayStart and displayEnd can be used to differentiate shown time range\n  // from actual start and end times used for availability reservation. It can help in situations\n  // where there are preparation time needed between bookings.\n  // Read more: https://www.sharetribe.com/api-reference/marketplace.html#bookings\n\n\n  const {\n    start,\n    end,\n    displayStart,\n    displayEnd\n  } = booking.attributes;\n  const apiTimeZone = 'Etc/UTC';\n  const localStartDate = timeOfDayFromTimeZoneToLocal(displayStart || start, apiTimeZone);\n  const localEndDateRaw = timeOfDayFromTimeZoneToLocal(displayEnd || end, apiTimeZone);\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const endDay = isNightly ? localEndDateRaw : subtractTime(localEndDateRaw, 1, 'days');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.lineItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BookingPeriod, {\n    startDate: localStartDate,\n    endDate: endDay,\n    dateType: dateType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    className: css.totalDivider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c2 = LineItemBookingPeriod;\nLineItemBookingPeriod.defaultProps = {\n  booking: null,\n  dateType: null\n};\nLineItemBookingPeriod.propTypes = {\n  booking: propTypes.booking,\n  dateType: propTypes.dateType\n};\nexport default LineItemBookingPeriod;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BookingPeriod\");\n$RefreshReg$(_c2, \"LineItemBookingPeriod\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/OrderBreakdown/LineItemBookingPeriod.js"],"names":["React","FormattedMessage","FormattedDate","LINE_ITEM_NIGHT","DATE_TYPE_DATE","propTypes","timeOfDayFromTimeZoneToLocal","subtractTime","css","BookingPeriod","props","startDate","endDate","dateType","timeFormatOptions","weekday","hour","minute","dateFormatOptions","month","day","bookingPeriod","bookingPeriodSection","dayLabel","dayInfo","itemLabel","bookingPeriodSectionRigth","LineItemBookingPeriod","booking","unitType","start","end","displayStart","displayEnd","attributes","apiTimeZone","localStartDate","localEndDateRaw","isNightly","endDay","lineItem","totalDivider","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, FormattedDate } from '../../util/reactIntl';\r\nimport { LINE_ITEM_NIGHT, DATE_TYPE_DATE, propTypes } from '../../util/types';\r\nimport { timeOfDayFromTimeZoneToLocal, subtractTime } from '../../util/dates';\r\n\r\nimport css from './OrderBreakdown.module.css';\r\n\r\nconst BookingPeriod = props => {\r\n  const { startDate, endDate, dateType } = props;\r\n\r\n  const timeFormatOptions =\r\n    dateType === DATE_TYPE_DATE\r\n      ? {\r\n          weekday: 'long',\r\n        }\r\n      : {\r\n          weekday: 'short',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        };\r\n\r\n  const dateFormatOptions = {\r\n    month: 'short',\r\n    day: 'numeric',\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={css.bookingPeriod}>\r\n        <div className={css.bookingPeriodSection}>\r\n          <div className={css.dayLabel}>\r\n            <FormattedMessage id=\"OrderBreakdown.bookingStart\" />\r\n          </div>\r\n          <div className={css.dayInfo}>\r\n            <FormattedDate value={startDate} {...timeFormatOptions} />\r\n          </div>\r\n          <div className={css.itemLabel}>\r\n            <FormattedDate value={startDate} {...dateFormatOptions} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={css.bookingPeriodSectionRigth}>\r\n          <div className={css.dayLabel}>\r\n            <FormattedMessage id=\"OrderBreakdown.bookingEnd\" />\r\n          </div>\r\n          <div className={css.dayInfo}>\r\n            <FormattedDate value={endDate} {...timeFormatOptions} />\r\n          </div>\r\n          <div className={css.itemLabel}>\r\n            <FormattedDate value={endDate} {...dateFormatOptions} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst LineItemBookingPeriod = props => {\r\n  const { booking, unitType, dateType } = props;\r\n\r\n  if (!booking) {\r\n    return null;\r\n  }\r\n\r\n  // Attributes: displayStart and displayEnd can be used to differentiate shown time range\r\n  // from actual start and end times used for availability reservation. It can help in situations\r\n  // where there are preparation time needed between bookings.\r\n  // Read more: https://www.sharetribe.com/api-reference/marketplace.html#bookings\r\n  const { start, end, displayStart, displayEnd } = booking.attributes;\r\n  const apiTimeZone = 'Etc/UTC';\r\n  const localStartDate = timeOfDayFromTimeZoneToLocal(displayStart || start, apiTimeZone);\r\n  const localEndDateRaw = timeOfDayFromTimeZoneToLocal(displayEnd || end, apiTimeZone);\r\n\r\n  const isNightly = unitType === LINE_ITEM_NIGHT;\r\n  const endDay = isNightly ? localEndDateRaw : subtractTime(localEndDateRaw, 1, 'days');\r\n\r\n  return (\r\n    <>\r\n      <div className={css.lineItem}>\r\n        <BookingPeriod startDate={localStartDate} endDate={endDay} dateType={dateType} />\r\n      </div>\r\n      <hr className={css.totalDivider} />\r\n    </>\r\n  );\r\n};\r\nLineItemBookingPeriod.defaultProps = { booking: null, dateType: null };\r\n\r\nLineItemBookingPeriod.propTypes = {\r\n  booking: propTypes.booking,\r\n  dateType: propTypes.dateType,\r\n};\r\n\r\nexport default LineItemBookingPeriod;\r\n"]},"metadata":{},"sourceType":"module"}