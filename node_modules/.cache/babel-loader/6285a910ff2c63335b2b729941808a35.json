{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport { clearCurrentUser, fetchCurrentUser } from './user.duck';\nimport { createUserWithIdp } from '../util/api';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log';\n\nconst authenticated = authInfo => authInfo && authInfo.isAnonymous === false; // ================ Action types ================ //\n\n\nexport const AUTH_INFO_REQUEST = 'app/Auth/AUTH_INFO_REQUEST';\nexport const AUTH_INFO_SUCCESS = 'app/Auth/AUTH_INFO_SUCCESS';\nexport const LOGIN_REQUEST = 'app/Auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/Auth/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/Auth/LOGIN_ERROR';\nexport const LOGOUT_REQUEST = 'app/Auth/LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'app/Auth/LOGOUT_SUCCESS';\nexport const LOGOUT_ERROR = 'app/Auth/LOGOUT_ERROR';\nexport const SIGNUP_REQUEST = 'app/Auth/SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'app/Auth/SIGNUP_SUCCESS';\nexport const SIGNUP_ERROR = 'app/Auth/SIGNUP_ERROR';\nexport const CONFIRM_REQUEST = 'app/Auth/CONFIRM_REQUEST';\nexport const CONFIRM_SUCCESS = 'app/Auth/CONFIRM_SUCCESS';\nexport const CONFIRM_ERROR = 'app/Auth/CONFIRM_ERROR'; // Generic user_logout action that can be handled elsewhere\n// E.g. src/reducers.js clears store as a consequence\n\nexport const USER_LOGOUT = 'app/USER_LOGOUT'; // ================ Reducer ================ //\n\nconst initialState = {\n  isAuthenticated: false,\n  // scopes associated with current token\n  authScopes: [],\n  // auth info\n  authInfoLoaded: false,\n  // login\n  loginError: null,\n  loginInProgress: false,\n  // logout\n  logoutError: null,\n  logoutInProgress: false,\n  // signup\n  signupError: null,\n  signupInProgress: false,\n  // confirm (create use with idp)\n  confirmError: null,\n  confirmInProgress: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case AUTH_INFO_REQUEST:\n      return state;\n\n    case AUTH_INFO_SUCCESS:\n      return { ...state,\n        authInfoLoaded: true,\n        isAuthenticated: authenticated(payload),\n        authScopes: payload.scopes\n      };\n\n    case LOGIN_REQUEST:\n      return { ...state,\n        loginInProgress: true,\n        loginError: null,\n        logoutError: null,\n        signupError: null\n      };\n\n    case LOGIN_SUCCESS:\n      return { ...state,\n        loginInProgress: false,\n        isAuthenticated: true\n      };\n\n    case LOGIN_ERROR:\n      return { ...state,\n        loginInProgress: false,\n        loginError: payload\n      };\n\n    case LOGOUT_REQUEST:\n      return { ...state,\n        logoutInProgress: true,\n        loginError: null,\n        logoutError: null\n      };\n\n    case LOGOUT_SUCCESS:\n      return { ...state,\n        logoutInProgress: false,\n        isAuthenticated: false,\n        authScopes: []\n      };\n\n    case LOGOUT_ERROR:\n      return { ...state,\n        logoutInProgress: false,\n        logoutError: payload\n      };\n\n    case SIGNUP_REQUEST:\n      return { ...state,\n        signupInProgress: true,\n        loginError: null,\n        signupError: null\n      };\n\n    case SIGNUP_SUCCESS:\n      return { ...state,\n        signupInProgress: false\n      };\n\n    case SIGNUP_ERROR:\n      return { ...state,\n        signupInProgress: false,\n        signupError: payload\n      };\n\n    case CONFIRM_REQUEST:\n      return { ...state,\n        confirmInProgress: true,\n        loginError: null,\n        confirmError: null\n      };\n\n    case CONFIRM_SUCCESS:\n      return { ...state,\n        confirmInProgress: false,\n        isAuthenticated: true\n      };\n\n    case CONFIRM_ERROR:\n      return { ...state,\n        confirmInProgress: false,\n        confirmError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const authenticationInProgress = state => {\n  const {\n    loginInProgress,\n    logoutInProgress,\n    signupInProgress\n  } = state.Auth;\n  return loginInProgress || logoutInProgress || signupInProgress;\n}; // ================ Action creators ================ //\n\nexport const authInfoRequest = () => ({\n  type: AUTH_INFO_REQUEST\n});\nexport const authInfoSuccess = info => ({\n  type: AUTH_INFO_SUCCESS,\n  payload: info\n});\nexport const loginRequest = () => ({\n  type: LOGIN_REQUEST\n});\nexport const loginSuccess = () => ({\n  type: LOGIN_SUCCESS\n});\nexport const loginError = error => ({\n  type: LOGIN_ERROR,\n  payload: error,\n  error: true\n});\nexport const logoutRequest = () => ({\n  type: LOGOUT_REQUEST\n});\nexport const logoutSuccess = () => ({\n  type: LOGOUT_SUCCESS\n});\nexport const logoutError = error => ({\n  type: LOGOUT_ERROR,\n  payload: error,\n  error: true\n});\nexport const signupRequest = () => ({\n  type: SIGNUP_REQUEST\n});\nexport const signupSuccess = () => ({\n  type: SIGNUP_SUCCESS\n});\nexport const signupError = error => ({\n  type: SIGNUP_ERROR,\n  payload: error,\n  error: true\n});\nexport const confirmRequest = () => ({\n  type: CONFIRM_REQUEST\n});\nexport const confirmSuccess = () => ({\n  type: CONFIRM_SUCCESS\n});\nexport const confirmError = error => ({\n  type: CONFIRM_ERROR,\n  payload: error,\n  error: true\n});\nexport const userLogout = () => ({\n  type: USER_LOGOUT\n}); // ================ Thunks ================ //\n\nexport const authInfo = () => (dispatch, getState, sdk) => {\n  dispatch(authInfoRequest());\n  return sdk.authInfo().then(info => dispatch(authInfoSuccess(info))).catch(e => {\n    // Requesting auth info just reads the token from the token\n    // store (i.e. cookies), and should not fail in normal\n    // circumstances. If it fails, it's due to a programming\n    // error. In that case we mark the operation done and dispatch\n    // `null` success action that marks the user as unauthenticated.\n    log.error(e, 'auth-info-failed');\n    dispatch(authInfoSuccess(null));\n  });\n};\nexport const login = (username, password) => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(loginRequest()); // Note that the thunk does not reject when the login fails, it\n  // just dispatches the login error action.\n\n  return sdk.login({\n    username,\n    password\n  }).then(() => dispatch(loginSuccess())).then(() => dispatch(fetchCurrentUser())).catch(e => dispatch(loginError(storableError(e))));\n};\nexport const logout = () => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(logoutRequest()); // Note that the thunk does not reject when the logout fails, it\n  // just dispatches the logout error action.\n\n  return sdk.logout().then(() => {\n    // The order of the dispatched actions\n    dispatch(logoutSuccess());\n    dispatch(clearCurrentUser());\n    log.clearUserId();\n    dispatch(userLogout());\n  }).catch(e => dispatch(logoutError(storableError(e))));\n};\nexport const signup = params => (dispatch, getState, sdk) => {\n  if (authenticationInProgress(getState())) {\n    return Promise.reject(new Error('Login or logout already in progress'));\n  }\n\n  dispatch(signupRequest());\n  const {\n    email,\n    password,\n    firstName,\n    lastName,\n    ...rest\n  } = params;\n  const createUserParams = isEmpty(rest) ? {\n    email,\n    password,\n    firstName,\n    lastName\n  } : {\n    email,\n    password,\n    firstName,\n    lastName,\n    protectedData: { ...rest\n    }\n  }; // We must login the user if signup succeeds since the API doesn't\n  // do that automatically.\n\n  return sdk.currentUser.create(createUserParams).then(() => dispatch(signupSuccess())).then(() => dispatch(login(email, password))).catch(e => {\n    dispatch(signupError(storableError(e)));\n    log.error(e, 'signup-failed', {\n      email: params.email,\n      firstName: params.firstName,\n      lastName: params.lastName\n    });\n  });\n};\nexport const signupWithIdp = params => (dispatch, getState, sdk) => {\n  dispatch(confirmRequest());\n  return createUserWithIdp(params).then(res => {\n    return dispatch(confirmSuccess());\n  }).then(() => dispatch(fetchCurrentUser())).catch(e => {\n    log.error(e, 'create-user-with-idp-failed', {\n      params\n    });\n    return dispatch(confirmError(storableError(e)));\n  });\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/Auth.duck.js"],"names":["isEmpty","clearCurrentUser","fetchCurrentUser","createUserWithIdp","storableError","log","authenticated","authInfo","isAnonymous","AUTH_INFO_REQUEST","AUTH_INFO_SUCCESS","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_ERROR","SIGNUP_REQUEST","SIGNUP_SUCCESS","SIGNUP_ERROR","CONFIRM_REQUEST","CONFIRM_SUCCESS","CONFIRM_ERROR","USER_LOGOUT","initialState","isAuthenticated","authScopes","authInfoLoaded","loginError","loginInProgress","logoutError","logoutInProgress","signupError","signupInProgress","confirmError","confirmInProgress","reducer","state","action","type","payload","scopes","authenticationInProgress","Auth","authInfoRequest","authInfoSuccess","info","loginRequest","loginSuccess","error","logoutRequest","logoutSuccess","signupRequest","signupSuccess","confirmRequest","confirmSuccess","userLogout","dispatch","getState","sdk","then","catch","e","login","username","password","Promise","reject","Error","logout","clearUserId","signup","params","email","firstName","lastName","rest","createUserParams","protectedData","currentUser","create","signupWithIdp","res"],"mappings":"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","sourcesContent":["import isEmpty from 'lodash/isEmpty';\r\nimport { clearCurrentUser, fetchCurrentUser } from './user.duck';\r\nimport { createUserWithIdp } from '../util/api';\r\nimport { storableError } from '../util/errors';\r\nimport * as log from '../util/log';\r\n\r\nconst authenticated = authInfo => authInfo && authInfo.isAnonymous === false;\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const AUTH_INFO_REQUEST = 'app/Auth/AUTH_INFO_REQUEST';\r\nexport const AUTH_INFO_SUCCESS = 'app/Auth/AUTH_INFO_SUCCESS';\r\n\r\nexport const LOGIN_REQUEST = 'app/Auth/LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'app/Auth/LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'app/Auth/LOGIN_ERROR';\r\n\r\nexport const LOGOUT_REQUEST = 'app/Auth/LOGOUT_REQUEST';\r\nexport const LOGOUT_SUCCESS = 'app/Auth/LOGOUT_SUCCESS';\r\nexport const LOGOUT_ERROR = 'app/Auth/LOGOUT_ERROR';\r\n\r\nexport const SIGNUP_REQUEST = 'app/Auth/SIGNUP_REQUEST';\r\nexport const SIGNUP_SUCCESS = 'app/Auth/SIGNUP_SUCCESS';\r\nexport const SIGNUP_ERROR = 'app/Auth/SIGNUP_ERROR';\r\n\r\nexport const CONFIRM_REQUEST = 'app/Auth/CONFIRM_REQUEST';\r\nexport const CONFIRM_SUCCESS = 'app/Auth/CONFIRM_SUCCESS';\r\nexport const CONFIRM_ERROR = 'app/Auth/CONFIRM_ERROR';\r\n\r\n// Generic user_logout action that can be handled elsewhere\r\n// E.g. src/reducers.js clears store as a consequence\r\nexport const USER_LOGOUT = 'app/USER_LOGOUT';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n\r\n  // scopes associated with current token\r\n  authScopes: [],\r\n\r\n  // auth info\r\n  authInfoLoaded: false,\r\n\r\n  // login\r\n  loginError: null,\r\n  loginInProgress: false,\r\n\r\n  // logout\r\n  logoutError: null,\r\n  logoutInProgress: false,\r\n\r\n  // signup\r\n  signupError: null,\r\n  signupInProgress: false,\r\n\r\n  // confirm (create use with idp)\r\n  confirmError: null,\r\n  confirmInProgress: false,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case AUTH_INFO_REQUEST:\r\n      return state;\r\n    case AUTH_INFO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        authInfoLoaded: true,\r\n        isAuthenticated: authenticated(payload),\r\n        authScopes: payload.scopes,\r\n      };\r\n\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n        loginInProgress: true,\r\n        loginError: null,\r\n        logoutError: null,\r\n        signupError: null,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, loginInProgress: false, isAuthenticated: true };\r\n    case LOGIN_ERROR:\r\n      return { ...state, loginInProgress: false, loginError: payload };\r\n\r\n    case LOGOUT_REQUEST:\r\n      return { ...state, logoutInProgress: true, loginError: null, logoutError: null };\r\n    case LOGOUT_SUCCESS:\r\n      return { ...state, logoutInProgress: false, isAuthenticated: false, authScopes: [] };\r\n    case LOGOUT_ERROR:\r\n      return { ...state, logoutInProgress: false, logoutError: payload };\r\n\r\n    case SIGNUP_REQUEST:\r\n      return { ...state, signupInProgress: true, loginError: null, signupError: null };\r\n    case SIGNUP_SUCCESS:\r\n      return { ...state, signupInProgress: false };\r\n    case SIGNUP_ERROR:\r\n      return { ...state, signupInProgress: false, signupError: payload };\r\n\r\n    case CONFIRM_REQUEST:\r\n      return { ...state, confirmInProgress: true, loginError: null, confirmError: null };\r\n    case CONFIRM_SUCCESS:\r\n      return { ...state, confirmInProgress: false, isAuthenticated: true };\r\n    case CONFIRM_ERROR:\r\n      return { ...state, confirmInProgress: false, confirmError: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\nexport const authenticationInProgress = state => {\r\n  const { loginInProgress, logoutInProgress, signupInProgress } = state.Auth;\r\n  return loginInProgress || logoutInProgress || signupInProgress;\r\n};\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const authInfoRequest = () => ({ type: AUTH_INFO_REQUEST });\r\nexport const authInfoSuccess = info => ({ type: AUTH_INFO_SUCCESS, payload: info });\r\n\r\nexport const loginRequest = () => ({ type: LOGIN_REQUEST });\r\nexport const loginSuccess = () => ({ type: LOGIN_SUCCESS });\r\nexport const loginError = error => ({ type: LOGIN_ERROR, payload: error, error: true });\r\n\r\nexport const logoutRequest = () => ({ type: LOGOUT_REQUEST });\r\nexport const logoutSuccess = () => ({ type: LOGOUT_SUCCESS });\r\nexport const logoutError = error => ({ type: LOGOUT_ERROR, payload: error, error: true });\r\n\r\nexport const signupRequest = () => ({ type: SIGNUP_REQUEST });\r\nexport const signupSuccess = () => ({ type: SIGNUP_SUCCESS });\r\nexport const signupError = error => ({ type: SIGNUP_ERROR, payload: error, error: true });\r\n\r\nexport const confirmRequest = () => ({ type: CONFIRM_REQUEST });\r\nexport const confirmSuccess = () => ({ type: CONFIRM_SUCCESS });\r\nexport const confirmError = error => ({ type: CONFIRM_ERROR, payload: error, error: true });\r\n\r\nexport const userLogout = () => ({ type: USER_LOGOUT });\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const authInfo = () => (dispatch, getState, sdk) => {\r\n  dispatch(authInfoRequest());\r\n  return sdk\r\n    .authInfo()\r\n    .then(info => dispatch(authInfoSuccess(info)))\r\n    .catch(e => {\r\n      // Requesting auth info just reads the token from the token\r\n      // store (i.e. cookies), and should not fail in normal\r\n      // circumstances. If it fails, it's due to a programming\r\n      // error. In that case we mark the operation done and dispatch\r\n      // `null` success action that marks the user as unauthenticated.\r\n      log.error(e, 'auth-info-failed');\r\n      dispatch(authInfoSuccess(null));\r\n    });\r\n};\r\n\r\nexport const login = (username, password) => (dispatch, getState, sdk) => {\r\n  if (authenticationInProgress(getState())) {\r\n    return Promise.reject(new Error('Login or logout already in progress'));\r\n  }\r\n  dispatch(loginRequest());\r\n\r\n  // Note that the thunk does not reject when the login fails, it\r\n  // just dispatches the login error action.\r\n  return sdk\r\n    .login({ username, password })\r\n    .then(() => dispatch(loginSuccess()))\r\n    .then(() => dispatch(fetchCurrentUser()))\r\n    .catch(e => dispatch(loginError(storableError(e))));\r\n};\r\n\r\nexport const logout = () => (dispatch, getState, sdk) => {\r\n  if (authenticationInProgress(getState())) {\r\n    return Promise.reject(new Error('Login or logout already in progress'));\r\n  }\r\n  dispatch(logoutRequest());\r\n\r\n  // Note that the thunk does not reject when the logout fails, it\r\n  // just dispatches the logout error action.\r\n  return sdk\r\n    .logout()\r\n    .then(() => {\r\n      // The order of the dispatched actions\r\n      dispatch(logoutSuccess());\r\n      dispatch(clearCurrentUser());\r\n      log.clearUserId();\r\n      dispatch(userLogout());\r\n    })\r\n    .catch(e => dispatch(logoutError(storableError(e))));\r\n};\r\n\r\nexport const signup = params => (dispatch, getState, sdk) => {\r\n  if (authenticationInProgress(getState())) {\r\n    return Promise.reject(new Error('Login or logout already in progress'));\r\n  }\r\n  dispatch(signupRequest());\r\n  const { email, password, firstName, lastName, ...rest } = params;\r\n\r\n  const createUserParams = isEmpty(rest)\r\n    ? { email, password, firstName, lastName }\r\n    : { email, password, firstName, lastName, protectedData: { ...rest } };\r\n\r\n  // We must login the user if signup succeeds since the API doesn't\r\n  // do that automatically.\r\n  return sdk.currentUser\r\n    .create(createUserParams)\r\n    .then(() => dispatch(signupSuccess()))\r\n    .then(() => dispatch(login(email, password)))\r\n    .catch(e => {\r\n      dispatch(signupError(storableError(e)));\r\n      log.error(e, 'signup-failed', {\r\n        email: params.email,\r\n        firstName: params.firstName,\r\n        lastName: params.lastName,\r\n      });\r\n    });\r\n};\r\n\r\nexport const signupWithIdp = params => (dispatch, getState, sdk) => {\r\n  dispatch(confirmRequest());\r\n  return createUserWithIdp(params)\r\n    .then(res => {\r\n      return dispatch(confirmSuccess());\r\n    })\r\n    .then(() => dispatch(fetchCurrentUser()))\r\n    .catch(e => {\r\n      log.error(e, 'create-user-with-idp-failed', { params });\r\n      return dispatch(confirmError(storableError(e)));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}