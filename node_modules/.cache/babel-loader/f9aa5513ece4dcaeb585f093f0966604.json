{"ast":null,"code":"import { API } from '@sentry/core';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n/** Base Transport class implementation */\n\nvar BaseTransport =\n/** @class */\nfunction () {\n  function BaseTransport(options) {\n    this.options = options;\n    /** A simple buffer holding all requests. */\n\n    this._buffer = new PromiseBuffer(30);\n    this._api = new API(this.options.dsn); // tslint:disable-next-line:deprecation\n\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.sendEvent = function (_) {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.close = function (timeout) {\n    return this._buffer.drain(timeout);\n  };\n\n  return BaseTransport;\n}();\n\nexport { BaseTransport };","map":{"version":3,"sources":["../../src/transports/base.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAoB,cAApB;AAEA,SAAS,aAAT,EAAwB,WAAxB,QAA2C,eAA3C;AAEA;;AACA,IAAA,aAAA;AAAA;AAAA,YAAA;AAYE,WAAA,aAAA,CAA0B,OAA1B,EAAmD;AAAzB,SAAA,OAAA,GAAA,OAAA;AAH1B;;AACmB,SAAA,OAAA,GAAmC,IAAI,aAAJ,CAAkB,EAAlB,CAAnC;AAGjB,SAAK,IAAL,GAAY,IAAI,GAAJ,CAAQ,KAAK,OAAL,CAAa,GAArB,CAAZ,CADiD,CAEjD;;AACA,SAAK,GAAL,GAAW,KAAK,IAAL,CAAU,kCAAV,EAAX;AACD;AAED;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,CAAjB,EAAyB;AACvB,UAAM,IAAI,WAAJ,CAAgB,qDAAhB,CAAN;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,OAAb,EAA6B;AAC3B,WAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,OAAnB,CAAP;AACD,GAFM;;AAGT,SAAA,aAAA;AAAC,CA/BD,EAAA","sourcesContent":["import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(this.options.dsn);\n    // tslint:disable-next-line:deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}