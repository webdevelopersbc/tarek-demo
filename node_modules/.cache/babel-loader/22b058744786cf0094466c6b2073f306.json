{"ast":null,"code":"import pick from 'lodash/pick';\nimport { storableError } from '../util/errors';\nimport * as log from '../util/log'; // ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/paymentMethods/SET_INITIAL_VALUES';\nexport const CREATE_STRIPE_CUSTOMER_REQUEST = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_REQUEST';\nexport const CREATE_STRIPE_CUSTOMER_SUCCESS = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_SUCCESS';\nexport const CREATE_STRIPE_CUSTOMER_ERROR = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_ERROR';\nexport const ADD_PAYMENT_METHOD_REQUEST = 'app/paymentMethods/ADD_PAYMENT_METHOD_REQUEST';\nexport const ADD_PAYMENT_METHOD_SUCCESS = 'app/paymentMethods/ADD_PAYMENT_METHOD_SUCCESS';\nexport const ADD_PAYMENT_METHOD_ERROR = 'app/paymentMethods/ADD_PAYMENT_METHOD_ERROR';\nexport const DELETE_PAYMENT_METHOD_REQUEST = 'app/paymentMethods/DELETE_PAYMENT_METHOD_REQUEST';\nexport const DELETE_PAYMENT_METHOD_SUCCESS = 'app/paymentMethods/DELETE_PAYMENT_METHOD_SUCCESS';\nexport const DELETE_PAYMENT_METHOD_ERROR = 'app/paymentMethods/DELETE_PAYMENT_METHOD_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  addPaymentMethodInProgress: null,\n  addPaymentMethodError: null,\n  deletePaymentMethodInProgress: null,\n  deletePaymentMethodError: null,\n  createStripeCustomerInProgress: null,\n  createStripeCustomerError: null,\n  stripeCustomer: null\n};\nexport default function payoutMethodsPageReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState,\n        ...payload\n      };\n\n    case CREATE_STRIPE_CUSTOMER_REQUEST:\n      return { ...state,\n        createStripeCustomerError: null,\n        createStripeCustomerInProgress: true\n      };\n\n    case CREATE_STRIPE_CUSTOMER_SUCCESS:\n      return { ...state,\n        createStripeCustomerInProgress: false,\n        stripeCustomer: payload\n      };\n\n    case CREATE_STRIPE_CUSTOMER_ERROR:\n      console.error(payload);\n      return { ...state,\n        createStripeCustomerError: payload,\n        createStripeCustomerInProgress: false\n      };\n\n    case ADD_PAYMENT_METHOD_REQUEST:\n      return { ...state,\n        addPaymentMethodError: null,\n        addPaymentMethodInProgress: true\n      };\n\n    case ADD_PAYMENT_METHOD_SUCCESS:\n      return { ...state,\n        addPaymentMethodInProgress: false,\n        stripeCustomer: payload\n      };\n\n    case ADD_PAYMENT_METHOD_ERROR:\n      console.error(payload);\n      return { ...state,\n        addPaymentMethodError: payload,\n        addPaymentMethodInProgress: false\n      };\n\n    case DELETE_PAYMENT_METHOD_REQUEST:\n      return { ...state,\n        deletePaymentMethodError: null,\n        deletePaymentMethodInProgress: true\n      };\n\n    case DELETE_PAYMENT_METHOD_SUCCESS:\n      return { ...state,\n        deletePaymentMethodInProgress: false\n      };\n\n    case DELETE_PAYMENT_METHOD_ERROR:\n      console.error(payload);\n      return { ...state,\n        deletePaymentMethodError: payload,\n        deletePaymentMethodInProgress: false\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\nexport const stripeCustomerCreateRequest = () => ({\n  type: CREATE_STRIPE_CUSTOMER_REQUEST\n});\nexport const stripeCustomerCreateSuccess = stripeCustomer => ({\n  type: CREATE_STRIPE_CUSTOMER_SUCCESS,\n  payload: stripeCustomer\n});\nexport const stripeCustomerCreateError = e => ({\n  type: CREATE_STRIPE_CUSTOMER_ERROR,\n  payload: e,\n  error: true\n});\nexport const addPaymentMethodRequest = () => ({\n  type: ADD_PAYMENT_METHOD_REQUEST\n});\nexport const addPaymentMethodSuccess = stripeCustomer => ({\n  type: ADD_PAYMENT_METHOD_SUCCESS,\n  payload: stripeCustomer\n});\nexport const addPaymentMethodError = e => ({\n  type: ADD_PAYMENT_METHOD_ERROR,\n  payload: e,\n  error: true\n});\nexport const deletePaymentMethodRequest = () => ({\n  type: DELETE_PAYMENT_METHOD_REQUEST\n});\nexport const deletePaymentMethodSuccess = stripeCustomer => ({\n  type: DELETE_PAYMENT_METHOD_SUCCESS,\n  payload: stripeCustomer\n});\nexport const deletePaymentMethodError = e => ({\n  type: DELETE_PAYMENT_METHOD_ERROR,\n  payload: e,\n  error: true\n}); // ================ Thunks ================ //\n\nexport const createStripeCustomer = stripePaymentMethodId => (dispatch, getState, sdk) => {\n  dispatch(stripeCustomerCreateRequest());\n  return sdk.stripeCustomer.create({\n    stripePaymentMethodId\n  }, {\n    expand: true,\n    include: ['defaultPaymentMethod']\n  }).then(response => {\n    const stripeCustomer = response.data.data;\n    dispatch(stripeCustomerCreateSuccess(stripeCustomer));\n    return stripeCustomer;\n  }).catch(e => {\n    log.error(storableError(e), 'create-stripe-user-failed');\n    dispatch(stripeCustomerCreateError(storableError(e)));\n  });\n};\nexport const addPaymentMethod = stripePaymentMethodId => (dispatch, getState, sdk) => {\n  dispatch(addPaymentMethodRequest());\n  return sdk.stripeCustomer.addPaymentMethod({\n    stripePaymentMethodId\n  }, {\n    expand: true\n  }).then(response => {\n    const stripeCustomer = response.data.data;\n    dispatch(addPaymentMethodSuccess(stripeCustomer));\n    return stripeCustomer;\n  }).catch(e => {\n    log.error(storableError(e), 'add-payment-method-failed');\n    dispatch(addPaymentMethodError(storableError(e)));\n  });\n};\nexport const deletePaymentMethod = () => (dispatch, getState, sdk) => {\n  dispatch(deletePaymentMethodRequest());\n  return sdk.stripeCustomer.deletePaymentMethod({}, {\n    expand: true\n  }).then(response => {\n    const stripeCustomer = response.data.data;\n    dispatch(deletePaymentMethodSuccess(stripeCustomer));\n    return stripeCustomer;\n  }).catch(e => {\n    log.error(storableError(e), 'add-payment-method-failed');\n    dispatch(deletePaymentMethodError(storableError(e)));\n  });\n};\nexport const updatePaymentMethod = stripePaymentMethodId => (dispatch, getState, sdk) => {\n  return dispatch(deletePaymentMethod()).then(() => {\n    return dispatch(addPaymentMethod(stripePaymentMethodId));\n  }).catch(e => {\n    log.error(storableError(e), 'updating-payment-method-failed');\n  });\n}; // This function helps to choose correct thunk function\n\nexport const savePaymentMethod = (stripeCustomer, stripePaymentMethodId) => (dispatch, getState, sdk) => {\n  const hasAlreadyDefaultPaymentMethod = stripeCustomer && stripeCustomer.defaultPaymentMethod && stripeCustomer.defaultPaymentMethod.id;\n  const savePromise = !stripeCustomer || !stripeCustomer.id ? dispatch(createStripeCustomer(stripePaymentMethodId)) : hasAlreadyDefaultPaymentMethod ? dispatch(updatePaymentMethod(stripePaymentMethodId)) : dispatch(addPaymentMethod(stripePaymentMethodId));\n  return savePromise.then(response => {\n    const {\n      createStripeCustomerError,\n      addPaymentMethodError,\n      deletePaymentMethodError\n    } = getState().paymentMethods; // If there are any errors, return those errors\n\n    if (createStripeCustomerError || addPaymentMethodError || deletePaymentMethodError) {\n      return {\n        errors: {\n          createStripeCustomerError,\n          addPaymentMethodError,\n          deletePaymentMethodError\n        }\n      };\n    }\n\n    return response;\n  }).catch(e => {// errors are already catched in other thunk functions.\n  });\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/paymentMethods.duck.js"],"names":["pick","storableError","log","SET_INITIAL_VALUES","CREATE_STRIPE_CUSTOMER_REQUEST","CREATE_STRIPE_CUSTOMER_SUCCESS","CREATE_STRIPE_CUSTOMER_ERROR","ADD_PAYMENT_METHOD_REQUEST","ADD_PAYMENT_METHOD_SUCCESS","ADD_PAYMENT_METHOD_ERROR","DELETE_PAYMENT_METHOD_REQUEST","DELETE_PAYMENT_METHOD_SUCCESS","DELETE_PAYMENT_METHOD_ERROR","initialState","addPaymentMethodInProgress","addPaymentMethodError","deletePaymentMethodInProgress","deletePaymentMethodError","createStripeCustomerInProgress","createStripeCustomerError","stripeCustomer","payoutMethodsPageReducer","state","action","type","payload","console","error","setInitialValues","initialValues","Object","keys","stripeCustomerCreateRequest","stripeCustomerCreateSuccess","stripeCustomerCreateError","e","addPaymentMethodRequest","addPaymentMethodSuccess","deletePaymentMethodRequest","deletePaymentMethodSuccess","createStripeCustomer","stripePaymentMethodId","dispatch","getState","sdk","create","expand","include","then","response","data","catch","addPaymentMethod","deletePaymentMethod","updatePaymentMethod","savePaymentMethod","hasAlreadyDefaultPaymentMethod","defaultPaymentMethod","id","savePromise","paymentMethods","errors"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\r\nimport { storableError } from '../util/errors';\r\nimport * as log from '../util/log';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const SET_INITIAL_VALUES = 'app/paymentMethods/SET_INITIAL_VALUES';\r\n\r\nexport const CREATE_STRIPE_CUSTOMER_REQUEST = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_REQUEST';\r\nexport const CREATE_STRIPE_CUSTOMER_SUCCESS = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_SUCCESS';\r\nexport const CREATE_STRIPE_CUSTOMER_ERROR = 'app/paymentMethods/CREATE_STRIPE_CUSTOMER_ERROR';\r\n\r\nexport const ADD_PAYMENT_METHOD_REQUEST = 'app/paymentMethods/ADD_PAYMENT_METHOD_REQUEST';\r\nexport const ADD_PAYMENT_METHOD_SUCCESS = 'app/paymentMethods/ADD_PAYMENT_METHOD_SUCCESS';\r\nexport const ADD_PAYMENT_METHOD_ERROR = 'app/paymentMethods/ADD_PAYMENT_METHOD_ERROR';\r\n\r\nexport const DELETE_PAYMENT_METHOD_REQUEST = 'app/paymentMethods/DELETE_PAYMENT_METHOD_REQUEST';\r\nexport const DELETE_PAYMENT_METHOD_SUCCESS = 'app/paymentMethods/DELETE_PAYMENT_METHOD_SUCCESS';\r\nexport const DELETE_PAYMENT_METHOD_ERROR = 'app/paymentMethods/DELETE_PAYMENT_METHOD_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  addPaymentMethodInProgress: null,\r\n  addPaymentMethodError: null,\r\n  deletePaymentMethodInProgress: null,\r\n  deletePaymentMethodError: null,\r\n  createStripeCustomerInProgress: null,\r\n  createStripeCustomerError: null,\r\n  stripeCustomer: null,\r\n};\r\n\r\nexport default function payoutMethodsPageReducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_INITIAL_VALUES:\r\n      return { ...initialState, ...payload };\r\n    case CREATE_STRIPE_CUSTOMER_REQUEST:\r\n      return { ...state, createStripeCustomerError: null, createStripeCustomerInProgress: true };\r\n    case CREATE_STRIPE_CUSTOMER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        createStripeCustomerInProgress: false,\r\n        stripeCustomer: payload,\r\n      };\r\n    case CREATE_STRIPE_CUSTOMER_ERROR:\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        createStripeCustomerError: payload,\r\n        createStripeCustomerInProgress: false,\r\n      };\r\n    case ADD_PAYMENT_METHOD_REQUEST:\r\n      return { ...state, addPaymentMethodError: null, addPaymentMethodInProgress: true };\r\n    case ADD_PAYMENT_METHOD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addPaymentMethodInProgress: false,\r\n        stripeCustomer: payload,\r\n      };\r\n    case ADD_PAYMENT_METHOD_ERROR:\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        addPaymentMethodError: payload,\r\n        addPaymentMethodInProgress: false,\r\n      };\r\n\r\n    case DELETE_PAYMENT_METHOD_REQUEST:\r\n      return { ...state, deletePaymentMethodError: null, deletePaymentMethodInProgress: true };\r\n    case DELETE_PAYMENT_METHOD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deletePaymentMethodInProgress: false,\r\n      };\r\n    case DELETE_PAYMENT_METHOD_ERROR:\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        deletePaymentMethodError: payload,\r\n        deletePaymentMethodInProgress: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const setInitialValues = initialValues => ({\r\n  type: SET_INITIAL_VALUES,\r\n  payload: pick(initialValues, Object.keys(initialState)),\r\n});\r\n\r\nexport const stripeCustomerCreateRequest = () => ({ type: CREATE_STRIPE_CUSTOMER_REQUEST });\r\n\r\nexport const stripeCustomerCreateSuccess = stripeCustomer => ({\r\n  type: CREATE_STRIPE_CUSTOMER_SUCCESS,\r\n  payload: stripeCustomer,\r\n});\r\n\r\nexport const stripeCustomerCreateError = e => ({\r\n  type: CREATE_STRIPE_CUSTOMER_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const addPaymentMethodRequest = () => ({ type: ADD_PAYMENT_METHOD_REQUEST });\r\n\r\nexport const addPaymentMethodSuccess = stripeCustomer => ({\r\n  type: ADD_PAYMENT_METHOD_SUCCESS,\r\n  payload: stripeCustomer,\r\n});\r\n\r\nexport const addPaymentMethodError = e => ({\r\n  type: ADD_PAYMENT_METHOD_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const deletePaymentMethodRequest = () => ({ type: DELETE_PAYMENT_METHOD_REQUEST });\r\n\r\nexport const deletePaymentMethodSuccess = stripeCustomer => ({\r\n  type: DELETE_PAYMENT_METHOD_SUCCESS,\r\n  payload: stripeCustomer,\r\n});\r\n\r\nexport const deletePaymentMethodError = e => ({\r\n  type: DELETE_PAYMENT_METHOD_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const createStripeCustomer = stripePaymentMethodId => (dispatch, getState, sdk) => {\r\n  dispatch(stripeCustomerCreateRequest());\r\n  return sdk.stripeCustomer\r\n    .create({ stripePaymentMethodId }, { expand: true, include: ['defaultPaymentMethod'] })\r\n    .then(response => {\r\n      const stripeCustomer = response.data.data;\r\n      dispatch(stripeCustomerCreateSuccess(stripeCustomer));\r\n      return stripeCustomer;\r\n    })\r\n    .catch(e => {\r\n      log.error(storableError(e), 'create-stripe-user-failed');\r\n      dispatch(stripeCustomerCreateError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const addPaymentMethod = stripePaymentMethodId => (dispatch, getState, sdk) => {\r\n  dispatch(addPaymentMethodRequest());\r\n  return sdk.stripeCustomer\r\n    .addPaymentMethod({ stripePaymentMethodId }, { expand: true })\r\n    .then(response => {\r\n      const stripeCustomer = response.data.data;\r\n      dispatch(addPaymentMethodSuccess(stripeCustomer));\r\n      return stripeCustomer;\r\n    })\r\n    .catch(e => {\r\n      log.error(storableError(e), 'add-payment-method-failed');\r\n      dispatch(addPaymentMethodError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const deletePaymentMethod = () => (dispatch, getState, sdk) => {\r\n  dispatch(deletePaymentMethodRequest());\r\n  return sdk.stripeCustomer\r\n    .deletePaymentMethod({}, { expand: true })\r\n    .then(response => {\r\n      const stripeCustomer = response.data.data;\r\n      dispatch(deletePaymentMethodSuccess(stripeCustomer));\r\n      return stripeCustomer;\r\n    })\r\n    .catch(e => {\r\n      log.error(storableError(e), 'add-payment-method-failed');\r\n      dispatch(deletePaymentMethodError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const updatePaymentMethod = stripePaymentMethodId => (dispatch, getState, sdk) => {\r\n  return dispatch(deletePaymentMethod())\r\n    .then(() => {\r\n      return dispatch(addPaymentMethod(stripePaymentMethodId));\r\n    })\r\n    .catch(e => {\r\n      log.error(storableError(e), 'updating-payment-method-failed');\r\n    });\r\n};\r\n\r\n// This function helps to choose correct thunk function\r\nexport const savePaymentMethod = (stripeCustomer, stripePaymentMethodId) => (\r\n  dispatch,\r\n  getState,\r\n  sdk\r\n) => {\r\n  const hasAlreadyDefaultPaymentMethod =\r\n    stripeCustomer && stripeCustomer.defaultPaymentMethod && stripeCustomer.defaultPaymentMethod.id;\r\n\r\n  const savePromise =\r\n    !stripeCustomer || !stripeCustomer.id\r\n      ? dispatch(createStripeCustomer(stripePaymentMethodId))\r\n      : hasAlreadyDefaultPaymentMethod\r\n      ? dispatch(updatePaymentMethod(stripePaymentMethodId))\r\n      : dispatch(addPaymentMethod(stripePaymentMethodId));\r\n\r\n  return savePromise\r\n    .then(response => {\r\n      const {\r\n        createStripeCustomerError,\r\n        addPaymentMethodError,\r\n        deletePaymentMethodError,\r\n      } = getState().paymentMethods;\r\n\r\n      // If there are any errors, return those errors\r\n      if (createStripeCustomerError || addPaymentMethodError || deletePaymentMethodError) {\r\n        return {\r\n          errors: { createStripeCustomerError, addPaymentMethodError, deletePaymentMethodError },\r\n        };\r\n      }\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      // errors are already catched in other thunk functions.\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}