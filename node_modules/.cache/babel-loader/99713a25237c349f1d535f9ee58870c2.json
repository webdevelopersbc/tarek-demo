{"ast":null,"code":"import omit from 'lodash/omit';\nimport config from '../../config';\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\nimport { denormalisedResponseEntities, ensureAvailabilityException } from '../../util/data';\nimport { isSameDate, monthIdString } from '../../util/dates';\nimport { storableError } from '../../util/errors';\nimport * as log from '../../util/log';\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { createStripeAccount, updateStripeAccount, fetchStripeAccount } from '../../ducks/stripeConnectAccount.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck';\nconst {\n  UUID\n} = sdkTypes; // Return an array of image ids\n\nconst imageIds = images => {\n  // For newly uploaded image the UUID can be found from \"img.imageId\"\n  // and for existing listing images the id is \"img.id\"\n  return images ? images.map(img => img.imageId || img.id) : null;\n}; // After listing creation & update, we want to make sure that uploadedImages state is cleaned\n\n\nconst updateUloadedImagesState = (state, payload) => {\n  var _payload$data, _payload$data$relatio, _payload$data$relatio2;\n\n  const {\n    uploadedImages,\n    uploadedImagesOrder\n  } = state; // Images attached to listing entity\n\n  const attachedImages = (payload === null || payload === void 0 ? void 0 : (_payload$data = payload.data) === null || _payload$data === void 0 ? void 0 : (_payload$data$relatio = _payload$data.relationships) === null || _payload$data$relatio === void 0 ? void 0 : (_payload$data$relatio2 = _payload$data$relatio.images) === null || _payload$data$relatio2 === void 0 ? void 0 : _payload$data$relatio2.data) || [];\n  const attachedImageUUIDStrings = attachedImages.map(img => img.id.uuid); // Uploaded images (which are propably not yet attached to listing)\n\n  const unattachedImages = Object.values(state.uploadedImages);\n  const duplicateImageEntities = unattachedImages.filter(unattachedImg => {\n    var _unattachedImg$imageI;\n\n    return attachedImageUUIDStrings.includes((_unattachedImg$imageI = unattachedImg.imageId) === null || _unattachedImg$imageI === void 0 ? void 0 : _unattachedImg$imageI.uuid);\n  });\n  return duplicateImageEntities.length > 0 ? {\n    uploadedImages: {},\n    uploadedImagesOrder: []\n  } : {\n    uploadedImages,\n    uploadedImagesOrder\n  };\n};\n\nconst getImageVariantInfo = () => {\n  const {\n    aspectWidth = 1,\n    aspectHeight = 1,\n    variantPrefix = 'listing-card'\n  } = config.listing;\n  const aspectRatio = aspectHeight / aspectWidth;\n  const fieldsImage = [`variants.${variantPrefix}`, `variants.${variantPrefix}-2x`];\n  return {\n    fieldsImage,\n    imageVariants: { ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\n      ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio)\n    }\n  };\n}; // A helper function to filter away exception that matches start and end timestamps\n\n\nconst removeException = (exception, calendar) => {\n  const availabilityException = ensureAvailabilityException(exception.availabilityException);\n  const {\n    start,\n    end\n  } = availabilityException.attributes; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdString(start, 'Etc/UTC');\n  const monthData = calendar[monthId] || {\n    exceptions: []\n  };\n  const exceptions = monthData.exceptions.filter(e => {\n    const anException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = anException.attributes.start;\n    const exceptionEnd = anException.attributes.end;\n    return !(isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end));\n  });\n  return { ...calendar,\n    [monthId]: { ...monthData,\n      exceptions\n    }\n  };\n}; // A helper function to add a new exception and remove previous one if there's a matching exception\n\n\nconst addException = (exception, calendar) => {\n  const {\n    start\n  } = ensureAvailabilityException(exception.availabilityException).attributes; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdString(start, 'Etc/UTC'); // TODO: API doesn't support \"availability_exceptions/update\" yet\n  // So, when user wants to create an exception we need to ensure\n  // that possible existing exception is removed first.\n\n  const cleanCalendar = removeException(exception, calendar);\n  const monthData = cleanCalendar[monthId] || {\n    exceptions: []\n  };\n  return { ...cleanCalendar,\n    [monthId]: { ...monthData,\n      exceptions: [...monthData.exceptions, exception]\n    }\n  };\n}; // A helper function to update exception that matches start and end timestamps\n\n\nconst updateException = (exception, calendar) => {\n  const newAvailabilityException = ensureAvailabilityException(exception.availabilityException);\n  const {\n    start,\n    end\n  } = newAvailabilityException.attributes; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdString(start, 'Etc/UTC');\n  const monthData = calendar[monthId] || {\n    exceptions: []\n  };\n  const exceptions = monthData.exceptions.map(e => {\n    const availabilityException = ensureAvailabilityException(e.availabilityException);\n    const exceptionStart = availabilityException.attributes.start;\n    const exceptionEnd = availabilityException.attributes.end;\n    return isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end) ? exception : e;\n  });\n  return { ...calendar,\n    [monthId]: { ...monthData,\n      exceptions\n    }\n  };\n}; // Update calendar data of given month\n\n\nconst updateCalendarMonth = (state, monthId, data) => {\n  // Ensure that every month has array for bookings and exceptions\n  const defaultMonthData = {\n    bookings: [],\n    exceptions: []\n  };\n  return { ...state,\n    availabilityCalendar: { ...state.availabilityCalendar,\n      [monthId]: { ...defaultMonthData,\n        ...state.availabilityCalendar[monthId],\n        ...data\n      }\n    }\n  };\n};\n\nconst requestAction = actionType => params => ({\n  type: actionType,\n  payload: {\n    params\n  }\n});\n\nconst successAction = actionType => result => ({\n  type: actionType,\n  payload: result.data\n});\n\nconst errorAction = actionType => error => ({\n  type: actionType,\n  payload: error,\n  error: true\n}); // ================ Action types ================ //\n\n\nexport const MARK_TAB_UPDATED = 'app/EditListingPage/MARK_TAB_UPDATED';\nexport const CLEAR_UPDATED_TAB = 'app/EditListingPage/CLEAR_UPDATED_TAB';\nexport const CREATE_LISTING_DRAFT_REQUEST = 'app/EditListingPage/CREATE_LISTING_DRAFT_REQUEST';\nexport const CREATE_LISTING_DRAFT_SUCCESS = 'app/EditListingPage/CREATE_LISTING_DRAFT_SUCCESS';\nexport const CREATE_LISTING_DRAFT_ERROR = 'app/EditListingPage/CREATE_LISTING_DRAFT_ERROR';\nexport const PUBLISH_LISTING_REQUEST = 'app/EditListingPage/PUBLISH_LISTING_REQUEST';\nexport const PUBLISH_LISTING_SUCCESS = 'app/EditListingPage/PUBLISH_LISTING_SUCCESS';\nexport const PUBLISH_LISTING_ERROR = 'app/EditListingPage/PUBLISH_LISTING_ERROR';\nexport const UPDATE_LISTING_REQUEST = 'app/EditListingPage/UPDATE_LISTING_REQUEST';\nexport const UPDATE_LISTING_SUCCESS = 'app/EditListingPage/UPDATE_LISTING_SUCCESS';\nexport const UPDATE_LISTING_ERROR = 'app/EditListingPage/UPDATE_LISTING_ERROR';\nexport const SHOW_LISTINGS_REQUEST = 'app/EditListingPage/SHOW_LISTINGS_REQUEST';\nexport const SHOW_LISTINGS_SUCCESS = 'app/EditListingPage/SHOW_LISTINGS_SUCCESS';\nexport const SHOW_LISTINGS_ERROR = 'app/EditListingPage/SHOW_LISTINGS_ERROR';\nexport const FETCH_BOOKINGS_REQUEST = 'app/EditListingPage/FETCH_BOOKINGS_REQUEST';\nexport const FETCH_BOOKINGS_SUCCESS = 'app/EditListingPage/FETCH_BOOKINGS_SUCCESS';\nexport const FETCH_BOOKINGS_ERROR = 'app/EditListingPage/FETCH_BOOKINGS_ERROR';\nexport const FETCH_EXCEPTIONS_REQUEST = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_REQUEST';\nexport const FETCH_EXCEPTIONS_SUCCESS = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_SUCCESS';\nexport const FETCH_EXCEPTIONS_ERROR = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_ERROR';\nexport const CREATE_EXCEPTION_REQUEST = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const CREATE_EXCEPTION_SUCCESS = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const CREATE_EXCEPTION_ERROR = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_ERROR';\nexport const DELETE_EXCEPTION_REQUEST = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_REQUEST';\nexport const DELETE_EXCEPTION_SUCCESS = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_SUCCESS';\nexport const DELETE_EXCEPTION_ERROR = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_ERROR';\nexport const SET_STOCK_REQUEST = 'app/EditListingPage/SET_STOCK_REQUEST';\nexport const SET_STOCK_SUCCESS = 'app/EditListingPage/SET_STOCK_SUCCESS';\nexport const SET_STOCK_ERROR = 'app/EditListingPage/SET_STOCK_ERROR';\nexport const UPLOAD_IMAGE_REQUEST = 'app/EditListingPage/UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'app/EditListingPage/UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_ERROR = 'app/EditListingPage/UPLOAD_IMAGE_ERROR';\nexport const REMOVE_LISTING_IMAGE = 'app/EditListingPage/REMOVE_LISTING_IMAGE';\nexport const SAVE_PAYOUT_DETAILS_REQUEST = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_REQUEST';\nexport const SAVE_PAYOUT_DETAILS_SUCCESS = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_SUCCESS';\nexport const SAVE_PAYOUT_DETAILS_ERROR = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  // Error instance placeholders for each endpoint\n  createListingDraftError: null,\n  publishingListing: null,\n  publishListingError: null,\n  updateListingError: null,\n  showListingsError: null,\n  uploadImageError: null,\n  setStockError: null,\n  setStockInProgress: false,\n  createListingDraftInProgress: false,\n  submittedListingId: null,\n  redirectToListing: false,\n  availabilityCalendar: {// '2018-12': {\n    //   bookings: [],\n    //   exceptions: [],\n    //   fetchExceptionsError: null,\n    //   fetchExceptionsInProgress: false,\n    //   fetchBookingsError: null,\n    //   fetchBookingsInProgress: false,\n    // },\n  },\n  uploadedImages: {},\n  uploadedImagesOrder: [],\n  removedImageIds: [],\n  listingDraft: null,\n  updatedTab: null,\n  updateInProgress: false,\n  payoutDetailsSaveInProgress: false,\n  payoutDetailsSaved: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case MARK_TAB_UPDATED:\n      return { ...state,\n        updatedTab: payload\n      };\n\n    case CLEAR_UPDATED_TAB:\n      return { ...state,\n        updatedTab: null,\n        updateListingError: null\n      };\n\n    case CREATE_LISTING_DRAFT_REQUEST:\n      return { ...state,\n        createListingDraftInProgress: true,\n        createListingDraftError: null,\n        submittedListingId: null,\n        listingDraft: null\n      };\n\n    case CREATE_LISTING_DRAFT_SUCCESS:\n      return { ...state,\n        ...updateUloadedImagesState(state, payload),\n        createListingDraftInProgress: false,\n        submittedListingId: payload.data.id,\n        listingDraft: payload.data\n      };\n\n    case CREATE_LISTING_DRAFT_ERROR:\n      return { ...state,\n        createListingDraftInProgress: false,\n        createListingDraftError: payload\n      };\n\n    case PUBLISH_LISTING_REQUEST:\n      return { ...state,\n        publishingListing: payload.listingId,\n        publishListingError: null\n      };\n\n    case PUBLISH_LISTING_SUCCESS:\n      return { ...state,\n        redirectToListing: true,\n        publishingListing: null,\n        createListingDraftError: null,\n        updateListingError: null,\n        showListingsError: null,\n        uploadImageError: null,\n        createListingDraftInProgress: false,\n        updateInProgress: false\n      };\n\n    case PUBLISH_LISTING_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        console.error(payload);\n        return { ...state,\n          publishingListing: null,\n          publishListingError: {\n            listingId: state.publishingListing,\n            error: payload\n          }\n        };\n      }\n\n    case UPDATE_LISTING_REQUEST:\n      return { ...state,\n        updateInProgress: true,\n        updateListingError: null\n      };\n\n    case UPDATE_LISTING_SUCCESS:\n      return { ...state,\n        ...updateUloadedImagesState(state, payload),\n        updateInProgress: false,\n        availabilityCalendar: { ...state.availabilityCalendar\n        }\n      };\n\n    case UPDATE_LISTING_ERROR:\n      return { ...state,\n        updateInProgress: false,\n        updateListingError: payload\n      };\n\n    case SHOW_LISTINGS_REQUEST:\n      return { ...state,\n        showListingsError: null\n      };\n\n    case SHOW_LISTINGS_SUCCESS:\n      return { ...initialState,\n        availabilityCalendar: { ...state.availabilityCalendar\n        }\n      };\n\n    case SHOW_LISTINGS_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return { ...state,\n        showListingsError: payload,\n        redirectToListing: false\n      };\n\n    case FETCH_BOOKINGS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchBookingsError: null,\n        fetchBookingsInProgress: true\n      });\n\n    case FETCH_BOOKINGS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        bookings: payload.bookings,\n        fetchBookingsInProgress: false\n      });\n\n    case FETCH_BOOKINGS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchBookingsError: payload.error,\n        fetchBookingsInProgress: false\n      });\n\n    case FETCH_EXCEPTIONS_REQUEST:\n      return updateCalendarMonth(state, payload.params.monthId, {\n        fetchExceptionsError: null,\n        fetchExceptionsInProgress: true\n      });\n\n    case FETCH_EXCEPTIONS_SUCCESS:\n      return updateCalendarMonth(state, payload.monthId, {\n        exceptions: payload.exceptions,\n        fetchExceptionsInProgress: false\n      });\n\n    case FETCH_EXCEPTIONS_ERROR:\n      return updateCalendarMonth(state, payload.monthId, {\n        fetchExceptionsError: payload.error,\n        fetchExceptionsInProgress: false\n      });\n\n    case CREATE_EXCEPTION_REQUEST:\n      {\n        const {\n          start,\n          end,\n          seats\n        } = payload.params;\n        const draft = ensureAvailabilityException({\n          attributes: {\n            start,\n            end,\n            seats\n          }\n        });\n        const exception = {\n          availabilityException: draft,\n          inProgress: true\n        };\n        const availabilityCalendar = addException(exception, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case CREATE_EXCEPTION_SUCCESS:\n      {\n        const availabilityCalendar = updateException(payload.exception, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case CREATE_EXCEPTION_ERROR:\n      {\n        const {\n          availabilityException,\n          error\n        } = payload;\n        const failedException = {\n          availabilityException,\n          error\n        };\n        const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case DELETE_EXCEPTION_REQUEST:\n      {\n        const {\n          id,\n          seats,\n          currentException\n        } = payload.params; // We first create temporary exception with given 'seats' count (the default after deletion).\n        // This makes it possible to show the UI element immediately with default color that matches\n        // with the availability plan.\n\n        const exception = {\n          id,\n          inProgress: true,\n          availabilityException: { ...currentException.availabilityException,\n            attributes: { ...currentException.availabilityException.attributes,\n              seats\n            }\n          }\n        };\n        const availabilityCalendar = updateException(exception, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case DELETE_EXCEPTION_SUCCESS:\n      {\n        const availabilityCalendar = removeException(payload.exception, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case DELETE_EXCEPTION_ERROR:\n      {\n        const {\n          availabilityException,\n          error\n        } = payload;\n        const failedException = {\n          availabilityException,\n          error\n        };\n        const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\n        return { ...state,\n          availabilityCalendar\n        };\n      }\n\n    case UPLOAD_IMAGE_REQUEST:\n      {\n        // payload.params: { id: 'tempId', file }\n        const uploadedImages = { ...state.uploadedImages,\n          [payload.params.id]: { ...payload.params\n          }\n        };\n        return { ...state,\n          uploadedImages,\n          uploadedImagesOrder: state.uploadedImagesOrder.concat([payload.params.id]),\n          uploadImageError: null\n        };\n      }\n\n    case UPLOAD_IMAGE_SUCCESS:\n      {\n        // payload.params: { id: 'tempId', imageId: 'some-real-id', attributes, type }\n        const {\n          id,\n          ...rest\n        } = payload;\n        const uploadedImages = { ...state.uploadedImages,\n          [id]: {\n            id,\n            ...rest\n          }\n        };\n        return { ...state,\n          uploadedImages\n        };\n      }\n\n    case UPLOAD_IMAGE_ERROR:\n      {\n        // eslint-disable-next-line no-console\n        const {\n          id,\n          error\n        } = payload;\n        const uploadedImagesOrder = state.uploadedImagesOrder.filter(i => i !== id);\n        const uploadedImages = omit(state.uploadedImages, id);\n        return { ...state,\n          uploadedImagesOrder,\n          uploadedImages,\n          uploadImageError: error\n        };\n      }\n\n    case REMOVE_LISTING_IMAGE:\n      {\n        const id = payload.imageId; // Only mark the image removed if it hasn't been added to the\n        // listing already\n\n        const removedImageIds = state.uploadedImages[id] ? state.removedImageIds : state.removedImageIds.concat(id); // Always remove from the draft since it might be a new image to\n        // an existing listing.\n\n        const uploadedImages = omit(state.uploadedImages, id);\n        const uploadedImagesOrder = state.uploadedImagesOrder.filter(i => i !== id);\n        return { ...state,\n          uploadedImages,\n          uploadedImagesOrder,\n          removedImageIds\n        };\n      }\n\n    case SET_STOCK_REQUEST:\n      return { ...state,\n        setStockInProgress: true,\n        setStockError: null\n      };\n\n    case SET_STOCK_SUCCESS:\n      return { ...state,\n        setStockInProgress: false\n      };\n\n    case SET_STOCK_ERROR:\n      return { ...state,\n        setStockInProgress: false,\n        setStockError: payload\n      };\n\n    case SAVE_PAYOUT_DETAILS_REQUEST:\n      return { ...state,\n        payoutDetailsSaveInProgress: true\n      };\n\n    case SAVE_PAYOUT_DETAILS_ERROR:\n      return { ...state,\n        payoutDetailsSaveInProgress: false\n      };\n\n    case SAVE_PAYOUT_DETAILS_SUCCESS:\n      return { ...state,\n        payoutDetailsSaveInProgress: false,\n        payoutDetailsSaved: true\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n// ================ Action creators ================ //\n\nexport const markTabUpdated = tab => ({\n  type: MARK_TAB_UPDATED,\n  payload: tab\n});\nexport const clearUpdatedTab = () => ({\n  type: CLEAR_UPDATED_TAB\n});\nexport const removeListingImage = imageId => ({\n  type: REMOVE_LISTING_IMAGE,\n  payload: {\n    imageId\n  }\n}); // All the action creators that don't have the {Success, Error} suffix\n// take the params object that the corresponding SDK endpoint method\n// expects.\n// SDK method: ownListings.create\n\nexport const createListingDraftRequest = requestAction(CREATE_LISTING_DRAFT_REQUEST);\nexport const createListingDraftSuccess = successAction(CREATE_LISTING_DRAFT_SUCCESS);\nexport const createListingDraftError = errorAction(CREATE_LISTING_DRAFT_ERROR); // SDK method: ownListings.publish\n\nexport const publishListingRequest = requestAction(PUBLISH_LISTING_REQUEST);\nexport const publishListingSuccess = successAction(PUBLISH_LISTING_SUCCESS);\nexport const publishListingError = errorAction(PUBLISH_LISTING_ERROR); // SDK method: ownListings.update\n\nexport const updateListingRequest = requestAction(UPDATE_LISTING_REQUEST);\nexport const updateListingSuccess = successAction(UPDATE_LISTING_SUCCESS);\nexport const updateListingError = errorAction(UPDATE_LISTING_ERROR); // SDK method: ownListings.show\n\nexport const showListingsRequest = requestAction(SHOW_LISTINGS_REQUEST);\nexport const showListingsSuccess = successAction(SHOW_LISTINGS_SUCCESS);\nexport const showListingsError = errorAction(SHOW_LISTINGS_ERROR); // SDK method: images.upload\n\nexport const uploadImageRequest = requestAction(UPLOAD_IMAGE_REQUEST);\nexport const uploadImageSuccess = successAction(UPLOAD_IMAGE_SUCCESS);\nexport const uploadImageError = errorAction(UPLOAD_IMAGE_ERROR); // SDK method: stock.compareAndSet\n\nexport const setStockRequest = requestAction(SET_STOCK_REQUEST);\nexport const setStockSuccess = successAction(SET_STOCK_SUCCESS);\nexport const setStockError = errorAction(SET_STOCK_ERROR); // SDK method: bookings.query\n\nexport const fetchBookingsRequest = requestAction(FETCH_BOOKINGS_REQUEST);\nexport const fetchBookingsSuccess = successAction(FETCH_BOOKINGS_SUCCESS);\nexport const fetchBookingsError = errorAction(FETCH_BOOKINGS_ERROR); // SDK method: availabilityExceptions.query\n\nexport const fetchAvailabilityExceptionsRequest = requestAction(FETCH_EXCEPTIONS_REQUEST);\nexport const fetchAvailabilityExceptionsSuccess = successAction(FETCH_EXCEPTIONS_SUCCESS);\nexport const fetchAvailabilityExceptionsError = errorAction(FETCH_EXCEPTIONS_ERROR); // SDK method: availabilityExceptions.create\n\nexport const createAvailabilityExceptionRequest = requestAction(CREATE_EXCEPTION_REQUEST);\nexport const createAvailabilityExceptionSuccess = successAction(CREATE_EXCEPTION_SUCCESS);\nexport const createAvailabilityExceptionError = errorAction(CREATE_EXCEPTION_ERROR); // SDK method: availabilityExceptions.delete\n\nexport const deleteAvailabilityExceptionRequest = requestAction(DELETE_EXCEPTION_REQUEST);\nexport const deleteAvailabilityExceptionSuccess = successAction(DELETE_EXCEPTION_SUCCESS);\nexport const deleteAvailabilityExceptionError = errorAction(DELETE_EXCEPTION_ERROR);\nexport const savePayoutDetailsRequest = requestAction(SAVE_PAYOUT_DETAILS_REQUEST);\nexport const savePayoutDetailsSuccess = successAction(SAVE_PAYOUT_DETAILS_SUCCESS);\nexport const savePayoutDetailsError = errorAction(SAVE_PAYOUT_DETAILS_ERROR); // ================ Thunk ================ //\n\nexport function requestShowListing(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    const imageVariantInfo = getImageVariantInfo();\n    const queryParams = {\n      include: ['author', 'images', 'currentStock'],\n      'fields.image': imageVariantInfo.fieldsImage,\n      ...imageVariantInfo.imageVariants\n    };\n    dispatch(showListingsRequest(actionPayload));\n    return sdk.ownListings.show({ ...actionPayload,\n      ...queryParams\n    }).then(response => {\n      // EditListingPage fetches new listing data, which also needs to be added to global data\n      dispatch(addMarketplaceEntities(response)); // In case of success, we'll clear state.EditListingPage (user will be redirected away)\n\n      dispatch(showListingsSuccess(response));\n      return response;\n    }).catch(e => dispatch(showListingsError(storableError(e))));\n  };\n} // Set stock if requested among listing update info\n\nexport function compareAndSetStock(listingId, oldTotal, newTotal) {\n  return (dispatch, getState, sdk) => {\n    dispatch(setStockRequest());\n    return sdk.stock.compareAndSet({\n      listingId,\n      oldTotal,\n      newTotal\n    }, {\n      expand: true\n    }).then(response => {\n      // NOTE: compareAndSet returns the stock resource of the listing.\n      // We update client app's internal state with these updated API entities.\n      dispatch(addMarketplaceEntities(response));\n      dispatch(setStockSuccess(response));\n    }).catch(e => {\n      log.error(e, 'update-stock-failed', {\n        listingId,\n        oldTotal,\n        newTotal\n      });\n      return dispatch(setStockError(storableError(e)));\n    });\n  };\n} // Helper function to make compareAndSetStock call if stock update is needed.\n\nconst updateStockOfListingMaybe = (listingId, stockTotals, dispatch) => {\n  const {\n    oldTotal,\n    newTotal\n  } = stockTotals || {}; // Note: newTotal and oldTotal must be given, but oldTotal can be null\n\n  const hasStockTotals = newTotal >= 0 && typeof oldTotal !== 'undefined';\n\n  if (listingId && hasStockTotals) {\n    return dispatch(compareAndSetStock(listingId, oldTotal, newTotal));\n  }\n\n  return Promise.resolve();\n}; // Create listing in draft state\n// NOTE: we want to keep it possible to include stock management field to the first wizard form.\n// this means that there needs to be a sequence of calls:\n// create, set stock, show listing (to get updated currentStock entity)\n\n\nexport function requestCreateListingDraft(data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(createListingDraftRequest(data));\n    const {\n      stockUpdate,\n      images,\n      ...rest\n    } = data; // If images should be saved, create array out of the image UUIDs for the API call\n    // Note: in FTW, image upload is not happening at the same time as listing creation.\n\n    const imageProperty = typeof images !== 'undefined' ? {\n      images: imageIds(images)\n    } : {};\n    const ownListingValues = { ...imageProperty,\n      ...rest\n    };\n    const imageVariantInfo = getImageVariantInfo();\n    const queryParams = {\n      expand: true,\n      include: ['author', 'images', 'currentStock'],\n      'fields.image': imageVariantInfo.fieldsImage,\n      ...imageVariantInfo.imageVariants\n    };\n    let createDraftResponse = null;\n    return sdk.ownListings.createDraft(ownListingValues, queryParams).then(response => {\n      createDraftResponse = response;\n      const listingId = response.data.data.id; // If stockUpdate info is passed through, update stock\n\n      return updateStockOfListingMaybe(listingId, stockUpdate, dispatch);\n    }).then(() => {\n      // Modify store to understand that we have created listing and can redirect away\n      dispatch(createListingDraftSuccess(createDraftResponse));\n      return createDraftResponse;\n    }).catch(e => {\n      log.error(e, 'create-listing-draft-failed', {\n        listingData: data\n      });\n      return dispatch(createListingDraftError(storableError(e)));\n    });\n  };\n} // Update the given tab of the wizard with the given data. This saves\n// the data to the listing, and marks the tab updated so the UI can\n// display the state.\n// NOTE: what comes to stock management, this follows the same pattern used in create listing call\n\nexport function requestUpdateListing(tab, data) {\n  return (dispatch, getState, sdk) => {\n    dispatch(updateListingRequest(data));\n    const {\n      id,\n      stockUpdate,\n      images,\n      ...rest\n    } = data; // If images should be saved, create array out of the image UUIDs for the API call\n\n    const imageProperty = typeof images !== 'undefined' ? {\n      images: imageIds(images)\n    } : {};\n    const ownListingUpdateValues = {\n      id,\n      ...imageProperty,\n      ...rest\n    };\n    const imageVariantInfo = getImageVariantInfo();\n    const queryParams = {\n      expand: true,\n      include: ['author', 'images', 'currentStock'],\n      'fields.image': imageVariantInfo.fieldsImage,\n      ...imageVariantInfo.imageVariants\n    }; // Note: if update values include stockUpdate, we'll do that first\n    // That way we get updated currentStock info among ownListings.update\n\n    return updateStockOfListingMaybe(id, stockUpdate, dispatch).then(() => sdk.ownListings.update(ownListingUpdateValues, queryParams)).then(response => {\n      dispatch(updateListingSuccess(response));\n      dispatch(addMarketplaceEntities(response));\n      dispatch(markTabUpdated(tab));\n      return response;\n    }).catch(e => {\n      log.error(e, 'update-listing-failed', {\n        listingData: data\n      });\n      return dispatch(updateListingError(storableError(e)));\n    });\n  };\n}\nexport const requestPublishListingDraft = listingId => (dispatch, getState, sdk) => {\n  dispatch(publishListingRequest(listingId));\n  return sdk.ownListings.publishDraft({\n    id: listingId\n  }, {\n    expand: true\n  }).then(response => {\n    // Add the created listing to the marketplace data\n    dispatch(addMarketplaceEntities(response));\n    dispatch(publishListingSuccess(response));\n    return response;\n  }).catch(e => {\n    dispatch(publishListingError(storableError(e)));\n  });\n}; // Images return imageId which we need to map with previously generated temporary id\n\nexport function requestImageUpload(actionPayload) {\n  return (dispatch, getState, sdk) => {\n    const id = actionPayload.id;\n    const imageVariantInfo = getImageVariantInfo();\n    const queryParams = {\n      expand: true,\n      'fields.image': imageVariantInfo.fieldsImage,\n      ...imageVariantInfo.imageVariants\n    };\n    dispatch(uploadImageRequest(actionPayload));\n    return sdk.images.upload({\n      image: actionPayload.file\n    }, queryParams).then(resp => {\n      const img = resp.data.data; // Uploaded image has an existing id that refers to file\n      // The UUID was created as a consequence of this upload call - it's saved to imageId property\n\n      return dispatch(uploadImageSuccess({\n        data: { ...img,\n          id,\n          imageId: img.id\n        }\n      }));\n    }).catch(e => dispatch(uploadImageError({\n      id,\n      error: storableError(e)\n    })));\n  };\n}\nexport const requestFetchBookings = fetchParams => (dispatch, getState, sdk) => {\n  const {\n    listingId,\n    start,\n    end,\n    state\n  } = fetchParams; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdString(start, 'Etc/UTC');\n  dispatch(fetchBookingsRequest({ ...fetchParams,\n    monthId\n  }));\n  return sdk.bookings.query({\n    listingId,\n    start,\n    end,\n    state\n  }, {\n    expand: true\n  }).then(response => {\n    const bookings = denormalisedResponseEntities(response);\n    return dispatch(fetchBookingsSuccess({\n      data: {\n        monthId,\n        bookings\n      }\n    }));\n  }).catch(e => {\n    return dispatch(fetchBookingsError({\n      monthId,\n      error: storableError(e)\n    }));\n  });\n};\nexport const requestFetchAvailabilityExceptions = fetchParams => (dispatch, getState, sdk) => {\n  const {\n    listingId,\n    start,\n    end\n  } = fetchParams; // When using time-based process, you might want to deal with local dates using monthIdString\n\n  const monthId = monthIdString(start, 'Etc/UTC');\n  dispatch(fetchAvailabilityExceptionsRequest({ ...fetchParams,\n    monthId\n  }));\n  return sdk.availabilityExceptions.query({\n    listingId,\n    start,\n    end\n  }, {\n    expand: true\n  }).then(response => {\n    const exceptions = denormalisedResponseEntities(response).map(availabilityException => ({\n      availabilityException\n    }));\n    return dispatch(fetchAvailabilityExceptionsSuccess({\n      data: {\n        monthId,\n        exceptions\n      }\n    }));\n  }).catch(e => {\n    return dispatch(fetchAvailabilityExceptionsError({\n      monthId,\n      error: storableError(e)\n    }));\n  });\n};\nexport const requestCreateAvailabilityException = params => (dispatch, getState, sdk) => {\n  const {\n    currentException,\n    ...createParams\n  } = params;\n  dispatch(createAvailabilityExceptionRequest(createParams));\n  return sdk.availabilityExceptions.create(createParams, {\n    expand: true\n  }).then(response => {\n    dispatch(createAvailabilityExceptionSuccess({\n      data: {\n        exception: {\n          availabilityException: response.data.data\n        }\n      }\n    }));\n    return response;\n  }).catch(error => {\n    const availabilityException = currentException && currentException.availabilityException;\n    return dispatch(createAvailabilityExceptionError({\n      error: storableError(error),\n      availabilityException\n    }));\n  });\n};\nexport const requestDeleteAvailabilityException = params => (dispatch, getState, sdk) => {\n  const {\n    currentException,\n    seats,\n    ...deleteParams\n  } = params;\n  dispatch(deleteAvailabilityExceptionRequest(params));\n  return sdk.availabilityExceptions.delete(deleteParams, {\n    expand: true\n  }).then(response => {\n    dispatch(deleteAvailabilityExceptionSuccess({\n      data: {\n        exception: currentException\n      }\n    }));\n    return response;\n  }).catch(error => {\n    const availabilityException = currentException && currentException.availabilityException;\n    return dispatch(deleteAvailabilityExceptionError({\n      error: storableError(error),\n      availabilityException\n    }));\n  });\n};\nexport const savePayoutDetails = (values, isUpdateCall) => (dispatch, getState, sdk) => {\n  const upsertThunk = isUpdateCall ? updateStripeAccount : createStripeAccount;\n  dispatch(savePayoutDetailsRequest());\n  return dispatch(upsertThunk(values, {\n    expand: true\n  })).then(response => {\n    dispatch(savePayoutDetailsSuccess());\n    return response;\n  }).catch(() => dispatch(savePayoutDetailsError()));\n}; // loadData is run for each tab of the wizard. When editing an\n// existing listing, the listing must be fetched first.\n\nexport const loadData = params => (dispatch, getState, sdk) => {\n  dispatch(clearUpdatedTab());\n  const {\n    id,\n    type\n  } = params;\n\n  if (type === 'new') {\n    // No need to listing data when creating a new listing\n    return Promise.all([dispatch(fetchCurrentUser())]).then(response => {\n      const currentUser = getState().user.currentUser;\n\n      if (currentUser && currentUser.stripeAccount) {\n        dispatch(fetchStripeAccount());\n      }\n\n      return response;\n    }).catch(e => {\n      throw e;\n    });\n  }\n\n  const payload = {\n    id: new UUID(id)\n  };\n  return Promise.all([dispatch(requestShowListing(payload)), dispatch(fetchCurrentUser())]).then(response => {\n    const currentUser = getState().user.currentUser;\n\n    if (currentUser && currentUser.stripeAccount) {\n      dispatch(fetchStripeAccount());\n    }\n\n    return response;\n  }).catch(e => {\n    throw e;\n  });\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingPage.duck.js"],"names":["omit","config","types","sdkTypes","createImageVariantConfig","denormalisedResponseEntities","ensureAvailabilityException","isSameDate","monthIdString","storableError","log","addMarketplaceEntities","createStripeAccount","updateStripeAccount","fetchStripeAccount","fetchCurrentUser","UUID","imageIds","images","map","img","imageId","id","updateUloadedImagesState","state","payload","uploadedImages","uploadedImagesOrder","attachedImages","data","relationships","attachedImageUUIDStrings","uuid","unattachedImages","Object","values","duplicateImageEntities","filter","unattachedImg","includes","length","getImageVariantInfo","aspectWidth","aspectHeight","variantPrefix","listing","aspectRatio","fieldsImage","imageVariants","removeException","exception","calendar","availabilityException","start","end","attributes","monthId","monthData","exceptions","e","anException","exceptionStart","exceptionEnd","addException","cleanCalendar","updateException","newAvailabilityException","updateCalendarMonth","defaultMonthData","bookings","availabilityCalendar","requestAction","actionType","params","type","successAction","result","errorAction","error","MARK_TAB_UPDATED","CLEAR_UPDATED_TAB","CREATE_LISTING_DRAFT_REQUEST","CREATE_LISTING_DRAFT_SUCCESS","CREATE_LISTING_DRAFT_ERROR","PUBLISH_LISTING_REQUEST","PUBLISH_LISTING_SUCCESS","PUBLISH_LISTING_ERROR","UPDATE_LISTING_REQUEST","UPDATE_LISTING_SUCCESS","UPDATE_LISTING_ERROR","SHOW_LISTINGS_REQUEST","SHOW_LISTINGS_SUCCESS","SHOW_LISTINGS_ERROR","FETCH_BOOKINGS_REQUEST","FETCH_BOOKINGS_SUCCESS","FETCH_BOOKINGS_ERROR","FETCH_EXCEPTIONS_REQUEST","FETCH_EXCEPTIONS_SUCCESS","FETCH_EXCEPTIONS_ERROR","CREATE_EXCEPTION_REQUEST","CREATE_EXCEPTION_SUCCESS","CREATE_EXCEPTION_ERROR","DELETE_EXCEPTION_REQUEST","DELETE_EXCEPTION_SUCCESS","DELETE_EXCEPTION_ERROR","SET_STOCK_REQUEST","SET_STOCK_SUCCESS","SET_STOCK_ERROR","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_ERROR","REMOVE_LISTING_IMAGE","SAVE_PAYOUT_DETAILS_REQUEST","SAVE_PAYOUT_DETAILS_SUCCESS","SAVE_PAYOUT_DETAILS_ERROR","initialState","createListingDraftError","publishingListing","publishListingError","updateListingError","showListingsError","uploadImageError","setStockError","setStockInProgress","createListingDraftInProgress","submittedListingId","redirectToListing","removedImageIds","listingDraft","updatedTab","updateInProgress","payoutDetailsSaveInProgress","payoutDetailsSaved","reducer","action","listingId","console","fetchBookingsError","fetchBookingsInProgress","fetchExceptionsError","fetchExceptionsInProgress","seats","draft","inProgress","failedException","currentException","concat","rest","i","markTabUpdated","tab","clearUpdatedTab","removeListingImage","createListingDraftRequest","createListingDraftSuccess","publishListingRequest","publishListingSuccess","updateListingRequest","updateListingSuccess","showListingsRequest","showListingsSuccess","uploadImageRequest","uploadImageSuccess","setStockRequest","setStockSuccess","fetchBookingsRequest","fetchBookingsSuccess","fetchAvailabilityExceptionsRequest","fetchAvailabilityExceptionsSuccess","fetchAvailabilityExceptionsError","createAvailabilityExceptionRequest","createAvailabilityExceptionSuccess","createAvailabilityExceptionError","deleteAvailabilityExceptionRequest","deleteAvailabilityExceptionSuccess","deleteAvailabilityExceptionError","savePayoutDetailsRequest","savePayoutDetailsSuccess","savePayoutDetailsError","requestShowListing","actionPayload","dispatch","getState","sdk","imageVariantInfo","queryParams","include","ownListings","show","then","response","catch","compareAndSetStock","oldTotal","newTotal","stock","compareAndSet","expand","updateStockOfListingMaybe","stockTotals","hasStockTotals","Promise","resolve","requestCreateListingDraft","stockUpdate","imageProperty","ownListingValues","createDraftResponse","createDraft","listingData","requestUpdateListing","ownListingUpdateValues","update","requestPublishListingDraft","publishDraft","requestImageUpload","upload","image","file","resp","requestFetchBookings","fetchParams","query","requestFetchAvailabilityExceptions","availabilityExceptions","requestCreateAvailabilityException","createParams","create","requestDeleteAvailabilityException","deleteParams","delete","savePayoutDetails","isUpdateCall","upsertThunk","loadData","all","currentUser","user","stripeAccount"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\r\n\r\nimport config from '../../config';\r\nimport { types as sdkTypes, createImageVariantConfig } from '../../util/sdkLoader';\r\nimport { denormalisedResponseEntities, ensureAvailabilityException } from '../../util/data';\r\nimport { isSameDate, monthIdString } from '../../util/dates';\r\nimport { storableError } from '../../util/errors';\r\nimport * as log from '../../util/log';\r\n\r\nimport { addMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport {\r\n  createStripeAccount,\r\n  updateStripeAccount,\r\n  fetchStripeAccount,\r\n} from '../../ducks/stripeConnectAccount.duck';\r\nimport { fetchCurrentUser } from '../../ducks/user.duck';\r\n\r\nconst { UUID } = sdkTypes;\r\n\r\n// Return an array of image ids\r\nconst imageIds = images => {\r\n  // For newly uploaded image the UUID can be found from \"img.imageId\"\r\n  // and for existing listing images the id is \"img.id\"\r\n  return images ? images.map(img => img.imageId || img.id) : null;\r\n};\r\n\r\n// After listing creation & update, we want to make sure that uploadedImages state is cleaned\r\nconst updateUloadedImagesState = (state, payload) => {\r\n  const { uploadedImages, uploadedImagesOrder } = state;\r\n\r\n  // Images attached to listing entity\r\n  const attachedImages = payload?.data?.relationships?.images?.data || [];\r\n  const attachedImageUUIDStrings = attachedImages.map(img => img.id.uuid);\r\n\r\n  // Uploaded images (which are propably not yet attached to listing)\r\n  const unattachedImages = Object.values(state.uploadedImages);\r\n  const duplicateImageEntities = unattachedImages.filter(unattachedImg =>\r\n    attachedImageUUIDStrings.includes(unattachedImg.imageId?.uuid)\r\n  );\r\n  return duplicateImageEntities.length > 0\r\n    ? {\r\n        uploadedImages: {},\r\n        uploadedImagesOrder: [],\r\n      }\r\n    : {\r\n        uploadedImages,\r\n        uploadedImagesOrder,\r\n      };\r\n};\r\n\r\nconst getImageVariantInfo = () => {\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } = config.listing;\r\n  const aspectRatio = aspectHeight / aspectWidth;\r\n  const fieldsImage = [`variants.${variantPrefix}`, `variants.${variantPrefix}-2x`];\r\n\r\n  return {\r\n    fieldsImage,\r\n    imageVariants: {\r\n      ...createImageVariantConfig(`${variantPrefix}`, 400, aspectRatio),\r\n      ...createImageVariantConfig(`${variantPrefix}-2x`, 800, aspectRatio),\r\n    },\r\n  };\r\n};\r\n\r\n// A helper function to filter away exception that matches start and end timestamps\r\nconst removeException = (exception, calendar) => {\r\n  const availabilityException = ensureAvailabilityException(exception.availabilityException);\r\n  const { start, end } = availabilityException.attributes;\r\n  // When using time-based process, you might want to deal with local dates using monthIdString\r\n  const monthId = monthIdString(start, 'Etc/UTC');\r\n  const monthData = calendar[monthId] || { exceptions: [] };\r\n\r\n  const exceptions = monthData.exceptions.filter(e => {\r\n    const anException = ensureAvailabilityException(e.availabilityException);\r\n    const exceptionStart = anException.attributes.start;\r\n    const exceptionEnd = anException.attributes.end;\r\n\r\n    return !(isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end));\r\n  });\r\n\r\n  return {\r\n    ...calendar,\r\n    [monthId]: { ...monthData, exceptions },\r\n  };\r\n};\r\n\r\n// A helper function to add a new exception and remove previous one if there's a matching exception\r\nconst addException = (exception, calendar) => {\r\n  const { start } = ensureAvailabilityException(exception.availabilityException).attributes;\r\n  // When using time-based process, you might want to deal with local dates using monthIdString\r\n  const monthId = monthIdString(start, 'Etc/UTC');\r\n\r\n  // TODO: API doesn't support \"availability_exceptions/update\" yet\r\n  // So, when user wants to create an exception we need to ensure\r\n  // that possible existing exception is removed first.\r\n  const cleanCalendar = removeException(exception, calendar);\r\n  const monthData = cleanCalendar[monthId] || { exceptions: [] };\r\n\r\n  return {\r\n    ...cleanCalendar,\r\n    [monthId]: { ...monthData, exceptions: [...monthData.exceptions, exception] },\r\n  };\r\n};\r\n\r\n// A helper function to update exception that matches start and end timestamps\r\nconst updateException = (exception, calendar) => {\r\n  const newAvailabilityException = ensureAvailabilityException(exception.availabilityException);\r\n  const { start, end } = newAvailabilityException.attributes;\r\n  // When using time-based process, you might want to deal with local dates using monthIdString\r\n  const monthId = monthIdString(start, 'Etc/UTC');\r\n  const monthData = calendar[monthId] || { exceptions: [] };\r\n\r\n  const exceptions = monthData.exceptions.map(e => {\r\n    const availabilityException = ensureAvailabilityException(e.availabilityException);\r\n    const exceptionStart = availabilityException.attributes.start;\r\n    const exceptionEnd = availabilityException.attributes.end;\r\n\r\n    return isSameDate(exceptionStart, start) && isSameDate(exceptionEnd, end) ? exception : e;\r\n  });\r\n\r\n  return {\r\n    ...calendar,\r\n    [monthId]: { ...monthData, exceptions },\r\n  };\r\n};\r\n\r\n// Update calendar data of given month\r\nconst updateCalendarMonth = (state, monthId, data) => {\r\n  // Ensure that every month has array for bookings and exceptions\r\n  const defaultMonthData = { bookings: [], exceptions: [] };\r\n  return {\r\n    ...state,\r\n    availabilityCalendar: {\r\n      ...state.availabilityCalendar,\r\n      [monthId]: {\r\n        ...defaultMonthData,\r\n        ...state.availabilityCalendar[monthId],\r\n        ...data,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst requestAction = actionType => params => ({ type: actionType, payload: { params } });\r\n\r\nconst successAction = actionType => result => ({ type: actionType, payload: result.data });\r\n\r\nconst errorAction = actionType => error => ({ type: actionType, payload: error, error: true });\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const MARK_TAB_UPDATED = 'app/EditListingPage/MARK_TAB_UPDATED';\r\nexport const CLEAR_UPDATED_TAB = 'app/EditListingPage/CLEAR_UPDATED_TAB';\r\n\r\nexport const CREATE_LISTING_DRAFT_REQUEST = 'app/EditListingPage/CREATE_LISTING_DRAFT_REQUEST';\r\nexport const CREATE_LISTING_DRAFT_SUCCESS = 'app/EditListingPage/CREATE_LISTING_DRAFT_SUCCESS';\r\nexport const CREATE_LISTING_DRAFT_ERROR = 'app/EditListingPage/CREATE_LISTING_DRAFT_ERROR';\r\n\r\nexport const PUBLISH_LISTING_REQUEST = 'app/EditListingPage/PUBLISH_LISTING_REQUEST';\r\nexport const PUBLISH_LISTING_SUCCESS = 'app/EditListingPage/PUBLISH_LISTING_SUCCESS';\r\nexport const PUBLISH_LISTING_ERROR = 'app/EditListingPage/PUBLISH_LISTING_ERROR';\r\n\r\nexport const UPDATE_LISTING_REQUEST = 'app/EditListingPage/UPDATE_LISTING_REQUEST';\r\nexport const UPDATE_LISTING_SUCCESS = 'app/EditListingPage/UPDATE_LISTING_SUCCESS';\r\nexport const UPDATE_LISTING_ERROR = 'app/EditListingPage/UPDATE_LISTING_ERROR';\r\n\r\nexport const SHOW_LISTINGS_REQUEST = 'app/EditListingPage/SHOW_LISTINGS_REQUEST';\r\nexport const SHOW_LISTINGS_SUCCESS = 'app/EditListingPage/SHOW_LISTINGS_SUCCESS';\r\nexport const SHOW_LISTINGS_ERROR = 'app/EditListingPage/SHOW_LISTINGS_ERROR';\r\n\r\nexport const FETCH_BOOKINGS_REQUEST = 'app/EditListingPage/FETCH_BOOKINGS_REQUEST';\r\nexport const FETCH_BOOKINGS_SUCCESS = 'app/EditListingPage/FETCH_BOOKINGS_SUCCESS';\r\nexport const FETCH_BOOKINGS_ERROR = 'app/EditListingPage/FETCH_BOOKINGS_ERROR';\r\n\r\nexport const FETCH_EXCEPTIONS_REQUEST = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_REQUEST';\r\nexport const FETCH_EXCEPTIONS_SUCCESS = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_SUCCESS';\r\nexport const FETCH_EXCEPTIONS_ERROR = 'app/EditListingPage/FETCH_AVAILABILITY_EXCEPTIONS_ERROR';\r\n\r\nexport const CREATE_EXCEPTION_REQUEST = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_REQUEST';\r\nexport const CREATE_EXCEPTION_SUCCESS = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_SUCCESS';\r\nexport const CREATE_EXCEPTION_ERROR = 'app/EditListingPage/CREATE_AVAILABILITY_EXCEPTION_ERROR';\r\n\r\nexport const DELETE_EXCEPTION_REQUEST = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_REQUEST';\r\nexport const DELETE_EXCEPTION_SUCCESS = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_SUCCESS';\r\nexport const DELETE_EXCEPTION_ERROR = 'app/EditListingPage/DELETE_AVAILABILITY_EXCEPTION_ERROR';\r\n\r\nexport const SET_STOCK_REQUEST = 'app/EditListingPage/SET_STOCK_REQUEST';\r\nexport const SET_STOCK_SUCCESS = 'app/EditListingPage/SET_STOCK_SUCCESS';\r\nexport const SET_STOCK_ERROR = 'app/EditListingPage/SET_STOCK_ERROR';\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = 'app/EditListingPage/UPLOAD_IMAGE_REQUEST';\r\nexport const UPLOAD_IMAGE_SUCCESS = 'app/EditListingPage/UPLOAD_IMAGE_SUCCESS';\r\nexport const UPLOAD_IMAGE_ERROR = 'app/EditListingPage/UPLOAD_IMAGE_ERROR';\r\n\r\nexport const REMOVE_LISTING_IMAGE = 'app/EditListingPage/REMOVE_LISTING_IMAGE';\r\n\r\nexport const SAVE_PAYOUT_DETAILS_REQUEST = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_REQUEST';\r\nexport const SAVE_PAYOUT_DETAILS_SUCCESS = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_SUCCESS';\r\nexport const SAVE_PAYOUT_DETAILS_ERROR = 'app/EditListingPage/SAVE_PAYOUT_DETAILS_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst initialState = {\r\n  // Error instance placeholders for each endpoint\r\n  createListingDraftError: null,\r\n  publishingListing: null,\r\n  publishListingError: null,\r\n  updateListingError: null,\r\n  showListingsError: null,\r\n  uploadImageError: null,\r\n  setStockError: null,\r\n  setStockInProgress: false,\r\n  createListingDraftInProgress: false,\r\n  submittedListingId: null,\r\n  redirectToListing: false,\r\n  availabilityCalendar: {\r\n    // '2018-12': {\r\n    //   bookings: [],\r\n    //   exceptions: [],\r\n    //   fetchExceptionsError: null,\r\n    //   fetchExceptionsInProgress: false,\r\n    //   fetchBookingsError: null,\r\n    //   fetchBookingsInProgress: false,\r\n    // },\r\n  },\r\n  uploadedImages: {},\r\n  uploadedImagesOrder: [],\r\n  removedImageIds: [],\r\n  listingDraft: null,\r\n  updatedTab: null,\r\n  updateInProgress: false,\r\n  payoutDetailsSaveInProgress: false,\r\n  payoutDetailsSaved: false,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case MARK_TAB_UPDATED:\r\n      return { ...state, updatedTab: payload };\r\n    case CLEAR_UPDATED_TAB:\r\n      return { ...state, updatedTab: null, updateListingError: null };\r\n\r\n    case CREATE_LISTING_DRAFT_REQUEST:\r\n      return {\r\n        ...state,\r\n        createListingDraftInProgress: true,\r\n        createListingDraftError: null,\r\n        submittedListingId: null,\r\n        listingDraft: null,\r\n      };\r\n\r\n    case CREATE_LISTING_DRAFT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ...updateUloadedImagesState(state, payload),\r\n        createListingDraftInProgress: false,\r\n        submittedListingId: payload.data.id,\r\n        listingDraft: payload.data,\r\n      };\r\n    case CREATE_LISTING_DRAFT_ERROR:\r\n      return {\r\n        ...state,\r\n        createListingDraftInProgress: false,\r\n        createListingDraftError: payload,\r\n      };\r\n\r\n    case PUBLISH_LISTING_REQUEST:\r\n      return {\r\n        ...state,\r\n        publishingListing: payload.listingId,\r\n        publishListingError: null,\r\n      };\r\n    case PUBLISH_LISTING_SUCCESS:\r\n      return {\r\n        ...state,\r\n        redirectToListing: true,\r\n        publishingListing: null,\r\n        createListingDraftError: null,\r\n        updateListingError: null,\r\n        showListingsError: null,\r\n        uploadImageError: null,\r\n        createListingDraftInProgress: false,\r\n        updateInProgress: false,\r\n      };\r\n    case PUBLISH_LISTING_ERROR: {\r\n      // eslint-disable-next-line no-console\r\n      console.error(payload);\r\n      return {\r\n        ...state,\r\n        publishingListing: null,\r\n        publishListingError: {\r\n          listingId: state.publishingListing,\r\n          error: payload,\r\n        },\r\n      };\r\n    }\r\n\r\n    case UPDATE_LISTING_REQUEST:\r\n      return { ...state, updateInProgress: true, updateListingError: null };\r\n    case UPDATE_LISTING_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ...updateUloadedImagesState(state, payload),\r\n        updateInProgress: false,\r\n        availabilityCalendar: { ...state.availabilityCalendar },\r\n      };\r\n    case UPDATE_LISTING_ERROR:\r\n      return { ...state, updateInProgress: false, updateListingError: payload };\r\n\r\n    case SHOW_LISTINGS_REQUEST:\r\n      return { ...state, showListingsError: null };\r\n    case SHOW_LISTINGS_SUCCESS:\r\n      return { ...initialState, availabilityCalendar: { ...state.availabilityCalendar } };\r\n\r\n    case SHOW_LISTINGS_ERROR:\r\n      // eslint-disable-next-line no-console\r\n      console.error(payload);\r\n      return { ...state, showListingsError: payload, redirectToListing: false };\r\n\r\n    case FETCH_BOOKINGS_REQUEST:\r\n      return updateCalendarMonth(state, payload.params.monthId, {\r\n        fetchBookingsError: null,\r\n        fetchBookingsInProgress: true,\r\n      });\r\n    case FETCH_BOOKINGS_SUCCESS:\r\n      return updateCalendarMonth(state, payload.monthId, {\r\n        bookings: payload.bookings,\r\n        fetchBookingsInProgress: false,\r\n      });\r\n    case FETCH_BOOKINGS_ERROR:\r\n      return updateCalendarMonth(state, payload.monthId, {\r\n        fetchBookingsError: payload.error,\r\n        fetchBookingsInProgress: false,\r\n      });\r\n\r\n    case FETCH_EXCEPTIONS_REQUEST:\r\n      return updateCalendarMonth(state, payload.params.monthId, {\r\n        fetchExceptionsError: null,\r\n        fetchExceptionsInProgress: true,\r\n      });\r\n    case FETCH_EXCEPTIONS_SUCCESS:\r\n      return updateCalendarMonth(state, payload.monthId, {\r\n        exceptions: payload.exceptions,\r\n        fetchExceptionsInProgress: false,\r\n      });\r\n    case FETCH_EXCEPTIONS_ERROR:\r\n      return updateCalendarMonth(state, payload.monthId, {\r\n        fetchExceptionsError: payload.error,\r\n        fetchExceptionsInProgress: false,\r\n      });\r\n\r\n    case CREATE_EXCEPTION_REQUEST: {\r\n      const { start, end, seats } = payload.params;\r\n      const draft = ensureAvailabilityException({ attributes: { start, end, seats } });\r\n      const exception = { availabilityException: draft, inProgress: true };\r\n      const availabilityCalendar = addException(exception, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n    case CREATE_EXCEPTION_SUCCESS: {\r\n      const availabilityCalendar = updateException(payload.exception, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n    case CREATE_EXCEPTION_ERROR: {\r\n      const { availabilityException, error } = payload;\r\n      const failedException = { availabilityException, error };\r\n      const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n\r\n    case DELETE_EXCEPTION_REQUEST: {\r\n      const { id, seats, currentException } = payload.params;\r\n\r\n      // We first create temporary exception with given 'seats' count (the default after deletion).\r\n      // This makes it possible to show the UI element immediately with default color that matches\r\n      // with the availability plan.\r\n      const exception = {\r\n        id,\r\n        inProgress: true,\r\n        availabilityException: {\r\n          ...currentException.availabilityException,\r\n          attributes: { ...currentException.availabilityException.attributes, seats },\r\n        },\r\n      };\r\n\r\n      const availabilityCalendar = updateException(exception, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n    case DELETE_EXCEPTION_SUCCESS: {\r\n      const availabilityCalendar = removeException(payload.exception, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n    case DELETE_EXCEPTION_ERROR: {\r\n      const { availabilityException, error } = payload;\r\n      const failedException = { availabilityException, error };\r\n      const availabilityCalendar = updateException(failedException, state.availabilityCalendar);\r\n      return { ...state, availabilityCalendar };\r\n    }\r\n\r\n    case UPLOAD_IMAGE_REQUEST: {\r\n      // payload.params: { id: 'tempId', file }\r\n      const uploadedImages = {\r\n        ...state.uploadedImages,\r\n        [payload.params.id]: { ...payload.params },\r\n      };\r\n      return {\r\n        ...state,\r\n        uploadedImages,\r\n        uploadedImagesOrder: state.uploadedImagesOrder.concat([payload.params.id]),\r\n        uploadImageError: null,\r\n      };\r\n    }\r\n    case UPLOAD_IMAGE_SUCCESS: {\r\n      // payload.params: { id: 'tempId', imageId: 'some-real-id', attributes, type }\r\n      const { id, ...rest } = payload;\r\n      const uploadedImages = { ...state.uploadedImages, [id]: { id, ...rest } };\r\n      return { ...state, uploadedImages };\r\n    }\r\n    case UPLOAD_IMAGE_ERROR: {\r\n      // eslint-disable-next-line no-console\r\n      const { id, error } = payload;\r\n      const uploadedImagesOrder = state.uploadedImagesOrder.filter(i => i !== id);\r\n      const uploadedImages = omit(state.uploadedImages, id);\r\n      return { ...state, uploadedImagesOrder, uploadedImages, uploadImageError: error };\r\n    }\r\n\r\n    case REMOVE_LISTING_IMAGE: {\r\n      const id = payload.imageId;\r\n\r\n      // Only mark the image removed if it hasn't been added to the\r\n      // listing already\r\n      const removedImageIds = state.uploadedImages[id]\r\n        ? state.removedImageIds\r\n        : state.removedImageIds.concat(id);\r\n\r\n      // Always remove from the draft since it might be a new image to\r\n      // an existing listing.\r\n      const uploadedImages = omit(state.uploadedImages, id);\r\n      const uploadedImagesOrder = state.uploadedImagesOrder.filter(i => i !== id);\r\n\r\n      return { ...state, uploadedImages, uploadedImagesOrder, removedImageIds };\r\n    }\r\n\r\n    case SET_STOCK_REQUEST:\r\n      return { ...state, setStockInProgress: true, setStockError: null };\r\n    case SET_STOCK_SUCCESS:\r\n      return { ...state, setStockInProgress: false };\r\n    case SET_STOCK_ERROR:\r\n      return { ...state, setStockInProgress: false, setStockError: payload };\r\n\r\n    case SAVE_PAYOUT_DETAILS_REQUEST:\r\n      return { ...state, payoutDetailsSaveInProgress: true };\r\n    case SAVE_PAYOUT_DETAILS_ERROR:\r\n      return { ...state, payoutDetailsSaveInProgress: false };\r\n    case SAVE_PAYOUT_DETAILS_SUCCESS:\r\n      return { ...state, payoutDetailsSaveInProgress: false, payoutDetailsSaved: true };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const markTabUpdated = tab => ({\r\n  type: MARK_TAB_UPDATED,\r\n  payload: tab,\r\n});\r\n\r\nexport const clearUpdatedTab = () => ({\r\n  type: CLEAR_UPDATED_TAB,\r\n});\r\n\r\nexport const removeListingImage = imageId => ({\r\n  type: REMOVE_LISTING_IMAGE,\r\n  payload: { imageId },\r\n});\r\n\r\n// All the action creators that don't have the {Success, Error} suffix\r\n// take the params object that the corresponding SDK endpoint method\r\n// expects.\r\n\r\n// SDK method: ownListings.create\r\nexport const createListingDraftRequest = requestAction(CREATE_LISTING_DRAFT_REQUEST);\r\nexport const createListingDraftSuccess = successAction(CREATE_LISTING_DRAFT_SUCCESS);\r\nexport const createListingDraftError = errorAction(CREATE_LISTING_DRAFT_ERROR);\r\n\r\n// SDK method: ownListings.publish\r\nexport const publishListingRequest = requestAction(PUBLISH_LISTING_REQUEST);\r\nexport const publishListingSuccess = successAction(PUBLISH_LISTING_SUCCESS);\r\nexport const publishListingError = errorAction(PUBLISH_LISTING_ERROR);\r\n\r\n// SDK method: ownListings.update\r\nexport const updateListingRequest = requestAction(UPDATE_LISTING_REQUEST);\r\nexport const updateListingSuccess = successAction(UPDATE_LISTING_SUCCESS);\r\nexport const updateListingError = errorAction(UPDATE_LISTING_ERROR);\r\n\r\n// SDK method: ownListings.show\r\nexport const showListingsRequest = requestAction(SHOW_LISTINGS_REQUEST);\r\nexport const showListingsSuccess = successAction(SHOW_LISTINGS_SUCCESS);\r\nexport const showListingsError = errorAction(SHOW_LISTINGS_ERROR);\r\n\r\n// SDK method: images.upload\r\nexport const uploadImageRequest = requestAction(UPLOAD_IMAGE_REQUEST);\r\nexport const uploadImageSuccess = successAction(UPLOAD_IMAGE_SUCCESS);\r\nexport const uploadImageError = errorAction(UPLOAD_IMAGE_ERROR);\r\n\r\n// SDK method: stock.compareAndSet\r\nexport const setStockRequest = requestAction(SET_STOCK_REQUEST);\r\nexport const setStockSuccess = successAction(SET_STOCK_SUCCESS);\r\nexport const setStockError = errorAction(SET_STOCK_ERROR);\r\n\r\n// SDK method: bookings.query\r\nexport const fetchBookingsRequest = requestAction(FETCH_BOOKINGS_REQUEST);\r\nexport const fetchBookingsSuccess = successAction(FETCH_BOOKINGS_SUCCESS);\r\nexport const fetchBookingsError = errorAction(FETCH_BOOKINGS_ERROR);\r\n\r\n// SDK method: availabilityExceptions.query\r\nexport const fetchAvailabilityExceptionsRequest = requestAction(FETCH_EXCEPTIONS_REQUEST);\r\nexport const fetchAvailabilityExceptionsSuccess = successAction(FETCH_EXCEPTIONS_SUCCESS);\r\nexport const fetchAvailabilityExceptionsError = errorAction(FETCH_EXCEPTIONS_ERROR);\r\n\r\n// SDK method: availabilityExceptions.create\r\nexport const createAvailabilityExceptionRequest = requestAction(CREATE_EXCEPTION_REQUEST);\r\nexport const createAvailabilityExceptionSuccess = successAction(CREATE_EXCEPTION_SUCCESS);\r\nexport const createAvailabilityExceptionError = errorAction(CREATE_EXCEPTION_ERROR);\r\n\r\n// SDK method: availabilityExceptions.delete\r\nexport const deleteAvailabilityExceptionRequest = requestAction(DELETE_EXCEPTION_REQUEST);\r\nexport const deleteAvailabilityExceptionSuccess = successAction(DELETE_EXCEPTION_SUCCESS);\r\nexport const deleteAvailabilityExceptionError = errorAction(DELETE_EXCEPTION_ERROR);\r\n\r\nexport const savePayoutDetailsRequest = requestAction(SAVE_PAYOUT_DETAILS_REQUEST);\r\nexport const savePayoutDetailsSuccess = successAction(SAVE_PAYOUT_DETAILS_SUCCESS);\r\nexport const savePayoutDetailsError = errorAction(SAVE_PAYOUT_DETAILS_ERROR);\r\n\r\n// ================ Thunk ================ //\r\n\r\nexport function requestShowListing(actionPayload) {\r\n  return (dispatch, getState, sdk) => {\r\n    const imageVariantInfo = getImageVariantInfo();\r\n    const queryParams = {\r\n      include: ['author', 'images', 'currentStock'],\r\n      'fields.image': imageVariantInfo.fieldsImage,\r\n      ...imageVariantInfo.imageVariants,\r\n    };\r\n\r\n    dispatch(showListingsRequest(actionPayload));\r\n    return sdk.ownListings\r\n      .show({ ...actionPayload, ...queryParams })\r\n      .then(response => {\r\n        // EditListingPage fetches new listing data, which also needs to be added to global data\r\n        dispatch(addMarketplaceEntities(response));\r\n        // In case of success, we'll clear state.EditListingPage (user will be redirected away)\r\n        dispatch(showListingsSuccess(response));\r\n        return response;\r\n      })\r\n      .catch(e => dispatch(showListingsError(storableError(e))));\r\n  };\r\n}\r\n\r\n// Set stock if requested among listing update info\r\nexport function compareAndSetStock(listingId, oldTotal, newTotal) {\r\n  return (dispatch, getState, sdk) => {\r\n    dispatch(setStockRequest());\r\n\r\n    return sdk.stock\r\n      .compareAndSet({ listingId, oldTotal, newTotal }, { expand: true })\r\n      .then(response => {\r\n        // NOTE: compareAndSet returns the stock resource of the listing.\r\n        // We update client app's internal state with these updated API entities.\r\n        dispatch(addMarketplaceEntities(response));\r\n        dispatch(setStockSuccess(response));\r\n      })\r\n      .catch(e => {\r\n        log.error(e, 'update-stock-failed', { listingId, oldTotal, newTotal });\r\n        return dispatch(setStockError(storableError(e)));\r\n      });\r\n  };\r\n}\r\n\r\n// Helper function to make compareAndSetStock call if stock update is needed.\r\nconst updateStockOfListingMaybe = (listingId, stockTotals, dispatch) => {\r\n  const { oldTotal, newTotal } = stockTotals || {};\r\n  // Note: newTotal and oldTotal must be given, but oldTotal can be null\r\n  const hasStockTotals = newTotal >= 0 && typeof oldTotal !== 'undefined';\r\n\r\n  if (listingId && hasStockTotals) {\r\n    return dispatch(compareAndSetStock(listingId, oldTotal, newTotal));\r\n  }\r\n  return Promise.resolve();\r\n};\r\n\r\n// Create listing in draft state\r\n// NOTE: we want to keep it possible to include stock management field to the first wizard form.\r\n// this means that there needs to be a sequence of calls:\r\n// create, set stock, show listing (to get updated currentStock entity)\r\nexport function requestCreateListingDraft(data) {\r\n  return (dispatch, getState, sdk) => {\r\n    dispatch(createListingDraftRequest(data));\r\n    const { stockUpdate, images, ...rest } = data;\r\n\r\n    // If images should be saved, create array out of the image UUIDs for the API call\r\n    // Note: in FTW, image upload is not happening at the same time as listing creation.\r\n    const imageProperty = typeof images !== 'undefined' ? { images: imageIds(images) } : {};\r\n    const ownListingValues = { ...imageProperty, ...rest };\r\n\r\n    const imageVariantInfo = getImageVariantInfo();\r\n    const queryParams = {\r\n      expand: true,\r\n      include: ['author', 'images', 'currentStock'],\r\n      'fields.image': imageVariantInfo.fieldsImage,\r\n      ...imageVariantInfo.imageVariants,\r\n    };\r\n\r\n    let createDraftResponse = null;\r\n    return sdk.ownListings\r\n      .createDraft(ownListingValues, queryParams)\r\n      .then(response => {\r\n        createDraftResponse = response;\r\n        const listingId = response.data.data.id;\r\n        // If stockUpdate info is passed through, update stock\r\n        return updateStockOfListingMaybe(listingId, stockUpdate, dispatch);\r\n      })\r\n      .then(() => {\r\n        // Modify store to understand that we have created listing and can redirect away\r\n        dispatch(createListingDraftSuccess(createDraftResponse));\r\n        return createDraftResponse;\r\n      })\r\n      .catch(e => {\r\n        log.error(e, 'create-listing-draft-failed', { listingData: data });\r\n        return dispatch(createListingDraftError(storableError(e)));\r\n      });\r\n  };\r\n}\r\n\r\n// Update the given tab of the wizard with the given data. This saves\r\n// the data to the listing, and marks the tab updated so the UI can\r\n// display the state.\r\n// NOTE: what comes to stock management, this follows the same pattern used in create listing call\r\nexport function requestUpdateListing(tab, data) {\r\n  return (dispatch, getState, sdk) => {\r\n    dispatch(updateListingRequest(data));\r\n    const { id, stockUpdate, images, ...rest } = data;\r\n\r\n    // If images should be saved, create array out of the image UUIDs for the API call\r\n    const imageProperty = typeof images !== 'undefined' ? { images: imageIds(images) } : {};\r\n    const ownListingUpdateValues = { id, ...imageProperty, ...rest };\r\n    const imageVariantInfo = getImageVariantInfo();\r\n    const queryParams = {\r\n      expand: true,\r\n      include: ['author', 'images', 'currentStock'],\r\n      'fields.image': imageVariantInfo.fieldsImage,\r\n      ...imageVariantInfo.imageVariants,\r\n    };\r\n\r\n    // Note: if update values include stockUpdate, we'll do that first\r\n    // That way we get updated currentStock info among ownListings.update\r\n    return updateStockOfListingMaybe(id, stockUpdate, dispatch)\r\n      .then(() => sdk.ownListings.update(ownListingUpdateValues, queryParams))\r\n      .then(response => {\r\n        dispatch(updateListingSuccess(response));\r\n        dispatch(addMarketplaceEntities(response));\r\n        dispatch(markTabUpdated(tab));\r\n        return response;\r\n      })\r\n      .catch(e => {\r\n        log.error(e, 'update-listing-failed', { listingData: data });\r\n        return dispatch(updateListingError(storableError(e)));\r\n      });\r\n  };\r\n}\r\n\r\nexport const requestPublishListingDraft = listingId => (dispatch, getState, sdk) => {\r\n  dispatch(publishListingRequest(listingId));\r\n\r\n  return sdk.ownListings\r\n    .publishDraft({ id: listingId }, { expand: true })\r\n    .then(response => {\r\n      // Add the created listing to the marketplace data\r\n      dispatch(addMarketplaceEntities(response));\r\n      dispatch(publishListingSuccess(response));\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      dispatch(publishListingError(storableError(e)));\r\n    });\r\n};\r\n\r\n// Images return imageId which we need to map with previously generated temporary id\r\nexport function requestImageUpload(actionPayload) {\r\n  return (dispatch, getState, sdk) => {\r\n    const id = actionPayload.id;\r\n    const imageVariantInfo = getImageVariantInfo();\r\n    const queryParams = {\r\n      expand: true,\r\n      'fields.image': imageVariantInfo.fieldsImage,\r\n      ...imageVariantInfo.imageVariants,\r\n    };\r\n\r\n    dispatch(uploadImageRequest(actionPayload));\r\n    return sdk.images\r\n      .upload({ image: actionPayload.file }, queryParams)\r\n      .then(resp => {\r\n        const img = resp.data.data;\r\n        // Uploaded image has an existing id that refers to file\r\n        // The UUID was created as a consequence of this upload call - it's saved to imageId property\r\n        return dispatch(uploadImageSuccess({ data: { ...img, id, imageId: img.id } }));\r\n      })\r\n      .catch(e => dispatch(uploadImageError({ id, error: storableError(e) })));\r\n  };\r\n}\r\n\r\nexport const requestFetchBookings = fetchParams => (dispatch, getState, sdk) => {\r\n  const { listingId, start, end, state } = fetchParams;\r\n  // When using time-based process, you might want to deal with local dates using monthIdString\r\n  const monthId = monthIdString(start, 'Etc/UTC');\r\n\r\n  dispatch(fetchBookingsRequest({ ...fetchParams, monthId }));\r\n\r\n  return sdk.bookings\r\n    .query({ listingId, start, end, state }, { expand: true })\r\n    .then(response => {\r\n      const bookings = denormalisedResponseEntities(response);\r\n      return dispatch(fetchBookingsSuccess({ data: { monthId, bookings } }));\r\n    })\r\n    .catch(e => {\r\n      return dispatch(fetchBookingsError({ monthId, error: storableError(e) }));\r\n    });\r\n};\r\n\r\nexport const requestFetchAvailabilityExceptions = fetchParams => (dispatch, getState, sdk) => {\r\n  const { listingId, start, end } = fetchParams;\r\n  // When using time-based process, you might want to deal with local dates using monthIdString\r\n  const monthId = monthIdString(start, 'Etc/UTC');\r\n\r\n  dispatch(fetchAvailabilityExceptionsRequest({ ...fetchParams, monthId }));\r\n\r\n  return sdk.availabilityExceptions\r\n    .query({ listingId, start, end }, { expand: true })\r\n    .then(response => {\r\n      const exceptions = denormalisedResponseEntities(response).map(availabilityException => ({\r\n        availabilityException,\r\n      }));\r\n      return dispatch(fetchAvailabilityExceptionsSuccess({ data: { monthId, exceptions } }));\r\n    })\r\n    .catch(e => {\r\n      return dispatch(fetchAvailabilityExceptionsError({ monthId, error: storableError(e) }));\r\n    });\r\n};\r\n\r\nexport const requestCreateAvailabilityException = params => (dispatch, getState, sdk) => {\r\n  const { currentException, ...createParams } = params;\r\n\r\n  dispatch(createAvailabilityExceptionRequest(createParams));\r\n\r\n  return sdk.availabilityExceptions\r\n    .create(createParams, { expand: true })\r\n    .then(response => {\r\n      dispatch(\r\n        createAvailabilityExceptionSuccess({\r\n          data: {\r\n            exception: {\r\n              availabilityException: response.data.data,\r\n            },\r\n          },\r\n        })\r\n      );\r\n      return response;\r\n    })\r\n    .catch(error => {\r\n      const availabilityException = currentException && currentException.availabilityException;\r\n      return dispatch(\r\n        createAvailabilityExceptionError({\r\n          error: storableError(error),\r\n          availabilityException,\r\n        })\r\n      );\r\n    });\r\n};\r\n\r\nexport const requestDeleteAvailabilityException = params => (dispatch, getState, sdk) => {\r\n  const { currentException, seats, ...deleteParams } = params;\r\n\r\n  dispatch(deleteAvailabilityExceptionRequest(params));\r\n\r\n  return sdk.availabilityExceptions\r\n    .delete(deleteParams, { expand: true })\r\n    .then(response => {\r\n      dispatch(\r\n        deleteAvailabilityExceptionSuccess({\r\n          data: {\r\n            exception: currentException,\r\n          },\r\n        })\r\n      );\r\n      return response;\r\n    })\r\n    .catch(error => {\r\n      const availabilityException = currentException && currentException.availabilityException;\r\n      return dispatch(\r\n        deleteAvailabilityExceptionError({\r\n          error: storableError(error),\r\n          availabilityException,\r\n        })\r\n      );\r\n    });\r\n};\r\n\r\nexport const savePayoutDetails = (values, isUpdateCall) => (dispatch, getState, sdk) => {\r\n  const upsertThunk = isUpdateCall ? updateStripeAccount : createStripeAccount;\r\n  dispatch(savePayoutDetailsRequest());\r\n\r\n  return dispatch(upsertThunk(values, { expand: true }))\r\n    .then(response => {\r\n      dispatch(savePayoutDetailsSuccess());\r\n      return response;\r\n    })\r\n    .catch(() => dispatch(savePayoutDetailsError()));\r\n};\r\n\r\n// loadData is run for each tab of the wizard. When editing an\r\n// existing listing, the listing must be fetched first.\r\nexport const loadData = params => (dispatch, getState, sdk) => {\r\n  dispatch(clearUpdatedTab());\r\n  const { id, type } = params;\r\n\r\n  if (type === 'new') {\r\n    // No need to listing data when creating a new listing\r\n    return Promise.all([dispatch(fetchCurrentUser())])\r\n      .then(response => {\r\n        const currentUser = getState().user.currentUser;\r\n        if (currentUser && currentUser.stripeAccount) {\r\n          dispatch(fetchStripeAccount());\r\n        }\r\n        return response;\r\n      })\r\n      .catch(e => {\r\n        throw e;\r\n      });\r\n  }\r\n\r\n  const payload = { id: new UUID(id) };\r\n  return Promise.all([dispatch(requestShowListing(payload)), dispatch(fetchCurrentUser())])\r\n    .then(response => {\r\n      const currentUser = getState().user.currentUser;\r\n      if (currentUser && currentUser.stripeAccount) {\r\n        dispatch(fetchStripeAccount());\r\n      }\r\n      return response;\r\n    })\r\n    .catch(e => {\r\n      throw e;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}