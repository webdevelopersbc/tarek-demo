{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingWizard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect } from 'react';\nimport { array, bool, func, number, object, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport config from '../../../config';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { createResourceLocatorString } from '../../../util/routes';\nimport { withViewport } from '../../../util/contextHelpers';\nimport { propTypes } from '../../../util/types';\nimport { LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPES } from '../../../util/urlHelpers';\nimport { ensureCurrentUser, ensureListing } from '../../../util/data'; // Import shared components\n\nimport { Modal, NamedRedirect, Tabs, StripeConnectAccountStatusBox, StripeConnectAccountForm } from '../../../components'; // Import modules from this directory\n\nimport EditListingWizardTab, { DETAILS, DELIVERY, PRICING, PHOTOS } from './EditListingWizardTab';\nimport css from './EditListingWizard.module.css'; // You can reorder these panels.\n// Note 1: You need to change save button translations for new listing flow\n// Note 2: Ensure that draft listing is created after the first panel\n// and listing publishing happens after last panel.\n\nexport const TABS = [DETAILS, PRICING, DELIVERY, PHOTOS]; // Tabs are horizontal in small screens\n\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\n\nconst tabLabel = (intl, tab) => {\n  let key = null;\n\n  if (tab === DETAILS) {\n    key = 'EditListingWizard.tabLabelDetails';\n  } else if (tab === DELIVERY) {\n    key = 'EditListingWizard.tabLabelDelivery';\n  } else if (tab === PRICING) {\n    key = 'EditListingWizard.tabLabelPricing';\n  } else if (tab === PHOTOS) {\n    key = 'EditListingWizard.tabLabelPhotos';\n  }\n\n  return intl.formatMessage({\n    id: key\n  });\n};\n/**\r\n * Check if a wizard tab is completed.\r\n *\r\n * @param tab wizard's tab\r\n * @param listing is contains some specific data if tab is completed\r\n *\r\n * @return true if tab / step is completed.\r\n */\n\n\nconst tabCompleted = (tab, listing) => {\n  const {\n    availabilityPlan,\n    description,\n    price,\n    title,\n    publicData\n  } = listing.attributes;\n  const images = listing.images;\n  const deliveryOptionPicked = publicData && (publicData.shippingEnabled || publicData.pickupEnabled);\n\n  switch (tab) {\n    case DETAILS:\n      return !!(description && title && publicData.size && publicData.brand);\n\n    case DELIVERY:\n      return !!deliveryOptionPicked;\n\n    case PRICING:\n      return !!price;\n\n    case PHOTOS:\n      return images && images.length > 0;\n\n    default:\n      return false;\n  }\n};\n/**\r\n * Check which wizard tabs are active and which are not yet available. Tab is active if previous\r\n * tab is completed. In edit mode all tabs are active.\r\n *\r\n * @param isNew flag if a new listing is being created or an old one being edited\r\n * @param listing data to be checked\r\n *\r\n * @return object containing activity / editability of different tabs of this wizard\r\n */\n\n\nconst tabsActive = (isNew, listing) => {\n  return TABS.reduce((acc, tab) => {\n    const previousTabIndex = TABS.findIndex(t => t === tab) - 1;\n    const isActive = previousTabIndex >= 0 ? !isNew || tabCompleted(TABS[previousTabIndex], listing) : true;\n    return { ...acc,\n      [tab]: isActive\n    };\n  }, {});\n};\n\nconst scrollToTab = (tabPrefix, tabId) => {\n  const el = document.querySelector(`#${tabPrefix}_${tabId}`);\n\n  if (el) {\n    el.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth'\n    });\n  }\n}; // Create return URL for the Stripe onboarding form\n\n\nconst createReturnURL = (returnURLType, rootURL, routes, pathParams) => {\n  const path = createResourceLocatorString('EditListingStripeOnboardingPage', routes, { ...pathParams,\n    returnURLType\n  }, {});\n  const root = rootURL.replace(/\\/$/, '');\n  return `${root}${path}`;\n}; // Get attribute: stripeAccountData\n\n\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null; // Get last 4 digits of bank account returned in Stripe account\n\n\nconst getBankAccountLast4Digits = stripeAccountData => stripeAccountData && stripeAccountData.external_accounts.data.length > 0 ? stripeAccountData.external_accounts.data[0].last4 : null; // Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\n\n\nconst hasRequirements = (stripeAccountData, requirementType) => stripeAccountData != null && stripeAccountData.requirements && Array.isArray(stripeAccountData.requirements[requirementType]) && stripeAccountData.requirements[requirementType].length > 0; // Redirect user to Stripe's hosted Connect account onboarding form\n\n\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\n  getLinkFn({\n    type,\n    ...commonParams\n  }).then(url => {\n    window.location.href = url;\n  }).catch(err => console.error(err));\n};\n\nconst RedirectToStripe = ({\n  redirectFn\n}) => {\n  _s();\n\n  useEffect(redirectFn('custom_account_verification'), []);\n  return /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EditListingWizard.redirectingToStripe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 10\n    }\n  });\n}; // Create a new or edit listing through EditListingWizard\n\n\n_s(RedirectToStripe, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = RedirectToStripe;\n\nclass EditListingWizard extends Component {\n  constructor(props) {\n    super(props); // Having this info in state would trigger unnecessary rerendering\n\n    this.hasScrolledToTab = false;\n    this.state = {\n      draftId: null,\n      showPayoutDetails: false\n    };\n    this.handleCreateFlowTabScrolling = this.handleCreateFlowTabScrolling.bind(this);\n    this.handlePublishListing = this.handlePublishListing.bind(this);\n    this.handlePayoutModalClose = this.handlePayoutModalClose.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      stripeOnboardingReturnURL\n    } = this.props;\n\n    if (stripeOnboardingReturnURL != null && !this.showPayoutDetails) {\n      this.setState({\n        showPayoutDetails: true\n      });\n    }\n  }\n\n  handleCreateFlowTabScrolling(shouldScroll) {\n    this.hasScrolledToTab = shouldScroll;\n  }\n\n  handlePublishListing(id) {\n    const {\n      onPublishListingDraft,\n      currentUser,\n      stripeAccount\n    } = this.props;\n    const stripeConnected = currentUser && currentUser.stripeAccount && !!currentUser.stripeAccount.id;\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\n    const requirementsMissing = stripeAccount && (hasRequirements(stripeAccountData, 'past_due') || hasRequirements(stripeAccountData, 'currently_due'));\n\n    if (stripeConnected && !requirementsMissing) {\n      onPublishListingDraft(id);\n    } else {\n      this.setState({\n        draftId: id,\n        showPayoutDetails: true\n      });\n    }\n  }\n\n  handlePayoutModalClose() {\n    this.setState({\n      showPayoutDetails: false\n    });\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      rootClassName,\n      params,\n      listing,\n      viewport,\n      intl,\n      errors,\n      fetchInProgress,\n      payoutDetailsSaveInProgress,\n      payoutDetailsSaved,\n      onManageDisableScrolling,\n      onPayoutDetailsChange,\n      onGetStripeConnectAccountLink,\n      getAccountLinkInProgress,\n      createStripeAccountError,\n      updateStripeAccountError,\n      fetchStripeAccountError,\n      stripeAccountFetched,\n      stripeAccount,\n      stripeAccountError,\n      stripeAccountLinkError,\n      currentUser,\n      ...rest\n    } = this.props;\n    const selectedTab = params.tab;\n    const isNewListingFlow = [LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPE_DRAFT].includes(params.type);\n    const rootClasses = rootClassName || css.root;\n    const classes = classNames(rootClasses, className);\n    const currentListing = ensureListing(listing);\n    const tabsStatus = tabsActive(isNewListingFlow, currentListing); // If selectedTab is not active, redirect to the beginning of wizard\n\n    if (!tabsStatus[selectedTab]) {\n      const currentTabIndex = TABS.indexOf(selectedTab);\n      const nearestActiveTab = TABS.slice(0, currentTabIndex).reverse().find(t => tabsStatus[t]);\n      return /*#__PURE__*/React.createElement(NamedRedirect, {\n        name: \"EditListingPage\",\n        params: { ...params,\n          tab: nearestActiveTab\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const {\n      width\n    } = viewport;\n    const hasViewport = width > 0;\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasFontsLoaded = hasViewport && document.documentElement.classList.contains('fontsLoaded'); // Check if scrollToTab call is needed (tab is not visible on mobile)\n\n    if (hasVerticalTabLayout) {\n      this.hasScrolledToTab = true;\n    } else if (hasHorizontalTabLayout && !this.hasScrolledToTab && hasFontsLoaded) {\n      const tabPrefix = id;\n      scrollToTab(tabPrefix, selectedTab);\n      this.hasScrolledToTab = true;\n    }\n\n    const tabLink = tab => {\n      return {\n        name: 'EditListingPage',\n        params: { ...params,\n          tab\n        }\n      };\n    };\n\n    const formDisabled = getAccountLinkInProgress;\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\n    const currentUserLoaded = !!ensuredCurrentUser.id;\n    const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\n    const rootURL = config.canonicalRootURL;\n    const routes = routeConfiguration();\n    const {\n      returnURLType,\n      ...pathParams\n    } = params;\n    const successURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_SUCCESS, rootURL, routes, pathParams);\n    const failureURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_FAILURE, rootURL, routes, pathParams);\n    const accountId = stripeConnected ? stripeAccount.id : null;\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\n    const requirementsMissing = stripeAccount && (hasRequirements(stripeAccountData, 'past_due') || hasRequirements(stripeAccountData, 'currently_due'));\n    const savedCountry = stripeAccountData ? stripeAccountData.country : null;\n    const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(onGetStripeConnectAccountLink, {\n      accountId,\n      successURL,\n      failureURL\n    });\n    const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\n    const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\n    const showVerificationNeeded = stripeConnected && requirementsMissing; // Redirect from success URL to basic path for StripePayoutPage\n\n    if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\n      return /*#__PURE__*/React.createElement(NamedRedirect, {\n        name: \"EditListingPage\",\n        params: pathParams,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      rootClassName: css.tabsContainer,\n      navRootClassName: css.nav,\n      tabRootClassName: css.tab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }\n    }, TABS.map(tab => {\n      return /*#__PURE__*/React.createElement(EditListingWizardTab, Object.assign({}, rest, {\n        key: tab,\n        tabId: `${id}_${tab}`,\n        tabLabel: tabLabel(intl, tab),\n        tabLinkProps: tabLink(tab),\n        selected: selectedTab === tab,\n        disabled: isNewListingFlow && !tabsStatus[tab],\n        tab: tab,\n        intl: intl,\n        params: params,\n        listing: listing,\n        marketplaceTabs: TABS,\n        errors: errors,\n        handleCreateFlowTabScrolling: this.handleCreateFlowTabScrolling,\n        handlePublishListing: this.handlePublishListing,\n        fetchInProgress: fetchInProgress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }\n      }));\n    })), /*#__PURE__*/React.createElement(Modal, {\n      id: \"EditListingWizard.payoutModal\",\n      isOpen: this.state.showPayoutDetails,\n      onClose: this.handlePayoutModalClose,\n      onManageDisableScrolling: onManageDisableScrolling,\n      usePortal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.modalPayoutDetailsWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: css.modalTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingWizard.payoutModalTitleOneMoreThing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingWizard.payoutModalTitlePayoutPreferences\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 15\n      }\n    })), !currentUserLoaded ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"StripePayoutPage.loadingData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 15\n      }\n    }) : returnedAbnormallyFromStripe && !stripeAccountLinkError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(RedirectToStripe, {\n      redirectFn: handleGetStripeConnectAccountLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      className: css.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingWizard.payoutModalInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(StripeConnectAccountForm, {\n      disabled: formDisabled,\n      inProgress: payoutDetailsSaveInProgress,\n      ready: payoutDetailsSaved,\n      currentUser: ensuredCurrentUser,\n      stripeBankAccountLastDigits: getBankAccountLast4Digits(stripeAccountData),\n      savedCountry: savedCountry,\n      submitButtonText: intl.formatMessage({\n        id: 'StripePayoutPage.submitButtonText'\n      }),\n      stripeAccountError: stripeAccountError,\n      stripeAccountFetched: stripeAccountFetched,\n      stripeAccountLinkError: stripeAccountLinkError,\n      onChange: onPayoutDetailsChange,\n      onSubmit: rest.onPayoutDetailsSubmit,\n      onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink,\n      stripeConnected: stripeConnected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }\n    }, stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? /*#__PURE__*/React.createElement(StripeConnectAccountStatusBox, {\n      type: \"verificationNeeded\",\n      inProgress: getAccountLinkInProgress,\n      onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink('custom_account_verification'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }\n    }) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? /*#__PURE__*/React.createElement(StripeConnectAccountStatusBox, {\n      type: \"verificationSuccess\",\n      inProgress: getAccountLinkInProgress,\n      disabled: payoutDetailsSaveInProgress,\n      onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink('custom_account_update'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }\n    }) : null)))));\n  }\n\n}\n\nEditListingWizard.defaultProps = {\n  className: null,\n  currentUser: null,\n  rootClassName: null,\n  listing: null,\n  stripeAccount: null,\n  stripeAccountFetched: null,\n  updateInProgress: false,\n  createStripeAccountError: null,\n  updateStripeAccountError: null,\n  fetchStripeAccountError: null,\n  stripeAccountError: null,\n  stripeAccountLinkError: null\n};\nEditListingWizard.propTypes = {\n  id: string.isRequired,\n  className: string,\n  currentUser: propTypes.currentUser,\n  rootClassName: string,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: oneOf(TABS).isRequired\n  }).isRequired,\n  stripeAccount: object,\n  stripeAccountFetched: bool,\n  // We cannot use propTypes.listing since the listing might be a draft.\n  listing: shape({\n    attributes: shape({\n      publicData: object,\n      description: string,\n      geolocation: object,\n      pricing: object,\n      title: string\n    }),\n    images: array\n  }),\n  errors: shape({\n    createListingDraftError: object,\n    updateListingError: object,\n    publishListingError: object,\n    showListingsError: object,\n    uploadImageError: object\n  }).isRequired,\n  createStripeAccountError: propTypes.error,\n  updateStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  stripeAccountError: propTypes.error,\n  stripeAccountLinkError: propTypes.error,\n  fetchInProgress: bool.isRequired,\n  getAccountLinkInProgress: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  payoutDetailsSaved: bool.isRequired,\n  onPayoutDetailsChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nexport default compose(withViewport, injectIntl)(EditListingWizard);\n\nvar _c;\n\n$RefreshReg$(_c, \"RedirectToStripe\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingWizard.js"],"names":["React","Component","useEffect","array","bool","func","number","object","oneOf","shape","string","compose","classNames","config","routeConfiguration","FormattedMessage","injectIntl","intlShape","createResourceLocatorString","withViewport","propTypes","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","LISTING_PAGE_PARAM_TYPES","ensureCurrentUser","ensureListing","Modal","NamedRedirect","Tabs","StripeConnectAccountStatusBox","StripeConnectAccountForm","EditListingWizardTab","DETAILS","DELIVERY","PRICING","PHOTOS","css","TABS","MAX_HORIZONTAL_NAV_SCREEN_WIDTH","STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","tabLabel","intl","tab","key","formatMessage","id","tabCompleted","listing","availabilityPlan","description","price","title","publicData","attributes","images","deliveryOptionPicked","shippingEnabled","pickupEnabled","size","brand","length","tabsActive","isNew","reduce","acc","previousTabIndex","findIndex","t","isActive","scrollToTab","tabPrefix","tabId","el","document","querySelector","scrollIntoView","block","behavior","createReturnURL","returnURLType","rootURL","routes","pathParams","path","root","replace","getStripeAccountData","stripeAccount","stripeAccountData","getBankAccountLast4Digits","external_accounts","data","last4","hasRequirements","requirementType","requirements","Array","isArray","handleGetStripeConnectAccountLinkFn","getLinkFn","commonParams","type","then","url","window","location","href","catch","err","console","error","RedirectToStripe","redirectFn","EditListingWizard","constructor","props","hasScrolledToTab","state","draftId","showPayoutDetails","handleCreateFlowTabScrolling","bind","handlePublishListing","handlePayoutModalClose","componentDidMount","stripeOnboardingReturnURL","setState","shouldScroll","onPublishListingDraft","currentUser","stripeConnected","requirementsMissing","render","className","rootClassName","params","viewport","errors","fetchInProgress","payoutDetailsSaveInProgress","payoutDetailsSaved","onManageDisableScrolling","onPayoutDetailsChange","onGetStripeConnectAccountLink","getAccountLinkInProgress","createStripeAccountError","updateStripeAccountError","fetchStripeAccountError","stripeAccountFetched","stripeAccountError","stripeAccountLinkError","rest","selectedTab","isNewListingFlow","includes","rootClasses","classes","currentListing","tabsStatus","currentTabIndex","indexOf","nearestActiveTab","slice","reverse","find","width","hasViewport","hasHorizontalTabLayout","hasVerticalTabLayout","hasFontsLoaded","documentElement","classList","contains","tabLink","name","formDisabled","ensuredCurrentUser","currentUserLoaded","canonicalRootURL","successURL","failureURL","accountId","savedCountry","country","handleGetStripeConnectAccountLink","returnedNormallyFromStripe","returnedAbnormallyFromStripe","showVerificationNeeded","tabsContainer","nav","map","modalPayoutDetailsWrapper","modalTitle","modalMessage","onPayoutDetailsSubmit","defaultProps","updateInProgress","isRequired","slug","geolocation","pricing","createListingDraftError","updateListingError","publishListingError","showListingsError","uploadImageError","height"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\r\nimport { array, bool, func, number, object, oneOf, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport config from '../../../config';\r\nimport routeConfiguration from '../../../routing/routeConfiguration';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\nimport { withViewport } from '../../../util/contextHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n} from '../../../util/urlHelpers';\r\nimport { ensureCurrentUser, ensureListing } from '../../../util/data';\r\n\r\n// Import shared components\r\nimport {\r\n  Modal,\r\n  NamedRedirect,\r\n  Tabs,\r\n  StripeConnectAccountStatusBox,\r\n  StripeConnectAccountForm,\r\n} from '../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingWizardTab, { DETAILS, DELIVERY, PRICING, PHOTOS } from './EditListingWizardTab';\r\nimport css from './EditListingWizard.module.css';\r\n\r\n// You can reorder these panels.\r\n// Note 1: You need to change save button translations for new listing flow\r\n// Note 2: Ensure that draft listing is created after the first panel\r\n// and listing publishing happens after last panel.\r\nexport const TABS = [DETAILS, PRICING, DELIVERY, PHOTOS];\r\n\r\n// Tabs are horizontal in small screens\r\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\r\n\r\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\r\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\r\n\r\nconst tabLabel = (intl, tab) => {\r\n  let key = null;\r\n  if (tab === DETAILS) {\r\n    key = 'EditListingWizard.tabLabelDetails';\r\n  } else if (tab === DELIVERY) {\r\n    key = 'EditListingWizard.tabLabelDelivery';\r\n  } else if (tab === PRICING) {\r\n    key = 'EditListingWizard.tabLabelPricing';\r\n  } else if (tab === PHOTOS) {\r\n    key = 'EditListingWizard.tabLabelPhotos';\r\n  }\r\n\r\n  return intl.formatMessage({ id: key });\r\n};\r\n\r\n/**\r\n * Check if a wizard tab is completed.\r\n *\r\n * @param tab wizard's tab\r\n * @param listing is contains some specific data if tab is completed\r\n *\r\n * @return true if tab / step is completed.\r\n */\r\nconst tabCompleted = (tab, listing) => {\r\n  const { availabilityPlan, description, price, title, publicData } = listing.attributes;\r\n  const images = listing.images;\r\n  const deliveryOptionPicked =\r\n    publicData && (publicData.shippingEnabled || publicData.pickupEnabled);\r\n\r\n  switch (tab) {\r\n    case DETAILS:\r\n      return !!(description && title && publicData.size && publicData.brand);\r\n    case DELIVERY:\r\n      return !!deliveryOptionPicked;\r\n    case PRICING:\r\n      return !!price;\r\n    case PHOTOS:\r\n      return images && images.length > 0;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check which wizard tabs are active and which are not yet available. Tab is active if previous\r\n * tab is completed. In edit mode all tabs are active.\r\n *\r\n * @param isNew flag if a new listing is being created or an old one being edited\r\n * @param listing data to be checked\r\n *\r\n * @return object containing activity / editability of different tabs of this wizard\r\n */\r\nconst tabsActive = (isNew, listing) => {\r\n  return TABS.reduce((acc, tab) => {\r\n    const previousTabIndex = TABS.findIndex(t => t === tab) - 1;\r\n    const isActive =\r\n      previousTabIndex >= 0 ? !isNew || tabCompleted(TABS[previousTabIndex], listing) : true;\r\n    return { ...acc, [tab]: isActive };\r\n  }, {});\r\n};\r\n\r\nconst scrollToTab = (tabPrefix, tabId) => {\r\n  const el = document.querySelector(`#${tabPrefix}_${tabId}`);\r\n  if (el) {\r\n    el.scrollIntoView({\r\n      block: 'start',\r\n      behavior: 'smooth',\r\n    });\r\n  }\r\n};\r\n\r\n// Create return URL for the Stripe onboarding form\r\nconst createReturnURL = (returnURLType, rootURL, routes, pathParams) => {\r\n  const path = createResourceLocatorString(\r\n    'EditListingStripeOnboardingPage',\r\n    routes,\r\n    { ...pathParams, returnURLType },\r\n    {}\r\n  );\r\n  const root = rootURL.replace(/\\/$/, '');\r\n  return `${root}${path}`;\r\n};\r\n\r\n// Get attribute: stripeAccountData\r\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null;\r\n\r\n// Get last 4 digits of bank account returned in Stripe account\r\nconst getBankAccountLast4Digits = stripeAccountData =>\r\n  stripeAccountData && stripeAccountData.external_accounts.data.length > 0\r\n    ? stripeAccountData.external_accounts.data[0].last4\r\n    : null;\r\n\r\n// Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\r\nconst hasRequirements = (stripeAccountData, requirementType) =>\r\n  stripeAccountData != null &&\r\n  stripeAccountData.requirements &&\r\n  Array.isArray(stripeAccountData.requirements[requirementType]) &&\r\n  stripeAccountData.requirements[requirementType].length > 0;\r\n\r\n// Redirect user to Stripe's hosted Connect account onboarding form\r\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\r\n  getLinkFn({ type, ...commonParams })\r\n    .then(url => {\r\n      window.location.href = url;\r\n    })\r\n    .catch(err => console.error(err));\r\n};\r\n\r\nconst RedirectToStripe = ({ redirectFn }) => {\r\n  useEffect(redirectFn('custom_account_verification'), []);\r\n  return <FormattedMessage id=\"EditListingWizard.redirectingToStripe\" />;\r\n};\r\n\r\n// Create a new or edit listing through EditListingWizard\r\nclass EditListingWizard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Having this info in state would trigger unnecessary rerendering\r\n    this.hasScrolledToTab = false;\r\n\r\n    this.state = {\r\n      draftId: null,\r\n      showPayoutDetails: false,\r\n    };\r\n    this.handleCreateFlowTabScrolling = this.handleCreateFlowTabScrolling.bind(this);\r\n    this.handlePublishListing = this.handlePublishListing.bind(this);\r\n    this.handlePayoutModalClose = this.handlePayoutModalClose.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { stripeOnboardingReturnURL } = this.props;\r\n\r\n    if (stripeOnboardingReturnURL != null && !this.showPayoutDetails) {\r\n      this.setState({ showPayoutDetails: true });\r\n    }\r\n  }\r\n\r\n  handleCreateFlowTabScrolling(shouldScroll) {\r\n    this.hasScrolledToTab = shouldScroll;\r\n  }\r\n\r\n  handlePublishListing(id) {\r\n    const { onPublishListingDraft, currentUser, stripeAccount } = this.props;\r\n\r\n    const stripeConnected =\r\n      currentUser && currentUser.stripeAccount && !!currentUser.stripeAccount.id;\r\n\r\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\r\n\r\n    const requirementsMissing =\r\n      stripeAccount &&\r\n      (hasRequirements(stripeAccountData, 'past_due') ||\r\n        hasRequirements(stripeAccountData, 'currently_due'));\r\n\r\n    if (stripeConnected && !requirementsMissing) {\r\n      onPublishListingDraft(id);\r\n    } else {\r\n      this.setState({\r\n        draftId: id,\r\n        showPayoutDetails: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  handlePayoutModalClose() {\r\n    this.setState({ showPayoutDetails: false });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      rootClassName,\r\n      params,\r\n      listing,\r\n      viewport,\r\n      intl,\r\n      errors,\r\n      fetchInProgress,\r\n      payoutDetailsSaveInProgress,\r\n      payoutDetailsSaved,\r\n      onManageDisableScrolling,\r\n      onPayoutDetailsChange,\r\n      onGetStripeConnectAccountLink,\r\n      getAccountLinkInProgress,\r\n      createStripeAccountError,\r\n      updateStripeAccountError,\r\n      fetchStripeAccountError,\r\n      stripeAccountFetched,\r\n      stripeAccount,\r\n      stripeAccountError,\r\n      stripeAccountLinkError,\r\n      currentUser,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const selectedTab = params.tab;\r\n    const isNewListingFlow = [LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPE_DRAFT].includes(\r\n      params.type\r\n    );\r\n    const rootClasses = rootClassName || css.root;\r\n    const classes = classNames(rootClasses, className);\r\n    const currentListing = ensureListing(listing);\r\n    const tabsStatus = tabsActive(isNewListingFlow, currentListing);\r\n\r\n    // If selectedTab is not active, redirect to the beginning of wizard\r\n    if (!tabsStatus[selectedTab]) {\r\n      const currentTabIndex = TABS.indexOf(selectedTab);\r\n      const nearestActiveTab = TABS.slice(0, currentTabIndex)\r\n        .reverse()\r\n        .find(t => tabsStatus[t]);\r\n\r\n      return <NamedRedirect name=\"EditListingPage\" params={{ ...params, tab: nearestActiveTab }} />;\r\n    }\r\n\r\n    const { width } = viewport;\r\n    const hasViewport = width > 0;\r\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n    const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n    const hasFontsLoaded =\r\n      hasViewport && document.documentElement.classList.contains('fontsLoaded');\r\n\r\n    // Check if scrollToTab call is needed (tab is not visible on mobile)\r\n    if (hasVerticalTabLayout) {\r\n      this.hasScrolledToTab = true;\r\n    } else if (hasHorizontalTabLayout && !this.hasScrolledToTab && hasFontsLoaded) {\r\n      const tabPrefix = id;\r\n      scrollToTab(tabPrefix, selectedTab);\r\n      this.hasScrolledToTab = true;\r\n    }\r\n\r\n    const tabLink = tab => {\r\n      return { name: 'EditListingPage', params: { ...params, tab } };\r\n    };\r\n\r\n    const formDisabled = getAccountLinkInProgress;\r\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n    const currentUserLoaded = !!ensuredCurrentUser.id;\r\n    const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\r\n\r\n    const rootURL = config.canonicalRootURL;\r\n    const routes = routeConfiguration();\r\n    const { returnURLType, ...pathParams } = params;\r\n    const successURL = createReturnURL(\r\n      STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\r\n      rootURL,\r\n      routes,\r\n      pathParams\r\n    );\r\n    const failureURL = createReturnURL(\r\n      STRIPE_ONBOARDING_RETURN_URL_FAILURE,\r\n      rootURL,\r\n      routes,\r\n      pathParams\r\n    );\r\n\r\n    const accountId = stripeConnected ? stripeAccount.id : null;\r\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\r\n\r\n    const requirementsMissing =\r\n      stripeAccount &&\r\n      (hasRequirements(stripeAccountData, 'past_due') ||\r\n        hasRequirements(stripeAccountData, 'currently_due'));\r\n\r\n    const savedCountry = stripeAccountData ? stripeAccountData.country : null;\r\n\r\n    const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(\r\n      onGetStripeConnectAccountLink,\r\n      {\r\n        accountId,\r\n        successURL,\r\n        failureURL,\r\n      }\r\n    );\r\n\r\n    const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\r\n    const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\r\n    const showVerificationNeeded = stripeConnected && requirementsMissing;\r\n\r\n    // Redirect from success URL to basic path for StripePayoutPage\r\n    if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\r\n      return <NamedRedirect name=\"EditListingPage\" params={pathParams} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <Tabs\r\n          rootClassName={css.tabsContainer}\r\n          navRootClassName={css.nav}\r\n          tabRootClassName={css.tab}\r\n        >\r\n          {TABS.map(tab => {\r\n            return (\r\n              <EditListingWizardTab\r\n                {...rest}\r\n                key={tab}\r\n                tabId={`${id}_${tab}`}\r\n                tabLabel={tabLabel(intl, tab)}\r\n                tabLinkProps={tabLink(tab)}\r\n                selected={selectedTab === tab}\r\n                disabled={isNewListingFlow && !tabsStatus[tab]}\r\n                tab={tab}\r\n                intl={intl}\r\n                params={params}\r\n                listing={listing}\r\n                marketplaceTabs={TABS}\r\n                errors={errors}\r\n                handleCreateFlowTabScrolling={this.handleCreateFlowTabScrolling}\r\n                handlePublishListing={this.handlePublishListing}\r\n                fetchInProgress={fetchInProgress}\r\n              />\r\n            );\r\n          })}\r\n        </Tabs>\r\n        <Modal\r\n          id=\"EditListingWizard.payoutModal\"\r\n          isOpen={this.state.showPayoutDetails}\r\n          onClose={this.handlePayoutModalClose}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          usePortal\r\n        >\r\n          <div className={css.modalPayoutDetailsWrapper}>\r\n            <h1 className={css.modalTitle}>\r\n              <FormattedMessage id=\"EditListingWizard.payoutModalTitleOneMoreThing\" />\r\n              <br />\r\n              <FormattedMessage id=\"EditListingWizard.payoutModalTitlePayoutPreferences\" />\r\n            </h1>\r\n            {!currentUserLoaded ? (\r\n              <FormattedMessage id=\"StripePayoutPage.loadingData\" />\r\n            ) : returnedAbnormallyFromStripe && !stripeAccountLinkError ? (\r\n              <p className={css.modalMessage}>\r\n                <RedirectToStripe redirectFn={handleGetStripeConnectAccountLink} />\r\n              </p>\r\n            ) : (\r\n              <>\r\n                <p className={css.modalMessage}>\r\n                  <FormattedMessage id=\"EditListingWizard.payoutModalInfo\" />\r\n                </p>\r\n                <StripeConnectAccountForm\r\n                  disabled={formDisabled}\r\n                  inProgress={payoutDetailsSaveInProgress}\r\n                  ready={payoutDetailsSaved}\r\n                  currentUser={ensuredCurrentUser}\r\n                  stripeBankAccountLastDigits={getBankAccountLast4Digits(stripeAccountData)}\r\n                  savedCountry={savedCountry}\r\n                  submitButtonText={intl.formatMessage({\r\n                    id: 'StripePayoutPage.submitButtonText',\r\n                  })}\r\n                  stripeAccountError={stripeAccountError}\r\n                  stripeAccountFetched={stripeAccountFetched}\r\n                  stripeAccountLinkError={stripeAccountLinkError}\r\n                  onChange={onPayoutDetailsChange}\r\n                  onSubmit={rest.onPayoutDetailsSubmit}\r\n                  onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink}\r\n                  stripeConnected={stripeConnected}\r\n                >\r\n                  {stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? (\r\n                    <StripeConnectAccountStatusBox\r\n                      type=\"verificationNeeded\"\r\n                      inProgress={getAccountLinkInProgress}\r\n                      onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                        'custom_account_verification'\r\n                      )}\r\n                    />\r\n                  ) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? (\r\n                    <StripeConnectAccountStatusBox\r\n                      type=\"verificationSuccess\"\r\n                      inProgress={getAccountLinkInProgress}\r\n                      disabled={payoutDetailsSaveInProgress}\r\n                      onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                        'custom_account_update'\r\n                      )}\r\n                    />\r\n                  ) : null}\r\n                </StripeConnectAccountForm>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEditListingWizard.defaultProps = {\r\n  className: null,\r\n  currentUser: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n  stripeAccount: null,\r\n  stripeAccountFetched: null,\r\n  updateInProgress: false,\r\n  createStripeAccountError: null,\r\n  updateStripeAccountError: null,\r\n  fetchStripeAccountError: null,\r\n  stripeAccountError: null,\r\n  stripeAccountLinkError: null,\r\n};\r\n\r\nEditListingWizard.propTypes = {\r\n  id: string.isRequired,\r\n  className: string,\r\n  currentUser: propTypes.currentUser,\r\n  rootClassName: string,\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: oneOf(TABS).isRequired,\r\n  }).isRequired,\r\n  stripeAccount: object,\r\n  stripeAccountFetched: bool,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: shape({\r\n    attributes: shape({\r\n      publicData: object,\r\n      description: string,\r\n      geolocation: object,\r\n      pricing: object,\r\n      title: string,\r\n    }),\r\n    images: array,\r\n  }),\r\n\r\n  errors: shape({\r\n    createListingDraftError: object,\r\n    updateListingError: object,\r\n    publishListingError: object,\r\n    showListingsError: object,\r\n    uploadImageError: object,\r\n  }).isRequired,\r\n  createStripeAccountError: propTypes.error,\r\n  updateStripeAccountError: propTypes.error,\r\n  fetchStripeAccountError: propTypes.error,\r\n  stripeAccountError: propTypes.error,\r\n  stripeAccountLinkError: propTypes.error,\r\n\r\n  fetchInProgress: bool.isRequired,\r\n  getAccountLinkInProgress: bool.isRequired,\r\n  payoutDetailsSaveInProgress: bool.isRequired,\r\n  payoutDetailsSaved: bool.isRequired,\r\n  onPayoutDetailsChange: func.isRequired,\r\n  onPayoutDetailsSubmit: func.isRequired,\r\n  onGetStripeConnectAccountLink: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n\r\n  // from withViewport\r\n  viewport: shape({\r\n    width: number.isRequired,\r\n    height: number.isRequired,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default compose(\r\n  withViewport,\r\n  injectIntl\r\n)(EditListingWizard);\r\n"]},"metadata":{},"sourceType":"module"}