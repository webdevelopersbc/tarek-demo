{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { USER_LOGOUT } from './ducks/Auth.duck';\nimport * as globalReducers from './ducks';\nimport * as pageReducers from './containers/reducers';\n/**\r\n * Function _createReducer_ combines global reducers (reducers that are used in\r\n * multiple pages) and reducers that are handling actions happening inside one page container.\r\n * Since we combineReducers, pageReducers will get page specific key (e.g. SearchPage)\r\n * which is page specific.\r\n * Future: this structure could take in asyncReducers, which are changed when you navigate pages.\r\n */\n\nconst appReducer = combineReducers({ ...globalReducers,\n  ...pageReducers\n});\n\nconst createReducer = () => {\n  return (state, action) => {\n    const appState = action.type === USER_LOGOUT ? undefined : state; // Clear sessionStorage when logging out.\n\n    if (action.type === USER_LOGOUT && typeof window !== 'undefined' && !!window.sessionStorage) {\n      window.sessionStorage.clear();\n    }\n\n    return appReducer(appState, action);\n  };\n};\n\nexport default createReducer;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/reducers.js"],"names":["combineReducers","USER_LOGOUT","globalReducers","pageReducers","appReducer","createReducer","state","action","appState","type","undefined","window","sessionStorage","clear"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAO,KAAKC,cAAZ,MAAgC,SAAhC;AACA,OAAO,KAAKC,YAAZ,MAA8B,uBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAGJ,eAAe,CAAC,EAAE,GAAGE,cAAL;AAAqB,KAAGC;AAAxB,CAAD,CAAlC;;AAEA,MAAME,aAAa,GAAG,MAAM;AAC1B,SAAO,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxB,UAAMC,QAAQ,GAAGD,MAAM,CAACE,IAAP,KAAgBR,WAAhB,GAA8BS,SAA9B,GAA0CJ,KAA3D,CADwB,CAGxB;;AACA,QAAIC,MAAM,CAACE,IAAP,KAAgBR,WAAhB,IAA+B,OAAOU,MAAP,KAAkB,WAAjD,IAAgE,CAAC,CAACA,MAAM,CAACC,cAA7E,EAA6F;AAC3FD,MAAAA,MAAM,CAACC,cAAP,CAAsBC,KAAtB;AACD;;AAED,WAAOT,UAAU,CAACI,QAAD,EAAWD,MAAX,CAAjB;AACD,GATD;AAUD,CAXD;;AAaA,eAAeF,aAAf","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { USER_LOGOUT } from './ducks/Auth.duck';\r\nimport * as globalReducers from './ducks';\r\nimport * as pageReducers from './containers/reducers';\r\n\r\n/**\r\n * Function _createReducer_ combines global reducers (reducers that are used in\r\n * multiple pages) and reducers that are handling actions happening inside one page container.\r\n * Since we combineReducers, pageReducers will get page specific key (e.g. SearchPage)\r\n * which is page specific.\r\n * Future: this structure could take in asyncReducers, which are changed when you navigate pages.\r\n */\r\nconst appReducer = combineReducers({ ...globalReducers, ...pageReducers });\r\n\r\nconst createReducer = () => {\r\n  return (state, action) => {\r\n    const appState = action.type === USER_LOGOUT ? undefined : state;\r\n\r\n    // Clear sessionStorage when logging out.\r\n    if (action.type === USER_LOGOUT && typeof window !== 'undefined' && !!window.sessionStorage) {\r\n      window.sessionStorage.clear();\r\n    }\r\n\r\n    return appReducer(appState, action);\r\n  };\r\n};\r\n\r\nexport default createReducer;\r\n"]},"metadata":{},"sourceType":"module"}