{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\TransactionPage\\\\TransactionPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { array, arrayOf, bool, func, number, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\nimport { propTypes } from '../../util/types';\nimport { ensureListing, ensureTransaction } from '../../util/data';\nimport { timeOfDayFromTimeZoneToLocal } from '../../util/dates';\nimport { createSlug } from '../../util/urlHelpers';\nimport { txIsPaymentPending } from '../../util/transaction';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/UI.duck';\nimport { initializeCardPaymentData } from '../../ducks/stripe.duck.js';\nimport { NamedRedirect, Page, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer, UserDisplayName } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport DisputeModal from './DisputeModal/DisputeModal';\nimport ReviewModal from './ReviewModal/ReviewModal';\nimport TransactionPanel from './TransactionPanel/TransactionPanel';\nimport { dispute, markReceived, markReceivedFromPurchased, markDelivered, sendMessage, sendReview, fetchMoreMessages, fetchTransactionLineItems } from './TransactionPage.duck';\nimport css from './TransactionPage.module.css';\nconst PROVIDER = 'provider';\nconst CUSTOMER = 'customer'; // TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\n\nexport const TransactionPageComponent = props => {\n  _s();\n\n  var _currentTransaction$a, _currentTransaction$a2;\n\n  const [state, setState] = useState({\n    isDisputeModalOpen: false,\n    disputeSubmitted: false,\n    isReviewModalOpen: false,\n    reviewSubmitted: false\n  });\n  const {\n    currentUser,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    fetchMessagesError,\n    fetchMessagesInProgress,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    fetchTransactionError,\n    history,\n    intl,\n    messages,\n    onManageDisableScrolling,\n    onSendMessage,\n    onSendReview,\n    onShowMoreMessages,\n    params,\n    scrollingDisabled,\n    sendMessageError,\n    sendMessageInProgress,\n    sendReviewError,\n    sendReviewInProgress,\n    transaction,\n    transactionRole,\n    disputeInProgress,\n    disputeError,\n    onDispute,\n    markReceivedInProgress,\n    markReceivedError,\n    onMarkReceived,\n    markReceivedFromPurchasedInProgress,\n    markReceivedFromPurchasedError,\n    onMarkReceivedFromPurchased,\n    markDeliveredInProgress,\n    markDeliveredError,\n    onMarkDelivered,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    callSetInitialValues,\n    onInitializeCardPaymentData,\n    onFetchTransactionLineItems,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError\n  } = props;\n  const currentTransaction = ensureTransaction(transaction);\n  const currentListing = ensureListing(currentTransaction.listing);\n  const isProviderRole = transactionRole === PROVIDER;\n  const isCustomerRole = transactionRole === CUSTOMER;\n\n  const redirectToCheckoutPageWithInitialValues = (initialValues, listing) => {\n    const routes = routeConfiguration(); // Customize checkout page state with current listing and selected bookingDates\n\n    const {\n      setInitialValues\n    } = findRouteByRouteName('CheckoutPage', routes);\n    callSetInitialValues(setInitialValues, initialValues); // Clear previous Stripe errors from store if there is any\n\n    onInitializeCardPaymentData(); // Redirect to CheckoutPage\n\n    history.push(createResourceLocatorString('CheckoutPage', routes, {\n      id: currentListing.id.uuid,\n      slug: createSlug(currentListing.attributes.title)\n    }, {}));\n  }; // If payment is pending, redirect to CheckoutPage\n\n\n  if (txIsPaymentPending(currentTransaction) && isCustomerRole && currentTransaction.attributes.lineItems) {\n    const currentBooking = ensureListing(currentTransaction.booking);\n    const bookingDatesMaybe = currentBooking.id ? {\n      bookingDates: {\n        // In day-based booking process, booking start and end come in server's time zone.\n        bookingStart: timeOfDayFromTimeZoneToLocal(currentBooking.attributes.start, apiTimeZone),\n        bookingEnd: timeOfDayFromTimeZoneToLocal(currentBooking.attributes.end, apiTimeZone)\n      }\n    } : {};\n    const apiTimeZone = 'Etc/UTC';\n    const initialValues = {\n      listing: currentListing,\n      // Transaction with payment pending should be passed to CheckoutPage\n      transaction: currentTransaction,\n      // Original orderData content is not available,\n      // but it is already used since booking is created.\n      // (E.g. quantity is used when booking is created.)\n      orderData: { ...bookingDatesMaybe\n      }\n    };\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\n  } // Customer can create a booking, if the tx is in \"enquiry\" state.\n\n\n  const handleSubmitOrderRequest = values => {\n    const {\n      bookingDates,\n      quantity: quantityRaw,\n      ...otherOrderData\n    } = values;\n    const bookingDatesMaybe = bookingDates ? {\n      bookingDates: {\n        bookingStart: bookingDates.startDate,\n        bookingEnd: bookingDates.endDate\n      }\n    } : {};\n    const initialValues = {\n      listing: currentListing,\n      // enquired transaction should be passed to CheckoutPage\n      transaction: currentTransaction,\n      orderData: { ...bookingDatesMaybe,\n        quantity: Number.parseInt(quantityRaw, 10),\n        ...otherOrderData\n      },\n      confirmPaymentError: null\n    };\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\n  }; // Open review modal\n  // This is called from ActivityFeed and from action buttons\n\n\n  const onOpenReviewModal = () => {\n    setState(prevState => ({ ...prevState,\n      isReviewModalOpen: true\n    }));\n  }; // Submit review and close the review modal\n\n\n  const onSubmitReview = values => {\n    const {\n      reviewRating,\n      reviewContent\n    } = values;\n    const rating = Number.parseInt(reviewRating, 10);\n    onSendReview(transactionRole, currentTransaction, rating, reviewContent).then(r => setState(prevState => ({ ...prevState,\n      isReviewModalOpen: false,\n      reviewSubmitted: true\n    }))).catch(e => {// Do nothing.\n    });\n  }; // Open dispute modal\n\n\n  const onOpenDisputeModal = () => {\n    setState(prevState => ({ ...prevState,\n      isDisputeModalOpen: true\n    }));\n  }; // Submit dispute and close the review modal\n\n\n  const onDisputeOrder = values => {\n    const {\n      disputeReason\n    } = values;\n    onDispute(currentTransaction.id, disputeReason).then(r => {\n      return setState(prevState => ({ ...prevState,\n        disputeSubmitted: true\n      }));\n    }).catch(e => {// Do nothing.\n    });\n  };\n\n  const deletedListingTitle = intl.formatMessage({\n    id: 'TransactionPage.deletedListing'\n  });\n  const listingTitle = currentListing.attributes.deleted ? deletedListingTitle : currentListing.attributes.title; // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\n\n  const isDataAvailable = currentUser && currentTransaction.id && currentTransaction.id.uuid === params.id && currentTransaction.attributes.lineItems && currentTransaction.customer && currentTransaction.provider && !fetchTransactionError;\n  const isShippable = isDataAvailable && ((_currentTransaction$a = currentTransaction.attributes) === null || _currentTransaction$a === void 0 ? void 0 : (_currentTransaction$a2 = _currentTransaction$a.protectedData) === null || _currentTransaction$a2 === void 0 ? void 0 : _currentTransaction$a2.deliveryMethod) === 'shipping';\n  const isOwnSale = isDataAvailable && isProviderRole && currentUser.id.uuid === currentTransaction.provider.id.uuid;\n  const isOwnOrder = isDataAvailable && isCustomerRole && currentUser.id.uuid === currentTransaction.customer.id.uuid;\n\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access a sale that was not owned by the current user');\n    return /*#__PURE__*/React.createElement(NamedRedirect, {\n      name: \"InboxPage\",\n      params: {\n        tab: 'sales'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 12\n      }\n    });\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access an order that was not owned by the current user');\n    return /*#__PURE__*/React.createElement(NamedRedirect, {\n      name: \"InboxPage\",\n      params: {\n        tab: 'orders'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\n  const fetchErrorMessage = isCustomerRole ? 'TransactionPage.fetchOrderFailed' : 'TransactionPage.fetchSaleFailed';\n  const loadingMessage = isCustomerRole ? 'TransactionPage.loadingOrderData' : 'TransactionPage.loadingSaleData';\n  const loadingOrFailedFetching = fetchTransactionError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: css.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: `${fetchErrorMessage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    className: css.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: `${loadingMessage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }\n  }));\n  const initialMessageFailed = !!(initialMessageFailedToTransaction && currentTransaction.id && initialMessageFailedToTransaction.uuid === currentTransaction.id.uuid);\n  const otherUserDisplayName = isOwnOrder ? /*#__PURE__*/React.createElement(UserDisplayName, {\n    user: currentTransaction.provider,\n    intl: intl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(UserDisplayName, {\n    user: currentTransaction.customer,\n    intl: intl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 5\n    }\n  }); // TransactionPanel is presentational component\n  // that currently handles showing everything inside layout's main view area.\n\n  const panel = isDataAvailable ? /*#__PURE__*/React.createElement(TransactionPanel, {\n    className: detailsClassName,\n    currentUser: currentUser,\n    transaction: currentTransaction,\n    fetchMessagesInProgress: fetchMessagesInProgress,\n    totalMessagePages: totalMessagePages,\n    oldestMessagePageFetched: oldestMessagePageFetched,\n    messages: messages,\n    initialMessageFailed: initialMessageFailed,\n    savePaymentMethodFailed: savePaymentMethodFailed,\n    fetchMessagesError: fetchMessagesError,\n    sendMessageInProgress: sendMessageInProgress,\n    sendMessageError: sendMessageError,\n    onManageDisableScrolling: onManageDisableScrolling,\n    onShowMoreMessages: onShowMoreMessages,\n    onSendMessage: onSendMessage,\n    onOpenReviewModal: onOpenReviewModal,\n    onOpenDisputeModal: onOpenDisputeModal,\n    transactionRole: transactionRole,\n    markReceivedProps: {\n      inProgress: markReceivedInProgress,\n      error: markReceivedError,\n      onTransition: () => onMarkReceived(currentTransaction.id),\n      buttonText: intl.formatMessage({\n        id: 'TransactionPage.markReceived.actionButton'\n      }),\n      errorText: intl.formatMessage({\n        id: 'TransactionPage.markReceived.actionError'\n      })\n    },\n    markReceivedFromPurchasedProps: {\n      inProgress: markReceivedFromPurchasedInProgress,\n      error: markReceivedFromPurchasedError,\n      onTransition: () => onMarkReceivedFromPurchased(currentTransaction.id),\n      buttonText: intl.formatMessage({\n        id: 'TransactionPage.markReceivedFromPurchased.actionButton'\n      }),\n      errorText: intl.formatMessage({\n        id: 'TransactionPage.markReceivedFromPurchased.actionError'\n      })\n    },\n    markDeliveredProps: {\n      inProgress: markDeliveredInProgress,\n      error: markDeliveredError,\n      onTransition: () => onMarkDelivered(currentTransaction.id),\n      buttonText: intl.formatMessage({\n        id: isShippable ? 'TransactionPage.markShipped.actionButton' : 'TransactionPage.markDelivered.actionButton'\n      }),\n      errorText: intl.formatMessage({\n        id: 'TransactionPage.markDelivered.actionError'\n      })\n    },\n    leaveReviewProps: {\n      inProgress: sendReviewInProgress,\n      error: sendReviewError,\n      onTransition: onOpenReviewModal,\n      buttonText: intl.formatMessage({\n        id: 'TransactionPage.leaveReview.actionButton'\n      }),\n      errorText: intl.formatMessage({\n        id: 'TransactionPage.leaveReview.actionError'\n      })\n    },\n    nextTransitions: processTransitions,\n    onSubmitOrderRequest: handleSubmitOrderRequest,\n    timeSlots: timeSlots,\n    fetchTimeSlotsError: fetchTimeSlotsError,\n    onFetchTransactionLineItems: onFetchTransactionLineItems,\n    lineItems: lineItems,\n    fetchLineItemsInProgress: fetchLineItemsInProgress,\n    fetchLineItemsError: fetchLineItemsError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 5\n    }\n  }) : loadingOrFailedFetching;\n  return /*#__PURE__*/React.createElement(Page, {\n    title: intl.formatMessage({\n      id: 'TransactionPage.title'\n    }, {\n      title: listingTitle\n    }),\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 11\n    }\n  }, panel), /*#__PURE__*/React.createElement(ReviewModal, {\n    id: \"ReviewOrderModal\",\n    isOpen: state.isReviewModalOpen,\n    onCloseModal: () => setState(prevState => ({ ...prevState,\n      isReviewModalOpen: false\n    })),\n    onManageDisableScrolling: onManageDisableScrolling,\n    onSubmitReview: onSubmitReview,\n    revieweeName: otherUserDisplayName,\n    reviewSent: state.reviewSubmitted,\n    sendReviewInProgress: sendReviewInProgress,\n    sendReviewError: sendReviewError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DisputeModal, {\n    id: \"DisputeOrderModal\",\n    isOpen: state.isDisputeModalOpen,\n    onCloseModal: () => setState(prevState => ({ ...prevState,\n      isDisputeModalOpen: false\n    })),\n    onManageDisableScrolling: onManageDisableScrolling,\n    onDisputeOrder: onDisputeOrder,\n    disputeSubmitted: state.disputeSubmitted,\n    disputeInProgress: disputeInProgress,\n    disputeError: disputeError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    className: css.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(TransactionPageComponent, \"WdNASY0Gt0K0E0VAZWjwyQlPrQM=\");\n\n_c = TransactionPageComponent;\nTransactionPageComponent.defaultProps = {\n  currentUser: null,\n  fetchTransactionError: null,\n  disputeError: null,\n  markDeliveredError: null,\n  markReceivedError: null,\n  markReceivedFromPurchasedError: null,\n  transaction: null,\n  fetchMessagesError: null,\n  initialMessageFailedToTransaction: null,\n  savePaymentMethodFailed: false,\n  sendMessageError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n  lineItems: null,\n  fetchLineItemsError: null\n};\nTransactionPageComponent.propTypes = {\n  params: shape({\n    id: string\n  }).isRequired,\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\n  currentUser: propTypes.currentUser,\n  fetchTransactionError: propTypes.error,\n  markReceivedInProgress: bool.isRequired,\n  markReceivedError: propTypes.error,\n  onMarkReceived: func.isRequired,\n  markReceivedFromPurchasedInProgress: bool.isRequired,\n  markReceivedFromPurchasedError: propTypes.error,\n  onMarkReceivedFromPurchased: func.isRequired,\n  markDeliveredInProgress: bool.isRequired,\n  markDeliveredError: propTypes.error,\n  onMarkDelivered: func.isRequired,\n  disputeInProgress: bool.isRequired,\n  disputeError: propTypes.error,\n  onDispute: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  transaction: propTypes.transaction,\n  fetchMessagesError: propTypes.error,\n  totalMessagePages: number.isRequired,\n  oldestMessagePageFetched: number.isRequired,\n  messages: arrayOf(propTypes.message).isRequired,\n  initialMessageFailedToTransaction: propTypes.uuid,\n  savePaymentMethodFailed: bool,\n  sendMessageInProgress: bool.isRequired,\n  sendMessageError: propTypes.error,\n  onShowMoreMessages: func.isRequired,\n  onSendMessage: func.isRequired,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  fetchTimeSlotsError: propTypes.error,\n  callSetInitialValues: func.isRequired,\n  onInitializeCardPaymentData: func.isRequired,\n  onFetchTransactionLineItems: func.isRequired,\n  // line items\n  lineItems: array,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    fetchTransactionError,\n    disputeInProgress,\n    disputeError,\n    markReceivedInProgress,\n    markReceivedError,\n    markReceivedFromPurchasedInProgress,\n    markReceivedFromPurchasedError,\n    markDeliveredInProgress,\n    markDeliveredError,\n    transactionRef,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError\n  } = state.TransactionPage;\n  const {\n    currentUser\n  } = state.user;\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\n  const transaction = transactions.length > 0 ? transactions[0] : null;\n  return {\n    currentUser,\n    fetchTransactionError,\n    disputeInProgress,\n    disputeError,\n    markReceivedInProgress,\n    markReceivedError,\n    markReceivedFromPurchasedInProgress,\n    markReceivedFromPurchasedError,\n    markDeliveredInProgress,\n    markDeliveredError,\n    scrollingDisabled: isScrollingDisabled(state),\n    transaction,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDispute: (transactionId, disputeReason) => dispatch(dispute(transactionId, disputeReason)),\n    onMarkReceived: transactionId => dispatch(markReceived(transactionId)),\n    onMarkReceivedFromPurchased: transactionId => dispatch(markReceivedFromPurchased(transactionId)),\n    onMarkDelivered: transactionId => dispatch(markDelivered(transactionId)),\n    onShowMoreMessages: txId => dispatch(fetchMoreMessages(txId)),\n    onSendMessage: (txId, message) => dispatch(sendMessage(txId, message)),\n    onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n    onSendReview: (role, tx, reviewRating, reviewContent) => dispatch(sendReview(role, tx, reviewRating, reviewContent)),\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values)),\n    onInitializeCardPaymentData: () => dispatch(initializeCardPaymentData()),\n    onFetchTransactionLineItems: (orderData, listingId, isOwnListing) => dispatch(fetchTransactionLineItems(orderData, listingId, isOwnListing))\n  };\n};\n\nconst TransactionPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(TransactionPageComponent);\nexport default TransactionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPageComponent\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/TransactionPage/TransactionPage.js"],"names":["React","useState","array","arrayOf","bool","func","number","oneOf","shape","string","compose","connect","withRouter","classNames","FormattedMessage","intlShape","injectIntl","createResourceLocatorString","findRouteByRouteName","propTypes","ensureListing","ensureTransaction","timeOfDayFromTimeZoneToLocal","createSlug","txIsPaymentPending","routeConfiguration","getMarketplaceEntities","isScrollingDisabled","manageDisableScrolling","initializeCardPaymentData","NamedRedirect","Page","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","UserDisplayName","TopbarContainer","DisputeModal","ReviewModal","TransactionPanel","dispute","markReceived","markReceivedFromPurchased","markDelivered","sendMessage","sendReview","fetchMoreMessages","fetchTransactionLineItems","css","PROVIDER","CUSTOMER","TransactionPageComponent","props","state","setState","isDisputeModalOpen","disputeSubmitted","isReviewModalOpen","reviewSubmitted","currentUser","initialMessageFailedToTransaction","savePaymentMethodFailed","fetchMessagesError","fetchMessagesInProgress","totalMessagePages","oldestMessagePageFetched","fetchTransactionError","history","intl","messages","onManageDisableScrolling","onSendMessage","onSendReview","onShowMoreMessages","params","scrollingDisabled","sendMessageError","sendMessageInProgress","sendReviewError","sendReviewInProgress","transaction","transactionRole","disputeInProgress","disputeError","onDispute","markReceivedInProgress","markReceivedError","onMarkReceived","markReceivedFromPurchasedInProgress","markReceivedFromPurchasedError","onMarkReceivedFromPurchased","markDeliveredInProgress","markDeliveredError","onMarkDelivered","timeSlots","fetchTimeSlotsError","processTransitions","callSetInitialValues","onInitializeCardPaymentData","onFetchTransactionLineItems","lineItems","fetchLineItemsInProgress","fetchLineItemsError","currentTransaction","currentListing","listing","isProviderRole","isCustomerRole","redirectToCheckoutPageWithInitialValues","initialValues","routes","setInitialValues","push","id","uuid","slug","attributes","title","currentBooking","booking","bookingDatesMaybe","bookingDates","bookingStart","start","apiTimeZone","bookingEnd","end","orderData","handleSubmitOrderRequest","values","quantity","quantityRaw","otherOrderData","startDate","endDate","Number","parseInt","confirmPaymentError","onOpenReviewModal","prevState","onSubmitReview","reviewRating","reviewContent","rating","then","r","catch","e","onOpenDisputeModal","onDisputeOrder","disputeReason","deletedListingTitle","formatMessage","listingTitle","deleted","isDataAvailable","customer","provider","isShippable","protectedData","deliveryMethod","isOwnSale","isOwnOrder","console","error","tab","detailsClassName","tabContent","tabContentVisible","fetchErrorMessage","loadingMessage","loadingOrFailedFetching","loading","initialMessageFailed","otherUserDisplayName","panel","inProgress","onTransition","buttonText","errorText","root","footer","defaultProps","isRequired","message","timeSlot","location","search","mapStateToProps","transactionRef","TransactionPage","user","transactions","length","mapDispatchToProps","dispatch","transactionId","txId","componentId","disableScrolling","role","tx","listingId","isOwnListing"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { array, arrayOf, bool, func, number, oneOf, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\r\nimport { propTypes } from '../../util/types';\r\nimport { ensureListing, ensureTransaction } from '../../util/data';\r\nimport { timeOfDayFromTimeZoneToLocal } from '../../util/dates';\r\nimport { createSlug } from '../../util/urlHelpers';\r\nimport { txIsPaymentPending } from '../../util/transaction';\r\nimport routeConfiguration from '../../routing/routeConfiguration';\r\n\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/UI.duck';\r\nimport { initializeCardPaymentData } from '../../ducks/stripe.duck.js';\r\n\r\nimport {\r\n  NamedRedirect,\r\n  Page,\r\n  LayoutSingleColumn,\r\n  LayoutWrapperTopbar,\r\n  LayoutWrapperMain,\r\n  LayoutWrapperFooter,\r\n  Footer,\r\n  UserDisplayName,\r\n} from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport DisputeModal from './DisputeModal/DisputeModal';\r\nimport ReviewModal from './ReviewModal/ReviewModal';\r\nimport TransactionPanel from './TransactionPanel/TransactionPanel';\r\n\r\nimport {\r\n  dispute,\r\n  markReceived,\r\n  markReceivedFromPurchased,\r\n  markDelivered,\r\n  sendMessage,\r\n  sendReview,\r\n  fetchMoreMessages,\r\n  fetchTransactionLineItems,\r\n} from './TransactionPage.duck';\r\nimport css from './TransactionPage.module.css';\r\n\r\nconst PROVIDER = 'provider';\r\nconst CUSTOMER = 'customer';\r\n\r\n// TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\r\nexport const TransactionPageComponent = props => {\r\n  const [state, setState] = useState({\r\n    isDisputeModalOpen: false,\r\n    disputeSubmitted: false,\r\n    isReviewModalOpen: false,\r\n    reviewSubmitted: false,\r\n  });\r\n  const {\r\n    currentUser,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    fetchMessagesError,\r\n    fetchMessagesInProgress,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    fetchTransactionError,\r\n    history,\r\n    intl,\r\n    messages,\r\n    onManageDisableScrolling,\r\n    onSendMessage,\r\n    onSendReview,\r\n    onShowMoreMessages,\r\n    params,\r\n    scrollingDisabled,\r\n    sendMessageError,\r\n    sendMessageInProgress,\r\n    sendReviewError,\r\n    sendReviewInProgress,\r\n    transaction,\r\n    transactionRole,\r\n    disputeInProgress,\r\n    disputeError,\r\n    onDispute,\r\n    markReceivedInProgress,\r\n    markReceivedError,\r\n    onMarkReceived,\r\n    markReceivedFromPurchasedInProgress,\r\n    markReceivedFromPurchasedError,\r\n    onMarkReceivedFromPurchased,\r\n    markDeliveredInProgress,\r\n    markDeliveredError,\r\n    onMarkDelivered,\r\n    timeSlots,\r\n    fetchTimeSlotsError,\r\n    processTransitions,\r\n    callSetInitialValues,\r\n    onInitializeCardPaymentData,\r\n    onFetchTransactionLineItems,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  } = props;\r\n\r\n  const currentTransaction = ensureTransaction(transaction);\r\n  const currentListing = ensureListing(currentTransaction.listing);\r\n  const isProviderRole = transactionRole === PROVIDER;\r\n  const isCustomerRole = transactionRole === CUSTOMER;\r\n\r\n  const redirectToCheckoutPageWithInitialValues = (initialValues, listing) => {\r\n    const routes = routeConfiguration();\r\n    // Customize checkout page state with current listing and selected bookingDates\r\n    const { setInitialValues } = findRouteByRouteName('CheckoutPage', routes);\r\n    callSetInitialValues(setInitialValues, initialValues);\r\n\r\n    // Clear previous Stripe errors from store if there is any\r\n    onInitializeCardPaymentData();\r\n\r\n    // Redirect to CheckoutPage\r\n    history.push(\r\n      createResourceLocatorString(\r\n        'CheckoutPage',\r\n        routes,\r\n        { id: currentListing.id.uuid, slug: createSlug(currentListing.attributes.title) },\r\n        {}\r\n      )\r\n    );\r\n  };\r\n\r\n  // If payment is pending, redirect to CheckoutPage\r\n  if (\r\n    txIsPaymentPending(currentTransaction) &&\r\n    isCustomerRole &&\r\n    currentTransaction.attributes.lineItems\r\n  ) {\r\n    const currentBooking = ensureListing(currentTransaction.booking);\r\n    const bookingDatesMaybe = currentBooking.id\r\n      ? {\r\n          bookingDates: {\r\n            // In day-based booking process, booking start and end come in server's time zone.\r\n            bookingStart: timeOfDayFromTimeZoneToLocal(\r\n              currentBooking.attributes.start,\r\n              apiTimeZone\r\n            ),\r\n            bookingEnd: timeOfDayFromTimeZoneToLocal(currentBooking.attributes.end, apiTimeZone),\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const apiTimeZone = 'Etc/UTC';\r\n    const initialValues = {\r\n      listing: currentListing,\r\n      // Transaction with payment pending should be passed to CheckoutPage\r\n      transaction: currentTransaction,\r\n      // Original orderData content is not available,\r\n      // but it is already used since booking is created.\r\n      // (E.g. quantity is used when booking is created.)\r\n      orderData: {\r\n        ...bookingDatesMaybe,\r\n      },\r\n    };\r\n\r\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\r\n  }\r\n\r\n  // Customer can create a booking, if the tx is in \"enquiry\" state.\r\n  const handleSubmitOrderRequest = values => {\r\n    const { bookingDates, quantity: quantityRaw, ...otherOrderData } = values;\r\n    const bookingDatesMaybe = bookingDates\r\n      ? {\r\n          bookingDates: {\r\n            bookingStart: bookingDates.startDate,\r\n            bookingEnd: bookingDates.endDate,\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const initialValues = {\r\n      listing: currentListing,\r\n      // enquired transaction should be passed to CheckoutPage\r\n      transaction: currentTransaction,\r\n      orderData: {\r\n        ...bookingDatesMaybe,\r\n        quantity: Number.parseInt(quantityRaw, 10),\r\n        ...otherOrderData,\r\n      },\r\n      confirmPaymentError: null,\r\n    };\r\n\r\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\r\n  };\r\n\r\n  // Open review modal\r\n  // This is called from ActivityFeed and from action buttons\r\n  const onOpenReviewModal = () => {\r\n    setState(prevState => ({ ...prevState, isReviewModalOpen: true }));\r\n  };\r\n\r\n  // Submit review and close the review modal\r\n  const onSubmitReview = values => {\r\n    const { reviewRating, reviewContent } = values;\r\n    const rating = Number.parseInt(reviewRating, 10);\r\n    onSendReview(transactionRole, currentTransaction, rating, reviewContent)\r\n      .then(r =>\r\n        setState(prevState => ({ ...prevState, isReviewModalOpen: false, reviewSubmitted: true }))\r\n      )\r\n      .catch(e => {\r\n        // Do nothing.\r\n      });\r\n  };\r\n\r\n  // Open dispute modal\r\n  const onOpenDisputeModal = () => {\r\n    setState(prevState => ({ ...prevState, isDisputeModalOpen: true }));\r\n  };\r\n  // Submit dispute and close the review modal\r\n  const onDisputeOrder = values => {\r\n    const { disputeReason } = values;\r\n    onDispute(currentTransaction.id, disputeReason)\r\n      .then(r => {\r\n        return setState(prevState => ({ ...prevState, disputeSubmitted: true }));\r\n      })\r\n      .catch(e => {\r\n        // Do nothing.\r\n      });\r\n  };\r\n\r\n  const deletedListingTitle = intl.formatMessage({\r\n    id: 'TransactionPage.deletedListing',\r\n  });\r\n  const listingTitle = currentListing.attributes.deleted\r\n    ? deletedListingTitle\r\n    : currentListing.attributes.title;\r\n\r\n  // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\r\n  const isDataAvailable =\r\n    currentUser &&\r\n    currentTransaction.id &&\r\n    currentTransaction.id.uuid === params.id &&\r\n    currentTransaction.attributes.lineItems &&\r\n    currentTransaction.customer &&\r\n    currentTransaction.provider &&\r\n    !fetchTransactionError;\r\n\r\n  const isShippable =\r\n    isDataAvailable && currentTransaction.attributes?.protectedData?.deliveryMethod === 'shipping';\r\n\r\n  const isOwnSale =\r\n    isDataAvailable &&\r\n    isProviderRole &&\r\n    currentUser.id.uuid === currentTransaction.provider.id.uuid;\r\n  const isOwnOrder =\r\n    isDataAvailable &&\r\n    isCustomerRole &&\r\n    currentUser.id.uuid === currentTransaction.customer.id.uuid;\r\n\r\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Tried to access a sale that was not owned by the current user');\r\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'sales' }} />;\r\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Tried to access an order that was not owned by the current user');\r\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'orders' }} />;\r\n  }\r\n\r\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\r\n\r\n  const fetchErrorMessage = isCustomerRole\r\n    ? 'TransactionPage.fetchOrderFailed'\r\n    : 'TransactionPage.fetchSaleFailed';\r\n  const loadingMessage = isCustomerRole\r\n    ? 'TransactionPage.loadingOrderData'\r\n    : 'TransactionPage.loadingSaleData';\r\n\r\n  const loadingOrFailedFetching = fetchTransactionError ? (\r\n    <p className={css.error}>\r\n      <FormattedMessage id={`${fetchErrorMessage}`} />\r\n    </p>\r\n  ) : (\r\n    <p className={css.loading}>\r\n      <FormattedMessage id={`${loadingMessage}`} />\r\n    </p>\r\n  );\r\n\r\n  const initialMessageFailed = !!(\r\n    initialMessageFailedToTransaction &&\r\n    currentTransaction.id &&\r\n    initialMessageFailedToTransaction.uuid === currentTransaction.id.uuid\r\n  );\r\n\r\n  const otherUserDisplayName = isOwnOrder ? (\r\n    <UserDisplayName user={currentTransaction.provider} intl={intl} />\r\n  ) : (\r\n    <UserDisplayName user={currentTransaction.customer} intl={intl} />\r\n  );\r\n\r\n  // TransactionPanel is presentational component\r\n  // that currently handles showing everything inside layout's main view area.\r\n  const panel = isDataAvailable ? (\r\n    <TransactionPanel\r\n      className={detailsClassName}\r\n      currentUser={currentUser}\r\n      transaction={currentTransaction}\r\n      fetchMessagesInProgress={fetchMessagesInProgress}\r\n      totalMessagePages={totalMessagePages}\r\n      oldestMessagePageFetched={oldestMessagePageFetched}\r\n      messages={messages}\r\n      initialMessageFailed={initialMessageFailed}\r\n      savePaymentMethodFailed={savePaymentMethodFailed}\r\n      fetchMessagesError={fetchMessagesError}\r\n      sendMessageInProgress={sendMessageInProgress}\r\n      sendMessageError={sendMessageError}\r\n      onManageDisableScrolling={onManageDisableScrolling}\r\n      onShowMoreMessages={onShowMoreMessages}\r\n      onSendMessage={onSendMessage}\r\n      onOpenReviewModal={onOpenReviewModal}\r\n      onOpenDisputeModal={onOpenDisputeModal}\r\n      transactionRole={transactionRole}\r\n      markReceivedProps={{\r\n        inProgress: markReceivedInProgress,\r\n        error: markReceivedError,\r\n        onTransition: () => onMarkReceived(currentTransaction.id),\r\n        buttonText: intl.formatMessage({\r\n          id: 'TransactionPage.markReceived.actionButton',\r\n        }),\r\n        errorText: intl.formatMessage({\r\n          id: 'TransactionPage.markReceived.actionError',\r\n        }),\r\n      }}\r\n      markReceivedFromPurchasedProps={{\r\n        inProgress: markReceivedFromPurchasedInProgress,\r\n        error: markReceivedFromPurchasedError,\r\n        onTransition: () => onMarkReceivedFromPurchased(currentTransaction.id),\r\n        buttonText: intl.formatMessage({\r\n          id: 'TransactionPage.markReceivedFromPurchased.actionButton',\r\n        }),\r\n        errorText: intl.formatMessage({\r\n          id: 'TransactionPage.markReceivedFromPurchased.actionError',\r\n        }),\r\n      }}\r\n      markDeliveredProps={{\r\n        inProgress: markDeliveredInProgress,\r\n        error: markDeliveredError,\r\n        onTransition: () => onMarkDelivered(currentTransaction.id),\r\n        buttonText: intl.formatMessage({\r\n          id: isShippable\r\n            ? 'TransactionPage.markShipped.actionButton'\r\n            : 'TransactionPage.markDelivered.actionButton',\r\n        }),\r\n        errorText: intl.formatMessage({ id: 'TransactionPage.markDelivered.actionError' }),\r\n      }}\r\n      leaveReviewProps={{\r\n        inProgress: sendReviewInProgress,\r\n        error: sendReviewError,\r\n        onTransition: onOpenReviewModal,\r\n        buttonText: intl.formatMessage({ id: 'TransactionPage.leaveReview.actionButton' }),\r\n        errorText: intl.formatMessage({ id: 'TransactionPage.leaveReview.actionError' }),\r\n      }}\r\n      nextTransitions={processTransitions}\r\n      onSubmitOrderRequest={handleSubmitOrderRequest}\r\n      timeSlots={timeSlots}\r\n      fetchTimeSlotsError={fetchTimeSlotsError}\r\n      onFetchTransactionLineItems={onFetchTransactionLineItems}\r\n      lineItems={lineItems}\r\n      fetchLineItemsInProgress={fetchLineItemsInProgress}\r\n      fetchLineItemsError={fetchLineItemsError}\r\n    />\r\n  ) : (\r\n    loadingOrFailedFetching\r\n  );\r\n\r\n  return (\r\n    <Page\r\n      title={intl.formatMessage({ id: 'TransactionPage.title' }, { title: listingTitle })}\r\n      scrollingDisabled={scrollingDisabled}\r\n    >\r\n      <LayoutSingleColumn>\r\n        <LayoutWrapperTopbar>\r\n          <TopbarContainer />\r\n        </LayoutWrapperTopbar>\r\n        <LayoutWrapperMain>\r\n          <div className={css.root}>{panel}</div>\r\n          <ReviewModal\r\n            id=\"ReviewOrderModal\"\r\n            isOpen={state.isReviewModalOpen}\r\n            onCloseModal={() => setState(prevState => ({ ...prevState, isReviewModalOpen: false }))}\r\n            onManageDisableScrolling={onManageDisableScrolling}\r\n            onSubmitReview={onSubmitReview}\r\n            revieweeName={otherUserDisplayName}\r\n            reviewSent={state.reviewSubmitted}\r\n            sendReviewInProgress={sendReviewInProgress}\r\n            sendReviewError={sendReviewError}\r\n          />\r\n          <DisputeModal\r\n            id=\"DisputeOrderModal\"\r\n            isOpen={state.isDisputeModalOpen}\r\n            onCloseModal={() =>\r\n              setState(prevState => ({ ...prevState, isDisputeModalOpen: false }))\r\n            }\r\n            onManageDisableScrolling={onManageDisableScrolling}\r\n            onDisputeOrder={onDisputeOrder}\r\n            disputeSubmitted={state.disputeSubmitted}\r\n            disputeInProgress={disputeInProgress}\r\n            disputeError={disputeError}\r\n          />\r\n        </LayoutWrapperMain>\r\n        <LayoutWrapperFooter className={css.footer}>\r\n          <Footer />\r\n        </LayoutWrapperFooter>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nTransactionPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  fetchTransactionError: null,\r\n  disputeError: null,\r\n  markDeliveredError: null,\r\n  markReceivedError: null,\r\n  markReceivedFromPurchasedError: null,\r\n  transaction: null,\r\n  fetchMessagesError: null,\r\n  initialMessageFailedToTransaction: null,\r\n  savePaymentMethodFailed: false,\r\n  sendMessageError: null,\r\n  timeSlots: null,\r\n  fetchTimeSlotsError: null,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\nTransactionPageComponent.propTypes = {\r\n  params: shape({ id: string }).isRequired,\r\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  fetchTransactionError: propTypes.error,\r\n  markReceivedInProgress: bool.isRequired,\r\n  markReceivedError: propTypes.error,\r\n  onMarkReceived: func.isRequired,\r\n  markReceivedFromPurchasedInProgress: bool.isRequired,\r\n  markReceivedFromPurchasedError: propTypes.error,\r\n  onMarkReceivedFromPurchased: func.isRequired,\r\n  markDeliveredInProgress: bool.isRequired,\r\n  markDeliveredError: propTypes.error,\r\n  onMarkDelivered: func.isRequired,\r\n  disputeInProgress: bool.isRequired,\r\n  disputeError: propTypes.error,\r\n  onDispute: func.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  transaction: propTypes.transaction,\r\n  fetchMessagesError: propTypes.error,\r\n  totalMessagePages: number.isRequired,\r\n  oldestMessagePageFetched: number.isRequired,\r\n  messages: arrayOf(propTypes.message).isRequired,\r\n  initialMessageFailedToTransaction: propTypes.uuid,\r\n  savePaymentMethodFailed: bool,\r\n  sendMessageInProgress: bool.isRequired,\r\n  sendMessageError: propTypes.error,\r\n  onShowMoreMessages: func.isRequired,\r\n  onSendMessage: func.isRequired,\r\n  timeSlots: arrayOf(propTypes.timeSlot),\r\n  fetchTimeSlotsError: propTypes.error,\r\n  callSetInitialValues: func.isRequired,\r\n  onInitializeCardPaymentData: func.isRequired,\r\n  onFetchTransactionLineItems: func.isRequired,\r\n\r\n  // line items\r\n  lineItems: array,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // from withRouter\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  location: shape({\r\n    search: string,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    fetchTransactionError,\r\n    disputeInProgress,\r\n    disputeError,\r\n    markReceivedInProgress,\r\n    markReceivedError,\r\n    markReceivedFromPurchasedInProgress,\r\n    markReceivedFromPurchasedError,\r\n    markDeliveredInProgress,\r\n    markDeliveredError,\r\n    transactionRef,\r\n    fetchMessagesInProgress,\r\n    fetchMessagesError,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    messages,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    sendMessageInProgress,\r\n    sendMessageError,\r\n    sendReviewInProgress,\r\n    sendReviewError,\r\n    timeSlots,\r\n    fetchTimeSlotsError,\r\n    processTransitions,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  } = state.TransactionPage;\r\n  const { currentUser } = state.user;\r\n\r\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\r\n  const transaction = transactions.length > 0 ? transactions[0] : null;\r\n\r\n  return {\r\n    currentUser,\r\n    fetchTransactionError,\r\n    disputeInProgress,\r\n    disputeError,\r\n    markReceivedInProgress,\r\n    markReceivedError,\r\n    markReceivedFromPurchasedInProgress,\r\n    markReceivedFromPurchasedError,\r\n    markDeliveredInProgress,\r\n    markDeliveredError,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    transaction,\r\n    fetchMessagesInProgress,\r\n    fetchMessagesError,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    messages,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    sendMessageInProgress,\r\n    sendMessageError,\r\n    sendReviewInProgress,\r\n    sendReviewError,\r\n    timeSlots,\r\n    fetchTimeSlotsError,\r\n    processTransitions,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDispute: (transactionId, disputeReason) => dispatch(dispute(transactionId, disputeReason)),\r\n    onMarkReceived: transactionId => dispatch(markReceived(transactionId)),\r\n    onMarkReceivedFromPurchased: transactionId =>\r\n      dispatch(markReceivedFromPurchased(transactionId)),\r\n    onMarkDelivered: transactionId => dispatch(markDelivered(transactionId)),\r\n    onShowMoreMessages: txId => dispatch(fetchMoreMessages(txId)),\r\n    onSendMessage: (txId, message) => dispatch(sendMessage(txId, message)),\r\n    onManageDisableScrolling: (componentId, disableScrolling) =>\r\n      dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n    onSendReview: (role, tx, reviewRating, reviewContent) =>\r\n      dispatch(sendReview(role, tx, reviewRating, reviewContent)),\r\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values)),\r\n    onInitializeCardPaymentData: () => dispatch(initializeCardPaymentData()),\r\n    onFetchTransactionLineItems: (orderData, listingId, isOwnListing) =>\r\n      dispatch(fetchTransactionLineItems(orderData, listingId, isOwnListing)),\r\n  };\r\n};\r\n\r\nconst TransactionPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(TransactionPageComponent);\r\n\r\nexport default TransactionPage;\r\n"]},"metadata":{},"sourceType":"module"}