{"ast":null,"code":"// These helpers are calling FTW's own server-side routes\n// so, they are not directly calling Marketplace API or Integration API.\n// You can find these api endpoints from 'server/api/...' directory\nimport { types as sdkTypes, transit } from './sdkLoader';\nimport config from '../config';\nimport Decimal from 'decimal.js';\nexport const apiBaseUrl = () => {\n  const port = process.env.REACT_APP_DEV_API_SERVER_PORT;\n  const useDevApiServer = process.env.NODE_ENV === 'development' && !!port; // In development, the dev API server is running in a different port\n\n  if (useDevApiServer) {\n    return `http://localhost:${port}`;\n  } // Otherwise, use the same domain and port as the frontend\n\n\n  return `${window.location.origin}`;\n}; // Application type handlers for JS SDK.\n//\n// NOTE: keep in sync with `typeHandlers` in `server/api-util/sdk.js`\n\nexport const typeHandlers = [// Use Decimal type instead of SDK's BigDecimal.\n{\n  type: sdkTypes.BigDecimal,\n  customType: Decimal,\n  writer: v => new sdkTypes.BigDecimal(v.toString()),\n  reader: v => new Decimal(v.value)\n}];\n\nconst serialize = data => {\n  return transit.write(data, {\n    typeHandlers,\n    verbose: config.sdk.transitVerbose\n  });\n};\n\nconst deserialize = str => {\n  return transit.read(str, {\n    typeHandlers\n  });\n};\n\nconst post = (path, body) => {\n  const url = `${apiBaseUrl()}${path}`;\n  const options = {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/transit+json'\n    },\n    body: serialize(body)\n  };\n  return window.fetch(url, options).then(res => {\n    const contentTypeHeader = res.headers.get('Content-Type');\n    const contentType = contentTypeHeader ? contentTypeHeader.split(';')[0] : null;\n\n    if (res.status >= 400) {\n      return res.json().then(data => {\n        let e = new Error();\n        e = Object.assign(e, data);\n        throw e;\n      });\n    }\n\n    if (contentType === 'application/transit+json') {\n      return res.text().then(deserialize);\n    } else if (contentType === 'application/json') {\n      return res.json();\n    }\n\n    return res.text();\n  });\n}; // Fetch transaction line items from the local API endpoint.\n//\n// See `server/api/transaction-line-items.js` to see what data should\n// be sent in the body.\n\n\nexport const transactionLineItems = body => {\n  return post('/api/transaction-line-items', body);\n}; // Initiate a privileged transaction.\n//\n// With privileged transitions, the transactions need to be created\n// from the backend. This endpoint enables sending the order data to\n// the local backend, and passing that to the Marketplace API.\n//\n// See `server/api/initiate-privileged.js` to see what data should be\n// sent in the body.\n\nexport const initiatePrivileged = body => {\n  return post('/api/initiate-privileged', body);\n}; // Transition a transaction with a privileged transition.\n//\n// This is similar to the `initiatePrivileged` above. It will use the\n// backend for the transition. The backend endpoint will add the\n// payment line items to the transition params.\n//\n// See `server/api/transition-privileged.js` to see what data should\n// be sent in the body.\n\nexport const transitionPrivileged = body => {\n  return post('/api/transition-privileged', body);\n}; // Create user with identity provider (e.g. Facebook or Google)\n//\n// If loginWithIdp api call fails and user can't authenticate to Flex with idp\n// we will show option to create a new user with idp.\n// For that user needs to confirm data fetched from the idp.\n// After the confirmation, this endpoint is called to create a new user with confirmed data.\n//\n// See `server/api/auth/createUserWithIdp.js` to see what data should\n// be sent in the body.\n\nexport const createUserWithIdp = body => {\n  return post('/api/auth/create-user-with-idp', body);\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/api.js"],"names":["types","sdkTypes","transit","config","Decimal","apiBaseUrl","port","process","env","REACT_APP_DEV_API_SERVER_PORT","useDevApiServer","NODE_ENV","window","location","origin","typeHandlers","type","BigDecimal","customType","writer","v","toString","reader","value","serialize","data","write","verbose","sdk","transitVerbose","deserialize","str","read","post","path","body","url","options","method","credentials","headers","fetch","then","res","contentTypeHeader","get","contentType","split","status","json","e","Error","Object","assign","text","transactionLineItems","initiatePrivileged","transitionPrivileged","createUserWithIdp"],"mappings":"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","sourcesContent":["// These helpers are calling FTW's own server-side routes\r\n// so, they are not directly calling Marketplace API or Integration API.\r\n// You can find these api endpoints from 'server/api/...' directory\r\n\r\nimport { types as sdkTypes, transit } from './sdkLoader';\r\nimport config from '../config';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const apiBaseUrl = () => {\r\n  const port = process.env.REACT_APP_DEV_API_SERVER_PORT;\r\n  const useDevApiServer = process.env.NODE_ENV === 'development' && !!port;\r\n\r\n  // In development, the dev API server is running in a different port\r\n  if (useDevApiServer) {\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  // Otherwise, use the same domain and port as the frontend\r\n  return `${window.location.origin}`;\r\n};\r\n\r\n// Application type handlers for JS SDK.\r\n//\r\n// NOTE: keep in sync with `typeHandlers` in `server/api-util/sdk.js`\r\nexport const typeHandlers = [\r\n  // Use Decimal type instead of SDK's BigDecimal.\r\n  {\r\n    type: sdkTypes.BigDecimal,\r\n    customType: Decimal,\r\n    writer: v => new sdkTypes.BigDecimal(v.toString()),\r\n    reader: v => new Decimal(v.value),\r\n  },\r\n];\r\n\r\nconst serialize = data => {\r\n  return transit.write(data, { typeHandlers, verbose: config.sdk.transitVerbose });\r\n};\r\n\r\nconst deserialize = str => {\r\n  return transit.read(str, { typeHandlers });\r\n};\r\n\r\nconst post = (path, body) => {\r\n  const url = `${apiBaseUrl()}${path}`;\r\n  const options = {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    headers: {\r\n      'Content-Type': 'application/transit+json',\r\n    },\r\n    body: serialize(body),\r\n  };\r\n  return window.fetch(url, options).then(res => {\r\n    const contentTypeHeader = res.headers.get('Content-Type');\r\n    const contentType = contentTypeHeader ? contentTypeHeader.split(';')[0] : null;\r\n\r\n    if (res.status >= 400) {\r\n      return res.json().then(data => {\r\n        let e = new Error();\r\n        e = Object.assign(e, data);\r\n\r\n        throw e;\r\n      });\r\n    }\r\n    if (contentType === 'application/transit+json') {\r\n      return res.text().then(deserialize);\r\n    } else if (contentType === 'application/json') {\r\n      return res.json();\r\n    }\r\n    return res.text();\r\n  });\r\n};\r\n\r\n// Fetch transaction line items from the local API endpoint.\r\n//\r\n// See `server/api/transaction-line-items.js` to see what data should\r\n// be sent in the body.\r\nexport const transactionLineItems = body => {\r\n  return post('/api/transaction-line-items', body);\r\n};\r\n\r\n// Initiate a privileged transaction.\r\n//\r\n// With privileged transitions, the transactions need to be created\r\n// from the backend. This endpoint enables sending the order data to\r\n// the local backend, and passing that to the Marketplace API.\r\n//\r\n// See `server/api/initiate-privileged.js` to see what data should be\r\n// sent in the body.\r\nexport const initiatePrivileged = body => {\r\n  return post('/api/initiate-privileged', body);\r\n};\r\n\r\n// Transition a transaction with a privileged transition.\r\n//\r\n// This is similar to the `initiatePrivileged` above. It will use the\r\n// backend for the transition. The backend endpoint will add the\r\n// payment line items to the transition params.\r\n//\r\n// See `server/api/transition-privileged.js` to see what data should\r\n// be sent in the body.\r\nexport const transitionPrivileged = body => {\r\n  return post('/api/transition-privileged', body);\r\n};\r\n\r\n// Create user with identity provider (e.g. Facebook or Google)\r\n//\r\n// If loginWithIdp api call fails and user can't authenticate to Flex with idp\r\n// we will show option to create a new user with idp.\r\n// For that user needs to confirm data fetched from the idp.\r\n// After the confirmation, this endpoint is called to create a new user with confirmed data.\r\n//\r\n// See `server/api/auth/createUserWithIdp.js` to see what data should\r\n// be sent in the body.\r\nexport const createUserWithIdp = body => {\r\n  return post('/api/auth/create-user-with-idp', body);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}