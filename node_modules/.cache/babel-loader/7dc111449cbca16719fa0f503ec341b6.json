{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldCheckboxGroup\\\\FieldCheckboxGroup.js\";\n\n/*\r\n * Renders a group of checkboxes that can be used to select\r\n * multiple values from a set of options.\r\n *\r\n * The corresponding component when rendering the selected\r\n * values is PropertyGroup.\r\n *\r\n */\nimport React from 'react';\nimport { arrayOf, bool, node, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FieldArray } from 'react-final-form-arrays';\nimport { FieldCheckbox, ValidationError } from '../../components';\nimport css from './FieldCheckboxGroup.module.css';\n\nconst FieldCheckboxRenderer = props => {\n  const {\n    className,\n    rootClassName,\n    label,\n    twoColumns,\n    id,\n    fields,\n    options,\n    meta\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const listClasses = twoColumns ? classNames(css.list, css.twoColumns) : css.list;\n  return /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, label ? /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }\n  }, label) : null, /*#__PURE__*/React.createElement(\"ul\", {\n    className: listClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, options.map((option, index) => {\n    const fieldId = `${id}.${option.key}`;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fieldId,\n      className: css.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FieldCheckbox, {\n      id: fieldId,\n      name: fields.name,\n      label: option.label,\n      value: option.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(ValidationError, {\n    fieldMeta: { ...meta\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = FieldCheckboxRenderer;\nFieldCheckboxRenderer.defaultProps = {\n  rootClassName: null,\n  className: null,\n  label: null,\n  twoColumns: false\n};\nFieldCheckboxRenderer.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: node.isRequired\n  })).isRequired,\n  twoColumns: bool\n};\n\nconst FieldCheckboxGroup = props => /*#__PURE__*/React.createElement(FieldArray, Object.assign({\n  component: FieldCheckboxRenderer\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 37\n  }\n})); // Name and component are required fields for FieldArray.\n// Component-prop we define in this file, name needs to be passed in\n\n\n_c2 = FieldCheckboxGroup;\nFieldCheckboxGroup.propTypes = {\n  name: string.isRequired\n};\nexport default FieldCheckboxGroup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FieldCheckboxRenderer\");\n$RefreshReg$(_c2, \"FieldCheckboxGroup\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldCheckboxGroup/FieldCheckboxGroup.js"],"names":["React","arrayOf","bool","node","shape","string","classNames","FieldArray","FieldCheckbox","ValidationError","css","FieldCheckboxRenderer","props","className","rootClassName","label","twoColumns","id","fields","options","meta","classes","root","listClasses","list","map","option","index","fieldId","key","item","name","defaultProps","propTypes","isRequired","FieldCheckboxGroup"],"mappings":"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","sourcesContent":["/*\r\n * Renders a group of checkboxes that can be used to select\r\n * multiple values from a set of options.\r\n *\r\n * The corresponding component when rendering the selected\r\n * values is PropertyGroup.\r\n *\r\n */\r\n\r\nimport React from 'react';\r\nimport { arrayOf, bool, node, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { FieldArray } from 'react-final-form-arrays';\r\nimport { FieldCheckbox, ValidationError } from '../../components';\r\n\r\nimport css from './FieldCheckboxGroup.module.css';\r\n\r\nconst FieldCheckboxRenderer = props => {\r\n  const { className, rootClassName, label, twoColumns, id, fields, options, meta } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const listClasses = twoColumns ? classNames(css.list, css.twoColumns) : css.list;\r\n\r\n  return (\r\n    <fieldset className={classes}>\r\n      {label ? <legend>{label}</legend> : null}\r\n      <ul className={listClasses}>\r\n        {options.map((option, index) => {\r\n          const fieldId = `${id}.${option.key}`;\r\n          return (\r\n            <li key={fieldId} className={css.item}>\r\n              <FieldCheckbox\r\n                id={fieldId}\r\n                name={fields.name}\r\n                label={option.label}\r\n                value={option.key}\r\n              />\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <ValidationError fieldMeta={{ ...meta }} />\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nFieldCheckboxRenderer.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  label: null,\r\n  twoColumns: false,\r\n};\r\n\r\nFieldCheckboxRenderer.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  id: string.isRequired,\r\n  label: node,\r\n  options: arrayOf(\r\n    shape({\r\n      key: string.isRequired,\r\n      label: node.isRequired,\r\n    })\r\n  ).isRequired,\r\n  twoColumns: bool,\r\n};\r\n\r\nconst FieldCheckboxGroup = props => <FieldArray component={FieldCheckboxRenderer} {...props} />;\r\n\r\n// Name and component are required fields for FieldArray.\r\n// Component-prop we define in this file, name needs to be passed in\r\nFieldCheckboxGroup.propTypes = {\r\n  name: string.isRequired,\r\n};\r\n\r\nexport default FieldCheckboxGroup;\r\n"]},"metadata":{},"sourceType":"module"}