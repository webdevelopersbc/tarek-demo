{"ast":null,"code":"import { denormalisedResponseEntities, ensureOwnListing } from '../util/data';\nimport { storableError } from '../util/errors';\nimport { transitionsToRequested } from '../util/transaction';\nimport { LISTING_STATE_DRAFT } from '../util/types';\nimport * as log from '../util/log';\nimport { authInfo } from './Auth.duck';\nimport { stripeAccountCreateSuccess } from './stripeConnectAccount.duck';\nimport { util as sdkUtil } from '../util/sdkLoader'; // ================ Action types ================ //\n\nexport const CURRENT_USER_SHOW_REQUEST = 'app/user/CURRENT_USER_SHOW_REQUEST';\nexport const CURRENT_USER_SHOW_SUCCESS = 'app/user/CURRENT_USER_SHOW_SUCCESS';\nexport const CURRENT_USER_SHOW_ERROR = 'app/user/CURRENT_USER_SHOW_ERROR';\nexport const CLEAR_CURRENT_USER = 'app/user/CLEAR_CURRENT_USER';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_ERROR';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS';\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_ERROR = 'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_ERROR';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_REQUEST = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_REQUEST';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS';\nexport const FETCH_CURRENT_USER_HAS_ORDERS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_ERROR';\nexport const SEND_VERIFICATION_EMAIL_REQUEST = 'app/user/SEND_VERIFICATION_EMAIL_REQUEST';\nexport const SEND_VERIFICATION_EMAIL_SUCCESS = 'app/user/SEND_VERIFICATION_EMAIL_SUCCESS';\nexport const SEND_VERIFICATION_EMAIL_ERROR = 'app/user/SEND_VERIFICATION_EMAIL_ERROR'; // ================ Reducer ================ //\n\nconst mergeCurrentUser = (oldCurrentUser, newCurrentUser) => {\n  const {\n    id: oId,\n    type: oType,\n    attributes: oAttr,\n    ...oldRelationships\n  } = oldCurrentUser || {};\n  const {\n    id,\n    type,\n    attributes,\n    ...relationships\n  } = newCurrentUser || {}; // Passing null will remove currentUser entity.\n  // Only relationships are merged.\n  // TODO figure out if sparse fields handling needs a better handling.\n\n  return newCurrentUser === null ? null : oldCurrentUser === null ? newCurrentUser : {\n    id,\n    type,\n    attributes,\n    ...oldRelationships,\n    ...relationships\n  };\n};\n\nconst initialState = {\n  currentUser: null,\n  currentUserShowError: null,\n  currentUserHasListings: false,\n  currentUserHasListingsError: null,\n  currentUserNotificationCount: 0,\n  currentUserNotificationCountError: null,\n  currentUserHasOrders: null,\n  // This is not fetched unless unverified emails exist\n  currentUserHasOrdersError: null,\n  sendVerificationEmailInProgress: false,\n  sendVerificationEmailError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CURRENT_USER_SHOW_REQUEST:\n      return { ...state,\n        currentUserShowError: null\n      };\n\n    case CURRENT_USER_SHOW_SUCCESS:\n      return { ...state,\n        currentUser: mergeCurrentUser(state.currentUser, payload)\n      };\n\n    case CURRENT_USER_SHOW_ERROR:\n      // eslint-disable-next-line no-console\n      console.error(payload);\n      return { ...state,\n        currentUserShowError: payload\n      };\n\n    case CLEAR_CURRENT_USER:\n      return { ...state,\n        currentUser: null,\n        currentUserShowError: null,\n        currentUserHasListings: false,\n        currentUserHasListingsError: null,\n        currentUserNotificationCount: 0,\n        currentUserNotificationCountError: null\n      };\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST:\n      return { ...state,\n        currentUserHasListingsError: null\n      };\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS:\n      return { ...state,\n        currentUserHasListings: payload.hasListings\n      };\n\n    case FETCH_CURRENT_USER_HAS_LISTINGS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return { ...state,\n        currentUserHasListingsError: payload\n      };\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST:\n      return { ...state,\n        currentUserNotificationCountError: null\n      };\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS:\n      return { ...state,\n        currentUserNotificationCount: payload.transactions.length\n      };\n\n    case FETCH_CURRENT_USER_NOTIFICATIONS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return { ...state,\n        currentUserNotificationCountError: payload\n      };\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_REQUEST:\n      return { ...state,\n        currentUserHasOrdersError: null\n      };\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS:\n      return { ...state,\n        currentUserHasOrders: payload.hasOrders\n      };\n\n    case FETCH_CURRENT_USER_HAS_ORDERS_ERROR:\n      console.error(payload); // eslint-disable-line\n\n      return { ...state,\n        currentUserHasOrdersError: payload\n      };\n\n    case SEND_VERIFICATION_EMAIL_REQUEST:\n      return { ...state,\n        sendVerificationEmailInProgress: true,\n        sendVerificationEmailError: null\n      };\n\n    case SEND_VERIFICATION_EMAIL_SUCCESS:\n      return { ...state,\n        sendVerificationEmailInProgress: false\n      };\n\n    case SEND_VERIFICATION_EMAIL_ERROR:\n      return { ...state,\n        sendVerificationEmailInProgress: false,\n        sendVerificationEmailError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\nexport const hasCurrentUserErrors = state => {\n  const {\n    user\n  } = state;\n  return user.currentUserShowError || user.currentUserHasListingsError || user.currentUserNotificationCountError || user.currentUserHasOrdersError;\n};\nexport const verificationSendingInProgress = state => {\n  return state.user.sendVerificationEmailInProgress;\n}; // ================ Action creators ================ //\n\nexport const currentUserShowRequest = () => ({\n  type: CURRENT_USER_SHOW_REQUEST\n});\nexport const currentUserShowSuccess = user => ({\n  type: CURRENT_USER_SHOW_SUCCESS,\n  payload: user\n});\nexport const currentUserShowError = e => ({\n  type: CURRENT_USER_SHOW_ERROR,\n  payload: e,\n  error: true\n});\nexport const clearCurrentUser = () => ({\n  type: CLEAR_CURRENT_USER\n});\n\nconst fetchCurrentUserHasListingsRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST\n});\n\nexport const fetchCurrentUserHasListingsSuccess = hasListings => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS,\n  payload: {\n    hasListings\n  }\n});\n\nconst fetchCurrentUserHasListingsError = e => ({\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchCurrentUserNotificationsRequest = () => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST\n});\n\nexport const fetchCurrentUserNotificationsSuccess = transactions => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS,\n  payload: {\n    transactions\n  }\n});\n\nconst fetchCurrentUserNotificationsError = e => ({\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_ERROR,\n  error: true,\n  payload: e\n});\n\nconst fetchCurrentUserHasOrdersRequest = () => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_REQUEST\n});\n\nexport const fetchCurrentUserHasOrdersSuccess = hasOrders => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS,\n  payload: {\n    hasOrders\n  }\n});\n\nconst fetchCurrentUserHasOrdersError = e => ({\n  type: FETCH_CURRENT_USER_HAS_ORDERS_ERROR,\n  error: true,\n  payload: e\n});\n\nexport const sendVerificationEmailRequest = () => ({\n  type: SEND_VERIFICATION_EMAIL_REQUEST\n});\nexport const sendVerificationEmailSuccess = () => ({\n  type: SEND_VERIFICATION_EMAIL_SUCCESS\n});\nexport const sendVerificationEmailError = e => ({\n  type: SEND_VERIFICATION_EMAIL_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const fetchCurrentUserHasListings = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasListingsRequest());\n  const {\n    currentUser\n  } = getState().user;\n\n  if (!currentUser) {\n    dispatch(fetchCurrentUserHasListingsSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    // Since we are only interested in if the user has\n    // listings, we only need at most one result.\n    page: 1,\n    per_page: 1\n  };\n  return sdk.ownListings.query(params).then(response => {\n    const hasListings = response.data.data && response.data.data.length > 0;\n    const hasPublishedListings = hasListings && ensureOwnListing(response.data.data[0]).attributes.state !== LISTING_STATE_DRAFT;\n    dispatch(fetchCurrentUserHasListingsSuccess(!!hasPublishedListings));\n  }).catch(e => dispatch(fetchCurrentUserHasListingsError(storableError(e))));\n};\nexport const fetchCurrentUserHasOrders = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserHasOrdersRequest());\n\n  if (!getState().user.currentUser) {\n    dispatch(fetchCurrentUserHasOrdersSuccess(false));\n    return Promise.resolve(null);\n  }\n\n  const params = {\n    only: 'order',\n    page: 1,\n    per_page: 1\n  };\n  return sdk.transactions.query(params).then(response => {\n    const hasOrders = response.data.data && response.data.data.length > 0;\n    dispatch(fetchCurrentUserHasOrdersSuccess(!!hasOrders));\n  }).catch(e => dispatch(fetchCurrentUserHasOrdersError(storableError(e))));\n}; // Notificaiton page size is max (100 items on page)\n\nconst NOTIFICATION_PAGE_SIZE = 100;\nexport const fetchCurrentUserNotifications = () => (dispatch, getState, sdk) => {\n  dispatch(fetchCurrentUserNotificationsRequest());\n  const apiQueryParams = {\n    only: 'sale',\n    last_transitions: transitionsToRequested,\n    page: 1,\n    per_page: NOTIFICATION_PAGE_SIZE\n  };\n  sdk.transactions.query(apiQueryParams).then(response => {\n    const transactions = response.data.data;\n    dispatch(fetchCurrentUserNotificationsSuccess(transactions));\n  }).catch(e => dispatch(fetchCurrentUserNotificationsError(storableError(e))));\n};\nexport const fetchCurrentUser = (params = null) => (dispatch, getState, sdk) => {\n  dispatch(currentUserShowRequest());\n  const {\n    isAuthenticated\n  } = getState().Auth;\n\n  if (!isAuthenticated) {\n    // Make sure current user is null\n    dispatch(currentUserShowSuccess(null));\n    return Promise.resolve({});\n  }\n\n  const parameters = params || {\n    include: ['profileImage', 'stripeAccount'],\n    'fields.image': ['variants.square-small', 'variants.square-small2x', 'variants.square-xsmall', 'variants.square-xsmall2x'],\n    'imageVariant.square-xsmall': sdkUtil.objectQueryString({\n      w: 40,\n      h: 40,\n      fit: 'crop'\n    }),\n    'imageVariant.square-xsmall2x': sdkUtil.objectQueryString({\n      w: 80,\n      h: 80,\n      fit: 'crop'\n    })\n  };\n  return sdk.currentUser.show(parameters).then(response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the sdk.currentUser.show response');\n    }\n\n    const currentUser = entities[0]; // Save stripeAccount to store.stripe.stripeAccount if it exists\n\n    if (currentUser.stripeAccount) {\n      dispatch(stripeAccountCreateSuccess(currentUser.stripeAccount));\n    } // set current user id to the logger\n\n\n    log.setUserId(currentUser.id.uuid);\n    dispatch(currentUserShowSuccess(currentUser));\n    return currentUser;\n  }).then(currentUser => {\n    dispatch(fetchCurrentUserHasListings());\n    dispatch(fetchCurrentUserNotifications());\n\n    if (!currentUser.attributes.emailVerified) {\n      dispatch(fetchCurrentUserHasOrders());\n    } // Make sure auth info is up to date\n\n\n    dispatch(authInfo());\n  }).catch(e => {\n    // Make sure auth info is up to date\n    dispatch(authInfo());\n    log.error(e, 'fetch-current-user-failed');\n    dispatch(currentUserShowError(storableError(e)));\n  });\n};\nexport const sendVerificationEmail = () => (dispatch, getState, sdk) => {\n  if (verificationSendingInProgress(getState())) {\n    return Promise.reject(new Error('Verification email sending already in progress'));\n  }\n\n  dispatch(sendVerificationEmailRequest());\n  return sdk.currentUser.sendVerificationEmail().then(() => dispatch(sendVerificationEmailSuccess())).catch(e => dispatch(sendVerificationEmailError(storableError(e))));\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/ducks/user.duck.js"],"names":["denormalisedResponseEntities","ensureOwnListing","storableError","transitionsToRequested","LISTING_STATE_DRAFT","log","authInfo","stripeAccountCreateSuccess","util","sdkUtil","CURRENT_USER_SHOW_REQUEST","CURRENT_USER_SHOW_SUCCESS","CURRENT_USER_SHOW_ERROR","CLEAR_CURRENT_USER","FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST","FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS","FETCH_CURRENT_USER_HAS_LISTINGS_ERROR","FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST","FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS","FETCH_CURRENT_USER_NOTIFICATIONS_ERROR","FETCH_CURRENT_USER_HAS_ORDERS_REQUEST","FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS","FETCH_CURRENT_USER_HAS_ORDERS_ERROR","SEND_VERIFICATION_EMAIL_REQUEST","SEND_VERIFICATION_EMAIL_SUCCESS","SEND_VERIFICATION_EMAIL_ERROR","mergeCurrentUser","oldCurrentUser","newCurrentUser","id","oId","type","oType","attributes","oAttr","oldRelationships","relationships","initialState","currentUser","currentUserShowError","currentUserHasListings","currentUserHasListingsError","currentUserNotificationCount","currentUserNotificationCountError","currentUserHasOrders","currentUserHasOrdersError","sendVerificationEmailInProgress","sendVerificationEmailError","reducer","state","action","payload","console","error","hasListings","transactions","length","hasOrders","hasCurrentUserErrors","user","verificationSendingInProgress","currentUserShowRequest","currentUserShowSuccess","e","clearCurrentUser","fetchCurrentUserHasListingsRequest","fetchCurrentUserHasListingsSuccess","fetchCurrentUserHasListingsError","fetchCurrentUserNotificationsRequest","fetchCurrentUserNotificationsSuccess","fetchCurrentUserNotificationsError","fetchCurrentUserHasOrdersRequest","fetchCurrentUserHasOrdersSuccess","fetchCurrentUserHasOrdersError","sendVerificationEmailRequest","sendVerificationEmailSuccess","fetchCurrentUserHasListings","dispatch","getState","sdk","Promise","resolve","params","page","per_page","ownListings","query","then","response","data","hasPublishedListings","catch","fetchCurrentUserHasOrders","only","NOTIFICATION_PAGE_SIZE","fetchCurrentUserNotifications","apiQueryParams","last_transitions","fetchCurrentUser","isAuthenticated","Auth","parameters","include","objectQueryString","w","h","fit","show","entities","Error","stripeAccount","setUserId","uuid","emailVerified","sendVerificationEmail","reject"],"mappings":"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","sourcesContent":["import { denormalisedResponseEntities, ensureOwnListing } from '../util/data';\r\nimport { storableError } from '../util/errors';\r\nimport { transitionsToRequested } from '../util/transaction';\r\nimport { LISTING_STATE_DRAFT } from '../util/types';\r\nimport * as log from '../util/log';\r\nimport { authInfo } from './Auth.duck';\r\nimport { stripeAccountCreateSuccess } from './stripeConnectAccount.duck';\r\nimport { util as sdkUtil } from '../util/sdkLoader';\r\n\r\n// ================ Action types ================ //\r\n\r\nexport const CURRENT_USER_SHOW_REQUEST = 'app/user/CURRENT_USER_SHOW_REQUEST';\r\nexport const CURRENT_USER_SHOW_SUCCESS = 'app/user/CURRENT_USER_SHOW_SUCCESS';\r\nexport const CURRENT_USER_SHOW_ERROR = 'app/user/CURRENT_USER_SHOW_ERROR';\r\n\r\nexport const CLEAR_CURRENT_USER = 'app/user/CLEAR_CURRENT_USER';\r\n\r\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST =\r\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST';\r\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS =\r\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS';\r\nexport const FETCH_CURRENT_USER_HAS_LISTINGS_ERROR =\r\n  'app/user/FETCH_CURRENT_USER_HAS_LISTINGS_ERROR';\r\n\r\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST =\r\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST';\r\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS =\r\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS';\r\nexport const FETCH_CURRENT_USER_NOTIFICATIONS_ERROR =\r\n  'app/user/FETCH_CURRENT_USER_NOTIFICATIONS_ERROR';\r\n\r\nexport const FETCH_CURRENT_USER_HAS_ORDERS_REQUEST =\r\n  'app/user/FETCH_CURRENT_USER_HAS_ORDERS_REQUEST';\r\nexport const FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS =\r\n  'app/user/FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS';\r\nexport const FETCH_CURRENT_USER_HAS_ORDERS_ERROR = 'app/user/FETCH_CURRENT_USER_HAS_ORDERS_ERROR';\r\n\r\nexport const SEND_VERIFICATION_EMAIL_REQUEST = 'app/user/SEND_VERIFICATION_EMAIL_REQUEST';\r\nexport const SEND_VERIFICATION_EMAIL_SUCCESS = 'app/user/SEND_VERIFICATION_EMAIL_SUCCESS';\r\nexport const SEND_VERIFICATION_EMAIL_ERROR = 'app/user/SEND_VERIFICATION_EMAIL_ERROR';\r\n\r\n// ================ Reducer ================ //\r\n\r\nconst mergeCurrentUser = (oldCurrentUser, newCurrentUser) => {\r\n  const { id: oId, type: oType, attributes: oAttr, ...oldRelationships } = oldCurrentUser || {};\r\n  const { id, type, attributes, ...relationships } = newCurrentUser || {};\r\n\r\n  // Passing null will remove currentUser entity.\r\n  // Only relationships are merged.\r\n  // TODO figure out if sparse fields handling needs a better handling.\r\n  return newCurrentUser === null\r\n    ? null\r\n    : oldCurrentUser === null\r\n    ? newCurrentUser\r\n    : { id, type, attributes, ...oldRelationships, ...relationships };\r\n};\r\n\r\nconst initialState = {\r\n  currentUser: null,\r\n  currentUserShowError: null,\r\n  currentUserHasListings: false,\r\n  currentUserHasListingsError: null,\r\n  currentUserNotificationCount: 0,\r\n  currentUserNotificationCountError: null,\r\n  currentUserHasOrders: null, // This is not fetched unless unverified emails exist\r\n  currentUserHasOrdersError: null,\r\n  sendVerificationEmailInProgress: false,\r\n  sendVerificationEmailError: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action = {}) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case CURRENT_USER_SHOW_REQUEST:\r\n      return { ...state, currentUserShowError: null };\r\n    case CURRENT_USER_SHOW_SUCCESS:\r\n      return { ...state, currentUser: mergeCurrentUser(state.currentUser, payload) };\r\n    case CURRENT_USER_SHOW_ERROR:\r\n      // eslint-disable-next-line no-console\r\n      console.error(payload);\r\n      return { ...state, currentUserShowError: payload };\r\n\r\n    case CLEAR_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        currentUserShowError: null,\r\n        currentUserHasListings: false,\r\n        currentUserHasListingsError: null,\r\n        currentUserNotificationCount: 0,\r\n        currentUserNotificationCountError: null,\r\n      };\r\n\r\n    case FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST:\r\n      return { ...state, currentUserHasListingsError: null };\r\n    case FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS:\r\n      return { ...state, currentUserHasListings: payload.hasListings };\r\n    case FETCH_CURRENT_USER_HAS_LISTINGS_ERROR:\r\n      console.error(payload); // eslint-disable-line\r\n      return { ...state, currentUserHasListingsError: payload };\r\n\r\n    case FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST:\r\n      return { ...state, currentUserNotificationCountError: null };\r\n    case FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS:\r\n      return { ...state, currentUserNotificationCount: payload.transactions.length };\r\n    case FETCH_CURRENT_USER_NOTIFICATIONS_ERROR:\r\n      console.error(payload); // eslint-disable-line\r\n      return { ...state, currentUserNotificationCountError: payload };\r\n\r\n    case FETCH_CURRENT_USER_HAS_ORDERS_REQUEST:\r\n      return { ...state, currentUserHasOrdersError: null };\r\n    case FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS:\r\n      return { ...state, currentUserHasOrders: payload.hasOrders };\r\n    case FETCH_CURRENT_USER_HAS_ORDERS_ERROR:\r\n      console.error(payload); // eslint-disable-line\r\n      return { ...state, currentUserHasOrdersError: payload };\r\n\r\n    case SEND_VERIFICATION_EMAIL_REQUEST:\r\n      return {\r\n        ...state,\r\n        sendVerificationEmailInProgress: true,\r\n        sendVerificationEmailError: null,\r\n      };\r\n    case SEND_VERIFICATION_EMAIL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        sendVerificationEmailInProgress: false,\r\n      };\r\n    case SEND_VERIFICATION_EMAIL_ERROR:\r\n      return {\r\n        ...state,\r\n        sendVerificationEmailInProgress: false,\r\n        sendVerificationEmailError: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ================ Selectors ================ //\r\n\r\nexport const hasCurrentUserErrors = state => {\r\n  const { user } = state;\r\n  return (\r\n    user.currentUserShowError ||\r\n    user.currentUserHasListingsError ||\r\n    user.currentUserNotificationCountError ||\r\n    user.currentUserHasOrdersError\r\n  );\r\n};\r\n\r\nexport const verificationSendingInProgress = state => {\r\n  return state.user.sendVerificationEmailInProgress;\r\n};\r\n\r\n// ================ Action creators ================ //\r\n\r\nexport const currentUserShowRequest = () => ({ type: CURRENT_USER_SHOW_REQUEST });\r\n\r\nexport const currentUserShowSuccess = user => ({\r\n  type: CURRENT_USER_SHOW_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const currentUserShowError = e => ({\r\n  type: CURRENT_USER_SHOW_ERROR,\r\n  payload: e,\r\n  error: true,\r\n});\r\n\r\nexport const clearCurrentUser = () => ({ type: CLEAR_CURRENT_USER });\r\n\r\nconst fetchCurrentUserHasListingsRequest = () => ({\r\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_REQUEST,\r\n});\r\n\r\nexport const fetchCurrentUserHasListingsSuccess = hasListings => ({\r\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_SUCCESS,\r\n  payload: { hasListings },\r\n});\r\n\r\nconst fetchCurrentUserHasListingsError = e => ({\r\n  type: FETCH_CURRENT_USER_HAS_LISTINGS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nconst fetchCurrentUserNotificationsRequest = () => ({\r\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_REQUEST,\r\n});\r\n\r\nexport const fetchCurrentUserNotificationsSuccess = transactions => ({\r\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_SUCCESS,\r\n  payload: { transactions },\r\n});\r\n\r\nconst fetchCurrentUserNotificationsError = e => ({\r\n  type: FETCH_CURRENT_USER_NOTIFICATIONS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nconst fetchCurrentUserHasOrdersRequest = () => ({\r\n  type: FETCH_CURRENT_USER_HAS_ORDERS_REQUEST,\r\n});\r\n\r\nexport const fetchCurrentUserHasOrdersSuccess = hasOrders => ({\r\n  type: FETCH_CURRENT_USER_HAS_ORDERS_SUCCESS,\r\n  payload: { hasOrders },\r\n});\r\n\r\nconst fetchCurrentUserHasOrdersError = e => ({\r\n  type: FETCH_CURRENT_USER_HAS_ORDERS_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\nexport const sendVerificationEmailRequest = () => ({\r\n  type: SEND_VERIFICATION_EMAIL_REQUEST,\r\n});\r\n\r\nexport const sendVerificationEmailSuccess = () => ({\r\n  type: SEND_VERIFICATION_EMAIL_SUCCESS,\r\n});\r\n\r\nexport const sendVerificationEmailError = e => ({\r\n  type: SEND_VERIFICATION_EMAIL_ERROR,\r\n  error: true,\r\n  payload: e,\r\n});\r\n\r\n// ================ Thunks ================ //\r\n\r\nexport const fetchCurrentUserHasListings = () => (dispatch, getState, sdk) => {\r\n  dispatch(fetchCurrentUserHasListingsRequest());\r\n  const { currentUser } = getState().user;\r\n\r\n  if (!currentUser) {\r\n    dispatch(fetchCurrentUserHasListingsSuccess(false));\r\n    return Promise.resolve(null);\r\n  }\r\n\r\n  const params = {\r\n    // Since we are only interested in if the user has\r\n    // listings, we only need at most one result.\r\n    page: 1,\r\n    per_page: 1,\r\n  };\r\n\r\n  return sdk.ownListings\r\n    .query(params)\r\n    .then(response => {\r\n      const hasListings = response.data.data && response.data.data.length > 0;\r\n\r\n      const hasPublishedListings =\r\n        hasListings &&\r\n        ensureOwnListing(response.data.data[0]).attributes.state !== LISTING_STATE_DRAFT;\r\n      dispatch(fetchCurrentUserHasListingsSuccess(!!hasPublishedListings));\r\n    })\r\n    .catch(e => dispatch(fetchCurrentUserHasListingsError(storableError(e))));\r\n};\r\n\r\nexport const fetchCurrentUserHasOrders = () => (dispatch, getState, sdk) => {\r\n  dispatch(fetchCurrentUserHasOrdersRequest());\r\n\r\n  if (!getState().user.currentUser) {\r\n    dispatch(fetchCurrentUserHasOrdersSuccess(false));\r\n    return Promise.resolve(null);\r\n  }\r\n\r\n  const params = {\r\n    only: 'order',\r\n    page: 1,\r\n    per_page: 1,\r\n  };\r\n\r\n  return sdk.transactions\r\n    .query(params)\r\n    .then(response => {\r\n      const hasOrders = response.data.data && response.data.data.length > 0;\r\n      dispatch(fetchCurrentUserHasOrdersSuccess(!!hasOrders));\r\n    })\r\n    .catch(e => dispatch(fetchCurrentUserHasOrdersError(storableError(e))));\r\n};\r\n\r\n// Notificaiton page size is max (100 items on page)\r\nconst NOTIFICATION_PAGE_SIZE = 100;\r\n\r\nexport const fetchCurrentUserNotifications = () => (dispatch, getState, sdk) => {\r\n  dispatch(fetchCurrentUserNotificationsRequest());\r\n\r\n  const apiQueryParams = {\r\n    only: 'sale',\r\n    last_transitions: transitionsToRequested,\r\n    page: 1,\r\n    per_page: NOTIFICATION_PAGE_SIZE,\r\n  };\r\n\r\n  sdk.transactions\r\n    .query(apiQueryParams)\r\n    .then(response => {\r\n      const transactions = response.data.data;\r\n      dispatch(fetchCurrentUserNotificationsSuccess(transactions));\r\n    })\r\n    .catch(e => dispatch(fetchCurrentUserNotificationsError(storableError(e))));\r\n};\r\n\r\nexport const fetchCurrentUser = (params = null) => (dispatch, getState, sdk) => {\r\n  dispatch(currentUserShowRequest());\r\n  const { isAuthenticated } = getState().Auth;\r\n\r\n  if (!isAuthenticated) {\r\n    // Make sure current user is null\r\n    dispatch(currentUserShowSuccess(null));\r\n    return Promise.resolve({});\r\n  }\r\n\r\n  const parameters = params || {\r\n    include: ['profileImage', 'stripeAccount'],\r\n    'fields.image': [\r\n      'variants.square-small',\r\n      'variants.square-small2x',\r\n      'variants.square-xsmall',\r\n      'variants.square-xsmall2x',\r\n    ],\r\n    'imageVariant.square-xsmall': sdkUtil.objectQueryString({\r\n      w: 40,\r\n      h: 40,\r\n      fit: 'crop',\r\n    }),\r\n    'imageVariant.square-xsmall2x': sdkUtil.objectQueryString({\r\n      w: 80,\r\n      h: 80,\r\n      fit: 'crop',\r\n    }),\r\n  };\r\n\r\n  return sdk.currentUser\r\n    .show(parameters)\r\n    .then(response => {\r\n      const entities = denormalisedResponseEntities(response);\r\n      if (entities.length !== 1) {\r\n        throw new Error('Expected a resource in the sdk.currentUser.show response');\r\n      }\r\n      const currentUser = entities[0];\r\n\r\n      // Save stripeAccount to store.stripe.stripeAccount if it exists\r\n      if (currentUser.stripeAccount) {\r\n        dispatch(stripeAccountCreateSuccess(currentUser.stripeAccount));\r\n      }\r\n\r\n      // set current user id to the logger\r\n      log.setUserId(currentUser.id.uuid);\r\n      dispatch(currentUserShowSuccess(currentUser));\r\n      return currentUser;\r\n    })\r\n    .then(currentUser => {\r\n      dispatch(fetchCurrentUserHasListings());\r\n      dispatch(fetchCurrentUserNotifications());\r\n      if (!currentUser.attributes.emailVerified) {\r\n        dispatch(fetchCurrentUserHasOrders());\r\n      }\r\n\r\n      // Make sure auth info is up to date\r\n      dispatch(authInfo());\r\n    })\r\n    .catch(e => {\r\n      // Make sure auth info is up to date\r\n      dispatch(authInfo());\r\n      log.error(e, 'fetch-current-user-failed');\r\n      dispatch(currentUserShowError(storableError(e)));\r\n    });\r\n};\r\n\r\nexport const sendVerificationEmail = () => (dispatch, getState, sdk) => {\r\n  if (verificationSendingInProgress(getState())) {\r\n    return Promise.reject(new Error('Verification email sending already in progress'));\r\n  }\r\n  dispatch(sendVerificationEmailRequest());\r\n  return sdk.currentUser\r\n    .sendVerificationEmail()\r\n    .then(() => dispatch(sendVerificationEmailSuccess()))\r\n    .catch(e => dispatch(sendVerificationEmailError(storableError(e))));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}