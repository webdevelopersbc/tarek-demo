{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\NotFoundPage\\\\LocationSearchForm\\\\LocationSearchForm.js\";\nimport React from 'react';\nimport { func, string } from 'prop-types';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\nimport { Form, LocationAutocompleteInput } from '../../../components';\nimport css from './LocationSearchForm.module.css';\n\nconst identity = v => v;\n\nconst LocationSearchFormComponent = props => {\n  const handleChange = location => {\n    if (location.selectedPlace) {\n      // Note that we use `onSubmit` instead of the conventional\n      // `handleSubmit` prop for submitting. We want to autosubmit\n      // when a place is selected, and don't require any extra\n      // validations for the form.\n      props.onSubmit({\n        location\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, props, {\n    render: formRenderProps => {\n      const {\n        rootClassName,\n        className,\n        intl\n      } = formRenderProps;\n      const classes = classNames(rootClassName || css.root, className); // Allow form submit only when the place has changed\n\n      const preventFormSubmit = e => e.preventDefault();\n\n      return /*#__PURE__*/React.createElement(Form, {\n        className: classes,\n        onSubmit: preventFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        name: \"location\",\n        format: identity,\n        render: ({\n          input,\n          meta\n        }) => {\n          const {\n            onChange,\n            ...restInput\n          } = input; // Merge the standard onChange function with custom behaviur. A better solution would\n          // be to use the FormSpy component from Final Form and pass this.onChange to the\n          // onChange prop but that breaks due to insufficient subscription handling.\n          // See: https://github.com/final-form/react-final-form/issues/159\n\n          const searchOnChange = value => {\n            onChange(value);\n            handleChange(value);\n          };\n\n          const searchInput = { ...restInput,\n            onChange: searchOnChange\n          };\n          return /*#__PURE__*/React.createElement(LocationAutocompleteInput, {\n            placeholder: intl.formatMessage({\n              id: 'LocationSearchForm.placeholder'\n            }),\n            iconClassName: css.searchInputIcon,\n            inputClassName: css.searchInput,\n            predictionsClassName: css.searchPredictions,\n            input: searchInput,\n            meta: meta,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }));\n};\n\n_c = LocationSearchFormComponent;\nLocationSearchFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nLocationSearchFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  onSubmit: func.isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst LocationSearchForm = injectIntl(LocationSearchFormComponent);\n_c2 = LocationSearchForm;\nexport default LocationSearchForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LocationSearchFormComponent\");\n$RefreshReg$(_c2, \"LocationSearchForm\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/NotFoundPage/LocationSearchForm/LocationSearchForm.js"],"names":["React","func","string","Form","FinalForm","Field","classNames","intlShape","injectIntl","LocationAutocompleteInput","css","identity","v","LocationSearchFormComponent","props","handleChange","location","selectedPlace","onSubmit","formRenderProps","rootClassName","className","intl","classes","root","preventFormSubmit","e","preventDefault","input","meta","onChange","restInput","searchOnChange","value","searchInput","formatMessage","id","searchInputIcon","searchPredictions","defaultProps","propTypes","isRequired","LocationSearchForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { func, string } from 'prop-types';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { Form, LocationAutocompleteInput } from '../../../components';\r\n\r\nimport css from './LocationSearchForm.module.css';\r\n\r\nconst identity = v => v;\r\n\r\nconst LocationSearchFormComponent = props => {\r\n  const handleChange = location => {\r\n    if (location.selectedPlace) {\r\n      // Note that we use `onSubmit` instead of the conventional\r\n      // `handleSubmit` prop for submitting. We want to autosubmit\r\n      // when a place is selected, and don't require any extra\r\n      // validations for the form.\r\n      props.onSubmit({ location });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FinalForm\r\n      {...props}\r\n      render={formRenderProps => {\r\n        const { rootClassName, className, intl } = formRenderProps;\r\n        const classes = classNames(rootClassName || css.root, className);\r\n\r\n        // Allow form submit only when the place has changed\r\n        const preventFormSubmit = e => e.preventDefault();\r\n\r\n        return (\r\n          <Form className={classes} onSubmit={preventFormSubmit}>\r\n            <Field\r\n              name=\"location\"\r\n              format={identity}\r\n              render={({ input, meta }) => {\r\n                const { onChange, ...restInput } = input;\r\n\r\n                // Merge the standard onChange function with custom behaviur. A better solution would\r\n                // be to use the FormSpy component from Final Form and pass this.onChange to the\r\n                // onChange prop but that breaks due to insufficient subscription handling.\r\n                // See: https://github.com/final-form/react-final-form/issues/159\r\n                const searchOnChange = value => {\r\n                  onChange(value);\r\n                  handleChange(value);\r\n                };\r\n\r\n                const searchInput = { ...restInput, onChange: searchOnChange };\r\n                return (\r\n                  <LocationAutocompleteInput\r\n                    placeholder={intl.formatMessage({ id: 'LocationSearchForm.placeholder' })}\r\n                    iconClassName={css.searchInputIcon}\r\n                    inputClassName={css.searchInput}\r\n                    predictionsClassName={css.searchPredictions}\r\n                    input={searchInput}\r\n                    meta={meta}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          </Form>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nLocationSearchFormComponent.defaultProps = { rootClassName: null, className: null };\r\n\r\nLocationSearchFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  onSubmit: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst LocationSearchForm = injectIntl(LocationSearchFormComponent);\r\n\r\nexport default LocationSearchForm;\r\n"]},"metadata":{},"sourceType":"module"}