{"ast":null,"code":"import Decimal from 'decimal.js';\nimport moment from 'moment';\nimport { types as sdkTypes } from './sdkLoader';\nimport { daysBetween } from '../util/dates';\nimport { TRANSITION_CONFIRM_PAYMENT, TRANSITION_REQUEST_PAYMENT, TX_TRANSITION_ACTOR_CUSTOMER } from '../util/transaction';\nimport { LISTING_STATE_PUBLISHED, TIME_SLOT_DAY } from '../util/types';\nconst {\n  UUID,\n  LatLng,\n  Money\n} = sdkTypes; // Create a booking that conforms to the util/types booking schema\n\nexport const createBooking = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'booking',\n  attributes: {\n    start: new Date(Date.UTC(2017, 5, 10)),\n    displayStart: new Date(Date.UTC(2017, 5, 10)),\n    end: new Date(Date.UTC(2017, 5, 10)),\n    displayEnd: new Date(Date.UTC(2017, 5, 10)),\n    ...attributes\n  }\n}); // Create a stripeAccount that conforms to the util/types stripeAccount schema\n\nexport const createStripeAccount = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'stripeAccount',\n  attributes: {\n    stripeAccountId: 'acc_testiaccountid',\n    ...attributes\n  }\n}); // Create a user that conforms to the util/types user schema\n\nexport const createUser = (id, attributes = {}) => ({\n  id: new UUID(id),\n  type: 'user',\n  attributes: {\n    banned: false,\n    deleted: false,\n    profile: {\n      displayName: `${id} display name`,\n      abbreviatedName: 'TT'\n    },\n    ...attributes\n  }\n}); // Create a user that conforms to the util/types currentUser schema\n\nexport const createCurrentUser = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'currentUser',\n  attributes: {\n    banned: false,\n    deleted: false,\n    email: `${id}@example.com`,\n    emailVerified: true,\n    profile: {\n      firstName: `${id} first name`,\n      lastName: `${id} last name`,\n      displayName: `${id} display name`,\n      abbreviatedName: `${id} abbreviated name`\n    },\n    ...attributes\n  },\n  ...includes\n}); // Create a user that conforms to the util/types user schema\n\nexport const createImage = id => ({\n  id: new UUID(id),\n  type: 'image',\n  attributes: {\n    variants: {\n      // TODO: add all possible variants here\n      square: {\n        name: 'square',\n        height: 408,\n        width: 408,\n        url: 'https://via.placeholder.com/408x408'\n      },\n      square2x: {\n        name: 'square2x',\n        height: 816,\n        width: 816,\n        url: 'https://via.placeholder.com/816x816'\n      }\n    }\n  }\n}); // Create a user that conforms to the util/types listing schema\n\nexport const createListing = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'listing',\n  attributes: {\n    title: `${id} title`,\n    description: `${id} description`,\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    publicData: {},\n    ...attributes\n  },\n  ...includes\n}); // Create a user that conforms to the util/types ownListing schema\n\nexport const createOwnListing = (id, attributes = {}, includes = {}) => ({\n  id: new UUID(id),\n  type: 'ownListing',\n  attributes: {\n    title: `${id} title`,\n    description: `${id} description`,\n    geolocation: new LatLng(40, 60),\n    deleted: false,\n    state: LISTING_STATE_PUBLISHED,\n    price: new Money(5500, 'USD'),\n    availabilityPlan: {\n      type: 'availability-plan/day',\n      entries: [{\n        dayOfWeek: 'mon',\n        seats: 1\n      }, {\n        dayOfWeek: 'tue',\n        seats: 1\n      }, {\n        dayOfWeek: 'wed',\n        seats: 1\n      }, {\n        dayOfWeek: 'thu',\n        seats: 1\n      }, {\n        dayOfWeek: 'fri',\n        seats: 1\n      }, {\n        dayOfWeek: 'sat',\n        seats: 1\n      }, {\n        dayOfWeek: 'sun',\n        seats: 1\n      }]\n    },\n    publicData: {},\n    ...attributes\n  },\n  ...includes\n});\nexport const createTxTransition = options => {\n  return {\n    createdAt: new Date(Date.UTC(2017, 4, 1)),\n    by: TX_TRANSITION_ACTOR_CUSTOMER,\n    transition: TRANSITION_REQUEST_PAYMENT,\n    ...options\n  };\n};\nexport const createTransaction = options => {\n  const {\n    id,\n    lastTransition = TRANSITION_CONFIRM_PAYMENT,\n    total = new Money(1000, 'USD'),\n    commission = new Money(100, 'USD'),\n    booking = null,\n    listing = null,\n    customer = null,\n    provider = null,\n    reviews = [],\n    lastTransitionedAt = new Date(Date.UTC(2017, 5, 1)),\n    transitions = [createTxTransition({\n      createdAt: new Date(Date.UTC(2017, 4, 1)),\n      by: TX_TRANSITION_ACTOR_CUSTOMER,\n      transition: TRANSITION_REQUEST_PAYMENT\n    }), createTxTransition({\n      createdAt: new Date(Date.UTC(2017, 4, 1, 0, 0, 1)),\n      by: TX_TRANSITION_ACTOR_CUSTOMER,\n      transition: TRANSITION_CONFIRM_PAYMENT\n    })]\n  } = options;\n  const dayCount = booking ? daysBetween(booking.attributes.start, booking.attributes.end) : 1;\n  return {\n    id: new UUID(id),\n    type: 'transaction',\n    attributes: {\n      createdAt: new Date(Date.UTC(2017, 4, 1)),\n      lastTransitionedAt,\n      lastTransition,\n      payinTotal: total,\n      payoutTotal: new Money(total.amount - commission.amount, total.currency),\n      lineItems: [{\n        code: 'line-item/day',\n        includeFor: ['customer', 'provider'],\n        quantity: new Decimal(dayCount),\n        unitPrice: new Money(total.amount / dayCount, total.currency),\n        lineTotal: total,\n        reversal: false\n      }, {\n        code: 'line-item/provider-commission',\n        includeFor: ['provider'],\n        unitPrice: new Money(commission.amount * -1, commission.currency),\n        lineTotal: new Money(commission.amount * -1, commission.currency),\n        reversal: false\n      }],\n      transitions\n    },\n    booking,\n    listing,\n    customer,\n    provider,\n    reviews\n  };\n};\nexport const createMessage = (id, attributes = {}, includes = {}) => {\n  return {\n    id: new UUID(id),\n    type: 'message',\n    attributes: {\n      createdAt: new Date(Date.UTC(2017, 10, 9, 8, 12)),\n      content: `Message ${id}\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`,\n      ...attributes\n    },\n    ...includes\n  };\n};\nexport const createReview = (id, attributes = {}, includes = {}) => {\n  return {\n    id: new UUID(id),\n    attributes: {\n      createdAt: new Date(),\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      rating: 3,\n      state: 'public',\n      type: 'ofProvider',\n      ...attributes\n    },\n    ...includes\n  };\n};\n/**\r\n * Creates an array of time slot objects.\r\n *\r\n * @param {Date} startDate date when the time slots start\r\n * @param {Number} numberOfDays number of time slots to create\r\n *\r\n * @return {Array} array of time slots\r\n */\n\nexport const createTimeSlots = (startDate, numberOfDays) => {\n  const startTime = moment.utc(startDate).startOf('day');\n  return Array.from({\n    length: numberOfDays\n  }, (v, i) => i).map(i => {\n    return {\n      id: new UUID(i),\n      type: 'timeSlot',\n      attributes: {\n        start: moment(startTime).add(i, 'days').toDate(),\n        end: moment(startTime).add(i + 1, 'days').toDate(),\n        type: TIME_SLOT_DAY\n      }\n    };\n  });\n}; // Default config for currency formatting in tests and examples.\n\nexport const currencyConfig = {\n  style: 'currency',\n  currency: 'USD',\n  currencyDisplay: 'symbol',\n  useGrouping: true,\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n};\n\nconst pad = num => {\n  return num >= 0 && num < 10 ? `0${num}` : `${num}`;\n}; // Create fake Internalization object to help with shallow rendering.\n\n\nexport const fakeIntl = {\n  formatDate: d => `${d.getUTCFullYear()}-${pad(d.getUTCMonth() + 1)}-${pad(d.getUTCDate())}`,\n  formatMessage: msg => msg.id,\n  formatNumber: d => d,\n  formatPlural: d => d,\n  formatRelativeTime: d => d,\n  formatTime: d => `${pad(d.getUTCHours())}:${pad(d.getUTCMinutes())}`,\n  now: () => Date.UTC(2017, 10, 23, 12, 59)\n};\n\nconst noop = () => null;\n\nexport const fakeFormProps = {\n  anyTouched: false,\n  asyncValidating: false,\n  dirty: false,\n  form: 'fakeTestForm',\n  invalid: false,\n  pristine: true,\n  clearSubmit: noop,\n  touch: noop,\n  untouch: noop,\n  submit: noop,\n  reset: noop,\n  resetSection: noop,\n  initialize: noop,\n  handleSubmit: noop,\n  destroy: noop,\n  clearAsyncError: noop,\n  clearFields: noop,\n  clearSubmitErrors: noop,\n  change: noop,\n  blur: noop,\n  autofill: noop,\n  asyncValidate: noop,\n  valid: true,\n  submitSucceeded: false,\n  submitFailed: false,\n  submitting: false,\n  pure: true,\n  initialized: true\n}; // Create fake viewport to help with shallow rendering\n\nexport const fakeViewport = {\n  width: 2100,\n  height: 1339\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/test-data.js"],"names":["Decimal","moment","types","sdkTypes","daysBetween","TRANSITION_CONFIRM_PAYMENT","TRANSITION_REQUEST_PAYMENT","TX_TRANSITION_ACTOR_CUSTOMER","LISTING_STATE_PUBLISHED","TIME_SLOT_DAY","UUID","LatLng","Money","createBooking","id","attributes","type","start","Date","UTC","displayStart","end","displayEnd","createStripeAccount","stripeAccountId","createUser","banned","deleted","profile","displayName","abbreviatedName","createCurrentUser","includes","email","emailVerified","firstName","lastName","createImage","variants","square","name","height","width","url","square2x","createListing","title","description","geolocation","state","price","publicData","createOwnListing","availabilityPlan","entries","dayOfWeek","seats","createTxTransition","options","createdAt","by","transition","createTransaction","lastTransition","total","commission","booking","listing","customer","provider","reviews","lastTransitionedAt","transitions","dayCount","payinTotal","payoutTotal","amount","currency","lineItems","code","includeFor","quantity","unitPrice","lineTotal","reversal","createMessage","content","createReview","rating","createTimeSlots","startDate","numberOfDays","startTime","utc","startOf","Array","from","length","v","i","map","add","toDate","currencyConfig","style","currencyDisplay","useGrouping","minimumFractionDigits","maximumFractionDigits","pad","num","fakeIntl","formatDate","d","getUTCFullYear","getUTCMonth","getUTCDate","formatMessage","msg","formatNumber","formatPlural","formatRelativeTime","formatTime","getUTCHours","getUTCMinutes","now","noop","fakeFormProps","anyTouched","asyncValidating","dirty","form","invalid","pristine","clearSubmit","touch","untouch","submit","reset","resetSection","initialize","handleSubmit","destroy","clearAsyncError","clearFields","clearSubmitErrors","change","blur","autofill","asyncValidate","valid","submitSucceeded","submitFailed","submitting","pure","initialized","fakeViewport"],"mappings":"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","sourcesContent":["import Decimal from 'decimal.js';\r\nimport moment from 'moment';\r\nimport { types as sdkTypes } from './sdkLoader';\r\nimport { daysBetween } from '../util/dates';\r\nimport {\r\n  TRANSITION_CONFIRM_PAYMENT,\r\n  TRANSITION_REQUEST_PAYMENT,\r\n  TX_TRANSITION_ACTOR_CUSTOMER,\r\n} from '../util/transaction';\r\nimport { LISTING_STATE_PUBLISHED, TIME_SLOT_DAY } from '../util/types';\r\n\r\nconst { UUID, LatLng, Money } = sdkTypes;\r\n\r\n// Create a booking that conforms to the util/types booking schema\r\nexport const createBooking = (id, attributes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'booking',\r\n  attributes: {\r\n    start: new Date(Date.UTC(2017, 5, 10)),\r\n    displayStart: new Date(Date.UTC(2017, 5, 10)),\r\n    end: new Date(Date.UTC(2017, 5, 10)),\r\n    displayEnd: new Date(Date.UTC(2017, 5, 10)),\r\n    ...attributes,\r\n  },\r\n});\r\n\r\n// Create a stripeAccount that conforms to the util/types stripeAccount schema\r\nexport const createStripeAccount = (id, attributes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'stripeAccount',\r\n  attributes: {\r\n    stripeAccountId: 'acc_testiaccountid',\r\n    ...attributes,\r\n  },\r\n});\r\n\r\n// Create a user that conforms to the util/types user schema\r\nexport const createUser = (id, attributes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'user',\r\n  attributes: {\r\n    banned: false,\r\n    deleted: false,\r\n    profile: {\r\n      displayName: `${id} display name`,\r\n      abbreviatedName: 'TT',\r\n    },\r\n    ...attributes,\r\n  },\r\n});\r\n\r\n// Create a user that conforms to the util/types currentUser schema\r\nexport const createCurrentUser = (id, attributes = {}, includes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'currentUser',\r\n  attributes: {\r\n    banned: false,\r\n    deleted: false,\r\n    email: `${id}@example.com`,\r\n    emailVerified: true,\r\n    profile: {\r\n      firstName: `${id} first name`,\r\n      lastName: `${id} last name`,\r\n      displayName: `${id} display name`,\r\n      abbreviatedName: `${id} abbreviated name`,\r\n    },\r\n    ...attributes,\r\n  },\r\n  ...includes,\r\n});\r\n\r\n// Create a user that conforms to the util/types user schema\r\nexport const createImage = id => ({\r\n  id: new UUID(id),\r\n  type: 'image',\r\n  attributes: {\r\n    variants: {\r\n      // TODO: add all possible variants here\r\n      square: {\r\n        name: 'square',\r\n        height: 408,\r\n        width: 408,\r\n        url: 'https://via.placeholder.com/408x408',\r\n      },\r\n      square2x: {\r\n        name: 'square2x',\r\n        height: 816,\r\n        width: 816,\r\n        url: 'https://via.placeholder.com/816x816',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\n// Create a user that conforms to the util/types listing schema\r\nexport const createListing = (id, attributes = {}, includes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'listing',\r\n  attributes: {\r\n    title: `${id} title`,\r\n    description: `${id} description`,\r\n    geolocation: new LatLng(40, 60),\r\n    deleted: false,\r\n    state: LISTING_STATE_PUBLISHED,\r\n    price: new Money(5500, 'USD'),\r\n    publicData: {},\r\n    ...attributes,\r\n  },\r\n  ...includes,\r\n});\r\n\r\n// Create a user that conforms to the util/types ownListing schema\r\nexport const createOwnListing = (id, attributes = {}, includes = {}) => ({\r\n  id: new UUID(id),\r\n  type: 'ownListing',\r\n  attributes: {\r\n    title: `${id} title`,\r\n    description: `${id} description`,\r\n    geolocation: new LatLng(40, 60),\r\n    deleted: false,\r\n    state: LISTING_STATE_PUBLISHED,\r\n    price: new Money(5500, 'USD'),\r\n    availabilityPlan: {\r\n      type: 'availability-plan/day',\r\n      entries: [\r\n        { dayOfWeek: 'mon', seats: 1 },\r\n        { dayOfWeek: 'tue', seats: 1 },\r\n        { dayOfWeek: 'wed', seats: 1 },\r\n        { dayOfWeek: 'thu', seats: 1 },\r\n        { dayOfWeek: 'fri', seats: 1 },\r\n        { dayOfWeek: 'sat', seats: 1 },\r\n        { dayOfWeek: 'sun', seats: 1 },\r\n      ],\r\n    },\r\n    publicData: {},\r\n    ...attributes,\r\n  },\r\n  ...includes,\r\n});\r\n\r\nexport const createTxTransition = options => {\r\n  return {\r\n    createdAt: new Date(Date.UTC(2017, 4, 1)),\r\n    by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n    transition: TRANSITION_REQUEST_PAYMENT,\r\n    ...options,\r\n  };\r\n};\r\n\r\nexport const createTransaction = options => {\r\n  const {\r\n    id,\r\n    lastTransition = TRANSITION_CONFIRM_PAYMENT,\r\n    total = new Money(1000, 'USD'),\r\n    commission = new Money(100, 'USD'),\r\n    booking = null,\r\n    listing = null,\r\n    customer = null,\r\n    provider = null,\r\n    reviews = [],\r\n    lastTransitionedAt = new Date(Date.UTC(2017, 5, 1)),\r\n    transitions = [\r\n      createTxTransition({\r\n        createdAt: new Date(Date.UTC(2017, 4, 1)),\r\n        by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n        transition: TRANSITION_REQUEST_PAYMENT,\r\n      }),\r\n      createTxTransition({\r\n        createdAt: new Date(Date.UTC(2017, 4, 1, 0, 0, 1)),\r\n        by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n        transition: TRANSITION_CONFIRM_PAYMENT,\r\n      }),\r\n    ],\r\n  } = options;\r\n  const dayCount = booking ? daysBetween(booking.attributes.start, booking.attributes.end) : 1;\r\n  return {\r\n    id: new UUID(id),\r\n    type: 'transaction',\r\n    attributes: {\r\n      createdAt: new Date(Date.UTC(2017, 4, 1)),\r\n      lastTransitionedAt,\r\n      lastTransition,\r\n      payinTotal: total,\r\n      payoutTotal: new Money(total.amount - commission.amount, total.currency),\r\n      lineItems: [\r\n        {\r\n          code: 'line-item/day',\r\n          includeFor: ['customer', 'provider'],\r\n          quantity: new Decimal(dayCount),\r\n          unitPrice: new Money(total.amount / dayCount, total.currency),\r\n          lineTotal: total,\r\n          reversal: false,\r\n        },\r\n        {\r\n          code: 'line-item/provider-commission',\r\n          includeFor: ['provider'],\r\n          unitPrice: new Money(commission.amount * -1, commission.currency),\r\n          lineTotal: new Money(commission.amount * -1, commission.currency),\r\n          reversal: false,\r\n        },\r\n      ],\r\n      transitions,\r\n    },\r\n    booking,\r\n    listing,\r\n    customer,\r\n    provider,\r\n    reviews,\r\n  };\r\n};\r\n\r\nexport const createMessage = (id, attributes = {}, includes = {}) => {\r\n  return {\r\n    id: new UUID(id),\r\n    type: 'message',\r\n    attributes: {\r\n      createdAt: new Date(Date.UTC(2017, 10, 9, 8, 12)),\r\n      content: `Message ${id}\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`,\r\n      ...attributes,\r\n    },\r\n    ...includes,\r\n  };\r\n};\r\n\r\nexport const createReview = (id, attributes = {}, includes = {}) => {\r\n  return {\r\n    id: new UUID(id),\r\n    attributes: {\r\n      createdAt: new Date(),\r\n      content:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\r\n      rating: 3,\r\n      state: 'public',\r\n      type: 'ofProvider',\r\n      ...attributes,\r\n    },\r\n    ...includes,\r\n  };\r\n};\r\n\r\n/**\r\n * Creates an array of time slot objects.\r\n *\r\n * @param {Date} startDate date when the time slots start\r\n * @param {Number} numberOfDays number of time slots to create\r\n *\r\n * @return {Array} array of time slots\r\n */\r\nexport const createTimeSlots = (startDate, numberOfDays) => {\r\n  const startTime = moment.utc(startDate).startOf('day');\r\n\r\n  return Array.from({ length: numberOfDays }, (v, i) => i).map(i => {\r\n    return {\r\n      id: new UUID(i),\r\n      type: 'timeSlot',\r\n      attributes: {\r\n        start: moment(startTime)\r\n          .add(i, 'days')\r\n          .toDate(),\r\n        end: moment(startTime)\r\n          .add(i + 1, 'days')\r\n          .toDate(),\r\n        type: TIME_SLOT_DAY,\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\n// Default config for currency formatting in tests and examples.\r\nexport const currencyConfig = {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  currencyDisplay: 'symbol',\r\n  useGrouping: true,\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n};\r\n\r\nconst pad = num => {\r\n  return num >= 0 && num < 10 ? `0${num}` : `${num}`;\r\n};\r\n\r\n// Create fake Internalization object to help with shallow rendering.\r\nexport const fakeIntl = {\r\n  formatDate: d => `${d.getUTCFullYear()}-${pad(d.getUTCMonth() + 1)}-${pad(d.getUTCDate())}`,\r\n  formatMessage: msg => msg.id,\r\n  formatNumber: d => d,\r\n  formatPlural: d => d,\r\n  formatRelativeTime: d => d,\r\n  formatTime: d => `${pad(d.getUTCHours())}:${pad(d.getUTCMinutes())}`,\r\n  now: () => Date.UTC(2017, 10, 23, 12, 59),\r\n};\r\n\r\nconst noop = () => null;\r\n\r\nexport const fakeFormProps = {\r\n  anyTouched: false,\r\n  asyncValidating: false,\r\n  dirty: false,\r\n  form: 'fakeTestForm',\r\n  invalid: false,\r\n  pristine: true,\r\n  clearSubmit: noop,\r\n  touch: noop,\r\n  untouch: noop,\r\n  submit: noop,\r\n  reset: noop,\r\n  resetSection: noop,\r\n  initialize: noop,\r\n  handleSubmit: noop,\r\n  destroy: noop,\r\n  clearAsyncError: noop,\r\n  clearFields: noop,\r\n  clearSubmitErrors: noop,\r\n  change: noop,\r\n  blur: noop,\r\n  autofill: noop,\r\n  asyncValidate: noop,\r\n  valid: true,\r\n  submitSucceeded: false,\r\n  submitFailed: false,\r\n  submitting: false,\r\n  pure: true,\r\n  initialized: true,\r\n};\r\n\r\n// Create fake viewport to help with shallow rendering\r\nexport const fakeViewport = {\r\n  width: 2100,\r\n  height: 1339,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}