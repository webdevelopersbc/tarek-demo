{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SelectSingleFilter\\\\SelectSingleFilterPopup.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, func, node, number, object, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '../../../util/reactIntl';\nimport { Menu, MenuContent, MenuItem, MenuLabel } from '../../../components';\nimport css from './SelectSingleFilterPopup.module.css';\n\nconst optionLabel = (options, key) => {\n  const option = options.find(o => o.key === key);\n  return option ? option.label : key;\n};\n\nconst getQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\n};\n\nclass SelectSingleFilterPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.onToggleActive = this.onToggleActive.bind(this);\n    this.selectOption = this.selectOption.bind(this);\n  }\n\n  onToggleActive(isOpen) {\n    this.setState({\n      isOpen: isOpen\n    });\n  }\n\n  selectOption(queryParamName, option) {\n    this.setState({\n      isOpen: false\n    });\n    this.props.onSelect({\n      [queryParamName]: option\n    });\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      label,\n      options,\n      queryParamNames,\n      initialValues,\n      contentPlacementOffset\n    } = this.props;\n    const queryParamName = getQueryParamName(queryParamNames);\n    const initialValue = initialValues && initialValues[queryParamNames] ? initialValues[queryParamNames] : null; // resolve menu label text and class\n\n    const menuLabel = initialValue ? optionLabel(options, initialValue) : label;\n    const menuLabelClass = initialValue ? css.menuLabelSelected : css.menuLabel;\n    const classes = classNames(rootClassName || css.root, className);\n    return /*#__PURE__*/React.createElement(Menu, {\n      className: classes,\n      useArrow: false,\n      contentPlacementOffset: contentPlacementOffset,\n      onToggleActive: this.onToggleActive,\n      isOpen: this.state.isOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MenuLabel, {\n      className: menuLabelClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, menuLabel), /*#__PURE__*/React.createElement(MenuContent, {\n      className: css.menuContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, options.map(option => {\n      // check if this option is selected\n      const selected = initialValue === option.key; // menu item border class\n\n      const menuItemBorderClass = selected ? css.menuItemBorderSelected : css.menuItemBorder;\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        key: option.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: css.menuItem,\n        onClick: () => this.selectOption(queryParamName, option.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: menuItemBorderClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }), option.label));\n    }), /*#__PURE__*/React.createElement(MenuItem, {\n      key: 'clearLink',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: css.clearMenuItem,\n      onClick: () => this.selectOption(queryParamName, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SelectSingleFilter.popupClear',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nSelectSingleFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  contentPlacementOffset: 0\n};\nSelectSingleFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  queryParamNames: arrayOf(string).isRequired,\n  label: node.isRequired,\n  onSelect: func.isRequired,\n  options: arrayOf(shape({\n    key: string.isRequired,\n    label: string.isRequired\n  })).isRequired,\n  initialValues: object,\n  contentPlacementOffset: number\n};\nexport default SelectSingleFilterPopup;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SelectSingleFilter/SelectSingleFilterPopup.js"],"names":["React","Component","arrayOf","func","node","number","object","shape","string","classNames","FormattedMessage","Menu","MenuContent","MenuItem","MenuLabel","css","optionLabel","options","key","option","find","o","label","getQueryParamName","queryParamNames","Array","isArray","SelectSingleFilterPopup","constructor","props","state","isOpen","onToggleActive","bind","selectOption","setState","queryParamName","onSelect","render","rootClassName","className","initialValues","contentPlacementOffset","initialValue","menuLabel","menuLabelClass","menuLabelSelected","classes","root","menuContent","map","selected","menuItemBorderClass","menuItemBorderSelected","menuItemBorder","menuItem","clearMenuItem","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { arrayOf, func, node, number, object, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport { Menu, MenuContent, MenuItem, MenuLabel } from '../../../components';\r\n\r\nimport css from './SelectSingleFilterPopup.module.css';\r\n\r\nconst optionLabel = (options, key) => {\r\n  const option = options.find(o => o.key === key);\r\n  return option ? option.label : key;\r\n};\r\n\r\nconst getQueryParamName = queryParamNames => {\r\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\r\n};\r\n\r\nclass SelectSingleFilterPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { isOpen: false };\r\n    this.onToggleActive = this.onToggleActive.bind(this);\r\n    this.selectOption = this.selectOption.bind(this);\r\n  }\r\n\r\n  onToggleActive(isOpen) {\r\n    this.setState({ isOpen: isOpen });\r\n  }\r\n\r\n  selectOption(queryParamName, option) {\r\n    this.setState({ isOpen: false });\r\n    this.props.onSelect({ [queryParamName]: option });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      label,\r\n      options,\r\n      queryParamNames,\r\n      initialValues,\r\n      contentPlacementOffset,\r\n    } = this.props;\r\n\r\n    const queryParamName = getQueryParamName(queryParamNames);\r\n    const initialValue =\r\n      initialValues && initialValues[queryParamNames] ? initialValues[queryParamNames] : null;\r\n\r\n    // resolve menu label text and class\r\n    const menuLabel = initialValue ? optionLabel(options, initialValue) : label;\r\n    const menuLabelClass = initialValue ? css.menuLabelSelected : css.menuLabel;\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    return (\r\n      <Menu\r\n        className={classes}\r\n        useArrow={false}\r\n        contentPlacementOffset={contentPlacementOffset}\r\n        onToggleActive={this.onToggleActive}\r\n        isOpen={this.state.isOpen}\r\n      >\r\n        <MenuLabel className={menuLabelClass}>{menuLabel}</MenuLabel>\r\n        <MenuContent className={css.menuContent}>\r\n          {options.map(option => {\r\n            // check if this option is selected\r\n            const selected = initialValue === option.key;\r\n            // menu item border class\r\n            const menuItemBorderClass = selected ? css.menuItemBorderSelected : css.menuItemBorder;\r\n\r\n            return (\r\n              <MenuItem key={option.key}>\r\n                <button\r\n                  className={css.menuItem}\r\n                  onClick={() => this.selectOption(queryParamName, option.key)}\r\n                >\r\n                  <span className={menuItemBorderClass} />\r\n                  {option.label}\r\n                </button>\r\n              </MenuItem>\r\n            );\r\n          })}\r\n          <MenuItem key={'clearLink'}>\r\n            <button\r\n              className={css.clearMenuItem}\r\n              onClick={() => this.selectOption(queryParamName, null)}\r\n            >\r\n              <FormattedMessage id={'SelectSingleFilter.popupClear'} />\r\n            </button>\r\n          </MenuItem>\r\n        </MenuContent>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nSelectSingleFilterPopup.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  initialValues: null,\r\n  contentPlacementOffset: 0,\r\n};\r\n\r\nSelectSingleFilterPopup.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  queryParamNames: arrayOf(string).isRequired,\r\n  label: node.isRequired,\r\n  onSelect: func.isRequired,\r\n  options: arrayOf(\r\n    shape({\r\n      key: string.isRequired,\r\n      label: string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  initialValues: object,\r\n  contentPlacementOffset: number,\r\n};\r\n\r\nexport default SelectSingleFilterPopup;\r\n"]},"metadata":{},"sourceType":"module"}