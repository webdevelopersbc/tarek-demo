{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\StripeBankAccountTokenInputField\\\\StripeBankAccountTokenInputField.js\";\n\n/* eslint-disable no-underscore-dangle */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { intlShape, injectIntl, FormattedMessage } from '../../util/reactIntl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport config from '../../config';\nimport { BANK_ACCOUNT_INPUTS, formatFieldMessage, requiredInputs, mapInputsToStripeAccountKeys, supportedCountries, translateStripeError } from './StripeBankAccountTokenInputField.util';\nimport StripeBankAccountRequiredInput from './StripeBankAccountRequiredInput';\nimport css from './StripeBankAccountTokenInputField.module.css'; // Since final-form tracks the onBlur event for marking the field as\n// touched (which triggers possible error validation rendering), only\n// trigger the event asynchronously when no other input within this\n// component has received focus.\n//\n// This prevents showing the validation error when the user selects a\n// value and moves on to another input within this component.\n\nconst BLUR_TIMEOUT = 100;\nconst DEBOUNCE_WAIT_TIME = 1000;\nconst MIN_INPUT_COUNT_FOR_TWO_COLUMNS = 6;\n\nclass TokenInputFieldComponent extends Component {\n  constructor(props) {\n    super(props);\n    const intl = props.intl; // Initial state is needed when country (and currency) changes and values need to be cleared.\n\n    this.initialState = {\n      stripeError: null\n    }; // Fill initialState with input type specific data\n\n    BANK_ACCOUNT_INPUTS.forEach(inputType => {\n      this.initialState[inputType] = {\n        value: '',\n        touched: false,\n        error: formatFieldMessage(intl, inputType, 'required')\n      };\n    });\n    this.state = this.initialState;\n    this.blurTimeoutId = null; // We keep track of the mounted state of the component to avoid\n    // setting state or calling callback props if a createToken call\n    // finishes after the component is already removed.\n    //\n    // The correct solution would be to cancel all ongoing operations\n    // in componentWillUnmount, but since Promises don't have a\n    // cancellation mechanism yet, we must use a different solution\n    // for now.\n    //\n    // See: https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\n\n    this._isMounted = false;\n    this.requestToken = debounce(this.requestToken.bind(this), DEBOUNCE_WAIT_TIME);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n  }\n\n  componentDidMount() {\n    if (!window.Stripe) {\n      throw new Error('Stripe must be loaded for StripeBankAccountTokenInputField');\n    }\n\n    this.stripe = window.Stripe(config.stripe.publishableKey);\n    this._isMounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    const countryChanged = this.props.country !== prevProps.country;\n    const currencyChanged = this.props.currency !== prevProps.currency;\n\n    if (countryChanged || currencyChanged) {\n      // Clear the possible input values from the state\n      // if the given country or currency changes.\n      this.setState(this.initialState);\n      this.props.input.onChange('');\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    window.clearTimeout(this.blurTimeoutId);\n  }\n  /**\r\n   * Request a token from the Stripe API with the given bank account data\r\n   *\r\n   * This function validates the given data and triggers onChange\r\n   * events for the parent form to handle.\r\n   *\r\n   *\r\n   * @param {Object} values - values from different input types\r\n   */\n\n\n  requestToken(values) {\n    const {\n      country,\n      currency,\n      input: {\n        onChange\n      },\n      intl\n    } = this.props; // First we have to clear the current token value so the parent\n    // form doesn't submit with an old value.\n\n    onChange('');\n    const inputsNeeded = requiredInputs(country);\n    const missingValues = inputsNeeded.filter(inputType => !values[inputType]);\n    const invalidValues = inputsNeeded.filter(inputType => !!this.state[inputType].error);\n    const numbersMissing = missingValues.length > 0;\n    const numbersInvalid = invalidValues.length > 0;\n\n    if (numbersMissing || numbersInvalid) {\n      // Incomplete/invalid info, not requesting token\n      return;\n    } // Gather data to be sent to Stripe (to create bank account)\n\n\n    let accountData = {\n      country,\n      currency\n    }; // Include input values with correct stripe keys\n\n    const inputValueObj = mapInputsToStripeAccountKeys(country, values);\n    accountData = { ...accountData,\n      ...inputValueObj\n    }; // https://stripe.com/docs/stripe-js/reference#collecting-bank-account-details\n\n    this.stripe.createToken('bank_account', accountData).then(result => {\n      if (result.error) {\n        const e = new Error(result.error.message);\n        e.stripeError = result.error;\n        throw e;\n      }\n\n      return result.token.id;\n    }).then(token => {\n      // Check if value has changed during async call.\n      const changedValues = inputsNeeded.filter(inputType => values[inputType] !== this.state[inputType].value);\n      const valuesAreUnchanged = changedValues.length === 0; // Handle response only if the input values haven't changed\n\n      if (this._isMounted && valuesAreUnchanged) {\n        this.setState(prevState => {\n          return {\n            stripeError: null\n          };\n        });\n        onChange(token);\n      }\n    }).catch(e => {\n      if (!e.stripeError) {\n        throw e;\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          stripeError: translateStripeError(country, intl, e.stripeError)\n        });\n      }\n    });\n  }\n\n  handleInputChange(e, inputType, country, intl) {\n    const value = e.target.value;\n    let inputError = null; // Validate the changed routing number\n\n    if (!value) {\n      inputError = intl.formatMessage({\n        id: `StripeBankAccountTokenInputField.${inputType}.required`\n      });\n    } // Save changes to the state\n\n\n    this.setState(prevState => {\n      const input = { ...prevState[inputType],\n        value,\n        error: inputError\n      };\n      return {\n        [inputType]: input,\n        stripeError: null\n      };\n    }); // Request new bank account token\n\n    const unChangedValues = requiredInputs(country).reduce((acc, iType) => ({ ...acc,\n      [iType]: this.state[iType].value\n    }), {});\n    this.requestToken({ ...unChangedValues,\n      [inputType]: value\n    });\n  }\n\n  handleInputFocus() {\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  handleInputBlur(inputType) {\n    this.setState(prevState => {\n      const inputData = { ...prevState[inputType],\n        touched: true\n      };\n      return {\n        [inputType]: inputData\n      };\n    });\n    window.clearTimeout(this.blurTimeoutId);\n    this.blurTimeoutId = window.setTimeout(this.props.input.onBlur, BLUR_TIMEOUT);\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      country,\n      formName,\n      meta: formMeta,\n      intl,\n      disabled\n    } = this.props;\n\n    if (!supportedCountries.includes(country)) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: css.unsupportedCountryError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeBankAccountTokenInputField.unsupportedCountry\",\n        values: {\n          country\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    const hasInputErrors = requiredInputs(country).some(inputType => {\n      return (this.state[inputType].touched || formMeta.touched) && !!this.state[inputType].error;\n    }); // Only show Stripe and form errors when the fields don't have\n    // more specific errors.\n\n    const showingFieldErrors = hasInputErrors;\n    const showStripeError = !!(this.state.stripeError && !showingFieldErrors && formMeta.touched);\n    const showFormError = !!(formMeta.touched && formMeta.error && !showingFieldErrors && !showStripeError);\n    const inputConfiguration = requiredInputs(country); // E.g. Japan has 6 fields in the bank account details so we want to\n    // show the inputs in two columns on bigger screens\n\n    const showInColumns = inputConfiguration.length >= MIN_INPUT_COUNT_FOR_TWO_COLUMNS;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(rootClassName || css.root, className),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 7\n      }\n    }, inputConfiguration.map(inputType => {\n      return /*#__PURE__*/React.createElement(StripeBankAccountRequiredInput, {\n        disabled: disabled,\n        key: inputType,\n        inputType: inputType,\n        formName: formName,\n        value: this.state[inputType].value,\n        placeholder: formatFieldMessage(intl, inputType, 'placeholder'),\n        onChange: e => this.handleInputChange(e, inputType, country, intl),\n        onFocus: this.handleInputFocus,\n        onBlur: () => this.handleInputBlur(inputType),\n        isTouched: this.state[inputType].touched || formMeta.touched,\n        showStripeError: showStripeError,\n        inputError: this.state[inputType].error,\n        showInColumns: showInColumns,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }\n      });\n    }), showStripeError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 28\n      }\n    }, this.state.stripeError) : null, showFormError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 26\n      }\n    }, formMeta.error) : null);\n  }\n\n}\n\nTokenInputFieldComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  disabled: false\n};\nconst {\n  string,\n  shape,\n  func,\n  bool\n} = PropTypes;\nTokenInputFieldComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  country: string.isRequired,\n  currency: string.isRequired,\n  formName: string.isRequired,\n  disabled: bool,\n  input: shape({\n    onChange: func.isRequired,\n    onBlur: func.isRequired\n  }).isRequired,\n  meta: shape({\n    touched: bool.isRequired,\n    error: string\n  }).isRequired,\n  intl: intlShape.isRequired\n};\nconst EnhancedTokenInputFieldComponent = injectIntl(TokenInputFieldComponent);\n_c = EnhancedTokenInputFieldComponent;\n\nconst StripeBankAccountTokenInputField = props => {\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    component: EnhancedTokenInputFieldComponent\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c2 = StripeBankAccountTokenInputField;\nexport default StripeBankAccountTokenInputField;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EnhancedTokenInputFieldComponent\");\n$RefreshReg$(_c2, \"StripeBankAccountTokenInputField\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/StripeBankAccountTokenInputField/StripeBankAccountTokenInputField.js"],"names":["React","Component","PropTypes","intlShape","injectIntl","FormattedMessage","Field","classNames","debounce","config","BANK_ACCOUNT_INPUTS","formatFieldMessage","requiredInputs","mapInputsToStripeAccountKeys","supportedCountries","translateStripeError","StripeBankAccountRequiredInput","css","BLUR_TIMEOUT","DEBOUNCE_WAIT_TIME","MIN_INPUT_COUNT_FOR_TWO_COLUMNS","TokenInputFieldComponent","constructor","props","intl","initialState","stripeError","forEach","inputType","value","touched","error","state","blurTimeoutId","_isMounted","requestToken","bind","handleInputChange","handleInputFocus","handleInputBlur","componentDidMount","window","Stripe","Error","stripe","publishableKey","componentDidUpdate","prevProps","countryChanged","country","currencyChanged","currency","setState","input","onChange","componentWillUnmount","clearTimeout","values","inputsNeeded","missingValues","filter","invalidValues","numbersMissing","length","numbersInvalid","accountData","inputValueObj","createToken","then","result","e","message","token","id","changedValues","valuesAreUnchanged","prevState","catch","target","inputError","formatMessage","unChangedValues","reduce","acc","iType","inputData","setTimeout","onBlur","render","rootClassName","className","formName","meta","formMeta","disabled","includes","unsupportedCountryError","hasInputErrors","some","showingFieldErrors","showStripeError","showFormError","inputConfiguration","showInColumns","root","map","defaultProps","string","shape","func","bool","propTypes","isRequired","EnhancedTokenInputFieldComponent","StripeBankAccountTokenInputField"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { intlShape, injectIntl, FormattedMessage } from '../../util/reactIntl';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport debounce from 'lodash/debounce';\r\nimport config from '../../config';\r\n\r\nimport {\r\n  BANK_ACCOUNT_INPUTS,\r\n  formatFieldMessage,\r\n  requiredInputs,\r\n  mapInputsToStripeAccountKeys,\r\n  supportedCountries,\r\n  translateStripeError,\r\n} from './StripeBankAccountTokenInputField.util';\r\nimport StripeBankAccountRequiredInput from './StripeBankAccountRequiredInput';\r\nimport css from './StripeBankAccountTokenInputField.module.css';\r\n\r\n// Since final-form tracks the onBlur event for marking the field as\r\n// touched (which triggers possible error validation rendering), only\r\n// trigger the event asynchronously when no other input within this\r\n// component has received focus.\r\n//\r\n// This prevents showing the validation error when the user selects a\r\n// value and moves on to another input within this component.\r\nconst BLUR_TIMEOUT = 100;\r\nconst DEBOUNCE_WAIT_TIME = 1000;\r\nconst MIN_INPUT_COUNT_FOR_TWO_COLUMNS = 6;\r\n\r\nclass TokenInputFieldComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const intl = props.intl;\r\n\r\n    // Initial state is needed when country (and currency) changes and values need to be cleared.\r\n    this.initialState = {\r\n      stripeError: null,\r\n    };\r\n\r\n    // Fill initialState with input type specific data\r\n    BANK_ACCOUNT_INPUTS.forEach(inputType => {\r\n      this.initialState[inputType] = {\r\n        value: '',\r\n        touched: false,\r\n        error: formatFieldMessage(intl, inputType, 'required'),\r\n      };\r\n    });\r\n\r\n    this.state = this.initialState;\r\n    this.blurTimeoutId = null;\r\n\r\n    // We keep track of the mounted state of the component to avoid\r\n    // setting state or calling callback props if a createToken call\r\n    // finishes after the component is already removed.\r\n    //\r\n    // The correct solution would be to cancel all ongoing operations\r\n    // in componentWillUnmount, but since Promises don't have a\r\n    // cancellation mechanism yet, we must use a different solution\r\n    // for now.\r\n    //\r\n    // See: https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\r\n    this._isMounted = false;\r\n\r\n    this.requestToken = debounce(this.requestToken.bind(this), DEBOUNCE_WAIT_TIME);\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleInputFocus = this.handleInputFocus.bind(this);\r\n    this.handleInputBlur = this.handleInputBlur.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.Stripe) {\r\n      throw new Error('Stripe must be loaded for StripeBankAccountTokenInputField');\r\n    }\r\n    this.stripe = window.Stripe(config.stripe.publishableKey);\r\n    this._isMounted = true;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const countryChanged = this.props.country !== prevProps.country;\r\n    const currencyChanged = this.props.currency !== prevProps.currency;\r\n    if (countryChanged || currencyChanged) {\r\n      // Clear the possible input values from the state\r\n      // if the given country or currency changes.\r\n      this.setState(this.initialState);\r\n      this.props.input.onChange('');\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    window.clearTimeout(this.blurTimeoutId);\r\n  }\r\n\r\n  /**\r\n   * Request a token from the Stripe API with the given bank account data\r\n   *\r\n   * This function validates the given data and triggers onChange\r\n   * events for the parent form to handle.\r\n   *\r\n   *\r\n   * @param {Object} values - values from different input types\r\n   */\r\n  requestToken(values) {\r\n    const {\r\n      country,\r\n      currency,\r\n      input: { onChange },\r\n      intl,\r\n    } = this.props;\r\n\r\n    // First we have to clear the current token value so the parent\r\n    // form doesn't submit with an old value.\r\n    onChange('');\r\n\r\n    const inputsNeeded = requiredInputs(country);\r\n    const missingValues = inputsNeeded.filter(inputType => !values[inputType]);\r\n    const invalidValues = inputsNeeded.filter(inputType => !!this.state[inputType].error);\r\n\r\n    const numbersMissing = missingValues.length > 0;\r\n    const numbersInvalid = invalidValues.length > 0;\r\n\r\n    if (numbersMissing || numbersInvalid) {\r\n      // Incomplete/invalid info, not requesting token\r\n      return;\r\n    }\r\n\r\n    // Gather data to be sent to Stripe (to create bank account)\r\n    let accountData = {\r\n      country,\r\n      currency,\r\n    };\r\n\r\n    // Include input values with correct stripe keys\r\n    const inputValueObj = mapInputsToStripeAccountKeys(country, values);\r\n    accountData = { ...accountData, ...inputValueObj };\r\n\r\n    // https://stripe.com/docs/stripe-js/reference#collecting-bank-account-details\r\n    this.stripe\r\n      .createToken('bank_account', accountData)\r\n      .then(result => {\r\n        if (result.error) {\r\n          const e = new Error(result.error.message);\r\n          e.stripeError = result.error;\r\n          throw e;\r\n        }\r\n        return result.token.id;\r\n      })\r\n      .then(token => {\r\n        // Check if value has changed during async call.\r\n        const changedValues = inputsNeeded.filter(\r\n          inputType => values[inputType] !== this.state[inputType].value\r\n        );\r\n        const valuesAreUnchanged = changedValues.length === 0;\r\n\r\n        // Handle response only if the input values haven't changed\r\n        if (this._isMounted && valuesAreUnchanged) {\r\n          this.setState(prevState => {\r\n            return { stripeError: null };\r\n          });\r\n\r\n          onChange(token);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        if (!e.stripeError) {\r\n          throw e;\r\n        }\r\n        if (this._isMounted) {\r\n          this.setState({\r\n            stripeError: translateStripeError(country, intl, e.stripeError),\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleInputChange(e, inputType, country, intl) {\r\n    const value = e.target.value;\r\n\r\n    let inputError = null;\r\n\r\n    // Validate the changed routing number\r\n    if (!value) {\r\n      inputError = intl.formatMessage({\r\n        id: `StripeBankAccountTokenInputField.${inputType}.required`,\r\n      });\r\n    }\r\n\r\n    // Save changes to the state\r\n    this.setState(prevState => {\r\n      const input = { ...prevState[inputType], value, error: inputError };\r\n      return {\r\n        [inputType]: input,\r\n        stripeError: null,\r\n      };\r\n    });\r\n\r\n    // Request new bank account token\r\n    const unChangedValues = requiredInputs(country).reduce(\r\n      (acc, iType) => ({ ...acc, [iType]: this.state[iType].value }),\r\n      {}\r\n    );\r\n    this.requestToken({ ...unChangedValues, [inputType]: value });\r\n  }\r\n\r\n  handleInputFocus() {\r\n    window.clearTimeout(this.blurTimeoutId);\r\n  }\r\n\r\n  handleInputBlur(inputType) {\r\n    this.setState(prevState => {\r\n      const inputData = { ...prevState[inputType], touched: true };\r\n      return { [inputType]: inputData };\r\n    });\r\n    window.clearTimeout(this.blurTimeoutId);\r\n    this.blurTimeoutId = window.setTimeout(this.props.input.onBlur, BLUR_TIMEOUT);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      country,\r\n      formName,\r\n      meta: formMeta,\r\n      intl,\r\n      disabled,\r\n    } = this.props;\r\n\r\n    if (!supportedCountries.includes(country)) {\r\n      return (\r\n        <div className={css.unsupportedCountryError}>\r\n          <FormattedMessage\r\n            id=\"StripeBankAccountTokenInputField.unsupportedCountry\"\r\n            values={{ country }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const hasInputErrors = requiredInputs(country).some(inputType => {\r\n      return (this.state[inputType].touched || formMeta.touched) && !!this.state[inputType].error;\r\n    });\r\n\r\n    // Only show Stripe and form errors when the fields don't have\r\n    // more specific errors.\r\n    const showingFieldErrors = hasInputErrors;\r\n    const showStripeError = !!(this.state.stripeError && !showingFieldErrors && formMeta.touched);\r\n    const showFormError = !!(\r\n      formMeta.touched &&\r\n      formMeta.error &&\r\n      !showingFieldErrors &&\r\n      !showStripeError\r\n    );\r\n\r\n    const inputConfiguration = requiredInputs(country);\r\n\r\n    // E.g. Japan has 6 fields in the bank account details so we want to\r\n    // show the inputs in two columns on bigger screens\r\n    const showInColumns = inputConfiguration.length >= MIN_INPUT_COUNT_FOR_TWO_COLUMNS;\r\n\r\n    return (\r\n      <div className={classNames(rootClassName || css.root, className)}>\r\n        {inputConfiguration.map(inputType => {\r\n          return (\r\n            <StripeBankAccountRequiredInput\r\n              disabled={disabled}\r\n              key={inputType}\r\n              inputType={inputType}\r\n              formName={formName}\r\n              value={this.state[inputType].value}\r\n              placeholder={formatFieldMessage(intl, inputType, 'placeholder')}\r\n              onChange={e => this.handleInputChange(e, inputType, country, intl)}\r\n              onFocus={this.handleInputFocus}\r\n              onBlur={() => this.handleInputBlur(inputType)}\r\n              isTouched={this.state[inputType].touched || formMeta.touched}\r\n              showStripeError={showStripeError}\r\n              inputError={this.state[inputType].error}\r\n              showInColumns={showInColumns}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {showStripeError ? <p className={css.error}>{this.state.stripeError}</p> : null}\r\n        {showFormError ? <p className={css.error}>{formMeta.error}</p> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTokenInputFieldComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  disabled: false,\r\n};\r\n\r\nconst { string, shape, func, bool } = PropTypes;\r\n\r\nTokenInputFieldComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  country: string.isRequired,\r\n  currency: string.isRequired,\r\n  formName: string.isRequired,\r\n  disabled: bool,\r\n\r\n  input: shape({\r\n    onChange: func.isRequired,\r\n    onBlur: func.isRequired,\r\n  }).isRequired,\r\n  meta: shape({\r\n    touched: bool.isRequired,\r\n    error: string,\r\n  }).isRequired,\r\n\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst EnhancedTokenInputFieldComponent = injectIntl(TokenInputFieldComponent);\r\n\r\nconst StripeBankAccountTokenInputField = props => {\r\n  return <Field component={EnhancedTokenInputFieldComponent} {...props} />;\r\n};\r\n\r\nexport default StripeBankAccountTokenInputField;\r\n"]},"metadata":{},"sourceType":"module"}