{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldCurrencyInput\\\\FieldCurrencyInput.js\";\n\n/**\r\n * CurrencyInput renders an input field that format it's value according to currency formatting rules\r\n * onFocus: renders given value in unformatted manner: \"9999,99\"\r\n * onBlur: formats the given input: \"9 999,99 â‚¬\"\r\n */\nimport React, { Component } from 'react';\nimport { bool, func, number, object, oneOfType, shape, string } from 'prop-types';\nimport { intlShape, injectIntl } from '../../util/reactIntl';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport Decimal from 'decimal.js';\nimport { ValidationError } from '../../components';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { isSafeNumber, unitDivisor, convertUnitToSubUnit, convertMoneyToNumber, ensureDotSeparator, ensureSeparator, truncateToSubUnitPrecision } from '../../util/currency';\nimport { propTypes } from '../../util/types';\nimport * as log from '../../util/log';\nimport css from './FieldCurrencyInput.module.css';\nconst {\n  Money\n} = sdkTypes;\n\nconst allowedInputProps = allProps => {\n  // Strip away props that are not passed to input element (or are overwritten)\n  // eslint-disable-next-line no-unused-vars\n  const {\n    currencyConfig,\n    defaultValue,\n    intl,\n    input,\n    meta,\n    ...inputProps\n  } = allProps;\n  return inputProps;\n}; // Convert unformatted value (e.g. 10,00) to Money (or null)\n\n\nconst getPrice = (unformattedValue, currencyConfig) => {\n  const isEmptyString = unformattedValue === '';\n\n  try {\n    return isEmptyString ? null : new Money(convertUnitToSubUnit(unformattedValue, unitDivisor(currencyConfig.currency)), currencyConfig.currency);\n  } catch (e) {\n    return null;\n  }\n};\n\nclass CurrencyInputComponent extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      currencyConfig,\n      defaultValue,\n      input,\n      intl\n    } = props;\n    const initialValueIsMoney = input.value instanceof Money;\n\n    if (initialValueIsMoney && input.value.currency !== currencyConfig.currency) {\n      const e = new Error('Value currency different from marketplace currency');\n      log.error(e, 'currency-input-invalid-currency', {\n        currencyConfig,\n        inputValue: input.value\n      });\n      throw e;\n    }\n\n    const initialValue = initialValueIsMoney ? convertMoneyToNumber(input.value) : defaultValue;\n    const hasInitialValue = typeof initialValue === 'number' && !isNaN(initialValue); // We need to handle number format - some locales use dots and some commas as decimal separator\n    // TODO Figure out if this could be digged from React-Intl directly somehow\n\n    const testSubUnitFormat = intl.formatNumber('1.1', currencyConfig);\n    const usesComma = testSubUnitFormat.indexOf(',') >= 0;\n\n    try {\n      // whatever is passed as a default value, will be converted to currency string\n      // Unformatted value is digits + localized sub unit separator (\"9,99\")\n      const unformattedValue = hasInitialValue ? truncateToSubUnitPrecision(ensureSeparator(initialValue.toString(), usesComma), unitDivisor(currencyConfig.currency), usesComma) : ''; // Formatted value fully localized currency string (\"$1,000.99\")\n\n      const formattedValue = hasInitialValue ? intl.formatNumber(ensureDotSeparator(unformattedValue), currencyConfig) : '';\n      this.state = {\n        formattedValue,\n        unformattedValue,\n        value: formattedValue,\n        usesComma\n      };\n    } catch (e) {\n      log.error(e, 'currency-input-init-failed', {\n        currencyConfig,\n        defaultValue,\n        initialValue\n      });\n      throw e;\n    }\n\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onInputBlur = this.onInputBlur.bind(this);\n    this.onInputFocus = this.onInputFocus.bind(this);\n    this.updateValues = this.updateValues.bind(this);\n  }\n\n  onInputChange(event) {\n    event.preventDefault();\n    event.stopPropagation(); // Update value strings on state\n\n    const {\n      unformattedValue\n    } = this.updateValues(event); // Notify parent component about current price change\n\n    const price = getPrice(ensureDotSeparator(unformattedValue), this.props.currencyConfig);\n    this.props.input.onChange(price);\n  }\n\n  onInputBlur(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const {\n      currencyConfig,\n      input: {\n        onBlur\n      }\n    } = this.props;\n    this.setState(prevState => {\n      if (onBlur) {\n        // If parent component has provided onBlur function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onBlur(price);\n      }\n\n      return {\n        value: prevState.formattedValue\n      };\n    });\n  }\n\n  onInputFocus(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const {\n      currencyConfig,\n      input: {\n        onFocus\n      }\n    } = this.props;\n    this.setState(prevState => {\n      if (onFocus) {\n        // If parent component has provided onFocus function, call it with current price.\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\n        onFocus(price);\n      }\n\n      return {\n        value: prevState.unformattedValue\n      };\n    });\n  }\n\n  updateValues(event) {\n    try {\n      const {\n        currencyConfig,\n        intl\n      } = this.props;\n      const targetValue = event.target.value.trim();\n      const isEmptyString = targetValue === '';\n      const valueOrZero = isEmptyString ? '0' : targetValue;\n      const targetDecimalValue = isEmptyString ? null : new Decimal(ensureDotSeparator(targetValue));\n      const isSafeValue = isEmptyString || targetDecimalValue.isPositive() && isSafeNumber(targetDecimalValue);\n\n      if (!isSafeValue) {\n        throw new Error(`Unsafe money value: ${targetValue}`);\n      } // truncate decimals to subunit precision: 10000.999 => 10000.99\n\n\n      const truncatedValueString = truncateToSubUnitPrecision(valueOrZero, unitDivisor(currencyConfig.currency), this.state.usesComma);\n      const unformattedValue = !isEmptyString ? truncatedValueString : '';\n      const formattedValue = !isEmptyString ? intl.formatNumber(ensureDotSeparator(truncatedValueString), currencyConfig) : '';\n      this.setState({\n        formattedValue,\n        value: unformattedValue,\n        unformattedValue\n      });\n      return {\n        formattedValue,\n        value: unformattedValue,\n        unformattedValue\n      };\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e); // If an error occurs while filling input field, use previous values\n      // This ensures that string like '12.3r' doesn't end up to a state.\n\n      const {\n        formattedValue,\n        unformattedValue,\n        value\n      } = this.state;\n      return {\n        formattedValue,\n        unformattedValue,\n        value\n      };\n    }\n  }\n\n  render() {\n    const {\n      className,\n      currencyConfig,\n      defaultValue,\n      placeholder,\n      intl\n    } = this.props;\n    const placeholderText = placeholder || intl.formatNumber(defaultValue, currencyConfig);\n    return /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      className: className\n    }, allowedInputProps(this.props), {\n      value: this.state.value,\n      onChange: this.onInputChange,\n      onBlur: this.onInputBlur,\n      onFocus: this.onInputFocus,\n      type: \"text\",\n      placeholder: placeholderText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nCurrencyInputComponent.defaultProps = {\n  className: null,\n  currencyConfig: null,\n  defaultValue: null,\n  input: null,\n  placeholder: null\n};\nCurrencyInputComponent.propTypes = {\n  className: string,\n  currencyConfig: propTypes.currencyConfig.isRequired,\n  defaultValue: number,\n  intl: intlShape.isRequired,\n  input: shape({\n    value: oneOfType([string, propTypes.money]),\n    onBlur: func,\n    onChange: func.isRequired,\n    onFocus: func\n  }).isRequired,\n  placeholder: string\n};\nexport const CurrencyInput = injectIntl(CurrencyInputComponent);\n_c = CurrencyInput;\n\nconst FieldCurrencyInputComponent = props => {\n  const {\n    rootClassName,\n    className,\n    id,\n    label,\n    input,\n    meta,\n    hideErrorMessage,\n    ...rest\n  } = props;\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const {\n    valid,\n    invalid,\n    touched,\n    error\n  } = meta; // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n\n  const hasError = touched && invalid && error;\n  const inputClasses = classNames(css.input, {\n    [css.inputSuccess]: valid,\n    [css.inputError]: hasError\n  });\n  const inputProps = {\n    className: inputClasses,\n    id,\n    input,\n    ...rest\n  };\n  const classes = classNames(rootClassName, className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 5\n    }\n  }, label ? /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 16\n    }\n  }, label) : null, /*#__PURE__*/React.createElement(CurrencyInput, Object.assign({}, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  })), hideErrorMessage ? null : /*#__PURE__*/React.createElement(ValidationError, {\n    fieldMeta: meta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 34\n    }\n  }));\n};\n\n_c2 = FieldCurrencyInputComponent;\nFieldCurrencyInputComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n  hideErrorMessage: false\n};\nFieldCurrencyInputComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  hideErrorMessage: bool,\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired\n};\n\nconst FieldCurrencyInput = props => {\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    component: FieldCurrencyInputComponent\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c3 = FieldCurrencyInput;\nexport default FieldCurrencyInput;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CurrencyInput\");\n$RefreshReg$(_c2, \"FieldCurrencyInputComponent\");\n$RefreshReg$(_c3, \"FieldCurrencyInput\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldCurrencyInput/FieldCurrencyInput.js"],"names":["React","Component","bool","func","number","object","oneOfType","shape","string","intlShape","injectIntl","Field","classNames","Decimal","ValidationError","types","sdkTypes","isSafeNumber","unitDivisor","convertUnitToSubUnit","convertMoneyToNumber","ensureDotSeparator","ensureSeparator","truncateToSubUnitPrecision","propTypes","log","css","Money","allowedInputProps","allProps","currencyConfig","defaultValue","intl","input","meta","inputProps","getPrice","unformattedValue","isEmptyString","currency","e","CurrencyInputComponent","constructor","props","initialValueIsMoney","value","Error","error","inputValue","initialValue","hasInitialValue","isNaN","testSubUnitFormat","formatNumber","usesComma","indexOf","toString","formattedValue","state","onInputChange","bind","onInputBlur","onInputFocus","updateValues","event","preventDefault","stopPropagation","price","onChange","onBlur","setState","prevState","onFocus","targetValue","target","trim","valueOrZero","targetDecimalValue","isSafeValue","isPositive","truncatedValueString","console","render","className","placeholder","placeholderText","defaultProps","isRequired","money","CurrencyInput","FieldCurrencyInputComponent","rootClassName","id","label","hideErrorMessage","rest","valid","invalid","touched","hasError","inputClasses","inputSuccess","inputError","classes","FieldCurrencyInput"],"mappings":"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","sourcesContent":["/**\r\n * CurrencyInput renders an input field that format it's value according to currency formatting rules\r\n * onFocus: renders given value in unformatted manner: \"9999,99\"\r\n * onBlur: formats the given input: \"9 999,99 â‚¬\"\r\n */\r\nimport React, { Component } from 'react';\r\nimport { bool, func, number, object, oneOfType, shape, string } from 'prop-types';\r\nimport { intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport Decimal from 'decimal.js';\r\nimport { ValidationError } from '../../components';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport {\r\n  isSafeNumber,\r\n  unitDivisor,\r\n  convertUnitToSubUnit,\r\n  convertMoneyToNumber,\r\n  ensureDotSeparator,\r\n  ensureSeparator,\r\n  truncateToSubUnitPrecision,\r\n} from '../../util/currency';\r\nimport { propTypes } from '../../util/types';\r\nimport * as log from '../../util/log';\r\n\r\nimport css from './FieldCurrencyInput.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\n\r\nconst allowedInputProps = allProps => {\r\n  // Strip away props that are not passed to input element (or are overwritten)\r\n  // eslint-disable-next-line no-unused-vars\r\n  const { currencyConfig, defaultValue, intl, input, meta, ...inputProps } = allProps;\r\n  return inputProps;\r\n};\r\n\r\n// Convert unformatted value (e.g. 10,00) to Money (or null)\r\nconst getPrice = (unformattedValue, currencyConfig) => {\r\n  const isEmptyString = unformattedValue === '';\r\n  try {\r\n    return isEmptyString\r\n      ? null\r\n      : new Money(\r\n          convertUnitToSubUnit(unformattedValue, unitDivisor(currencyConfig.currency)),\r\n          currencyConfig.currency\r\n        );\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nclass CurrencyInputComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { currencyConfig, defaultValue, input, intl } = props;\r\n    const initialValueIsMoney = input.value instanceof Money;\r\n\r\n    if (initialValueIsMoney && input.value.currency !== currencyConfig.currency) {\r\n      const e = new Error('Value currency different from marketplace currency');\r\n      log.error(e, 'currency-input-invalid-currency', { currencyConfig, inputValue: input.value });\r\n      throw e;\r\n    }\r\n\r\n    const initialValue = initialValueIsMoney ? convertMoneyToNumber(input.value) : defaultValue;\r\n    const hasInitialValue = typeof initialValue === 'number' && !isNaN(initialValue);\r\n\r\n    // We need to handle number format - some locales use dots and some commas as decimal separator\r\n    // TODO Figure out if this could be digged from React-Intl directly somehow\r\n    const testSubUnitFormat = intl.formatNumber('1.1', currencyConfig);\r\n    const usesComma = testSubUnitFormat.indexOf(',') >= 0;\r\n\r\n    try {\r\n      // whatever is passed as a default value, will be converted to currency string\r\n      // Unformatted value is digits + localized sub unit separator (\"9,99\")\r\n      const unformattedValue = hasInitialValue\r\n        ? truncateToSubUnitPrecision(\r\n            ensureSeparator(initialValue.toString(), usesComma),\r\n            unitDivisor(currencyConfig.currency),\r\n            usesComma\r\n          )\r\n        : '';\r\n      // Formatted value fully localized currency string (\"$1,000.99\")\r\n      const formattedValue = hasInitialValue\r\n        ? intl.formatNumber(ensureDotSeparator(unformattedValue), currencyConfig)\r\n        : '';\r\n\r\n      this.state = {\r\n        formattedValue,\r\n        unformattedValue,\r\n        value: formattedValue,\r\n        usesComma,\r\n      };\r\n    } catch (e) {\r\n      log.error(e, 'currency-input-init-failed', { currencyConfig, defaultValue, initialValue });\r\n      throw e;\r\n    }\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.onInputBlur = this.onInputBlur.bind(this);\r\n    this.onInputFocus = this.onInputFocus.bind(this);\r\n    this.updateValues = this.updateValues.bind(this);\r\n  }\r\n\r\n  onInputChange(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    // Update value strings on state\r\n    const { unformattedValue } = this.updateValues(event);\r\n    // Notify parent component about current price change\r\n    const price = getPrice(ensureDotSeparator(unformattedValue), this.props.currencyConfig);\r\n    this.props.input.onChange(price);\r\n  }\r\n\r\n  onInputBlur(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const {\r\n      currencyConfig,\r\n      input: { onBlur },\r\n    } = this.props;\r\n    this.setState(prevState => {\r\n      if (onBlur) {\r\n        // If parent component has provided onBlur function, call it with current price.\r\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\r\n        onBlur(price);\r\n      }\r\n      return {\r\n        value: prevState.formattedValue,\r\n      };\r\n    });\r\n  }\r\n\r\n  onInputFocus(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const {\r\n      currencyConfig,\r\n      input: { onFocus },\r\n    } = this.props;\r\n    this.setState(prevState => {\r\n      if (onFocus) {\r\n        // If parent component has provided onFocus function, call it with current price.\r\n        const price = getPrice(ensureDotSeparator(prevState.unformattedValue), currencyConfig);\r\n        onFocus(price);\r\n      }\r\n      return {\r\n        value: prevState.unformattedValue,\r\n      };\r\n    });\r\n  }\r\n\r\n  updateValues(event) {\r\n    try {\r\n      const { currencyConfig, intl } = this.props;\r\n      const targetValue = event.target.value.trim();\r\n      const isEmptyString = targetValue === '';\r\n      const valueOrZero = isEmptyString ? '0' : targetValue;\r\n\r\n      const targetDecimalValue = isEmptyString\r\n        ? null\r\n        : new Decimal(ensureDotSeparator(targetValue));\r\n\r\n      const isSafeValue =\r\n        isEmptyString || (targetDecimalValue.isPositive() && isSafeNumber(targetDecimalValue));\r\n      if (!isSafeValue) {\r\n        throw new Error(`Unsafe money value: ${targetValue}`);\r\n      }\r\n\r\n      // truncate decimals to subunit precision: 10000.999 => 10000.99\r\n      const truncatedValueString = truncateToSubUnitPrecision(\r\n        valueOrZero,\r\n        unitDivisor(currencyConfig.currency),\r\n        this.state.usesComma\r\n      );\r\n      const unformattedValue = !isEmptyString ? truncatedValueString : '';\r\n      const formattedValue = !isEmptyString\r\n        ? intl.formatNumber(ensureDotSeparator(truncatedValueString), currencyConfig)\r\n        : '';\r\n\r\n      this.setState({\r\n        formattedValue,\r\n        value: unformattedValue,\r\n        unformattedValue,\r\n      });\r\n\r\n      return { formattedValue, value: unformattedValue, unformattedValue };\r\n    } catch (e) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(e);\r\n\r\n      // If an error occurs while filling input field, use previous values\r\n      // This ensures that string like '12.3r' doesn't end up to a state.\r\n      const { formattedValue, unformattedValue, value } = this.state;\r\n      return { formattedValue, unformattedValue, value };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { className, currencyConfig, defaultValue, placeholder, intl } = this.props;\r\n    const placeholderText = placeholder || intl.formatNumber(defaultValue, currencyConfig);\r\n    return (\r\n      <input\r\n        className={className}\r\n        {...allowedInputProps(this.props)}\r\n        value={this.state.value}\r\n        onChange={this.onInputChange}\r\n        onBlur={this.onInputBlur}\r\n        onFocus={this.onInputFocus}\r\n        type=\"text\"\r\n        placeholder={placeholderText}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nCurrencyInputComponent.defaultProps = {\r\n  className: null,\r\n  currencyConfig: null,\r\n  defaultValue: null,\r\n  input: null,\r\n  placeholder: null,\r\n};\r\n\r\nCurrencyInputComponent.propTypes = {\r\n  className: string,\r\n  currencyConfig: propTypes.currencyConfig.isRequired,\r\n  defaultValue: number,\r\n  intl: intlShape.isRequired,\r\n  input: shape({\r\n    value: oneOfType([string, propTypes.money]),\r\n    onBlur: func,\r\n    onChange: func.isRequired,\r\n    onFocus: func,\r\n  }).isRequired,\r\n\r\n  placeholder: string,\r\n};\r\n\r\nexport const CurrencyInput = injectIntl(CurrencyInputComponent);\r\n\r\nconst FieldCurrencyInputComponent = props => {\r\n  const { rootClassName, className, id, label, input, meta, hideErrorMessage, ...rest } = props;\r\n\r\n  if (label && !id) {\r\n    throw new Error('id required when a label is given');\r\n  }\r\n\r\n  const { valid, invalid, touched, error } = meta;\r\n\r\n  // Error message and input error styles are only shown if the\r\n  // field has been touched and the validation has failed.\r\n  const hasError = touched && invalid && error;\r\n\r\n  const inputClasses = classNames(css.input, {\r\n    [css.inputSuccess]: valid,\r\n    [css.inputError]: hasError,\r\n  });\r\n\r\n  const inputProps = { className: inputClasses, id, input, ...rest };\r\n  const classes = classNames(rootClassName, className);\r\n  return (\r\n    <div className={classes}>\r\n      {label ? <label htmlFor={id}>{label}</label> : null}\r\n      <CurrencyInput {...inputProps} />\r\n      {hideErrorMessage ? null : <ValidationError fieldMeta={meta} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nFieldCurrencyInputComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  id: null,\r\n  label: null,\r\n  hideErrorMessage: false,\r\n};\r\n\r\nFieldCurrencyInputComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  // Label is optional, but if it is given, an id is also required so\r\n  // the label can reference the input in the `for` attribute\r\n  id: string,\r\n  label: string,\r\n  hideErrorMessage: bool,\r\n\r\n  // Generated by final-form's Field component\r\n  input: object.isRequired,\r\n  meta: object.isRequired,\r\n};\r\n\r\nconst FieldCurrencyInput = props => {\r\n  return <Field component={FieldCurrencyInputComponent} {...props} />;\r\n};\r\n\r\nexport default FieldCurrencyInput;\r\n"]},"metadata":{},"sourceType":"module"}