{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\components\\\\FieldDateRangeController\\\\DateRangeController.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DayPickerRangeController, isInclusivelyAfterDay, isInclusivelyBeforeDay } from 'react-dates';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { START_DATE } from '../../util/dates';\nimport config from '../../config';\nimport { IconArrowHead } from '../../components';\nimport css from './DateRangeController.module.css';\nexport const HORIZONTAL_ORIENTATION = 'horizontal';\nexport const ANCHOR_LEFT = 'left'; // IconArrowHead component might not be defined if exposed directly to the file.\n// This component is called before IconArrowHead component in components/index.js\n\nconst PrevIcon = props => /*#__PURE__*/React.createElement(IconArrowHead, Object.assign({}, props, {\n  direction: \"left\",\n  rootClassName: css.arrowIcon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }\n}));\n\n_c = PrevIcon;\n\nconst NextIcon = props => /*#__PURE__*/React.createElement(IconArrowHead, Object.assign({}, props, {\n  direction: \"right\",\n  rootClassName: css.arrowIcon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }\n}));\n\n_c2 = NextIcon;\nconst defaultProps = {\n  startDateOffset: undefined,\n  endDateOffset: undefined,\n  // calendar presentation and interaction related props\n  orientation: HORIZONTAL_ORIENTATION,\n  verticalHeight: undefined,\n  withPortal: false,\n  isRTL: false,\n  initialVisibleMonth: null,\n  firstDayOfWeek: config.i18n.firstDayOfWeek,\n  numberOfMonths: 1,\n  daySize: 38,\n  keepOpenOnDateSelect: false,\n  renderCalendarInfo: null,\n  hideKeyboardShortcutsPanel: true,\n  // navigation related props\n  navPrev: /*#__PURE__*/React.createElement(PrevIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }\n  }),\n  navNext: /*#__PURE__*/React.createElement(NextIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }\n  }),\n\n  onPrevMonthClick() {},\n\n  onNextMonthClick() {},\n\n  transitionDuration: 200,\n  // milliseconds between next month changes etc.\n  renderCalendarDay: undefined,\n  // If undefined, renders react-dates/lib/components/CalendarDay\n  // day presentation and interaction related props\n  renderDayContents: day => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"renderedDay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, day.format('D'));\n  },\n  minimumNights: config.lineItemUnitType === 'line-item/night' ? 1 : 0,\n  enableOutsideDays: false,\n  isDayBlocked: () => false,\n  // outside range -><- today ... today+available days -1 -><- outside range\n  isOutsideRange: day => {\n    const endOfRange = config.dayCountAvailableForBooking - 1;\n    return !isInclusivelyAfterDay(day, moment()) || !isInclusivelyBeforeDay(day, moment().add(endOfRange, 'days'));\n  },\n  isDayHighlighted: () => {},\n  // Internationalization props\n  // Multilocale support can be achieved with displayFormat like moment.localeData.longDateFormat('L')\n  // https://momentjs.com/\n  // displayFormat: 'ddd, MMM D',\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: {} // Add overwrites to default phrases used by react-dates\n\n};\n\nclass DateRangeController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: props.value && props.value.startDate ? moment(props.value.startDate) : null,\n      endDate: props.value && props.value.endDate ? moment(props.value.endDate) : null,\n      focusedInput: START_DATE\n    };\n    this.onDatesChange = this.onDatesChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n    this.onReset = this.onReset.bind(this);\n  }\n\n  onDatesChange(values) {\n    const {\n      startDate,\n      endDate\n    } = values;\n    const start = startDate ? startDate.toDate() : null;\n    const end = endDate ? endDate.toDate() : null;\n    this.setState({\n      startDate,\n      endDate\n    });\n\n    if (startDate && endDate) {\n      this.props.onChange({\n        startDate: start,\n        endDate: end\n      });\n    }\n  }\n\n  onFocusChange(focusedInput) {\n    this.setState({\n      // Force the focusedInput to always be truthy so that dates are always selectable\n      focusedInput: !focusedInput ? START_DATE : focusedInput\n    });\n  }\n\n  onReset(startDate, endDate) {\n    if (startDate && endDate) {\n      this.setState({\n        startDate: moment(startDate),\n        endDate: moment(endDate),\n        focusedInput: START_DATE\n      });\n    } else {\n      this.setState({\n        startDate: null,\n        endDate: null,\n        focusedInput: START_DATE\n      });\n    }\n  }\n\n  render() {\n    // Removing Final Form field props: name, value, onChange, onFocus, meta, children, render\n    const {\n      rootClassName,\n      className,\n      name,\n      value,\n      onChange,\n      onFocus,\n      meta,\n      children,\n      render,\n      ...controllerProps\n    } = this.props;\n    const classes = classNames(rootClassName || css.inputRoot, className);\n    const startDateFromState = this.state.startDate;\n    const endDateFromState = this.state.endDate;\n    const startDateFromForm = value && value.startDate ? moment(value.startDate) : null;\n    const endDateFromForm = value && value.endDate ? moment(value.endDate) : null;\n    const isSelected = startDateFromState && endDateFromState; // Value given by Final Form reflects url params and is valid if both dates are set.\n    // If only one date is selected state should be used to get the correct date.\n\n    const startDate = isSelected ? startDateFromForm : startDateFromState;\n    const endDate = isSelected ? endDateFromForm : endDateFromState;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DayPickerRangeController, Object.assign({}, controllerProps, {\n      startDate: startDate,\n      endDate: endDate,\n      onDatesChange: this.onDatesChange,\n      focusedInput: this.state.focusedInput,\n      onFocusChange: this.onFocusChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nDateRangeController.defaultProps = {\n  rootClassName: null,\n  className: null,\n  ...defaultProps\n};\nconst {\n  string\n} = PropTypes;\nDateRangeController.propTypes = {\n  rootClassName: string,\n  className: string\n};\nexport default DateRangeController;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrevIcon\");\n$RefreshReg$(_c2, \"NextIcon\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/components/FieldDateRangeController/DateRangeController.js"],"names":["React","Component","PropTypes","DayPickerRangeController","isInclusivelyAfterDay","isInclusivelyBeforeDay","classNames","moment","START_DATE","config","IconArrowHead","css","HORIZONTAL_ORIENTATION","ANCHOR_LEFT","PrevIcon","props","arrowIcon","NextIcon","defaultProps","startDateOffset","undefined","endDateOffset","orientation","verticalHeight","withPortal","isRTL","initialVisibleMonth","firstDayOfWeek","i18n","numberOfMonths","daySize","keepOpenOnDateSelect","renderCalendarInfo","hideKeyboardShortcutsPanel","navPrev","navNext","onPrevMonthClick","onNextMonthClick","transitionDuration","renderCalendarDay","renderDayContents","day","format","minimumNights","lineItemUnitType","enableOutsideDays","isDayBlocked","isOutsideRange","endOfRange","dayCountAvailableForBooking","add","isDayHighlighted","monthFormat","weekDayFormat","phrases","DateRangeController","constructor","state","startDate","value","endDate","focusedInput","onDatesChange","bind","onFocusChange","onReset","values","start","toDate","end","setState","onChange","render","rootClassName","className","name","onFocus","meta","children","controllerProps","classes","inputRoot","startDateFromState","endDateFromState","startDateFromForm","endDateFromForm","isSelected","string","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  DayPickerRangeController,\r\n  isInclusivelyAfterDay,\r\n  isInclusivelyBeforeDay,\r\n} from 'react-dates';\r\nimport classNames from 'classnames';\r\nimport moment from 'moment';\r\nimport { START_DATE } from '../../util/dates';\r\nimport config from '../../config';\r\n\r\nimport { IconArrowHead } from '../../components';\r\nimport css from './DateRangeController.module.css';\r\n\r\nexport const HORIZONTAL_ORIENTATION = 'horizontal';\r\nexport const ANCHOR_LEFT = 'left';\r\n\r\n// IconArrowHead component might not be defined if exposed directly to the file.\r\n// This component is called before IconArrowHead component in components/index.js\r\nconst PrevIcon = props => (\r\n  <IconArrowHead {...props} direction=\"left\" rootClassName={css.arrowIcon} />\r\n);\r\nconst NextIcon = props => (\r\n  <IconArrowHead {...props} direction=\"right\" rootClassName={css.arrowIcon} />\r\n);\r\n\r\nconst defaultProps = {\r\n  startDateOffset: undefined,\r\n  endDateOffset: undefined,\r\n\r\n  // calendar presentation and interaction related props\r\n\r\n  orientation: HORIZONTAL_ORIENTATION,\r\n  verticalHeight: undefined,\r\n  withPortal: false,\r\n  isRTL: false,\r\n  initialVisibleMonth: null,\r\n  firstDayOfWeek: config.i18n.firstDayOfWeek,\r\n  numberOfMonths: 1,\r\n  daySize: 38,\r\n  keepOpenOnDateSelect: false,\r\n  renderCalendarInfo: null,\r\n  hideKeyboardShortcutsPanel: true,\r\n\r\n  // navigation related props\r\n  navPrev: <PrevIcon />,\r\n  navNext: <NextIcon />,\r\n  onPrevMonthClick() {},\r\n  onNextMonthClick() {},\r\n  transitionDuration: 200, // milliseconds between next month changes etc.\r\n\r\n  renderCalendarDay: undefined, // If undefined, renders react-dates/lib/components/CalendarDay\r\n  // day presentation and interaction related props\r\n  renderDayContents: day => {\r\n    return <span className=\"renderedDay\">{day.format('D')}</span>;\r\n  },\r\n  minimumNights: config.lineItemUnitType === 'line-item/night' ? 1 : 0,\r\n  enableOutsideDays: false,\r\n  isDayBlocked: () => false,\r\n\r\n  // outside range -><- today ... today+available days -1 -><- outside range\r\n  isOutsideRange: day => {\r\n    const endOfRange = config.dayCountAvailableForBooking - 1;\r\n    return (\r\n      !isInclusivelyAfterDay(day, moment()) ||\r\n      !isInclusivelyBeforeDay(day, moment().add(endOfRange, 'days'))\r\n    );\r\n  },\r\n  isDayHighlighted: () => {},\r\n\r\n  // Internationalization props\r\n  // Multilocale support can be achieved with displayFormat like moment.localeData.longDateFormat('L')\r\n  // https://momentjs.com/\r\n  // displayFormat: 'ddd, MMM D',\r\n  monthFormat: 'MMMM YYYY',\r\n  weekDayFormat: 'dd',\r\n  phrases: {}, // Add overwrites to default phrases used by react-dates\r\n};\r\n\r\nclass DateRangeController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      startDate: props.value && props.value.startDate ? moment(props.value.startDate) : null,\r\n      endDate: props.value && props.value.endDate ? moment(props.value.endDate) : null,\r\n      focusedInput: START_DATE,\r\n    };\r\n\r\n    this.onDatesChange = this.onDatesChange.bind(this);\r\n    this.onFocusChange = this.onFocusChange.bind(this);\r\n    this.onReset = this.onReset.bind(this);\r\n  }\r\n\r\n  onDatesChange(values) {\r\n    const { startDate, endDate } = values;\r\n\r\n    const start = startDate ? startDate.toDate() : null;\r\n    const end = endDate ? endDate.toDate() : null;\r\n\r\n    this.setState({ startDate, endDate });\r\n\r\n    if (startDate && endDate) {\r\n      this.props.onChange({ startDate: start, endDate: end });\r\n    }\r\n  }\r\n\r\n  onFocusChange(focusedInput) {\r\n    this.setState({\r\n      // Force the focusedInput to always be truthy so that dates are always selectable\r\n      focusedInput: !focusedInput ? START_DATE : focusedInput,\r\n    });\r\n  }\r\n\r\n  onReset(startDate, endDate) {\r\n    if (startDate && endDate) {\r\n      this.setState({\r\n        startDate: moment(startDate),\r\n        endDate: moment(endDate),\r\n        focusedInput: START_DATE,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startDate: null,\r\n        endDate: null,\r\n        focusedInput: START_DATE,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Removing Final Form field props: name, value, onChange, onFocus, meta, children, render\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      name,\r\n      value,\r\n      onChange,\r\n      onFocus,\r\n      meta,\r\n      children,\r\n      render,\r\n      ...controllerProps\r\n    } = this.props;\r\n\r\n    const classes = classNames(rootClassName || css.inputRoot, className);\r\n\r\n    const startDateFromState = this.state.startDate;\r\n    const endDateFromState = this.state.endDate;\r\n\r\n    const startDateFromForm = value && value.startDate ? moment(value.startDate) : null;\r\n    const endDateFromForm = value && value.endDate ? moment(value.endDate) : null;\r\n\r\n    const isSelected = startDateFromState && endDateFromState;\r\n\r\n    // Value given by Final Form reflects url params and is valid if both dates are set.\r\n    // If only one date is selected state should be used to get the correct date.\r\n    const startDate = isSelected ? startDateFromForm : startDateFromState;\r\n    const endDate = isSelected ? endDateFromForm : endDateFromState;\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <DayPickerRangeController\r\n          {...controllerProps}\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          onDatesChange={this.onDatesChange}\r\n          focusedInput={this.state.focusedInput}\r\n          onFocusChange={this.onFocusChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDateRangeController.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  ...defaultProps,\r\n};\r\n\r\nconst { string } = PropTypes;\r\n\r\nDateRangeController.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n};\r\n\r\nexport default DateRangeController;\r\n"]},"metadata":{},"sourceType":"module"}