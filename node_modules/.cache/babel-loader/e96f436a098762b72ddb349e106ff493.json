{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\EditListingPage\\\\EditListingWizard\\\\EditListingAvailabilityPanel\\\\ManageAvailabilityCalendar.js\";\nimport React, { Component } from 'react';\nimport { func, object, shape, string } from 'prop-types';\nimport { DayPickerSingleDateController, isSameDay, isInclusivelyBeforeDay, isInclusivelyAfterDay } from 'react-dates';\nimport memoize from 'lodash/memoize';\nimport classNames from 'classnames';\nimport moment from 'moment'; // Import configs and util modules\n\nimport { FormattedMessage } from '../../../../util/reactIntl';\nimport { ensureBooking, ensureAvailabilityException, ensureDayAvailabilityPlan } from '../../../../util/data';\nimport { DAYS_OF_WEEK, propTypes } from '../../../../util/types';\nimport { monthIdString } from '../../../../util/dates'; // Import shared components\n\nimport { IconArrowHead, IconSpinner } from '../../../../components'; // Import modules from this directory\n\nimport css from './ManageAvailabilityCalendar.module.css'; // Constants\n\nconst HORIZONTAL_ORIENTATION = 'horizontal';\nconst MAX_AVAILABILITY_EXCEPTIONS_RANGE = 365;\nconst MAX_BOOKINGS_RANGE = 180;\nconst TODAY_MOMENT = moment().startOf('day');\nconst END_OF_RANGE_MOMENT = TODAY_MOMENT.clone().add(MAX_AVAILABILITY_EXCEPTIONS_RANGE - 1, 'days').startOf('day');\nconst END_OF_BOOKING_RANGE_MOMENT = TODAY_MOMENT.clone().add(MAX_BOOKINGS_RANGE - 1, 'days').startOf('day'); // Constants for calculating day width (aka table cell dimensions)\n\nconst TABLE_BORDER = 2;\nconst TABLE_COLUMNS = 7;\nconst MIN_CONTENT_WIDTH = 272;\nconst MIN_CELL_WIDTH = Math.floor(MIN_CONTENT_WIDTH / TABLE_COLUMNS); // 38\n\nconst MAX_CONTENT_WIDTH_DESKTOP = 756;\nconst MAX_CELL_WIDTH_DESKTOP = Math.floor(MAX_CONTENT_WIDTH_DESKTOP / TABLE_COLUMNS); // 108\n\nconst VIEWPORT_LARGE = 1024; // Helper functions\n// Calculate the width for a calendar day (table cell)\n\nconst dayWidth = (wrapperWidth, windowWith) => {\n  if (windowWith >= VIEWPORT_LARGE) {\n    // NOTE: viewportLarge has a layout with sidebar.\n    // In that layout 30% is reserved for paddings and 282 px goes to sidebar and gutter.\n    const width = windowWith * 0.7 - 282;\n    return width > MAX_CONTENT_WIDTH_DESKTOP ? MAX_CELL_WIDTH_DESKTOP : Math.floor((width - TABLE_BORDER) / TABLE_COLUMNS);\n  } else {\n    return wrapperWidth > MIN_CONTENT_WIDTH ? Math.floor((wrapperWidth - TABLE_BORDER) / TABLE_COLUMNS) : MIN_CELL_WIDTH;\n  }\n}; // Get a function that returns the start of the previous month\n\n\nconst prevMonthFn = currentMoment => currentMoment.clone().subtract(1, 'months').startOf('month'); // Get a function that returns the start of the next month\n\n\nconst nextMonthFn = currentMoment => currentMoment.clone().add(1, 'months').startOf('month'); // Get the start and end Dates in UTC\n\n\nconst dateStartAndEndInUTC = date => {\n  const start = moment(date).utc().startOf('day').toDate();\n  const end = moment(date).utc().add(1, 'days').startOf('day').toDate();\n  return {\n    start,\n    end\n  };\n};\n\nconst momentToUTCDate = dateMoment => dateMoment.clone().utc().add(dateMoment.utcOffset(), 'minutes').toDate(); // outside range -><- today ... today+MAX_AVAILABILITY_EXCEPTIONS_RANGE -1 -><- outside range\n\n\nconst isDateOutsideRange = date => {\n  return !isInclusivelyAfterDay(date, TODAY_MOMENT) || !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\n};\n\nconst isOutsideRange = memoize(isDateOutsideRange);\n\nconst isMonthInRange = (monthMoment, startOfRange, endOfRange) => {\n  const isAfterThisMonth = monthMoment.isSameOrAfter(startOfRange, 'month');\n  const isBeforeEndOfRange = monthMoment.isSameOrBefore(endOfRange, 'month');\n  return isAfterThisMonth && isBeforeEndOfRange;\n};\n\nconst isPast = date => !isInclusivelyAfterDay(date, TODAY_MOMENT);\n\nconst isAfterEndOfRange = date => !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\n\nconst isAfterEndOfBookingRange = date => !isInclusivelyBeforeDay(date, END_OF_BOOKING_RANGE_MOMENT);\n\nconst isBooked = (bookings, day) => {\n  return !!bookings.find(b => {\n    const booking = ensureBooking(b);\n    const start = booking.attributes.start;\n    const end = booking.attributes.end;\n    const dayInUTC = day.clone().utc(); // '[)' means that the range start is inclusive and range end is exclusive\n\n    return dayInUTC.isBetween(moment(start).utc(), moment(end).utc(), null, '[)');\n  });\n};\n\nconst findException = (exceptions, day) => {\n  return exceptions.find(exception => {\n    const availabilityException = ensureAvailabilityException(exception.availabilityException);\n    const start = availabilityException.attributes.start;\n    const dayInUTC = day.clone().utc();\n    return isSameDay(moment(start).utc(), dayInUTC);\n  });\n};\n\nconst isBlocked = (availabilityPlan, exception, date) => {\n  const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n  const planEntry = planEntries.find(weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]);\n  const seatsFromPlan = planEntry ? planEntry.seats : 0;\n  const seatsFromException = exception && ensureAvailabilityException(exception.availabilityException).attributes.seats;\n  const seats = exception ? seatsFromException : seatsFromPlan;\n  return seats === 0;\n};\n\nconst dateModifiers = (availabilityPlan, exceptions, bookings, date) => {\n  const exception = findException(exceptions, date);\n  return {\n    isOutsideRange: isOutsideRange(date),\n    isSameDay: isSameDay(date, TODAY_MOMENT),\n    isBlocked: isBlocked(availabilityPlan, exception, date),\n    isBooked: isBooked(bookings, date),\n    isInProgress: exception && exception.inProgress,\n    isFailed: exception && exception.error\n  };\n};\n\nconst renderDayContents = (calendar, availabilityPlan) => date => {\n  // This component is for day/night based processes.\n  const {\n    exceptions = [],\n    bookings = []\n  } = calendar[monthIdString(date, 'Etc/UTC')] || {};\n  const {\n    isOutsideRange,\n    isSameDay,\n    isBlocked,\n    isBooked,\n    isInProgress,\n    isFailed\n  } = dateModifiers(availabilityPlan, exceptions, bookings, date);\n  const dayClasses = classNames(css.default, {\n    [css.outsideRange]: isOutsideRange,\n    [css.today]: isSameDay,\n    [css.blocked]: isBlocked,\n    [css.reserved]: isBooked,\n    [css.exceptionError]: isFailed\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: css.dayWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: dayClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, isInProgress ? /*#__PURE__*/React.createElement(IconSpinner, {\n    rootClassName: css.inProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"span\", {\n    className: css.dayNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, date.format('D'))));\n};\n\nconst makeDraftException = (exceptions, start, end, seats) => {\n  const draft = ensureAvailabilityException({\n    attributes: {\n      start,\n      end,\n      seats\n    }\n  });\n  return {\n    availabilityException: draft\n  };\n}; ////////////////////////////////\n// ManageAvailabilityCalendar //\n////////////////////////////////\n\n\nclass ManageAvailabilityCalendar extends Component {\n  constructor(props) {\n    super(props); // DOM refs\n\n    this.dayPickerWrapper = null;\n    this.dayPicker = null;\n    this.state = {\n      currentMonth: moment().startOf('month'),\n      focused: true,\n      date: null\n    };\n    this.fetchMonthData = this.fetchMonthData.bind(this);\n    this.onDayAvailabilityChange = this.onDayAvailabilityChange.bind(this);\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n    this.onMonthClick = this.onMonthClick.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetch month data if user have navigated to availability tab in EditListingWizard\n    this.fetchMonthData(this.state.currentMonth); // Fetch next month too.\n\n    this.fetchMonthData(nextMonthFn(this.state.currentMonth));\n  }\n\n  fetchMonthData(monthMoment) {\n    const {\n      availability,\n      listingId\n    } = this.props; // Don't fetch exceptions for past months or too far in the future\n\n    if (isMonthInRange(monthMoment, TODAY_MOMENT, END_OF_RANGE_MOMENT)) {\n      // Use \"today\", if the first day of given month is in the past\n      const startMoment = isPast(monthMoment) ? TODAY_MOMENT : monthMoment;\n      const start = momentToUTCDate(startMoment); // Use END_OF_RANGE_MOMENT, if the first day of the next month is too far in the future\n\n      const nextMonthMoment = nextMonthFn(monthMoment);\n      const endMoment = isAfterEndOfRange(nextMonthMoment) ? END_OF_RANGE_MOMENT.clone().add(1, 'days') : nextMonthMoment;\n      const end = momentToUTCDate(endMoment); // Fetch AvailabilityExceptions for this month\n\n      availability.onFetchAvailabilityExceptions({\n        listingId,\n        start,\n        end\n      }); // Fetch Bookings if the month is within bookable range (180 days)\n\n      if (isMonthInRange(startMoment, TODAY_MOMENT, END_OF_BOOKING_RANGE_MOMENT)) {\n        const endMomentForBookings = isAfterEndOfBookingRange(nextMonthMoment) ? END_OF_BOOKING_RANGE_MOMENT.clone().add(1, 'days') : nextMonthMoment;\n        const endForBookings = momentToUTCDate(endMomentForBookings); // Fetch Bookings for this month (if they are in pending or accepted state)\n\n        const state = ['pending', 'accepted'].join(',');\n        availability.onFetchBookings({\n          listingId,\n          start,\n          end: endForBookings,\n          state\n        });\n      }\n    }\n  }\n\n  onDayAvailabilityChange(date, seats, exceptions) {\n    const {\n      availabilityPlan,\n      listingId\n    } = this.props;\n    const {\n      start,\n      end\n    } = dateStartAndEndInUTC(date);\n    const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\n    const seatsFromPlan = planEntries.find(weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]).seats;\n    const currentException = findException(exceptions, date);\n    const draftException = makeDraftException(exceptions, start, end, seatsFromPlan);\n    const exception = currentException || draftException;\n    const hasAvailabilityException = currentException && currentException.availabilityException.id;\n\n    if (hasAvailabilityException) {\n      const id = currentException.availabilityException.id;\n      const isResetToPlanSeats = seatsFromPlan === seats;\n\n      if (isResetToPlanSeats) {\n        // Delete the exception, if the exception is redundant\n        // (it has the same content as what user has in the plan).\n        this.props.availability.onDeleteAvailabilityException({\n          id,\n          currentException: exception,\n          seats: seatsFromPlan\n        });\n      } else {\n        // If availability exception exists, delete it first and then create a new one.\n        // NOTE: currently, API does not support update (only deleting and creating)\n        this.props.availability.onDeleteAvailabilityException({\n          id,\n          currentException: exception,\n          seats: seatsFromPlan\n        }).then(r => {\n          const params = {\n            listingId,\n            start,\n            end,\n            seats,\n            currentException: exception\n          };\n          this.props.availability.onCreateAvailabilityException(params);\n        });\n      }\n    } else {\n      // If there is no existing AvailabilityExceptions, just create a new one\n      const params = {\n        listingId,\n        start,\n        end,\n        seats,\n        currentException: exception\n      };\n      this.props.availability.onCreateAvailabilityException(params);\n    }\n  }\n\n  onDateChange(date) {\n    this.setState({\n      date\n    });\n    const {\n      availabilityPlan,\n      availability\n    } = this.props;\n    const calendar = availability.calendar; // This component is for day/night based processes.\n\n    const {\n      exceptions = [],\n      bookings = []\n    } = calendar[monthIdString(date, 'Etc/UTC')] || {};\n    const {\n      isPast,\n      isBlocked,\n      isBooked,\n      isInProgress\n    } = dateModifiers(availabilityPlan, exceptions, bookings, date);\n\n    if (isBooked || isPast || isInProgress) {\n      // Cannot allow or block a reserved or a past date or inProgress\n      return;\n    } else if (isBlocked) {\n      // Unblock the date (seats = 1)\n      this.onDayAvailabilityChange(date, 1, exceptions);\n    } else {\n      // Block the date (seats = 0)\n      this.onDayAvailabilityChange(date, 0, exceptions);\n    }\n  }\n\n  onFocusChange() {\n    // Force the state.focused to always be truthy so that date is always selectable\n    this.setState({\n      focused: true\n    });\n  }\n\n  onMonthClick(monthFn) {\n    const onMonthChanged = this.props.onMonthChanged;\n    this.setState(prevState => ({\n      currentMonth: monthFn(prevState.currentMonth)\n    }), () => {\n      // Callback function after month has been updated.\n      // react-dates component has next and previous months ready (but inivisible).\n      // we try to populate those invisible months before user advances there.\n      this.fetchMonthData(monthFn(this.state.currentMonth)); // If previous fetch for month data failed, try again.\n\n      const monthId = monthIdString(this.state.currentMonth);\n      const currentMonthData = this.props.availability.calendar[monthId];\n      const {\n        fetchExceptionsError,\n        fetchBookingsError\n      } = currentMonthData || {};\n\n      if (currentMonthData && (fetchExceptionsError || fetchBookingsError)) {\n        this.fetchMonthData(this.state.currentMonth);\n      } // Call onMonthChanged function if it has been passed in among props.\n\n\n      if (onMonthChanged) {\n        onMonthChanged(monthIdString(this.state.currentMonth));\n      }\n    });\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      listingId,\n      availability,\n      availabilityPlan,\n      onMonthChanged,\n      monthFormat,\n      ...rest\n    } = this.props;\n    const {\n      focused,\n      date,\n      currentMonth\n    } = this.state;\n    const {\n      clientWidth: width\n    } = this.dayPickerWrapper || {\n      clientWidth: 0\n    };\n    const hasWindow = typeof window !== 'undefined';\n    const windowWidth = hasWindow ? window.innerWidth : 0;\n    const daySize = dayWidth(width, windowWidth);\n    const calendarGridWidth = daySize * TABLE_COLUMNS + TABLE_BORDER;\n    const calendar = availability.calendar;\n    const currentMonthData = calendar[monthIdString(currentMonth)];\n    const {\n      fetchExceptionsInProgress,\n      fetchBookingsInProgress,\n      fetchExceptionsError,\n      fetchBookingsError\n    } = currentMonthData || {};\n    const isMonthDataFetched = !isMonthInRange(currentMonth, TODAY_MOMENT, END_OF_RANGE_MOMENT) || !!currentMonthData && !fetchExceptionsInProgress && !fetchBookingsInProgress;\n    const monthName = currentMonth.format('MMMM');\n    const classes = classNames(rootClassName || css.root, className);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      ref: c => {\n        this.dayPickerWrapper = c;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 7\n      }\n    }, width > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: `${calendarGridWidth}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DayPickerSingleDateController, Object.assign({}, rest, {\n      ref: c => {\n        this.dayPicker = c;\n      },\n      numberOfMonths: 1,\n      navPrev: /*#__PURE__*/React.createElement(IconArrowHead, {\n        direction: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 24\n        }\n      }),\n      navNext: /*#__PURE__*/React.createElement(IconArrowHead, {\n        direction: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 24\n        }\n      }),\n      weekDayFormat: \"ddd\",\n      daySize: daySize,\n      renderDayContents: renderDayContents(calendar, availabilityPlan),\n      focused: focused,\n      date: date,\n      onDateChange: this.onDateChange,\n      onFocusChange: this.onFocusChange,\n      onPrevMonthClick: () => this.onMonthClick(prevMonthFn),\n      onNextMonthClick: () => this.onMonthClick(nextMonthFn),\n      hideKeyboardShortcutsPanel: true,\n      horizontalMonthPadding: 9,\n      renderMonthElement: ({\n        month\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        className: css.monthElement,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: css.monthString,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 19\n        }\n      }, month.format(monthFormat)), !isMonthDataFetched ? /*#__PURE__*/React.createElement(IconSpinner, {\n        rootClassName: css.monthInProgress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 42\n        }\n      }) : null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 13\n      }\n    }))) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.legend,\n      style: {\n        width: `${calendarGridWidth}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.legendRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendAvailableColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.availableDay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.legendRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendBlockedColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.blockedDay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.legendRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendReservedColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.legendText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.bookedDay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 15\n      }\n    })))), fetchExceptionsError && fetchBookingsError ? /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"EditListingAvailabilityForm.fetchMonthDataFailed\",\n      values: {\n        month: monthName\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 13\n      }\n    })) : null);\n  }\n\n}\n\nManageAvailabilityCalendar.defaultProps = {\n  className: null,\n  rootClassName: null,\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  isDayBlocked: () => false,\n  isOutsideRange,\n  isDayHighlighted: () => false,\n  enableOutsideDays: true,\n  // calendar presentation and interaction related props\n  orientation: HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n\n  onOutsideClick() {},\n\n  keepOpenOnDateSelect: false,\n  renderCalendarInfo: null,\n  isRTL: false,\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n\n  onPrevMonthClick() {},\n\n  onNextMonthClick() {},\n\n  // internationalization\n  monthFormat: 'MMMM YYYY',\n  onMonthChanged: null\n};\nManageAvailabilityCalendar.propTypes = {\n  className: string,\n  rootClassName: string,\n  availability: shape({\n    calendar: object.isRequired,\n    onFetchAvailabilityExceptions: func.isRequired,\n    onFetchBookings: func.isRequired,\n    onDeleteAvailabilityException: func.isRequired,\n    onCreateAvailabilityException: func.isRequired\n  }).isRequired,\n  availabilityPlan: propTypes.availabilityPlan.isRequired,\n  onMonthChanged: func\n};\nexport default ManageAvailabilityCalendar;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/ManageAvailabilityCalendar.js"],"names":["React","Component","func","object","shape","string","DayPickerSingleDateController","isSameDay","isInclusivelyBeforeDay","isInclusivelyAfterDay","memoize","classNames","moment","FormattedMessage","ensureBooking","ensureAvailabilityException","ensureDayAvailabilityPlan","DAYS_OF_WEEK","propTypes","monthIdString","IconArrowHead","IconSpinner","css","HORIZONTAL_ORIENTATION","MAX_AVAILABILITY_EXCEPTIONS_RANGE","MAX_BOOKINGS_RANGE","TODAY_MOMENT","startOf","END_OF_RANGE_MOMENT","clone","add","END_OF_BOOKING_RANGE_MOMENT","TABLE_BORDER","TABLE_COLUMNS","MIN_CONTENT_WIDTH","MIN_CELL_WIDTH","Math","floor","MAX_CONTENT_WIDTH_DESKTOP","MAX_CELL_WIDTH_DESKTOP","VIEWPORT_LARGE","dayWidth","wrapperWidth","windowWith","width","prevMonthFn","currentMoment","subtract","nextMonthFn","dateStartAndEndInUTC","date","start","utc","toDate","end","momentToUTCDate","dateMoment","utcOffset","isDateOutsideRange","isOutsideRange","isMonthInRange","monthMoment","startOfRange","endOfRange","isAfterThisMonth","isSameOrAfter","isBeforeEndOfRange","isSameOrBefore","isPast","isAfterEndOfRange","isAfterEndOfBookingRange","isBooked","bookings","day","find","b","booking","attributes","dayInUTC","isBetween","findException","exceptions","exception","availabilityException","isBlocked","availabilityPlan","planEntries","entries","planEntry","weekDayEntry","dayOfWeek","isoWeekday","seatsFromPlan","seats","seatsFromException","dateModifiers","isInProgress","inProgress","isFailed","error","renderDayContents","calendar","dayClasses","default","outsideRange","today","blocked","reserved","exceptionError","dayWrapper","dayNumber","format","makeDraftException","draft","ManageAvailabilityCalendar","constructor","props","dayPickerWrapper","dayPicker","state","currentMonth","focused","fetchMonthData","bind","onDayAvailabilityChange","onDateChange","onFocusChange","onMonthClick","componentDidMount","availability","listingId","startMoment","nextMonthMoment","endMoment","onFetchAvailabilityExceptions","endMomentForBookings","endForBookings","join","onFetchBookings","currentException","draftException","hasAvailabilityException","id","isResetToPlanSeats","onDeleteAvailabilityException","then","r","params","onCreateAvailabilityException","setState","monthFn","onMonthChanged","prevState","monthId","currentMonthData","fetchExceptionsError","fetchBookingsError","render","className","rootClassName","monthFormat","rest","clientWidth","hasWindow","window","windowWidth","innerWidth","daySize","calendarGridWidth","fetchExceptionsInProgress","fetchBookingsInProgress","isMonthDataFetched","monthName","classes","root","c","month","monthElement","monthString","monthInProgress","legend","legendRow","legendAvailableColor","legendText","legendBlockedColor","legendReservedColor","defaultProps","renderCalendarDay","undefined","isDayBlocked","isDayHighlighted","enableOutsideDays","orientation","withPortal","initialVisibleMonth","numberOfMonths","onOutsideClick","keepOpenOnDateSelect","renderCalendarInfo","isRTL","navPrev","navNext","onPrevMonthClick","onNextMonthClick","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { func, object, shape, string } from 'prop-types';\r\nimport {\r\n  DayPickerSingleDateController,\r\n  isSameDay,\r\n  isInclusivelyBeforeDay,\r\n  isInclusivelyAfterDay,\r\n} from 'react-dates';\r\nimport memoize from 'lodash/memoize';\r\nimport classNames from 'classnames';\r\nimport moment from 'moment';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport {\r\n  ensureBooking,\r\n  ensureAvailabilityException,\r\n  ensureDayAvailabilityPlan,\r\n} from '../../../../util/data';\r\nimport { DAYS_OF_WEEK, propTypes } from '../../../../util/types';\r\nimport { monthIdString } from '../../../../util/dates';\r\n\r\n// Import shared components\r\nimport { IconArrowHead, IconSpinner } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport css from './ManageAvailabilityCalendar.module.css';\r\n\r\n// Constants\r\n\r\nconst HORIZONTAL_ORIENTATION = 'horizontal';\r\nconst MAX_AVAILABILITY_EXCEPTIONS_RANGE = 365;\r\nconst MAX_BOOKINGS_RANGE = 180;\r\nconst TODAY_MOMENT = moment().startOf('day');\r\nconst END_OF_RANGE_MOMENT = TODAY_MOMENT.clone()\r\n  .add(MAX_AVAILABILITY_EXCEPTIONS_RANGE - 1, 'days')\r\n  .startOf('day');\r\nconst END_OF_BOOKING_RANGE_MOMENT = TODAY_MOMENT.clone()\r\n  .add(MAX_BOOKINGS_RANGE - 1, 'days')\r\n  .startOf('day');\r\n\r\n// Constants for calculating day width (aka table cell dimensions)\r\nconst TABLE_BORDER = 2;\r\nconst TABLE_COLUMNS = 7;\r\nconst MIN_CONTENT_WIDTH = 272;\r\nconst MIN_CELL_WIDTH = Math.floor(MIN_CONTENT_WIDTH / TABLE_COLUMNS); // 38\r\nconst MAX_CONTENT_WIDTH_DESKTOP = 756;\r\nconst MAX_CELL_WIDTH_DESKTOP = Math.floor(MAX_CONTENT_WIDTH_DESKTOP / TABLE_COLUMNS); // 108\r\nconst VIEWPORT_LARGE = 1024;\r\n\r\n// Helper functions\r\n\r\n// Calculate the width for a calendar day (table cell)\r\nconst dayWidth = (wrapperWidth, windowWith) => {\r\n  if (windowWith >= VIEWPORT_LARGE) {\r\n    // NOTE: viewportLarge has a layout with sidebar.\r\n    // In that layout 30% is reserved for paddings and 282 px goes to sidebar and gutter.\r\n    const width = windowWith * 0.7 - 282;\r\n    return width > MAX_CONTENT_WIDTH_DESKTOP\r\n      ? MAX_CELL_WIDTH_DESKTOP\r\n      : Math.floor((width - TABLE_BORDER) / TABLE_COLUMNS);\r\n  } else {\r\n    return wrapperWidth > MIN_CONTENT_WIDTH\r\n      ? Math.floor((wrapperWidth - TABLE_BORDER) / TABLE_COLUMNS)\r\n      : MIN_CELL_WIDTH;\r\n  }\r\n};\r\n\r\n// Get a function that returns the start of the previous month\r\nconst prevMonthFn = currentMoment =>\r\n  currentMoment\r\n    .clone()\r\n    .subtract(1, 'months')\r\n    .startOf('month');\r\n\r\n// Get a function that returns the start of the next month\r\nconst nextMonthFn = currentMoment =>\r\n  currentMoment\r\n    .clone()\r\n    .add(1, 'months')\r\n    .startOf('month');\r\n\r\n// Get the start and end Dates in UTC\r\nconst dateStartAndEndInUTC = date => {\r\n  const start = moment(date)\r\n    .utc()\r\n    .startOf('day')\r\n    .toDate();\r\n  const end = moment(date)\r\n    .utc()\r\n    .add(1, 'days')\r\n    .startOf('day')\r\n    .toDate();\r\n  return { start, end };\r\n};\r\n\r\nconst momentToUTCDate = dateMoment =>\r\n  dateMoment\r\n    .clone()\r\n    .utc()\r\n    .add(dateMoment.utcOffset(), 'minutes')\r\n    .toDate();\r\n\r\n// outside range -><- today ... today+MAX_AVAILABILITY_EXCEPTIONS_RANGE -1 -><- outside range\r\nconst isDateOutsideRange = date => {\r\n  return (\r\n    !isInclusivelyAfterDay(date, TODAY_MOMENT) || !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT)\r\n  );\r\n};\r\nconst isOutsideRange = memoize(isDateOutsideRange);\r\n\r\nconst isMonthInRange = (monthMoment, startOfRange, endOfRange) => {\r\n  const isAfterThisMonth = monthMoment.isSameOrAfter(startOfRange, 'month');\r\n  const isBeforeEndOfRange = monthMoment.isSameOrBefore(endOfRange, 'month');\r\n  return isAfterThisMonth && isBeforeEndOfRange;\r\n};\r\n\r\nconst isPast = date => !isInclusivelyAfterDay(date, TODAY_MOMENT);\r\nconst isAfterEndOfRange = date => !isInclusivelyBeforeDay(date, END_OF_RANGE_MOMENT);\r\nconst isAfterEndOfBookingRange = date => !isInclusivelyBeforeDay(date, END_OF_BOOKING_RANGE_MOMENT);\r\n\r\nconst isBooked = (bookings, day) => {\r\n  return !!bookings.find(b => {\r\n    const booking = ensureBooking(b);\r\n    const start = booking.attributes.start;\r\n    const end = booking.attributes.end;\r\n    const dayInUTC = day.clone().utc();\r\n\r\n    // '[)' means that the range start is inclusive and range end is exclusive\r\n    return dayInUTC.isBetween(moment(start).utc(), moment(end).utc(), null, '[)');\r\n  });\r\n};\r\n\r\nconst findException = (exceptions, day) => {\r\n  return exceptions.find(exception => {\r\n    const availabilityException = ensureAvailabilityException(exception.availabilityException);\r\n    const start = availabilityException.attributes.start;\r\n    const dayInUTC = day.clone().utc();\r\n    return isSameDay(moment(start).utc(), dayInUTC);\r\n  });\r\n};\r\n\r\nconst isBlocked = (availabilityPlan, exception, date) => {\r\n  const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\r\n  const planEntry = planEntries.find(\r\n    weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]\r\n  );\r\n  const seatsFromPlan = planEntry ? planEntry.seats : 0;\r\n\r\n  const seatsFromException =\r\n    exception && ensureAvailabilityException(exception.availabilityException).attributes.seats;\r\n\r\n  const seats = exception ? seatsFromException : seatsFromPlan;\r\n  return seats === 0;\r\n};\r\n\r\nconst dateModifiers = (availabilityPlan, exceptions, bookings, date) => {\r\n  const exception = findException(exceptions, date);\r\n\r\n  return {\r\n    isOutsideRange: isOutsideRange(date),\r\n    isSameDay: isSameDay(date, TODAY_MOMENT),\r\n    isBlocked: isBlocked(availabilityPlan, exception, date),\r\n    isBooked: isBooked(bookings, date),\r\n    isInProgress: exception && exception.inProgress,\r\n    isFailed: exception && exception.error,\r\n  };\r\n};\r\n\r\nconst renderDayContents = (calendar, availabilityPlan) => date => {\r\n  // This component is for day/night based processes.\r\n  const { exceptions = [], bookings = [] } = calendar[monthIdString(date, 'Etc/UTC')] || {};\r\n  const { isOutsideRange, isSameDay, isBlocked, isBooked, isInProgress, isFailed } = dateModifiers(\r\n    availabilityPlan,\r\n    exceptions,\r\n    bookings,\r\n    date\r\n  );\r\n\r\n  const dayClasses = classNames(css.default, {\r\n    [css.outsideRange]: isOutsideRange,\r\n    [css.today]: isSameDay,\r\n    [css.blocked]: isBlocked,\r\n    [css.reserved]: isBooked,\r\n    [css.exceptionError]: isFailed,\r\n  });\r\n\r\n  return (\r\n    <div className={css.dayWrapper}>\r\n      <span className={dayClasses}>\r\n        {isInProgress ? (\r\n          <IconSpinner rootClassName={css.inProgress} />\r\n        ) : (\r\n          <span className={css.dayNumber}>{date.format('D')}</span>\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst makeDraftException = (exceptions, start, end, seats) => {\r\n  const draft = ensureAvailabilityException({ attributes: { start, end, seats } });\r\n  return { availabilityException: draft };\r\n};\r\n\r\n////////////////////////////////\r\n// ManageAvailabilityCalendar //\r\n////////////////////////////////\r\nclass ManageAvailabilityCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // DOM refs\r\n    this.dayPickerWrapper = null;\r\n    this.dayPicker = null;\r\n\r\n    this.state = {\r\n      currentMonth: moment().startOf('month'),\r\n      focused: true,\r\n      date: null,\r\n    };\r\n\r\n    this.fetchMonthData = this.fetchMonthData.bind(this);\r\n    this.onDayAvailabilityChange = this.onDayAvailabilityChange.bind(this);\r\n    this.onDateChange = this.onDateChange.bind(this);\r\n    this.onFocusChange = this.onFocusChange.bind(this);\r\n    this.onMonthClick = this.onMonthClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Fetch month data if user have navigated to availability tab in EditListingWizard\r\n    this.fetchMonthData(this.state.currentMonth);\r\n    // Fetch next month too.\r\n    this.fetchMonthData(nextMonthFn(this.state.currentMonth));\r\n  }\r\n\r\n  fetchMonthData(monthMoment) {\r\n    const { availability, listingId } = this.props;\r\n\r\n    // Don't fetch exceptions for past months or too far in the future\r\n    if (isMonthInRange(monthMoment, TODAY_MOMENT, END_OF_RANGE_MOMENT)) {\r\n      // Use \"today\", if the first day of given month is in the past\r\n      const startMoment = isPast(monthMoment) ? TODAY_MOMENT : monthMoment;\r\n      const start = momentToUTCDate(startMoment);\r\n\r\n      // Use END_OF_RANGE_MOMENT, if the first day of the next month is too far in the future\r\n      const nextMonthMoment = nextMonthFn(monthMoment);\r\n      const endMoment = isAfterEndOfRange(nextMonthMoment)\r\n        ? END_OF_RANGE_MOMENT.clone().add(1, 'days')\r\n        : nextMonthMoment;\r\n      const end = momentToUTCDate(endMoment);\r\n\r\n      // Fetch AvailabilityExceptions for this month\r\n      availability.onFetchAvailabilityExceptions({ listingId, start, end });\r\n\r\n      // Fetch Bookings if the month is within bookable range (180 days)\r\n      if (isMonthInRange(startMoment, TODAY_MOMENT, END_OF_BOOKING_RANGE_MOMENT)) {\r\n        const endMomentForBookings = isAfterEndOfBookingRange(nextMonthMoment)\r\n          ? END_OF_BOOKING_RANGE_MOMENT.clone().add(1, 'days')\r\n          : nextMonthMoment;\r\n        const endForBookings = momentToUTCDate(endMomentForBookings);\r\n\r\n        // Fetch Bookings for this month (if they are in pending or accepted state)\r\n        const state = ['pending', 'accepted'].join(',');\r\n        availability.onFetchBookings({ listingId, start, end: endForBookings, state });\r\n      }\r\n    }\r\n  }\r\n\r\n  onDayAvailabilityChange(date, seats, exceptions) {\r\n    const { availabilityPlan, listingId } = this.props;\r\n    const { start, end } = dateStartAndEndInUTC(date);\r\n\r\n    const planEntries = ensureDayAvailabilityPlan(availabilityPlan).entries;\r\n    const seatsFromPlan = planEntries.find(\r\n      weekDayEntry => weekDayEntry.dayOfWeek === DAYS_OF_WEEK[date.isoWeekday() - 1]\r\n    ).seats;\r\n\r\n    const currentException = findException(exceptions, date);\r\n    const draftException = makeDraftException(exceptions, start, end, seatsFromPlan);\r\n    const exception = currentException || draftException;\r\n    const hasAvailabilityException = currentException && currentException.availabilityException.id;\r\n\r\n    if (hasAvailabilityException) {\r\n      const id = currentException.availabilityException.id;\r\n      const isResetToPlanSeats = seatsFromPlan === seats;\r\n\r\n      if (isResetToPlanSeats) {\r\n        // Delete the exception, if the exception is redundant\r\n        // (it has the same content as what user has in the plan).\r\n        this.props.availability.onDeleteAvailabilityException({\r\n          id,\r\n          currentException: exception,\r\n          seats: seatsFromPlan,\r\n        });\r\n      } else {\r\n        // If availability exception exists, delete it first and then create a new one.\r\n        // NOTE: currently, API does not support update (only deleting and creating)\r\n        this.props.availability\r\n          .onDeleteAvailabilityException({ id, currentException: exception, seats: seatsFromPlan })\r\n          .then(r => {\r\n            const params = { listingId, start, end, seats, currentException: exception };\r\n            this.props.availability.onCreateAvailabilityException(params);\r\n          });\r\n      }\r\n    } else {\r\n      // If there is no existing AvailabilityExceptions, just create a new one\r\n      const params = { listingId, start, end, seats, currentException: exception };\r\n      this.props.availability.onCreateAvailabilityException(params);\r\n    }\r\n  }\r\n\r\n  onDateChange(date) {\r\n    this.setState({ date });\r\n\r\n    const { availabilityPlan, availability } = this.props;\r\n    const calendar = availability.calendar;\r\n    // This component is for day/night based processes.\r\n    const { exceptions = [], bookings = [] } = calendar[monthIdString(date, 'Etc/UTC')] || {};\r\n    const { isPast, isBlocked, isBooked, isInProgress } = dateModifiers(\r\n      availabilityPlan,\r\n      exceptions,\r\n      bookings,\r\n      date\r\n    );\r\n\r\n    if (isBooked || isPast || isInProgress) {\r\n      // Cannot allow or block a reserved or a past date or inProgress\r\n      return;\r\n    } else if (isBlocked) {\r\n      // Unblock the date (seats = 1)\r\n      this.onDayAvailabilityChange(date, 1, exceptions);\r\n    } else {\r\n      // Block the date (seats = 0)\r\n      this.onDayAvailabilityChange(date, 0, exceptions);\r\n    }\r\n  }\r\n\r\n  onFocusChange() {\r\n    // Force the state.focused to always be truthy so that date is always selectable\r\n    this.setState({ focused: true });\r\n  }\r\n\r\n  onMonthClick(monthFn) {\r\n    const onMonthChanged = this.props.onMonthChanged;\r\n    this.setState(\r\n      prevState => ({ currentMonth: monthFn(prevState.currentMonth) }),\r\n      () => {\r\n        // Callback function after month has been updated.\r\n        // react-dates component has next and previous months ready (but inivisible).\r\n        // we try to populate those invisible months before user advances there.\r\n        this.fetchMonthData(monthFn(this.state.currentMonth));\r\n\r\n        // If previous fetch for month data failed, try again.\r\n        const monthId = monthIdString(this.state.currentMonth);\r\n        const currentMonthData = this.props.availability.calendar[monthId];\r\n        const { fetchExceptionsError, fetchBookingsError } = currentMonthData || {};\r\n        if (currentMonthData && (fetchExceptionsError || fetchBookingsError)) {\r\n          this.fetchMonthData(this.state.currentMonth);\r\n        }\r\n\r\n        // Call onMonthChanged function if it has been passed in among props.\r\n        if (onMonthChanged) {\r\n          onMonthChanged(monthIdString(this.state.currentMonth));\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      listingId,\r\n      availability,\r\n      availabilityPlan,\r\n      onMonthChanged,\r\n      monthFormat,\r\n      ...rest\r\n    } = this.props;\r\n    const { focused, date, currentMonth } = this.state;\r\n    const { clientWidth: width } = this.dayPickerWrapper || { clientWidth: 0 };\r\n    const hasWindow = typeof window !== 'undefined';\r\n    const windowWidth = hasWindow ? window.innerWidth : 0;\r\n\r\n    const daySize = dayWidth(width, windowWidth);\r\n    const calendarGridWidth = daySize * TABLE_COLUMNS + TABLE_BORDER;\r\n\r\n    const calendar = availability.calendar;\r\n    const currentMonthData = calendar[monthIdString(currentMonth)];\r\n    const {\r\n      fetchExceptionsInProgress,\r\n      fetchBookingsInProgress,\r\n      fetchExceptionsError,\r\n      fetchBookingsError,\r\n    } = currentMonthData || {};\r\n    const isMonthDataFetched =\r\n      !isMonthInRange(currentMonth, TODAY_MOMENT, END_OF_RANGE_MOMENT) ||\r\n      (!!currentMonthData && !fetchExceptionsInProgress && !fetchBookingsInProgress);\r\n\r\n    const monthName = currentMonth.format('MMMM');\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    return (\r\n      <div\r\n        className={classes}\r\n        ref={c => {\r\n          this.dayPickerWrapper = c;\r\n        }}\r\n      >\r\n        {width > 0 ? (\r\n          <div style={{ width: `${calendarGridWidth}px` }}>\r\n            <DayPickerSingleDateController\r\n              {...rest}\r\n              ref={c => {\r\n                this.dayPicker = c;\r\n              }}\r\n              numberOfMonths={1}\r\n              navPrev={<IconArrowHead direction=\"left\" />}\r\n              navNext={<IconArrowHead direction=\"right\" />}\r\n              weekDayFormat=\"ddd\"\r\n              daySize={daySize}\r\n              renderDayContents={renderDayContents(calendar, availabilityPlan)}\r\n              focused={focused}\r\n              date={date}\r\n              onDateChange={this.onDateChange}\r\n              onFocusChange={this.onFocusChange}\r\n              onPrevMonthClick={() => this.onMonthClick(prevMonthFn)}\r\n              onNextMonthClick={() => this.onMonthClick(nextMonthFn)}\r\n              hideKeyboardShortcutsPanel\r\n              horizontalMonthPadding={9}\r\n              renderMonthElement={({ month }) => (\r\n                <div className={css.monthElement}>\r\n                  <span className={css.monthString}>{month.format(monthFormat)}</span>\r\n                  {!isMonthDataFetched ? <IconSpinner rootClassName={css.monthInProgress} /> : null}\r\n                </div>\r\n              )}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <div className={css.legend} style={{ width: `${calendarGridWidth}px` }}>\r\n          <div className={css.legendRow}>\r\n            <span className={css.legendAvailableColor} />\r\n            <span className={css.legendText}>\r\n              <FormattedMessage id=\"EditListingAvailabilityForm.availableDay\" />\r\n            </span>\r\n          </div>\r\n          <div className={css.legendRow}>\r\n            <span className={css.legendBlockedColor} />\r\n            <span className={css.legendText}>\r\n              <FormattedMessage id=\"EditListingAvailabilityForm.blockedDay\" />\r\n            </span>\r\n          </div>\r\n          <div className={css.legendRow}>\r\n            <span className={css.legendReservedColor} />\r\n            <span className={css.legendText}>\r\n              <FormattedMessage id=\"EditListingAvailabilityForm.bookedDay\" />\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {fetchExceptionsError && fetchBookingsError ? (\r\n          <p className={css.error}>\r\n            <FormattedMessage\r\n              id=\"EditListingAvailabilityForm.fetchMonthDataFailed\"\r\n              values={{ month: monthName }}\r\n            />\r\n          </p>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nManageAvailabilityCalendar.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n\r\n  // day presentation and interaction related props\r\n  renderCalendarDay: undefined,\r\n  renderDayContents: null,\r\n  isDayBlocked: () => false,\r\n  isOutsideRange,\r\n  isDayHighlighted: () => false,\r\n  enableOutsideDays: true,\r\n\r\n  // calendar presentation and interaction related props\r\n  orientation: HORIZONTAL_ORIENTATION,\r\n  withPortal: false,\r\n  initialVisibleMonth: null,\r\n  numberOfMonths: 2,\r\n  onOutsideClick() {},\r\n  keepOpenOnDateSelect: false,\r\n  renderCalendarInfo: null,\r\n  isRTL: false,\r\n\r\n  // navigation related props\r\n  navPrev: null,\r\n  navNext: null,\r\n  onPrevMonthClick() {},\r\n  onNextMonthClick() {},\r\n\r\n  // internationalization\r\n  monthFormat: 'MMMM YYYY',\r\n  onMonthChanged: null,\r\n};\r\n\r\nManageAvailabilityCalendar.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  availability: shape({\r\n    calendar: object.isRequired,\r\n    onFetchAvailabilityExceptions: func.isRequired,\r\n    onFetchBookings: func.isRequired,\r\n    onDeleteAvailabilityException: func.isRequired,\r\n    onCreateAvailabilityException: func.isRequired,\r\n  }).isRequired,\r\n  availabilityPlan: propTypes.availabilityPlan.isRequired,\r\n  onMonthChanged: func,\r\n};\r\n\r\nexport default ManageAvailabilityCalendar;\r\n"]},"metadata":{},"sourceType":"module"}