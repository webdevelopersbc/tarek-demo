{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\util\\\\includeScripts.js\";\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport config from '../config';\nconst MAPBOX_SCRIPT_ID = 'mapbox_GL_JS';\nconst GOOGLE_MAPS_SCRIPT_ID = 'GoogleMapsApi';\nconst isGoogleMapsInUse = config.maps.mapProvider === 'GOOGLE_MAPS';\nconst isMapboxInUse = config.maps.mapProvider === 'MAPBOX';\n/**\r\n * Include Map Provider scripts.\r\n * These scripts are relevant for whole application: location search in Topbar and maps on different pages.\r\n * However, if you don't need location search and maps, you can just omit this component from app.js\r\n * Note: another common point to add <scripts>, <links> and <meta> tags is Page.js\r\n */\n\nexport const IncludeMapLibraryScripts = () => {\n  // Collect relevant map libraries\n  let mapLibraries = [];\n\n  if (isMapboxInUse) {\n    // NOTE: remember to update mapbox-sdk.min.js to a new version regularly.\n    // mapbox-sdk.min.js is included from static folder for CSP purposes.\n    mapLibraries.push( /*#__PURE__*/React.createElement(\"script\", {\n      key: \"mapboxSDK\",\n      src: `${config.canonicalRootURL}/static/scripts/mapbox/mapbox-sdk.min.js`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    })); // Add CSS for Mapbox map\n\n    mapLibraries.push( /*#__PURE__*/React.createElement(\"link\", {\n      key: \"mapbox_GL_CSS\",\n      href: \"https://api.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css\",\n      rel: \"stylesheet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    })); // Add Mapbox library\n\n    mapLibraries.push( /*#__PURE__*/React.createElement(\"script\", {\n      id: MAPBOX_SCRIPT_ID,\n      key: \"mapbox_GL_JS\",\n      src: \"https://api.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }));\n  } else if (isGoogleMapsInUse) {\n    // Add Google Maps library\n    mapLibraries.push( /*#__PURE__*/React.createElement(\"script\", {\n      id: GOOGLE_MAPS_SCRIPT_ID,\n      key: \"GoogleMapsApi\",\n      src: `https://maps.googleapis.com/maps/api/js?key=${config.maps.googleMapsAPIKey}&libraries=places`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  const isBrowser = typeof window !== 'undefined';\n  const isMapboxLoaded = isBrowser && window.mapboxgl; // If Mapbox is loaded, we can set the accessToken already here.\n  // This is the execution flow with the production build,\n  // since SSR includes those map libraries to <head> of the app.\n\n  if (isMapboxInUse && isMapboxLoaded && !window.mapboxgl.accessToken) {\n    // Add access token for Mapbox library\n    window.mapboxgl.accessToken = config.maps.mapboxAccessToken;\n  } // If the script is added on client side as a reaction to page navigation or\n  // the app is rendered on client side entirely (e.g. HMR/WebpackDevServer),\n  // we need to listen when the script is loaded.\n\n\n  const onMapLibLoaded = () => {\n    // At this point we know that map library is loaded after it's dynamically included\n    if (isMapboxInUse && !window.mapboxgl.accessToken) {\n      // Add access token for Mapbox sdk.\n      window.mapboxgl.accessToken = config.maps.mapboxAccessToken;\n    }\n  }; // React Helmet Async doesn't support onLoad prop for scripts.\n  // However, it does have onChangeClientState functionality.\n  // We can use that to start listen 'load' events when the library is added on client-side.\n\n\n  const onChangeClientState = (newState, addedTags) => {\n    if (addedTags && addedTags.scriptTags) {\n      const foundScript = addedTags.scriptTags.find(s => [MAPBOX_SCRIPT_ID, GOOGLE_MAPS_SCRIPT_ID].includes(s.id));\n\n      if (foundScript) {\n        foundScript.addEventListener('load', onMapLibLoaded, {\n          once: true\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Helmet, {\n    onChangeClientState: onChangeClientState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 10\n    }\n  }, mapLibraries);\n};\n_c = IncludeMapLibraryScripts;\n\nvar _c;\n\n$RefreshReg$(_c, \"IncludeMapLibraryScripts\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/util/includeScripts.js"],"names":["React","Helmet","config","MAPBOX_SCRIPT_ID","GOOGLE_MAPS_SCRIPT_ID","isGoogleMapsInUse","maps","mapProvider","isMapboxInUse","IncludeMapLibraryScripts","mapLibraries","push","canonicalRootURL","googleMapsAPIKey","isBrowser","window","isMapboxLoaded","mapboxgl","accessToken","mapboxAccessToken","onMapLibLoaded","onChangeClientState","newState","addedTags","scriptTags","foundScript","find","s","includes","id","addEventListener","once"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport config from '../config';\r\n\r\nconst MAPBOX_SCRIPT_ID = 'mapbox_GL_JS';\r\nconst GOOGLE_MAPS_SCRIPT_ID = 'GoogleMapsApi';\r\n\r\nconst isGoogleMapsInUse = config.maps.mapProvider === 'GOOGLE_MAPS';\r\nconst isMapboxInUse = config.maps.mapProvider === 'MAPBOX';\r\n\r\n/**\r\n * Include Map Provider scripts.\r\n * These scripts are relevant for whole application: location search in Topbar and maps on different pages.\r\n * However, if you don't need location search and maps, you can just omit this component from app.js\r\n * Note: another common point to add <scripts>, <links> and <meta> tags is Page.js\r\n */\r\nexport const IncludeMapLibraryScripts = () => {\r\n  // Collect relevant map libraries\r\n  let mapLibraries = [];\r\n\r\n  if (isMapboxInUse) {\r\n    // NOTE: remember to update mapbox-sdk.min.js to a new version regularly.\r\n    // mapbox-sdk.min.js is included from static folder for CSP purposes.\r\n    mapLibraries.push(\r\n      <script\r\n        key=\"mapboxSDK\"\r\n        src={`${config.canonicalRootURL}/static/scripts/mapbox/mapbox-sdk.min.js`}\r\n      ></script>\r\n    );\r\n    // Add CSS for Mapbox map\r\n    mapLibraries.push(\r\n      <link\r\n        key=\"mapbox_GL_CSS\"\r\n        href=\"https://api.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.css\"\r\n        rel=\"stylesheet\"\r\n      />\r\n    );\r\n    // Add Mapbox library\r\n    mapLibraries.push(\r\n      <script\r\n        id={MAPBOX_SCRIPT_ID}\r\n        key=\"mapbox_GL_JS\"\r\n        src=\"https://api.mapbox.com/mapbox-gl-js/v1.0.0/mapbox-gl.js\"\r\n      ></script>\r\n    );\r\n  } else if (isGoogleMapsInUse) {\r\n    // Add Google Maps library\r\n    mapLibraries.push(\r\n      <script\r\n        id={GOOGLE_MAPS_SCRIPT_ID}\r\n        key=\"GoogleMapsApi\"\r\n        src={`https://maps.googleapis.com/maps/api/js?key=${config.maps.googleMapsAPIKey}&libraries=places`}\r\n      ></script>\r\n    );\r\n  }\r\n\r\n  const isBrowser = typeof window !== 'undefined';\r\n  const isMapboxLoaded = isBrowser && window.mapboxgl;\r\n\r\n  // If Mapbox is loaded, we can set the accessToken already here.\r\n  // This is the execution flow with the production build,\r\n  // since SSR includes those map libraries to <head> of the app.\r\n  if (isMapboxInUse && isMapboxLoaded && !window.mapboxgl.accessToken) {\r\n    // Add access token for Mapbox library\r\n    window.mapboxgl.accessToken = config.maps.mapboxAccessToken;\r\n  }\r\n\r\n  // If the script is added on client side as a reaction to page navigation or\r\n  // the app is rendered on client side entirely (e.g. HMR/WebpackDevServer),\r\n  // we need to listen when the script is loaded.\r\n  const onMapLibLoaded = () => {\r\n    // At this point we know that map library is loaded after it's dynamically included\r\n    if (isMapboxInUse && !window.mapboxgl.accessToken) {\r\n      // Add access token for Mapbox sdk.\r\n      window.mapboxgl.accessToken = config.maps.mapboxAccessToken;\r\n    }\r\n  };\r\n\r\n  // React Helmet Async doesn't support onLoad prop for scripts.\r\n  // However, it does have onChangeClientState functionality.\r\n  // We can use that to start listen 'load' events when the library is added on client-side.\r\n  const onChangeClientState = (newState, addedTags) => {\r\n    if (addedTags && addedTags.scriptTags) {\r\n      const foundScript = addedTags.scriptTags.find(s =>\r\n        [MAPBOX_SCRIPT_ID, GOOGLE_MAPS_SCRIPT_ID].includes(s.id)\r\n      );\r\n      if (foundScript) {\r\n        foundScript.addEventListener('load', onMapLibLoaded, { once: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  return <Helmet onChangeClientState={onChangeClientState}>{mapLibraries}</Helmet>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}