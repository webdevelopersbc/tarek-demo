{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\SearchPage\\\\SearchPageWithList.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, oneOf, object, shape, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport omit from 'lodash/omit';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { injectIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { isAnyFilterActive, isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Footer, Page } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport { pickSearchParamsOnly, validURLParamsForExtendedData, validFilterParams, createSearchResultSchema } from './SearchPage.helpers';\nimport FilterComponent from './FilterComponent';\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\nimport SortBy from './SortBy/SortBy';\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\nimport css from './SearchPage.module.css';\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\n\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n// SortBy component has its content in dropdown-popup.\n// With this offset we move the dropdown a few pixels on desktop layout.\n\nconst FILTER_DROPDOWN_OFFSET = -14;\n\nconst validUrlQueryParamsFromProps = props => {\n  const {\n    location,\n    filterConfig\n  } = props; // eslint-disable-next-line no-unused-vars\n\n  const {\n    mapSearch,\n    page,\n    ...searchInURL\n  } = parse(location.search, {\n    latlng: ['origin'],\n    latlngBounds: ['bounds']\n  }); // urlQueryParams doesn't contain page specific url params\n  // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n\n  return validURLParamsForExtendedData(searchInURL, filterConfig);\n};\n\nconst cleanSearchFromConflictingParams = (searchParams, sortConfig, filterConfig) => {\n  // Single out filters that should disable SortBy when an active\n  // keyword search sorts the listings according to relevance.\n  // In those cases, sort parameter should be removed.\n  const sortingFiltersActive = isAnyFilterActive(sortConfig.conflictingFilters, searchParams, filterConfig);\n  return sortingFiltersActive ? { ...searchParams,\n    [sortConfig.queryParamName]: null\n  } : searchParams;\n};\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false,\n      currentQueryParams: validUrlQueryParamsFromProps(props)\n    };\n    this.searchMapListingsInProgress = false;\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this); // Filter functions\n\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n    this.initialValues = this.initialValues.bind(this);\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this); // SortBy\n\n    this.handleSortBy = this.handleSortBy.bind(this);\n  } // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n\n\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const {\n      viewportBounds,\n      viewportCenter\n    } = data;\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath = typeof window !== 'undefined' && window.location && window.location.pathname; // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n\n    const isSearchPage = currentPath === searchPagePath; // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n\n    if (viewportBoundsChanged && isSearchPage) {\n      const {\n        history,\n        location,\n        filterConfig\n      } = this.props; // parse query parameters, including a custom attribute named category\n\n      const {\n        address,\n        bounds,\n        mapSearch,\n        ...rest\n      } = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds']\n      }); //const viewportMapCenter = SearchMap.getMapCenter(map);\n\n      const originMaybe = isOriginInUse(config) ? {\n        origin: viewportCenter\n      } : {};\n      const searchParams = {\n        address,\n        ...originMaybe,\n        bounds: viewportBounds,\n        mapSearch: true,\n        ...validFilterParams(rest, filterConfig)\n      };\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  } // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onOpenMobileModal() {\n    this.setState({\n      isMobileModalOpen: true\n    });\n  } // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onCloseMobileModal() {\n    this.setState({\n      isMobileModalOpen: false\n    });\n  } // Apply the filters by redirecting to SearchPage with new filters.\n\n\n  applyFilters() {\n    const {\n      history,\n      sortConfig,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const searchParams = { ...urlQueryParams,\n      ...this.state.currentQueryParams\n    };\n    const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n  } // Close the filters by clicking cancel, revert to the initial params\n\n\n  cancelFilters() {\n    this.setState({\n      currentQueryParams: {}\n    });\n  } // Reset all filter query parameters\n\n\n  resetAll(e) {\n    const {\n      history,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const filterQueryParamNames = filterConfig.map(f => f.queryParamNames); // Reset state\n\n    this.setState({\n      currentQueryParams: {}\n    }); // Reset routing params\n\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  initialValues(queryParamNames, isLiveEdit) {\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props); // Query parameters that are in state (user might have not yet clicked \"Apply\")\n\n    const currentQueryParams = this.state.currentQueryParams; // Get initial value for a given parameter from state if its there.\n\n    const getInitialValue = paramName => {\n      const currentQueryParam = currentQueryParams[paramName];\n      const hasQueryParamInState = typeof currentQueryParam !== 'undefined';\n      return hasQueryParamInState && !isLiveEdit ? currentQueryParam : urlQueryParams[paramName];\n    }; // Return all the initial values related to given queryParamNames\n    // InitialValues for \"amenities\" filter could be\n    // { amenities: \"has_any:towel,jacuzzi\" }\n\n\n    const isArray = Array.isArray(queryParamNames);\n    return isArray ? queryParamNames.reduce((acc, paramName) => {\n      return { ...acc,\n        [paramName]: getInitialValue(paramName)\n      };\n    }, {}) : {};\n  }\n\n  getHandleChangedValueFn(useHistoryPush) {\n    const {\n      history,\n      sortConfig,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    return updatedURLParams => {\n      const updater = prevState => {\n        const {\n          address,\n          bounds,\n          keywords\n        } = urlQueryParams;\n        const mergedQueryParams = { ...urlQueryParams,\n          ...prevState.currentQueryParams\n        }; // Address and bounds are handled outside of MainPanel.\n        // I.e. TopbarSearchForm && search by moving the map.\n        // We should always trust urlQueryParams with those.\n        // The same applies to keywords, if the main search type is keyword search.\n\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? {\n          keywords\n        } : {};\n        return {\n          currentQueryParams: { ...mergedQueryParams,\n            ...updatedURLParams,\n            ...keywordsMaybe,\n            address,\n            bounds\n          }\n        };\n      };\n\n      const callback = () => {\n        if (useHistoryPush) {\n          const searchParams = this.state.currentQueryParams;\n          const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n        }\n      };\n\n      this.setState(updater, callback);\n    };\n  }\n\n  handleSortBy(urlParam, values) {\n    const {\n      history\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const queryParams = values ? { ...urlQueryParams,\n      [urlParam]: values\n    } : omit(urlQueryParams, urlParam);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  } // Reset all filter query parameters\n\n\n  handleResetAll(e) {\n    this.resetAll(e); // blur event target if event is passed\n\n    if (e && e.currentTarget) {\n      e.currentTarget.blur();\n    }\n  }\n\n  render() {\n    var _location$search;\n\n    const {\n      intl,\n      listings,\n      filterConfig,\n      sortConfig,\n      location,\n      onManageDisableScrolling,\n      pagination,\n      scrollingDisabled,\n      searchInProgress,\n      searchListingsError,\n      searchParams\n    } = this.props; // eslint-disable-next-line no-unused-vars\n\n    const {\n      mapSearch,\n      page,\n      ...searchInURL\n    } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds']\n    }); // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filterConfig, sortConfig); // Page transition might initially use values from previous search\n\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(pickSearchParamsOnly(searchParams, filterConfig, sortConfig));\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filterConfig);\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\n    const availableFilters = isKeywordSearch ? filterConfig.filter(f => f.type !== 'KeywordFilter') : filterConfig; // Selected aka active filters\n\n    const selectedFilters = validFilterParams(validQueryParams, filterConfig);\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\n    const selectedFiltersCountForMobile = isKeywordSearch ? keysOfSelectedFilters.filter(f => f !== 'keywords').length : keysOfSelectedFilters.length;\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const totalItems = searchParamsAreInSync && hasPaginationInfo ? pagination.totalItems : 0;\n    const listingsAreLoaded = !searchInProgress && searchParamsAreInSync && hasPaginationInfo;\n\n    const sortBy = mode => {\n      var _sortConfig$conflicti;\n\n      const conflictingFilterActive = isAnyFilterActive(sortConfig.conflictingFilters, validQueryParams, filterConfig);\n      const mobileClassesMaybe = mode === 'mobile' ? {\n        rootClassName: css.sortBy,\n        menuLabelRootClassName: css.sortByMenuLabel\n      } : {\n        className: css.sortByDesktop\n      };\n      return sortConfig.active ? /*#__PURE__*/React.createElement(SortBy, Object.assign({}, mobileClassesMaybe, {\n        sort: validQueryParams[sortConfig.queryParamName],\n        isConflictingFilterActive: !!conflictingFilterActive,\n        hasConflictingFilters: !!(((_sortConfig$conflicti = sortConfig.conflictingFilters) === null || _sortConfig$conflicti === void 0 ? void 0 : _sortConfig$conflicti.length) > 0),\n        selectedFilters: selectedFilters,\n        onSelect: this.handleSortBy,\n        showAsPopup: true,\n        contentPlacementOffset: FILTER_DROPDOWN_OFFSET,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 9\n        }\n      })) : null;\n    };\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({\n        isSearchMapOpenOnMobile: true\n      });\n    };\n\n    const {\n      title,\n      description,\n      schema\n    } = createSearchResultSchema(listings, searchInURL || {}, intl);\n    const hasNoResult = listingsAreLoaded && totalItems === 0;\n    const hasSearchParams = ((_location$search = location.search) === null || _location$search === void 0 ? void 0 : _location$search.length) > 0;\n    const noResultsInfo = hasNoResult ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.noSearchResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchPage.noResults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }\n    }), hasSearchParams ? /*#__PURE__*/React.createElement(\"button\", {\n      className: css.resetAllFiltersButton,\n      onClick: e => this.resetAll(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SearchPage.resetAllFilters',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }\n    })) : null) : null; // Set topbar class based on if a modal is open in\n    // a child component\n\n    const topbarClasses = this.state.isMobileModalOpen ? classNames(css.topbarBehindModal, css.topbar) : css.topbar; // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n\n    return /*#__PURE__*/React.createElement(Page, {\n      scrollingDisabled: scrollingDisabled,\n      description: description,\n      title: title,\n      schema: schema,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      className: topbarClasses,\n      currentPage: \"SearchPage\",\n      currentSearchParams: urlQueryParams,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.layoutWrapperContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"aside\", {\n      className: css.layoutWrapperFilterColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.filterColumnContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }, availableFilters.map(config => {\n      return /*#__PURE__*/React.createElement(FilterComponent, {\n        key: `SearchFiltersMobile.${config.id}`,\n        idPrefix: \"SearchFiltersMobile\",\n        className: css.filter,\n        filterConfig: config,\n        urlQueryParams: urlQueryParams,\n        initialValues: this.initialValues,\n        getHandleChangedValueFn: this.getHandleChangedValueFn,\n        liveEdit: true,\n        showAsPopup: false,\n        isDesktop: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 19\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: css.resetAllButton,\n      onClick: e => this.handleResetAll(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SearchFiltersMobile.resetAll',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.layoutWrapperMain,\n      role: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.searchResultContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchFiltersMobile, {\n      className: css.searchFiltersMobileList,\n      urlQueryParams: validQueryParams,\n      sortByComponent: sortBy('mobile'),\n      listingsAreLoaded: listingsAreLoaded,\n      resultsCount: totalItems,\n      searchInProgress: searchInProgress,\n      searchListingsError: searchListingsError,\n      showAsModalMaxWidth: MODAL_BREAKPOINT,\n      onMapIconClick: onMapIconClick,\n      onManageDisableScrolling: onManageDisableScrolling,\n      onOpenModal: this.onOpenMobileModal,\n      onCloseModal: this.onCloseMobileModal,\n      resetAll: this.resetAll,\n      selectedFiltersCount: selectedFiltersCountForMobile,\n      isMapVariant: false,\n      noResultsInfo: noResultsInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 15\n      }\n    }, availableFilters.map(config => {\n      return /*#__PURE__*/React.createElement(FilterComponent, {\n        key: `SearchFiltersMobile.${config.id}`,\n        idPrefix: \"SearchFiltersMobile\",\n        filterConfig: config,\n        urlQueryParams: validQueryParams,\n        initialValues: this.initialValues,\n        getHandleChangedValueFn: this.getHandleChangedValueFn,\n        liveEdit: true,\n        showAsPopup: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }\n      });\n    })), /*#__PURE__*/React.createElement(MainPanelHeader, {\n      className: css.mainPanel,\n      sortByComponent: sortBy('desktop'),\n      listingsAreLoaded: listingsAreLoaded,\n      resultsCount: totalItems,\n      searchInProgress: searchInProgress,\n      searchListingsError: searchListingsError,\n      noResultsInfo: noResultsInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.listings, {\n        [css.newSearchInProgress]: !listingsAreLoaded\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 15\n      }\n    }, searchListingsError ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchPage.searchError\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 21\n      }\n    })) : null, /*#__PURE__*/React.createElement(SearchResultsPanel, {\n      className: css.searchListingsPanel,\n      listings: listings,\n      pagination: listingsAreLoaded ? pagination : null,\n      search: parse(location.search),\n      isMapVariant: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nSearchPageComponent.defaultProps = {\n  listings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  filterConfig: config.custom.filters,\n  sortConfig: config.custom.sortConfig\n};\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onManageDisableScrolling: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  filterConfig: propTypes.filterConfig,\n  sortConfig: propTypes.sortConfig,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    searchInProgress,\n    searchListingsError,\n    searchParams\n  } = state.SearchPage;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  return {\n    listings: pageListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst SearchPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(SearchPageComponent);\nexport default SearchPage;","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/SearchPage/SearchPageWithList.js"],"names":["React","Component","array","bool","func","oneOf","object","shape","string","connect","compose","withRouter","debounce","omit","classNames","config","injectIntl","intlShape","FormattedMessage","routeConfiguration","createResourceLocatorString","pathByRouteName","isAnyFilterActive","isMainSearchTypeKeywords","isOriginInUse","parse","stringify","propTypes","getListingsById","manageDisableScrolling","isScrollingDisabled","Footer","Page","TopbarContainer","pickSearchParamsOnly","validURLParamsForExtendedData","validFilterParams","createSearchResultSchema","FilterComponent","MainPanelHeader","SearchFiltersMobile","SortBy","SearchResultsPanel","css","MODAL_BREAKPOINT","SEARCH_WITH_MAP_DEBOUNCE","FILTER_DROPDOWN_OFFSET","validUrlQueryParamsFromProps","props","location","filterConfig","mapSearch","page","searchInURL","search","latlng","latlngBounds","cleanSearchFromConflictingParams","searchParams","sortConfig","sortingFiltersActive","conflictingFilters","queryParamName","SearchPageComponent","constructor","state","isSearchMapOpenOnMobile","tab","isMobileModalOpen","currentQueryParams","searchMapListingsInProgress","onMapMoveEnd","bind","onOpenMobileModal","onCloseMobileModal","applyFilters","cancelFilters","resetAll","initialValues","getHandleChangedValueFn","handleSortBy","viewportBoundsChanged","data","viewportBounds","viewportCenter","routes","searchPagePath","currentPath","window","pathname","isSearchPage","history","address","bounds","rest","originMaybe","origin","push","setState","urlQueryParams","e","filterQueryParamNames","map","f","queryParamNames","queryParams","isLiveEdit","getInitialValue","paramName","currentQueryParam","hasQueryParamInState","isArray","Array","reduce","acc","useHistoryPush","updatedURLParams","updater","prevState","keywords","mergedQueryParams","keywordsMaybe","callback","urlParam","values","handleResetAll","currentTarget","blur","render","intl","listings","onManageDisableScrolling","pagination","scrollingDisabled","searchInProgress","searchListingsError","urlQueryString","paramsQueryString","searchParamsAreInSync","validQueryParams","isKeywordSearch","availableFilters","filter","type","selectedFilters","keysOfSelectedFilters","Object","keys","selectedFiltersCountForMobile","length","hasPaginationInfo","totalItems","listingsAreLoaded","sortBy","mode","conflictingFilterActive","mobileClassesMaybe","rootClassName","menuLabelRootClassName","sortByMenuLabel","className","sortByDesktop","active","onMapIconClick","useLocationSearchBounds","title","description","schema","hasNoResult","hasSearchParams","noResultsInfo","noSearchResults","resetAllFiltersButton","topbarClasses","topbarBehindModal","topbar","layoutWrapperContainer","layoutWrapperFilterColumn","filterColumnContent","id","resetAllButton","layoutWrapperMain","searchResultContainer","searchFiltersMobileList","mainPanel","newSearchInProgress","error","searchListingsPanel","defaultProps","custom","filters","mapListings","isRequired","mapStateToProps","currentPageResultIds","SearchPage","pageListings","mapDispatchToProps","dispatch","componentId","disableScrolling"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { array, bool, func, oneOf, object, shape, string } from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport debounce from 'lodash/debounce';\r\nimport omit from 'lodash/omit';\r\nimport classNames from 'classnames';\r\n\r\nimport config from '../../config';\r\nimport { injectIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\r\nimport routeConfiguration from '../../routing/routeConfiguration';\r\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\r\nimport { isAnyFilterActive, isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\r\nimport { parse, stringify } from '../../util/urlHelpers';\r\nimport { propTypes } from '../../util/types';\r\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\r\n\r\nimport { Footer, Page } from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport {\r\n  pickSearchParamsOnly,\r\n  validURLParamsForExtendedData,\r\n  validFilterParams,\r\n  createSearchResultSchema,\r\n} from './SearchPage.helpers';\r\n\r\nimport FilterComponent from './FilterComponent';\r\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\r\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\r\nimport SortBy from './SortBy/SortBy';\r\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\r\n\r\nimport css from './SearchPage.module.css';\r\n\r\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\r\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\r\n\r\n// SortBy component has its content in dropdown-popup.\r\n// With this offset we move the dropdown a few pixels on desktop layout.\r\nconst FILTER_DROPDOWN_OFFSET = -14;\r\n\r\nconst validUrlQueryParamsFromProps = props => {\r\n  const { location, filterConfig } = props;\r\n  // eslint-disable-next-line no-unused-vars\r\n  const { mapSearch, page, ...searchInURL } = parse(location.search, {\r\n    latlng: ['origin'],\r\n    latlngBounds: ['bounds'],\r\n  });\r\n  // urlQueryParams doesn't contain page specific url params\r\n  // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\r\n  return validURLParamsForExtendedData(searchInURL, filterConfig);\r\n};\r\n\r\nconst cleanSearchFromConflictingParams = (searchParams, sortConfig, filterConfig) => {\r\n  // Single out filters that should disable SortBy when an active\r\n  // keyword search sorts the listings according to relevance.\r\n  // In those cases, sort parameter should be removed.\r\n  const sortingFiltersActive = isAnyFilterActive(\r\n    sortConfig.conflictingFilters,\r\n    searchParams,\r\n    filterConfig\r\n  );\r\n  return sortingFiltersActive\r\n    ? { ...searchParams, [sortConfig.queryParamName]: null }\r\n    : searchParams;\r\n};\r\n\r\nexport class SearchPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isSearchMapOpenOnMobile: props.tab === 'map',\r\n      isMobileModalOpen: false,\r\n      currentQueryParams: validUrlQueryParamsFromProps(props),\r\n    };\r\n\r\n    this.searchMapListingsInProgress = false;\r\n\r\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\r\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\r\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\r\n\r\n    // Filter functions\r\n    this.applyFilters = this.applyFilters.bind(this);\r\n    this.cancelFilters = this.cancelFilters.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n    this.initialValues = this.initialValues.bind(this);\r\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this);\r\n\r\n    // SortBy\r\n    this.handleSortBy = this.handleSortBy.bind(this);\r\n  }\r\n\r\n  // Callback to determine if new search is needed\r\n  // when map is moved by user or viewport has changed\r\n  onMapMoveEnd(viewportBoundsChanged, data) {\r\n    const { viewportBounds, viewportCenter } = data;\r\n\r\n    const routes = routeConfiguration();\r\n    const searchPagePath = pathByRouteName('SearchPage', routes);\r\n    const currentPath =\r\n      typeof window !== 'undefined' && window.location && window.location.pathname;\r\n\r\n    // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\r\n    const isSearchPage = currentPath === searchPagePath;\r\n\r\n    // If mapSearch url param is given\r\n    // or original location search is rendered once,\r\n    // we start to react to \"mapmoveend\" events by generating new searches\r\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\r\n    if (viewportBoundsChanged && isSearchPage) {\r\n      const { history, location, filterConfig } = this.props;\r\n\r\n      // parse query parameters, including a custom attribute named category\r\n      const { address, bounds, mapSearch, ...rest } = parse(location.search, {\r\n        latlng: ['origin'],\r\n        latlngBounds: ['bounds'],\r\n      });\r\n\r\n      //const viewportMapCenter = SearchMap.getMapCenter(map);\r\n      const originMaybe = isOriginInUse(config) ? { origin: viewportCenter } : {};\r\n\r\n      const searchParams = {\r\n        address,\r\n        ...originMaybe,\r\n        bounds: viewportBounds,\r\n        mapSearch: true,\r\n        ...validFilterParams(rest, filterConfig),\r\n      };\r\n\r\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\r\n    }\r\n  }\r\n\r\n  // Invoked when a modal is opened from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onOpenMobileModal() {\r\n    this.setState({ isMobileModalOpen: true });\r\n  }\r\n\r\n  // Invoked when a modal is closed from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onCloseMobileModal() {\r\n    this.setState({ isMobileModalOpen: false });\r\n  }\r\n\r\n  // Apply the filters by redirecting to SearchPage with new filters.\r\n  applyFilters() {\r\n    const { history, sortConfig, filterConfig } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n    const searchParams = { ...urlQueryParams, ...this.state.currentQueryParams };\r\n    const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\r\n\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\r\n  }\r\n\r\n  // Close the filters by clicking cancel, revert to the initial params\r\n  cancelFilters() {\r\n    this.setState({ currentQueryParams: {} });\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  resetAll(e) {\r\n    const { history, filterConfig } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n    const filterQueryParamNames = filterConfig.map(f => f.queryParamNames);\r\n\r\n    // Reset state\r\n    this.setState({ currentQueryParams: {} });\r\n\r\n    // Reset routing params\r\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\r\n  }\r\n\r\n  initialValues(queryParamNames, isLiveEdit) {\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    // Query parameters that are in state (user might have not yet clicked \"Apply\")\r\n    const currentQueryParams = this.state.currentQueryParams;\r\n\r\n    // Get initial value for a given parameter from state if its there.\r\n    const getInitialValue = paramName => {\r\n      const currentQueryParam = currentQueryParams[paramName];\r\n      const hasQueryParamInState = typeof currentQueryParam !== 'undefined';\r\n      return hasQueryParamInState && !isLiveEdit ? currentQueryParam : urlQueryParams[paramName];\r\n    };\r\n\r\n    // Return all the initial values related to given queryParamNames\r\n    // InitialValues for \"amenities\" filter could be\r\n    // { amenities: \"has_any:towel,jacuzzi\" }\r\n    const isArray = Array.isArray(queryParamNames);\r\n    return isArray\r\n      ? queryParamNames.reduce((acc, paramName) => {\r\n          return { ...acc, [paramName]: getInitialValue(paramName) };\r\n        }, {})\r\n      : {};\r\n  }\r\n\r\n  getHandleChangedValueFn(useHistoryPush) {\r\n    const { history, sortConfig, filterConfig } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    return updatedURLParams => {\r\n      const updater = prevState => {\r\n        const { address, bounds, keywords } = urlQueryParams;\r\n        const mergedQueryParams = { ...urlQueryParams, ...prevState.currentQueryParams };\r\n\r\n        // Address and bounds are handled outside of MainPanel.\r\n        // I.e. TopbarSearchForm && search by moving the map.\r\n        // We should always trust urlQueryParams with those.\r\n        // The same applies to keywords, if the main search type is keyword search.\r\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? { keywords } : {};\r\n        return {\r\n          currentQueryParams: {\r\n            ...mergedQueryParams,\r\n            ...updatedURLParams,\r\n            ...keywordsMaybe,\r\n            address,\r\n            bounds,\r\n          },\r\n        };\r\n      };\r\n\r\n      const callback = () => {\r\n        if (useHistoryPush) {\r\n          const searchParams = this.state.currentQueryParams;\r\n          const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\r\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\r\n        }\r\n      };\r\n\r\n      this.setState(updater, callback);\r\n    };\r\n  }\r\n\r\n  handleSortBy(urlParam, values) {\r\n    const { history } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    const queryParams = values\r\n      ? { ...urlQueryParams, [urlParam]: values }\r\n      : omit(urlQueryParams, urlParam);\r\n\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  handleResetAll(e) {\r\n    this.resetAll(e);\r\n\r\n    // blur event target if event is passed\r\n    if (e && e.currentTarget) {\r\n      e.currentTarget.blur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      intl,\r\n      listings,\r\n      filterConfig,\r\n      sortConfig,\r\n      location,\r\n      onManageDisableScrolling,\r\n      pagination,\r\n      scrollingDisabled,\r\n      searchInProgress,\r\n      searchListingsError,\r\n      searchParams,\r\n    } = this.props;\r\n    // eslint-disable-next-line no-unused-vars\r\n    const { mapSearch, page, ...searchInURL } = parse(location.search, {\r\n      latlng: ['origin'],\r\n      latlngBounds: ['bounds'],\r\n    });\r\n\r\n    // urlQueryParams doesn't contain page specific url params\r\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\r\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filterConfig, sortConfig);\r\n\r\n    // Page transition might initially use values from previous search\r\n    const urlQueryString = stringify(urlQueryParams);\r\n    const paramsQueryString = stringify(\r\n      pickSearchParamsOnly(searchParams, filterConfig, sortConfig)\r\n    );\r\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\r\n\r\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filterConfig);\r\n\r\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\r\n    const availableFilters = isKeywordSearch\r\n      ? filterConfig.filter(f => f.type !== 'KeywordFilter')\r\n      : filterConfig;\r\n\r\n    // Selected aka active filters\r\n    const selectedFilters = validFilterParams(validQueryParams, filterConfig);\r\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\r\n    const selectedFiltersCountForMobile = isKeywordSearch\r\n      ? keysOfSelectedFilters.filter(f => f !== 'keywords').length\r\n      : keysOfSelectedFilters.length;\r\n\r\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\r\n    const totalItems = searchParamsAreInSync && hasPaginationInfo ? pagination.totalItems : 0;\r\n    const listingsAreLoaded = !searchInProgress && searchParamsAreInSync && hasPaginationInfo;\r\n\r\n    const sortBy = mode => {\r\n      const conflictingFilterActive = isAnyFilterActive(\r\n        sortConfig.conflictingFilters,\r\n        validQueryParams,\r\n        filterConfig\r\n      );\r\n\r\n      const mobileClassesMaybe =\r\n        mode === 'mobile'\r\n          ? {\r\n              rootClassName: css.sortBy,\r\n              menuLabelRootClassName: css.sortByMenuLabel,\r\n            }\r\n          : { className: css.sortByDesktop };\r\n      return sortConfig.active ? (\r\n        <SortBy\r\n          {...mobileClassesMaybe}\r\n          sort={validQueryParams[sortConfig.queryParamName]}\r\n          isConflictingFilterActive={!!conflictingFilterActive}\r\n          hasConflictingFilters={!!(sortConfig.conflictingFilters?.length > 0)}\r\n          selectedFilters={selectedFilters}\r\n          onSelect={this.handleSortBy}\r\n          showAsPopup\r\n          contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\r\n        />\r\n      ) : null;\r\n    };\r\n\r\n    const onMapIconClick = () => {\r\n      this.useLocationSearchBounds = true;\r\n      this.setState({ isSearchMapOpenOnMobile: true });\r\n    };\r\n\r\n    const { title, description, schema } = createSearchResultSchema(\r\n      listings,\r\n      searchInURL || {},\r\n      intl\r\n    );\r\n\r\n    const hasNoResult = listingsAreLoaded && totalItems === 0;\r\n    const hasSearchParams = location.search?.length > 0;\r\n    const noResultsInfo = hasNoResult ? (\r\n      <div className={css.noSearchResults}>\r\n        <FormattedMessage id=\"SearchPage.noResults\" />\r\n        <br />\r\n        {hasSearchParams ? (\r\n          <button className={css.resetAllFiltersButton} onClick={e => this.resetAll(e)}>\r\n            <FormattedMessage id={'SearchPage.resetAllFilters'} />\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    ) : null;\r\n\r\n    // Set topbar class based on if a modal is open in\r\n    // a child component\r\n    const topbarClasses = this.state.isMobileModalOpen\r\n      ? classNames(css.topbarBehindModal, css.topbar)\r\n      : css.topbar;\r\n\r\n    // N.B. openMobileMap button is sticky.\r\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\r\n    return (\r\n      <Page\r\n        scrollingDisabled={scrollingDisabled}\r\n        description={description}\r\n        title={title}\r\n        schema={schema}\r\n      >\r\n        <TopbarContainer\r\n          className={topbarClasses}\r\n          currentPage=\"SearchPage\"\r\n          currentSearchParams={urlQueryParams}\r\n        />\r\n        <div className={css.layoutWrapperContainer}>\r\n          <aside className={css.layoutWrapperFilterColumn}>\r\n            <div className={css.filterColumnContent}>\r\n              {availableFilters.map(config => {\r\n                return (\r\n                  <FilterComponent\r\n                    key={`SearchFiltersMobile.${config.id}`}\r\n                    idPrefix=\"SearchFiltersMobile\"\r\n                    className={css.filter}\r\n                    filterConfig={config}\r\n                    urlQueryParams={urlQueryParams}\r\n                    initialValues={this.initialValues}\r\n                    getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                    liveEdit\r\n                    showAsPopup={false}\r\n                    isDesktop\r\n                  />\r\n                );\r\n              })}\r\n              <button className={css.resetAllButton} onClick={e => this.handleResetAll(e)}>\r\n                <FormattedMessage id={'SearchFiltersMobile.resetAll'} />\r\n              </button>\r\n            </div>\r\n          </aside>\r\n\r\n          <div className={css.layoutWrapperMain} role=\"main\">\r\n            <div className={css.searchResultContainer}>\r\n              <SearchFiltersMobile\r\n                className={css.searchFiltersMobileList}\r\n                urlQueryParams={validQueryParams}\r\n                sortByComponent={sortBy('mobile')}\r\n                listingsAreLoaded={listingsAreLoaded}\r\n                resultsCount={totalItems}\r\n                searchInProgress={searchInProgress}\r\n                searchListingsError={searchListingsError}\r\n                showAsModalMaxWidth={MODAL_BREAKPOINT}\r\n                onMapIconClick={onMapIconClick}\r\n                onManageDisableScrolling={onManageDisableScrolling}\r\n                onOpenModal={this.onOpenMobileModal}\r\n                onCloseModal={this.onCloseMobileModal}\r\n                resetAll={this.resetAll}\r\n                selectedFiltersCount={selectedFiltersCountForMobile}\r\n                isMapVariant={false}\r\n                noResultsInfo={noResultsInfo}\r\n              >\r\n                {availableFilters.map(config => {\r\n                  return (\r\n                    <FilterComponent\r\n                      key={`SearchFiltersMobile.${config.id}`}\r\n                      idPrefix=\"SearchFiltersMobile\"\r\n                      filterConfig={config}\r\n                      urlQueryParams={validQueryParams}\r\n                      initialValues={this.initialValues}\r\n                      getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                      liveEdit\r\n                      showAsPopup={false}\r\n                    />\r\n                  );\r\n                })}\r\n              </SearchFiltersMobile>\r\n              <MainPanelHeader\r\n                className={css.mainPanel}\r\n                sortByComponent={sortBy('desktop')}\r\n                listingsAreLoaded={listingsAreLoaded}\r\n                resultsCount={totalItems}\r\n                searchInProgress={searchInProgress}\r\n                searchListingsError={searchListingsError}\r\n                noResultsInfo={noResultsInfo}\r\n              />\r\n              <div\r\n                className={classNames(css.listings, {\r\n                  [css.newSearchInProgress]: !listingsAreLoaded,\r\n                })}\r\n              >\r\n                {searchListingsError ? (\r\n                  <h2 className={css.error}>\r\n                    <FormattedMessage id=\"SearchPage.searchError\" />\r\n                  </h2>\r\n                ) : null}\r\n                <SearchResultsPanel\r\n                  className={css.searchListingsPanel}\r\n                  listings={listings}\r\n                  pagination={listingsAreLoaded ? pagination : null}\r\n                  search={parse(location.search)}\r\n                  isMapVariant={false}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nSearchPageComponent.defaultProps = {\r\n  listings: [],\r\n  pagination: null,\r\n  searchListingsError: null,\r\n  searchParams: {},\r\n  tab: 'listings',\r\n  filterConfig: config.custom.filters,\r\n  sortConfig: config.custom.sortConfig,\r\n};\r\n\r\nSearchPageComponent.propTypes = {\r\n  listings: array,\r\n  mapListings: array,\r\n  onManageDisableScrolling: func.isRequired,\r\n  pagination: propTypes.pagination,\r\n  scrollingDisabled: bool.isRequired,\r\n  searchInProgress: bool.isRequired,\r\n  searchListingsError: propTypes.error,\r\n  searchParams: object,\r\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\r\n  filterConfig: propTypes.filterConfig,\r\n  sortConfig: propTypes.sortConfig,\r\n\r\n  // from withRouter\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    currentPageResultIds,\r\n    pagination,\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n  } = state.SearchPage;\r\n  const pageListings = getListingsById(state, currentPageResultIds);\r\n\r\n  return {\r\n    listings: pageListings,\r\n    pagination,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst SearchPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(SearchPageComponent);\r\n\r\nexport default SearchPage;\r\n"]},"metadata":{},"sourceType":"module"}