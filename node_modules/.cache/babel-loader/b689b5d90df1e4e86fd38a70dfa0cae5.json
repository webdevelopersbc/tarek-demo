{"ast":null,"code":"/**\r\n * CheckoutPage starts payment process and therefore it will get data from ListingPage\r\n * (booking dates, listing data, and all the other data that affects to booking decision).\r\n * This data is saved to Session Store which only exists while the browsing session exists -\r\n * e.g. tab is open. (Session Store is not related to session cookies.)\r\n */\nimport reduce from 'lodash/reduce';\nimport Decimal from 'decimal.js';\nimport { isAfterDate, subtractTime } from '../../util/dates';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport { TRANSITIONS } from '../../util/transaction';\nconst {\n  UUID,\n  Money\n} = sdkTypes; // Validate that given 'obj' has all the keys of defined by validPropTypes parameter\n// and values must pass related test-value-format function.\n\nconst validateProperties = (obj, validPropTypes) => {\n  return reduce(Object.entries(validPropTypes), (acc, [prop, fn]) => {\n    if (Object.prototype.hasOwnProperty.call(obj, prop) && fn(obj[prop])) {\n      return acc;\n    }\n\n    return false;\n  }, true);\n}; // Validate content of booking dates object received from SessionStore\n\n\nexport const isValidBookingDates = bookingDates => {\n  const props = {\n    bookingStart: d => d instanceof Date,\n    bookingEnd: d => d instanceof Date\n  };\n  return validateProperties(bookingDates, props);\n}; // Validate content of listing object received from SessionStore.\n// Currently only id & attributes.price are needed.\n\nexport const isValidListing = listing => {\n  const props = {\n    id: id => id instanceof UUID,\n    attributes: v => {\n      return typeof v === 'object' && v.price instanceof Money;\n    }\n  };\n  return validateProperties(listing, props);\n}; // Validate content of an transaction received from SessionStore.\n// An id is required and the last transition needs to be one of the known transitions\n\nexport const isValidTransaction = transaction => {\n  const props = {\n    id: id => id instanceof UUID,\n    type: type => type === 'transaction',\n    attributes: v => {\n      return typeof v === 'object' && TRANSITIONS.includes(v.lastTransition);\n    }\n  };\n  return validateProperties(transaction, props);\n}; // Stores given bookinData, listing and transaction to sessionStorage\n\nexport const storeData = (orderData, listing, transaction, storageKey) => {\n  if (window && window.sessionStorage && listing && orderData) {\n    const data = {\n      orderData,\n      listing,\n      transaction,\n      storedAt: new Date()\n    };\n\n    const replacer = function (k, v) {\n      if (this[k] instanceof Date) {\n        return {\n          date: v,\n          _serializedType: 'SerializableDate'\n        };\n      }\n\n      if (this[k] instanceof Decimal) {\n        return {\n          decimal: v,\n          _serializedType: 'SerializableDecimal'\n        };\n      }\n\n      return sdkTypes.replacer(k, v);\n    };\n\n    const storableData = JSON.stringify(data, replacer);\n    window.sessionStorage.setItem(storageKey, storableData);\n  }\n}; // Get stored data\n\nexport const storedData = storageKey => {\n  if (window && window.sessionStorage) {\n    const checkoutPageData = window.sessionStorage.getItem(storageKey);\n\n    const reviver = (k, v) => {\n      if (v && typeof v === 'object' && v._serializedType === 'SerializableDate') {\n        // Dates are expected to be stored as:\n        // { date: new Date(), _serializedType: 'SerializableDate' }\n        return new Date(v.date);\n      } else if (v && typeof v === 'object' && v._serializedType === 'SerializableDecimal') {\n        // Decimals are expected to be stored as:\n        // { decimal: v, _serializedType: 'SerializableDecimal' }\n        return new Decimal(v.decimal);\n      }\n\n      return sdkTypes.reviver(k, v);\n    }; // Note: orderData may contain bookingDates if booking process is used.\n\n\n    const {\n      orderData,\n      listing,\n      transaction,\n      storedAt\n    } = checkoutPageData ? JSON.parse(checkoutPageData, reviver) : {};\n    const bookingDates = orderData === null || orderData === void 0 ? void 0 : orderData.bookingDates;\n    const isPotentiallyIncludedBookingDatesValid = bookingDates ? isValidBookingDates(bookingDates) : true; // If sessionStore contains freshly saved data (max 1 day old), use it\n\n    const isFreshlySaved = storedAt ? isAfterDate(storedAt, subtractTime(new Date(), 1, 'days')) : false; // resolve transaction as valid if it is missing\n\n    const isTransactionValid = !!transaction ? isValidTransaction(transaction) : true;\n    const isStoredDataValid = isFreshlySaved && isPotentiallyIncludedBookingDatesValid && isValidListing(listing) && isTransactionValid;\n\n    if (isStoredDataValid) {\n      return {\n        orderData,\n        listing,\n        transaction\n      };\n    }\n  }\n\n  return {};\n};\nexport const clearData = storageKey => {\n  if (window && window.sessionStorage) {\n    window.sessionStorage.removeItem(storageKey);\n  }\n};","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/CheckoutPage/CheckoutPageSessionHelpers.js"],"names":["reduce","Decimal","isAfterDate","subtractTime","types","sdkTypes","TRANSITIONS","UUID","Money","validateProperties","obj","validPropTypes","Object","entries","acc","prop","fn","prototype","hasOwnProperty","call","isValidBookingDates","bookingDates","props","bookingStart","d","Date","bookingEnd","isValidListing","listing","id","attributes","v","price","isValidTransaction","transaction","type","includes","lastTransition","storeData","orderData","storageKey","window","sessionStorage","data","storedAt","replacer","k","date","_serializedType","decimal","storableData","JSON","stringify","setItem","storedData","checkoutPageData","getItem","reviver","parse","isPotentiallyIncludedBookingDatesValid","isFreshlySaved","isTransactionValid","isStoredDataValid","clearData","removeItem"],"mappings":"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","sourcesContent":["/**\r\n * CheckoutPage starts payment process and therefore it will get data from ListingPage\r\n * (booking dates, listing data, and all the other data that affects to booking decision).\r\n * This data is saved to Session Store which only exists while the browsing session exists -\r\n * e.g. tab is open. (Session Store is not related to session cookies.)\r\n */\r\nimport reduce from 'lodash/reduce';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport { isAfterDate, subtractTime } from '../../util/dates';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { TRANSITIONS } from '../../util/transaction';\r\n\r\nconst { UUID, Money } = sdkTypes;\r\n\r\n// Validate that given 'obj' has all the keys of defined by validPropTypes parameter\r\n// and values must pass related test-value-format function.\r\nconst validateProperties = (obj, validPropTypes) => {\r\n  return reduce(\r\n    Object.entries(validPropTypes),\r\n    (acc, [prop, fn]) => {\r\n      if (Object.prototype.hasOwnProperty.call(obj, prop) && fn(obj[prop])) {\r\n        return acc;\r\n      }\r\n      return false;\r\n    },\r\n    true\r\n  );\r\n};\r\n\r\n// Validate content of booking dates object received from SessionStore\r\nexport const isValidBookingDates = bookingDates => {\r\n  const props = {\r\n    bookingStart: d => d instanceof Date,\r\n    bookingEnd: d => d instanceof Date,\r\n  };\r\n  return validateProperties(bookingDates, props);\r\n};\r\n\r\n// Validate content of listing object received from SessionStore.\r\n// Currently only id & attributes.price are needed.\r\nexport const isValidListing = listing => {\r\n  const props = {\r\n    id: id => id instanceof UUID,\r\n    attributes: v => {\r\n      return typeof v === 'object' && v.price instanceof Money;\r\n    },\r\n  };\r\n  return validateProperties(listing, props);\r\n};\r\n\r\n// Validate content of an transaction received from SessionStore.\r\n// An id is required and the last transition needs to be one of the known transitions\r\nexport const isValidTransaction = transaction => {\r\n  const props = {\r\n    id: id => id instanceof UUID,\r\n    type: type => type === 'transaction',\r\n    attributes: v => {\r\n      return typeof v === 'object' && TRANSITIONS.includes(v.lastTransition);\r\n    },\r\n  };\r\n  return validateProperties(transaction, props);\r\n};\r\n\r\n// Stores given bookinData, listing and transaction to sessionStorage\r\nexport const storeData = (orderData, listing, transaction, storageKey) => {\r\n  if (window && window.sessionStorage && listing && orderData) {\r\n    const data = {\r\n      orderData,\r\n      listing,\r\n      transaction,\r\n      storedAt: new Date(),\r\n    };\r\n\r\n    const replacer = function(k, v) {\r\n      if (this[k] instanceof Date) {\r\n        return { date: v, _serializedType: 'SerializableDate' };\r\n      }\r\n      if (this[k] instanceof Decimal) {\r\n        return { decimal: v, _serializedType: 'SerializableDecimal' };\r\n      }\r\n      return sdkTypes.replacer(k, v);\r\n    };\r\n\r\n    const storableData = JSON.stringify(data, replacer);\r\n    window.sessionStorage.setItem(storageKey, storableData);\r\n  }\r\n};\r\n\r\n// Get stored data\r\nexport const storedData = storageKey => {\r\n  if (window && window.sessionStorage) {\r\n    const checkoutPageData = window.sessionStorage.getItem(storageKey);\r\n\r\n    const reviver = (k, v) => {\r\n      if (v && typeof v === 'object' && v._serializedType === 'SerializableDate') {\r\n        // Dates are expected to be stored as:\r\n        // { date: new Date(), _serializedType: 'SerializableDate' }\r\n        return new Date(v.date);\r\n      } else if (v && typeof v === 'object' && v._serializedType === 'SerializableDecimal') {\r\n        // Decimals are expected to be stored as:\r\n        // { decimal: v, _serializedType: 'SerializableDecimal' }\r\n        return new Decimal(v.decimal);\r\n      }\r\n      return sdkTypes.reviver(k, v);\r\n    };\r\n\r\n    // Note: orderData may contain bookingDates if booking process is used.\r\n    const { orderData, listing, transaction, storedAt } = checkoutPageData\r\n      ? JSON.parse(checkoutPageData, reviver)\r\n      : {};\r\n\r\n    const bookingDates = orderData?.bookingDates;\r\n    const isPotentiallyIncludedBookingDatesValid = bookingDates\r\n      ? isValidBookingDates(bookingDates)\r\n      : true;\r\n\r\n    // If sessionStore contains freshly saved data (max 1 day old), use it\r\n    const isFreshlySaved = storedAt\r\n      ? isAfterDate(storedAt, subtractTime(new Date(), 1, 'days'))\r\n      : false;\r\n\r\n    // resolve transaction as valid if it is missing\r\n    const isTransactionValid = !!transaction ? isValidTransaction(transaction) : true;\r\n\r\n    const isStoredDataValid =\r\n      isFreshlySaved &&\r\n      isPotentiallyIncludedBookingDatesValid &&\r\n      isValidListing(listing) &&\r\n      isTransactionValid;\r\n\r\n    if (isStoredDataValid) {\r\n      return { orderData, listing, transaction };\r\n    }\r\n  }\r\n  return {};\r\n};\r\n\r\nexport const clearData = storageKey => {\r\n  if (window && window.sessionStorage) {\r\n    window.sessionStorage.removeItem(storageKey);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}