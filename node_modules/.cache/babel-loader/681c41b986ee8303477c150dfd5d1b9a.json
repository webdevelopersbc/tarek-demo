{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amardeep\\\\tarek_project\\\\ftw-product\\\\src\\\\containers\\\\LandingPage\\\\SectionFilteredSearches\\\\SectionFilteredSearches.js\";\nimport React, { Component } from 'react';\nimport { string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '../../../util/reactIntl';\nimport { lazyLoadWithDimensions } from '../../../util/contextHelpers';\nimport { NamedLink } from '../../../components';\nimport css from './SectionFilteredSearches.module.css'; // Update images by saving images to src/LandingPage/SeactionFilteredSearches/images directory.\n// If those images have been saved with the same name, no need to make changes to these imports.\n\nimport imageForFilter1 from './images/imageForFilter1_648x448.jpg';\nimport imageForFilter2 from './images/imageForFilter2_648x448.jpg';\nimport imageForFilter3 from './images/imageForFilter3_648x448.jpg'; // Thumbnail image for the search \"card\"\n\nclass ThumbnailImage extends Component {\n  render() {\n    const {\n      alt,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"img\", Object.assign({\n      alt: alt\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    }));\n  }\n\n} // Load the image only if it's close to viewport (user has scrolled the page enough).\n\n\nconst LazyImage = lazyLoadWithDimensions(ThumbnailImage); // Create a \"card\" that contains a link to filtered search on SearchPage.\n\n_c = LazyImage;\n\nconst FilterLink = props => {\n  const {\n    name,\n    image,\n    link\n  } = props;\n  const url = typeof window !== 'undefined' ? new window.URL(link) : new global.URL(link);\n  const searchQuery = url.search;\n  const nameText = /*#__PURE__*/React.createElement(\"span\", {\n    className: css.searchName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }\n  }, name);\n  return /*#__PURE__*/React.createElement(NamedLink, {\n    name: \"SearchPage\",\n    to: {\n      search: searchQuery\n    },\n    className: css.searchLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.imageWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.aspectWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LazyImage, {\n    src: image,\n    alt: name,\n    className: css.searchImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.linkText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"SectionFilteredSearches.filteredSearch\",\n    values: {\n      filter: nameText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })));\n}; // Component that shows full-width section on LandingPage.\n// Inside it shows 3 \"cards\" that link to SearchPage with specific filters applied.\n\n\n_c2 = FilterLink;\n\nconst SectionFilteredSearches = props => {\n  const {\n    rootClassName,\n    className\n  } = props;\n  const classes = classNames(rootClassName || css.root, className); // FilterLink props:\n  // - \"name\" is a string that defines what kind of search the link is going to make\n  // - \"image\" is imported from images directory and you can update it by changing the file\n  // - \"link\" should be copy-pasted URL from search page.\n  //    The domain doesn't matter, but search query does. (I.e. \"?pub_brand=nike\")\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"SectionFilteredSearches.title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.filteredSearches,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FilterLink, {\n    name: \"Nikes\",\n    image: imageForFilter1,\n    link: \"http://localhost:3000/s?pub_brand=nike\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterLink, {\n    name: \"Yeezys\",\n    image: imageForFilter2,\n    link: \"http://localhost:3000/s?pub_brand=yeezy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterLink, {\n    name: \"Converses\",\n    image: imageForFilter3,\n    link: \"http://localhost:3000/s?pub_brand=converse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })));\n};\n\n_c3 = SectionFilteredSearches;\nSectionFilteredSearches.defaultProps = {\n  rootClassName: null,\n  className: null\n};\nSectionFilteredSearches.propTypes = {\n  rootClassName: string,\n  className: string\n};\nexport default SectionFilteredSearches;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LazyImage\");\n$RefreshReg$(_c2, \"FilterLink\");\n$RefreshReg$(_c3, \"SectionFilteredSearches\");","map":{"version":3,"sources":["D:/Amardeep/tarek_project/ftw-product/src/containers/LandingPage/SectionFilteredSearches/SectionFilteredSearches.js"],"names":["React","Component","string","classNames","FormattedMessage","lazyLoadWithDimensions","NamedLink","css","imageForFilter1","imageForFilter2","imageForFilter3","ThumbnailImage","render","alt","rest","props","LazyImage","FilterLink","name","image","link","url","window","URL","global","searchQuery","search","nameText","searchName","searchLink","imageWrapper","aspectWrapper","searchImage","linkText","filter","SectionFilteredSearches","rootClassName","className","classes","root","title","filteredSearches","defaultProps","propTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { lazyLoadWithDimensions } from '../../../util/contextHelpers';\r\n\r\nimport { NamedLink } from '../../../components';\r\n\r\nimport css from './SectionFilteredSearches.module.css';\r\n\r\n// Update images by saving images to src/LandingPage/SeactionFilteredSearches/images directory.\r\n// If those images have been saved with the same name, no need to make changes to these imports.\r\nimport imageForFilter1 from './images/imageForFilter1_648x448.jpg';\r\nimport imageForFilter2 from './images/imageForFilter2_648x448.jpg';\r\nimport imageForFilter3 from './images/imageForFilter3_648x448.jpg';\r\n\r\n// Thumbnail image for the search \"card\"\r\nclass ThumbnailImage extends Component {\r\n  render() {\r\n    const { alt, ...rest } = this.props;\r\n    return <img alt={alt} {...rest} />;\r\n  }\r\n}\r\n// Load the image only if it's close to viewport (user has scrolled the page enough).\r\nconst LazyImage = lazyLoadWithDimensions(ThumbnailImage);\r\n\r\n// Create a \"card\" that contains a link to filtered search on SearchPage.\r\nconst FilterLink = props => {\r\n  const { name, image, link } = props;\r\n  const url = typeof window !== 'undefined' ? new window.URL(link) : new global.URL(link);\r\n  const searchQuery = url.search;\r\n  const nameText = <span className={css.searchName}>{name}</span>;\r\n  return (\r\n    <NamedLink name=\"SearchPage\" to={{ search: searchQuery }} className={css.searchLink}>\r\n      <div className={css.imageWrapper}>\r\n        <div className={css.aspectWrapper}>\r\n          <LazyImage src={image} alt={name} className={css.searchImage} />\r\n        </div>\r\n      </div>\r\n      <div className={css.linkText}>\r\n        <FormattedMessage\r\n          id=\"SectionFilteredSearches.filteredSearch\"\r\n          values={{ filter: nameText }}\r\n        />\r\n      </div>\r\n    </NamedLink>\r\n  );\r\n};\r\n\r\n// Component that shows full-width section on LandingPage.\r\n// Inside it shows 3 \"cards\" that link to SearchPage with specific filters applied.\r\nconst SectionFilteredSearches = props => {\r\n  const { rootClassName, className } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  // FilterLink props:\r\n  // - \"name\" is a string that defines what kind of search the link is going to make\r\n  // - \"image\" is imported from images directory and you can update it by changing the file\r\n  // - \"link\" should be copy-pasted URL from search page.\r\n  //    The domain doesn't matter, but search query does. (I.e. \"?pub_brand=nike\")\r\n  return (\r\n    <div className={classes}>\r\n      <div className={css.title}>\r\n        <FormattedMessage id=\"SectionFilteredSearches.title\" />\r\n      </div>\r\n      <div className={css.filteredSearches}>\r\n        <FilterLink\r\n          name=\"Nikes\"\r\n          image={imageForFilter1}\r\n          link=\"http://localhost:3000/s?pub_brand=nike\"\r\n        />\r\n        <FilterLink\r\n          name=\"Yeezys\"\r\n          image={imageForFilter2}\r\n          link=\"http://localhost:3000/s?pub_brand=yeezy\"\r\n        />\r\n        <FilterLink\r\n          name=\"Converses\"\r\n          image={imageForFilter3}\r\n          link=\"http://localhost:3000/s?pub_brand=converse\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSectionFilteredSearches.defaultProps = { rootClassName: null, className: null };\r\n\r\nSectionFilteredSearches.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n};\r\n\r\nexport default SectionFilteredSearches;\r\n"]},"metadata":{},"sourceType":"module"}